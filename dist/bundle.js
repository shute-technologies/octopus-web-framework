(()=>{"use strict";var __webpack_modules__={887:(t,e,i)=>{i.r(e),i.d(e,{glMatrix:()=>r,mat2:()=>a,mat2d:()=>s,mat3:()=>n,mat4:()=>o,quat:()=>u,quat2:()=>l,vec2:()=>d,vec3:()=>h,vec4:()=>c});var r={};i.r(r),i.d(r,{ARRAY_TYPE:()=>m,EPSILON:()=>_,RANDOM:()=>p,equals:()=>b,setMatrixArrayType:()=>f,toRadian:()=>v});var a={};i.r(a),i.d(a,{LDU:()=>N,add:()=>L,adjoint:()=>w,clone:()=>y,copy:()=>O,create:()=>F,determinant:()=>E,equals:()=>G,exactEquals:()=>j,frob:()=>k,fromRotation:()=>B,fromScaling:()=>D,fromValues:()=>T,identity:()=>x,invert:()=>S,mul:()=>H,multiply:()=>A,multiplyScalar:()=>z,multiplyScalarAndAdd:()=>U,rotate:()=>P,scale:()=>R,set:()=>C,str:()=>I,sub:()=>W,subtract:()=>V,transpose:()=>M});var s={};i.r(s),i.d(s,{add:()=>ct,clone:()=>Y,copy:()=>X,create:()=>q,determinant:()=>J,equals:()=>mt,exactEquals:()=>_t,frob:()=>ht,fromRotation:()=>at,fromScaling:()=>st,fromTranslation:()=>nt,fromValues:()=>K,identity:()=>Q,invert:()=>Z,mul:()=>pt,multiply:()=>tt,multiplyScalar:()=>lt,multiplyScalarAndAdd:()=>dt,rotate:()=>et,scale:()=>it,set:()=>$,str:()=>ot,sub:()=>ft,subtract:()=>ut,translate:()=>rt});var n={};i.r(n),i.d(n,{add:()=>Gt,adjoint:()=>Mt,clone:()=>bt,copy:()=>Ft,create:()=>gt,determinant:()=>St,equals:()=>qt,exactEquals:()=>Wt,frob:()=>jt,fromMat2d:()=>It,fromMat4:()=>vt,fromQuat:()=>kt,fromRotation:()=>Bt,fromScaling:()=>Dt,fromTranslation:()=>Rt,fromValues:()=>yt,identity:()=>xt,invert:()=>Ct,mul:()=>Yt,multiply:()=>wt,multiplyScalar:()=>Ut,multiplyScalarAndAdd:()=>Ht,normalFromMat4:()=>Nt,projection:()=>Lt,rotate:()=>At,scale:()=>Pt,set:()=>Ot,str:()=>Vt,sub:()=>Xt,subtract:()=>zt,translate:()=>Et,transpose:()=>Tt});var o={};i.r(o),i.d(o,{add:()=>Le,adjoint:()=>re,clone:()=>Kt,copy:()=>$t,create:()=>Qt,determinant:()=>ae,equals:()=>Ue,exactEquals:()=>ze,frob:()=>Ne,fromQuat:()=>Ce,fromQuat2:()=>be,fromRotation:()=>me,fromRotationTranslation:()=>ve,fromRotationTranslationScale:()=>xe,fromRotationTranslationScaleOrigin:()=>Te,fromScaling:()=>_e,fromTranslation:()=>de,fromValues:()=>Zt,fromXRotation:()=>pe,fromYRotation:()=>fe,fromZRotation:()=>ge,frustum:()=>Me,getRotation:()=>Oe,getScaling:()=>ye,getTranslation:()=>Fe,identity:()=>te,invert:()=>ie,lookAt:()=>De,mul:()=>He,multiply:()=>se,multiplyScalar:()=>je,multiplyScalarAndAdd:()=>Ge,ortho:()=>Re,orthoNO:()=>Pe,orthoZO:()=>Be,perspective:()=>we,perspectiveFromFieldOfView:()=>Ae,perspectiveNO:()=>Se,perspectiveZO:()=>Ee,rotate:()=>he,rotateX:()=>ce,rotateY:()=>ue,rotateZ:()=>le,scale:()=>oe,set:()=>Jt,str:()=>ke,sub:()=>We,subtract:()=>Ve,targetTo:()=>Ie,translate:()=>ne,transpose:()=>ee});var h={};i.r(h),i.d(h,{add:()=>Ze,angle:()=>Si,bezier:()=>bi,ceil:()=>ii,clone:()=>Ye,copy:()=>Ke,create:()=>qe,cross:()=>fi,dist:()=>ki,distance:()=>ci,div:()=>Ii,divide:()=>ei,dot:()=>pi,equals:()=>Pi,exactEquals:()=>Ai,floor:()=>ri,forEach:()=>ji,fromValues:()=>Qe,hermite:()=>vi,inverse:()=>_i,len:()=>Li,length:()=>Xe,lerp:()=>gi,max:()=>si,min:()=>ai,mul:()=>Di,multiply:()=>ti,negate:()=>di,normalize:()=>mi,random:()=>Fi,rotateX:()=>Ti,rotateY:()=>Ci,rotateZ:()=>Mi,round:()=>ni,scale:()=>oi,scaleAndAdd:()=>hi,set:()=>$e,sqrDist:()=>Ni,sqrLen:()=>Vi,squaredDistance:()=>ui,squaredLength:()=>li,str:()=>Ei,sub:()=>Bi,subtract:()=>Je,transformMat3:()=>Oi,transformMat4:()=>yi,transformQuat:()=>xi,zero:()=>wi});var c={};i.r(c),i.d(c,{add:()=>qi,ceil:()=>Ki,clone:()=>zi,copy:()=>Hi,create:()=>Gi,cross:()=>lr,dist:()=>xr,distance:()=>rr,div:()=>Or,divide:()=>Qi,dot:()=>ur,equals:()=>br,exactEquals:()=>vr,floor:()=>$i,forEach:()=>Sr,fromValues:()=>Ui,inverse:()=>hr,len:()=>Cr,length:()=>sr,lerp:()=>dr,max:()=>Ji,min:()=>Zi,mul:()=>yr,multiply:()=>Xi,negate:()=>or,normalize:()=>cr,random:()=>_r,round:()=>tr,scale:()=>er,scaleAndAdd:()=>ir,set:()=>Wi,sqrDist:()=>Tr,sqrLen:()=>Mr,squaredDistance:()=>ar,squaredLength:()=>nr,str:()=>gr,sub:()=>Fr,subtract:()=>Yi,transformMat4:()=>mr,transformQuat:()=>pr,zero:()=>fr});var u={};i.r(u),i.d(u,{add:()=>aa,calculateW:()=>Nr,clone:()=>ta,conjugate:()=>Hr,copy:()=>ia,create:()=>wr,dot:()=>oa,equals:()=>pa,exactEquals:()=>ma,exp:()=>Lr,fromEuler:()=>qr,fromMat3:()=>Wr,fromValues:()=>ea,getAngle:()=>Rr,getAxisAngle:()=>Pr,identity:()=>Er,invert:()=>Ur,len:()=>ua,length:()=>ca,lerp:()=>ha,ln:()=>Vr,mul:()=>sa,multiply:()=>Br,normalize:()=>_a,pow:()=>jr,random:()=>zr,rotateX:()=>Dr,rotateY:()=>Ir,rotateZ:()=>kr,rotationTo:()=>fa,scale:()=>na,set:()=>ra,setAxes:()=>va,setAxisAngle:()=>Ar,slerp:()=>Gr,sqlerp:()=>ga,sqrLen:()=>da,squaredLength:()=>la,str:()=>Yr});var l={};i.r(l),i.d(l,{add:()=>za,clone:()=>Fa,conjugate:()=>Qa,copy:()=>Sa,create:()=>ba,dot:()=>qa,equals:()=>rs,exactEquals:()=>is,fromMat4:()=>Ma,fromRotation:()=>Ca,fromRotationTranslation:()=>xa,fromRotationTranslationValues:()=>Oa,fromTranslation:()=>Ta,fromValues:()=>ya,getDual:()=>Pa,getReal:()=>Aa,getTranslation:()=>Da,identity:()=>wa,invert:()=>Xa,len:()=>$a,length:()=>Ka,lerp:()=>Ya,mul:()=>Ha,multiply:()=>Ua,normalize:()=>ts,rotateAroundAxis:()=>Ga,rotateByQuatAppend:()=>Va,rotateByQuatPrepend:()=>ja,rotateX:()=>ka,rotateY:()=>Na,rotateZ:()=>La,scale:()=>Wa,set:()=>Ea,setDual:()=>Ba,setReal:()=>Ra,sqrLen:()=>Ja,squaredLength:()=>Za,str:()=>es,translate:()=>Ia});var d={};i.r(d),i.d(d,{add:()=>cs,angle:()=>ks,ceil:()=>_s,clone:()=>ss,copy:()=>os,create:()=>as,cross:()=>ws,dist:()=>Ws,distance:()=>Fs,div:()=>Hs,divide:()=>ds,dot:()=>Ss,equals:()=>js,exactEquals:()=>Vs,floor:()=>ms,forEach:()=>Xs,fromValues:()=>ns,inverse:()=>Cs,len:()=>Gs,length:()=>Os,lerp:()=>Es,max:()=>fs,min:()=>ps,mul:()=>Us,multiply:()=>ls,negate:()=>Ts,normalize:()=>Ms,random:()=>As,rotate:()=>Is,round:()=>gs,scale:()=>vs,scaleAndAdd:()=>bs,set:()=>hs,sqrDist:()=>qs,sqrLen:()=>Ys,squaredDistance:()=>ys,squaredLength:()=>xs,str:()=>Ls,sub:()=>zs,subtract:()=>us,transformMat2:()=>Ps,transformMat2d:()=>Rs,transformMat3:()=>Bs,transformMat4:()=>Ds,zero:()=>Ns});var _=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,p=Math.random;function f(t){m=t}var g=Math.PI/180;function v(t){return t*g}function b(t,e){return Math.abs(t-e)<=_*Math.max(1,Math.abs(t),Math.abs(e))}function F(){var t=new m(4);return m!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function y(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function O(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function x(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function T(t,e,i,r){var a=new m(4);return a[0]=t,a[1]=e,a[2]=i,a[3]=r,a}function C(t,e,i,r,a){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t}function M(t,e){if(t===e){var i=e[1];t[1]=e[2],t[2]=i}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t}function S(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*s-a*r;return n?(n=1/n,t[0]=s*n,t[1]=-r*n,t[2]=-a*n,t[3]=i*n,t):null}function w(t,e){var i=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=i,t}function E(t){return t[0]*t[3]-t[2]*t[1]}function A(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*o+s*h,t[1]=a*o+n*h,t[2]=r*c+s*u,t[3]=a*c+n*u,t}function P(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+s*o,t[1]=a*h+n*o,t[2]=r*-o+s*h,t[3]=a*-o+n*h,t}function R(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1];return t[0]=r*o,t[1]=a*o,t[2]=s*h,t[3]=n*h,t}function B(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=-i,t[3]=r,t}function D(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t}function I(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function k(t){return Math.hypot(t[0],t[1],t[2],t[3])}function N(t,e,i,r){return t[2]=r[2]/r[0],i[0]=r[0],i[1]=r[1],i[3]=r[3]-t[2]*i[1],[t,e,i]}function L(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t}function V(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t}function j(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function G(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=e[0],o=e[1],h=e[2],c=e[3];return Math.abs(i-n)<=_*Math.max(1,Math.abs(i),Math.abs(n))&&Math.abs(r-o)<=_*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(a-h)<=_*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-c)<=_*Math.max(1,Math.abs(s),Math.abs(c))}function z(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t}function U(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var H=A,W=V;function q(){var t=new m(6);return m!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function Y(t){var e=new m(6);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function X(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function Q(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function K(t,e,i,r,a,s){var n=new m(6);return n[0]=t,n[1]=e,n[2]=i,n[3]=r,n[4]=a,n[5]=s,n}function $(t,e,i,r,a,s,n){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t}function Z(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=i*s-r*a;return h?(h=1/h,t[0]=s*h,t[1]=-r*h,t[2]=-a*h,t[3]=i*h,t[4]=(a*o-s*n)*h,t[5]=(r*n-i*o)*h,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1],l=i[2],d=i[3],_=i[4],m=i[5];return t[0]=r*c+s*u,t[1]=a*c+n*u,t[2]=r*l+s*d,t[3]=a*l+n*d,t[4]=r*_+s*m+o,t[5]=a*_+n*m+h,t}function et(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=Math.sin(i),u=Math.cos(i);return t[0]=r*u+s*c,t[1]=a*u+n*c,t[2]=r*-c+s*u,t[3]=a*-c+n*u,t[4]=o,t[5]=h,t}function it(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1];return t[0]=r*c,t[1]=a*c,t[2]=s*u,t[3]=n*u,t[4]=o,t[5]=h,t}function rt(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=r*c+s*u+o,t[5]=a*c+n*u+h,t}function at(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=-i,t[3]=r,t[4]=0,t[5]=0,t}function st(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t}function nt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t}function ot(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function ht(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)}function ct(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t}function ut(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t}function lt(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t}function dt(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t}function _t(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]}function mt(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=e[0],c=e[1],u=e[2],l=e[3],d=e[4],m=e[5];return Math.abs(i-h)<=_*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(r-c)<=_*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(a-u)<=_*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(s-l)<=_*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(n-d)<=_*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(o-m)<=_*Math.max(1,Math.abs(o),Math.abs(m))}var pt=tt,ft=ut;function gt(){var t=new m(9);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function vt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function bt(t){var e=new m(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Ft(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function yt(t,e,i,r,a,s,n,o,h){var c=new m(9);return c[0]=t,c[1]=e,c[2]=i,c[3]=r,c[4]=a,c[5]=s,c[6]=n,c[7]=o,c[8]=h,c}function Ot(t,e,i,r,a,s,n,o,h,c){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t[8]=c,t}function xt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Tt(t,e){if(t===e){var i=e[1],r=e[2],a=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=a}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function Ct(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=u*n-o*c,d=-u*s+o*h,_=c*s-n*h,m=i*l+r*d+a*_;return m?(m=1/m,t[0]=l*m,t[1]=(-u*r+a*c)*m,t[2]=(o*r-a*n)*m,t[3]=d*m,t[4]=(u*i-a*h)*m,t[5]=(-o*i+a*s)*m,t[6]=_*m,t[7]=(-c*i+r*h)*m,t[8]=(n*i-r*s)*m,t):null}function Mt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8];return t[0]=n*u-o*c,t[1]=a*c-r*u,t[2]=r*o-a*n,t[3]=o*h-s*u,t[4]=i*u-a*h,t[5]=a*s-i*o,t[6]=s*c-n*h,t[7]=r*h-i*c,t[8]=i*n-r*s,t}function St(t){var e=t[0],i=t[1],r=t[2],a=t[3],s=t[4],n=t[5],o=t[6],h=t[7],c=t[8];return e*(c*s-n*h)+i*(-c*a+n*o)+r*(h*a-s*o)}function wt(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=i[0],_=i[1],m=i[2],p=i[3],f=i[4],g=i[5],v=i[6],b=i[7],F=i[8];return t[0]=d*r+_*n+m*c,t[1]=d*a+_*o+m*u,t[2]=d*s+_*h+m*l,t[3]=p*r+f*n+g*c,t[4]=p*a+f*o+g*u,t[5]=p*s+f*h+g*l,t[6]=v*r+b*n+F*c,t[7]=v*a+b*o+F*u,t[8]=v*s+b*h+F*l,t}function Et(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=i[0],_=i[1];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=o,t[5]=h,t[6]=d*r+_*n+c,t[7]=d*a+_*o+u,t[8]=d*s+_*h+l,t}function At(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=Math.sin(i),_=Math.cos(i);return t[0]=_*r+d*n,t[1]=_*a+d*o,t[2]=_*s+d*h,t[3]=_*n-d*r,t[4]=_*o-d*a,t[5]=_*h-d*s,t[6]=c,t[7]=u,t[8]=l,t}function Pt(t,e,i){var r=i[0],a=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=a*e[3],t[4]=a*e[4],t[5]=a*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function Rt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t}function Bt(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=0,t[3]=-i,t[4]=r,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Dt(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function It(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t}function kt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i+i,o=r+r,h=a+a,c=i*n,u=r*n,l=r*o,d=a*n,_=a*o,m=a*h,p=s*n,f=s*o,g=s*h;return t[0]=1-l-m,t[3]=u-g,t[6]=d+f,t[1]=u+g,t[4]=1-c-m,t[7]=_-p,t[2]=d-f,t[5]=_+p,t[8]=1-c-l,t}function Nt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15],v=i*o-r*n,b=i*h-a*n,F=i*c-s*n,y=r*h-a*o,O=r*c-s*o,x=a*c-s*h,T=u*p-l*m,C=u*f-d*m,M=u*g-_*m,S=l*f-d*p,w=l*g-_*p,E=d*g-_*f,A=v*E-b*w+F*S+y*M-O*C+x*T;return A?(A=1/A,t[0]=(o*E-h*w+c*S)*A,t[1]=(h*M-n*E-c*C)*A,t[2]=(n*w-o*M+c*T)*A,t[3]=(a*w-r*E-s*S)*A,t[4]=(i*E-a*M+s*C)*A,t[5]=(r*M-i*w-s*T)*A,t[6]=(p*x-f*O+g*y)*A,t[7]=(f*F-m*x-g*b)*A,t[8]=(m*O-p*F+g*v)*A,t):null}function Lt(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Vt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function jt(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}function Gt(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function zt(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function Ut(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}function Ht(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t[6]=e[6]+i[6]*r,t[7]=e[7]+i[7]*r,t[8]=e[8]+i[8]*r,t}function Wt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]}function qt(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=t[8],l=e[0],d=e[1],m=e[2],p=e[3],f=e[4],g=e[5],v=e[6],b=e[7],F=e[8];return Math.abs(i-l)<=_*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(r-d)<=_*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(a-m)<=_*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(s-p)<=_*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(n-f)<=_*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(o-g)<=_*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(h-v)<=_*Math.max(1,Math.abs(h),Math.abs(v))&&Math.abs(c-b)<=_*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(u-F)<=_*Math.max(1,Math.abs(u),Math.abs(F))}var Yt=wt,Xt=zt;function Qt(){var t=new m(16);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Kt(t){var e=new m(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function $t(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Zt(t,e,i,r,a,s,n,o,h,c,u,l,d,_,p,f){var g=new m(16);return g[0]=t,g[1]=e,g[2]=i,g[3]=r,g[4]=a,g[5]=s,g[6]=n,g[7]=o,g[8]=h,g[9]=c,g[10]=u,g[11]=l,g[12]=d,g[13]=_,g[14]=p,g[15]=f,g}function Jt(t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p,f){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t[8]=c,t[9]=u,t[10]=l,t[11]=d,t[12]=_,t[13]=m,t[14]=p,t[15]=f,t}function te(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ee(t,e){if(t===e){var i=e[1],r=e[2],a=e[3],s=e[6],n=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=i,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=s,t[11]=e[14],t[12]=a,t[13]=n,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function ie(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15],v=i*o-r*n,b=i*h-a*n,F=i*c-s*n,y=r*h-a*o,O=r*c-s*o,x=a*c-s*h,T=u*p-l*m,C=u*f-d*m,M=u*g-_*m,S=l*f-d*p,w=l*g-_*p,E=d*g-_*f,A=v*E-b*w+F*S+y*M-O*C+x*T;return A?(A=1/A,t[0]=(o*E-h*w+c*S)*A,t[1]=(a*w-r*E-s*S)*A,t[2]=(p*x-f*O+g*y)*A,t[3]=(d*O-l*x-_*y)*A,t[4]=(h*M-n*E-c*C)*A,t[5]=(i*E-a*M+s*C)*A,t[6]=(f*F-m*x-g*b)*A,t[7]=(u*x-d*F+_*b)*A,t[8]=(n*w-o*M+c*T)*A,t[9]=(r*M-i*w-s*T)*A,t[10]=(m*O-p*F+g*v)*A,t[11]=(l*F-u*O-_*v)*A,t[12]=(o*C-n*S-h*T)*A,t[13]=(i*S-r*C+a*T)*A,t[14]=(p*b-m*y-f*v)*A,t[15]=(u*y-l*b+d*v)*A,t):null}function re(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15];return t[0]=o*(d*g-_*f)-l*(h*g-c*f)+p*(h*_-c*d),t[1]=-(r*(d*g-_*f)-l*(a*g-s*f)+p*(a*_-s*d)),t[2]=r*(h*g-c*f)-o*(a*g-s*f)+p*(a*c-s*h),t[3]=-(r*(h*_-c*d)-o*(a*_-s*d)+l*(a*c-s*h)),t[4]=-(n*(d*g-_*f)-u*(h*g-c*f)+m*(h*_-c*d)),t[5]=i*(d*g-_*f)-u*(a*g-s*f)+m*(a*_-s*d),t[6]=-(i*(h*g-c*f)-n*(a*g-s*f)+m*(a*c-s*h)),t[7]=i*(h*_-c*d)-n*(a*_-s*d)+u*(a*c-s*h),t[8]=n*(l*g-_*p)-u*(o*g-c*p)+m*(o*_-c*l),t[9]=-(i*(l*g-_*p)-u*(r*g-s*p)+m*(r*_-s*l)),t[10]=i*(o*g-c*p)-n*(r*g-s*p)+m*(r*c-s*o),t[11]=-(i*(o*_-c*l)-n*(r*_-s*l)+u*(r*c-s*o)),t[12]=-(n*(l*f-d*p)-u*(o*f-h*p)+m*(o*d-h*l)),t[13]=i*(l*f-d*p)-u*(r*f-a*p)+m*(r*d-a*l),t[14]=-(i*(o*f-h*p)-n*(r*f-a*p)+m*(r*h-a*o)),t[15]=i*(o*d-h*l)-n*(r*d-a*l)+u*(r*h-a*o),t}function ae(t){var e=t[0],i=t[1],r=t[2],a=t[3],s=t[4],n=t[5],o=t[6],h=t[7],c=t[8],u=t[9],l=t[10],d=t[11],_=t[12],m=t[13],p=t[14],f=t[15];return(e*n-i*s)*(l*f-d*p)-(e*o-r*s)*(u*f-d*m)+(e*h-a*s)*(u*p-l*m)+(i*o-r*n)*(c*f-d*_)-(i*h-a*n)*(c*p-l*_)+(r*h-a*o)*(c*m-u*_)}function se(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],_=e[10],m=e[11],p=e[12],f=e[13],g=e[14],v=e[15],b=i[0],F=i[1],y=i[2],O=i[3];return t[0]=b*r+F*o+y*l+O*p,t[1]=b*a+F*h+y*d+O*f,t[2]=b*s+F*c+y*_+O*g,t[3]=b*n+F*u+y*m+O*v,b=i[4],F=i[5],y=i[6],O=i[7],t[4]=b*r+F*o+y*l+O*p,t[5]=b*a+F*h+y*d+O*f,t[6]=b*s+F*c+y*_+O*g,t[7]=b*n+F*u+y*m+O*v,b=i[8],F=i[9],y=i[10],O=i[11],t[8]=b*r+F*o+y*l+O*p,t[9]=b*a+F*h+y*d+O*f,t[10]=b*s+F*c+y*_+O*g,t[11]=b*n+F*u+y*m+O*v,b=i[12],F=i[13],y=i[14],O=i[15],t[12]=b*r+F*o+y*l+O*p,t[13]=b*a+F*h+y*d+O*f,t[14]=b*s+F*c+y*_+O*g,t[15]=b*n+F*u+y*m+O*v,t}function ne(t,e,i){var r,a,s,n,o,h,c,u,l,d,_,m,p=i[0],f=i[1],g=i[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*g+e[12],t[13]=e[1]*p+e[5]*f+e[9]*g+e[13],t[14]=e[2]*p+e[6]*f+e[10]*g+e[14],t[15]=e[3]*p+e[7]*f+e[11]*g+e[15]):(r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],_=e[10],m=e[11],t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=o,t[5]=h,t[6]=c,t[7]=u,t[8]=l,t[9]=d,t[10]=_,t[11]=m,t[12]=r*p+o*f+l*g+e[12],t[13]=a*p+h*f+d*g+e[13],t[14]=s*p+c*f+_*g+e[14],t[15]=n*p+u*f+m*g+e[15]),t}function oe(t,e,i){var r=i[0],a=i[1],s=i[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*a,t[5]=e[5]*a,t[6]=e[6]*a,t[7]=e[7]*a,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function he(t,e,i,r){var a,s,n,o,h,c,u,l,d,m,p,f,g,v,b,F,y,O,x,T,C,M,S,w,E=r[0],A=r[1],P=r[2],R=Math.hypot(E,A,P);return R<_?null:(E*=R=1/R,A*=R,P*=R,a=Math.sin(i),n=1-(s=Math.cos(i)),o=e[0],h=e[1],c=e[2],u=e[3],l=e[4],d=e[5],m=e[6],p=e[7],f=e[8],g=e[9],v=e[10],b=e[11],F=E*E*n+s,y=A*E*n+P*a,O=P*E*n-A*a,x=E*A*n-P*a,T=A*A*n+s,C=P*A*n+E*a,M=E*P*n+A*a,S=A*P*n-E*a,w=P*P*n+s,t[0]=o*F+l*y+f*O,t[1]=h*F+d*y+g*O,t[2]=c*F+m*y+v*O,t[3]=u*F+p*y+b*O,t[4]=o*x+l*T+f*C,t[5]=h*x+d*T+g*C,t[6]=c*x+m*T+v*C,t[7]=u*x+p*T+b*C,t[8]=o*M+l*S+f*w,t[9]=h*M+d*S+g*w,t[10]=c*M+m*S+v*w,t[11]=u*M+p*S+b*w,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function ce(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[4],n=e[5],o=e[6],h=e[7],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=s*a+c*r,t[5]=n*a+u*r,t[6]=o*a+l*r,t[7]=h*a+d*r,t[8]=c*a-s*r,t[9]=u*a-n*r,t[10]=l*a-o*r,t[11]=d*a-h*r,t}function ue(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[0],n=e[1],o=e[2],h=e[3],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a-c*r,t[1]=n*a-u*r,t[2]=o*a-l*r,t[3]=h*a-d*r,t[8]=s*r+c*a,t[9]=n*r+u*a,t[10]=o*r+l*a,t[11]=h*r+d*a,t}function le(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[0],n=e[1],o=e[2],h=e[3],c=e[4],u=e[5],l=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a+c*r,t[1]=n*a+u*r,t[2]=o*a+l*r,t[3]=h*a+d*r,t[4]=c*a-s*r,t[5]=u*a-n*r,t[6]=l*a-o*r,t[7]=d*a-h*r,t}function de(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function _e(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function me(t,e,i){var r,a,s,n=i[0],o=i[1],h=i[2],c=Math.hypot(n,o,h);return c<_?null:(n*=c=1/c,o*=c,h*=c,r=Math.sin(e),s=1-(a=Math.cos(e)),t[0]=n*n*s+a,t[1]=o*n*s+h*r,t[2]=h*n*s-o*r,t[3]=0,t[4]=n*o*s-h*r,t[5]=o*o*s+a,t[6]=h*o*s+n*r,t[7]=0,t[8]=n*h*s+o*r,t[9]=o*h*s-n*r,t[10]=h*h*s+a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function pe(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=i,t[7]=0,t[8]=0,t[9]=-i,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function fe(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-i,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=i,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ge(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=0,t[3]=0,t[4]=-i,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ve(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=r+r,h=a+a,c=s+s,u=r*o,l=r*h,d=r*c,_=a*h,m=a*c,p=s*c,f=n*o,g=n*h,v=n*c;return t[0]=1-(_+p),t[1]=l+v,t[2]=d-g,t[3]=0,t[4]=l-v,t[5]=1-(u+p),t[6]=m+f,t[7]=0,t[8]=d+g,t[9]=m-f,t[10]=1-(u+_),t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function be(t,e){var i=new m(3),r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=r*r+a*a+s*s+n*n;return l>0?(i[0]=2*(o*n+u*r+h*s-c*a)/l,i[1]=2*(h*n+u*a+c*r-o*s)/l,i[2]=2*(c*n+u*s+o*a-h*r)/l):(i[0]=2*(o*n+u*r+h*s-c*a),i[1]=2*(h*n+u*a+c*r-o*s),i[2]=2*(c*n+u*s+o*a-h*r)),ve(t,e,i),t}function Fe(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function ye(t,e){var i=e[0],r=e[1],a=e[2],s=e[4],n=e[5],o=e[6],h=e[8],c=e[9],u=e[10];return t[0]=Math.hypot(i,r,a),t[1]=Math.hypot(s,n,o),t[2]=Math.hypot(h,c,u),t}function Oe(t,e){var i=new m(3);ye(i,e);var r=1/i[0],a=1/i[1],s=1/i[2],n=e[0]*r,o=e[1]*a,h=e[2]*s,c=e[4]*r,u=e[5]*a,l=e[6]*s,d=e[8]*r,_=e[9]*a,p=e[10]*s,f=n+u+p,g=0;return f>0?(g=2*Math.sqrt(f+1),t[3]=.25*g,t[0]=(l-_)/g,t[1]=(d-h)/g,t[2]=(o-c)/g):n>u&&n>p?(g=2*Math.sqrt(1+n-u-p),t[3]=(l-_)/g,t[0]=.25*g,t[1]=(o+c)/g,t[2]=(d+h)/g):u>p?(g=2*Math.sqrt(1+u-n-p),t[3]=(d-h)/g,t[0]=(o+c)/g,t[1]=.25*g,t[2]=(l+_)/g):(g=2*Math.sqrt(1+p-n-u),t[3]=(o-c)/g,t[0]=(d+h)/g,t[1]=(l+_)/g,t[2]=.25*g),t}function xe(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=e[3],h=a+a,c=s+s,u=n+n,l=a*h,d=a*c,_=a*u,m=s*c,p=s*u,f=n*u,g=o*h,v=o*c,b=o*u,F=r[0],y=r[1],O=r[2];return t[0]=(1-(m+f))*F,t[1]=(d+b)*F,t[2]=(_-v)*F,t[3]=0,t[4]=(d-b)*y,t[5]=(1-(l+f))*y,t[6]=(p+g)*y,t[7]=0,t[8]=(_+v)*O,t[9]=(p-g)*O,t[10]=(1-(l+m))*O,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function Te(t,e,i,r,a){var s=e[0],n=e[1],o=e[2],h=e[3],c=s+s,u=n+n,l=o+o,d=s*c,_=s*u,m=s*l,p=n*u,f=n*l,g=o*l,v=h*c,b=h*u,F=h*l,y=r[0],O=r[1],x=r[2],T=a[0],C=a[1],M=a[2],S=(1-(p+g))*y,w=(_+F)*y,E=(m-b)*y,A=(_-F)*O,P=(1-(d+g))*O,R=(f+v)*O,B=(m+b)*x,D=(f-v)*x,I=(1-(d+p))*x;return t[0]=S,t[1]=w,t[2]=E,t[3]=0,t[4]=A,t[5]=P,t[6]=R,t[7]=0,t[8]=B,t[9]=D,t[10]=I,t[11]=0,t[12]=i[0]+T-(S*T+A*C+B*M),t[13]=i[1]+C-(w*T+P*C+D*M),t[14]=i[2]+M-(E*T+R*C+I*M),t[15]=1,t}function Ce(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i+i,o=r+r,h=a+a,c=i*n,u=r*n,l=r*o,d=a*n,_=a*o,m=a*h,p=s*n,f=s*o,g=s*h;return t[0]=1-l-m,t[1]=u+g,t[2]=d-f,t[3]=0,t[4]=u-g,t[5]=1-c-m,t[6]=_+p,t[7]=0,t[8]=d+f,t[9]=_-p,t[10]=1-c-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Me(t,e,i,r,a,s,n){var o=1/(i-e),h=1/(a-r),c=1/(s-n);return t[0]=2*s*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*s*h,t[6]=0,t[7]=0,t[8]=(i+e)*o,t[9]=(a+r)*h,t[10]=(n+s)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=n*s*2*c,t[15]=0,t}function Se(t,e,i,r,a){var s,n=1/Math.tan(e/2);return t[0]=n/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(s=1/(r-a),t[10]=(a+r)*s,t[14]=2*a*r*s):(t[10]=-1,t[14]=-2*r),t}var we=Se;function Ee(t,e,i,r,a){var s,n=1/Math.tan(e/2);return t[0]=n/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(s=1/(r-a),t[10]=a*s,t[14]=a*r*s):(t[10]=-1,t[14]=-r),t}function Ae(t,e,i,r){var a=Math.tan(e.upDegrees*Math.PI/180),s=Math.tan(e.downDegrees*Math.PI/180),n=Math.tan(e.leftDegrees*Math.PI/180),o=Math.tan(e.rightDegrees*Math.PI/180),h=2/(n+o),c=2/(a+s);return t[0]=h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(n-o)*h*.5,t[9]=(a-s)*c*.5,t[10]=r/(i-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*i/(i-r),t[15]=0,t}function Pe(t,e,i,r,a,s,n){var o=1/(e-i),h=1/(r-a),c=1/(s-n);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+i)*o,t[13]=(a+r)*h,t[14]=(n+s)*c,t[15]=1,t}var Re=Pe;function Be(t,e,i,r,a,s,n){var o=1/(e-i),h=1/(r-a),c=1/(s-n);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=c,t[11]=0,t[12]=(e+i)*o,t[13]=(a+r)*h,t[14]=s*c,t[15]=1,t}function De(t,e,i,r){var a,s,n,o,h,c,u,l,d,m,p=e[0],f=e[1],g=e[2],v=r[0],b=r[1],F=r[2],y=i[0],O=i[1],x=i[2];return Math.abs(p-y)<_&&Math.abs(f-O)<_&&Math.abs(g-x)<_?te(t):(u=p-y,l=f-O,d=g-x,a=b*(d*=m=1/Math.hypot(u,l,d))-F*(l*=m),s=F*(u*=m)-v*d,n=v*l-b*u,(m=Math.hypot(a,s,n))?(a*=m=1/m,s*=m,n*=m):(a=0,s=0,n=0),o=l*n-d*s,h=d*a-u*n,c=u*s-l*a,(m=Math.hypot(o,h,c))?(o*=m=1/m,h*=m,c*=m):(o=0,h=0,c=0),t[0]=a,t[1]=o,t[2]=u,t[3]=0,t[4]=s,t[5]=h,t[6]=l,t[7]=0,t[8]=n,t[9]=c,t[10]=d,t[11]=0,t[12]=-(a*p+s*f+n*g),t[13]=-(o*p+h*f+c*g),t[14]=-(u*p+l*f+d*g),t[15]=1,t)}function Ie(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=r[0],h=r[1],c=r[2],u=a-i[0],l=s-i[1],d=n-i[2],_=u*u+l*l+d*d;_>0&&(u*=_=1/Math.sqrt(_),l*=_,d*=_);var m=h*d-c*l,p=c*u-o*d,f=o*l-h*u;return(_=m*m+p*p+f*f)>0&&(m*=_=1/Math.sqrt(_),p*=_,f*=_),t[0]=m,t[1]=p,t[2]=f,t[3]=0,t[4]=l*f-d*p,t[5]=d*m-u*f,t[6]=u*p-l*m,t[7]=0,t[8]=u,t[9]=l,t[10]=d,t[11]=0,t[12]=a,t[13]=s,t[14]=n,t[15]=1,t}function ke(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Ne(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function Le(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t[9]=e[9]+i[9],t[10]=e[10]+i[10],t[11]=e[11]+i[11],t[12]=e[12]+i[12],t[13]=e[13]+i[13],t[14]=e[14]+i[14],t[15]=e[15]+i[15],t}function Ve(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t[9]=e[9]-i[9],t[10]=e[10]-i[10],t[11]=e[11]-i[11],t[12]=e[12]-i[12],t[13]=e[13]-i[13],t[14]=e[14]-i[14],t[15]=e[15]-i[15],t}function je(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12]*i,t[13]=e[13]*i,t[14]=e[14]*i,t[15]=e[15]*i,t}function Ge(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t[6]=e[6]+i[6]*r,t[7]=e[7]+i[7]*r,t[8]=e[8]+i[8]*r,t[9]=e[9]+i[9]*r,t[10]=e[10]+i[10]*r,t[11]=e[11]+i[11]*r,t[12]=e[12]+i[12]*r,t[13]=e[13]+i[13]*r,t[14]=e[14]+i[14]*r,t[15]=e[15]+i[15]*r,t}function ze(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function Ue(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=t[8],l=t[9],d=t[10],m=t[11],p=t[12],f=t[13],g=t[14],v=t[15],b=e[0],F=e[1],y=e[2],O=e[3],x=e[4],T=e[5],C=e[6],M=e[7],S=e[8],w=e[9],E=e[10],A=e[11],P=e[12],R=e[13],B=e[14],D=e[15];return Math.abs(i-b)<=_*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(r-F)<=_*Math.max(1,Math.abs(r),Math.abs(F))&&Math.abs(a-y)<=_*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(s-O)<=_*Math.max(1,Math.abs(s),Math.abs(O))&&Math.abs(n-x)<=_*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(o-T)<=_*Math.max(1,Math.abs(o),Math.abs(T))&&Math.abs(h-C)<=_*Math.max(1,Math.abs(h),Math.abs(C))&&Math.abs(c-M)<=_*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(u-S)<=_*Math.max(1,Math.abs(u),Math.abs(S))&&Math.abs(l-w)<=_*Math.max(1,Math.abs(l),Math.abs(w))&&Math.abs(d-E)<=_*Math.max(1,Math.abs(d),Math.abs(E))&&Math.abs(m-A)<=_*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(p-P)<=_*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(f-R)<=_*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(g-B)<=_*Math.max(1,Math.abs(g),Math.abs(B))&&Math.abs(v-D)<=_*Math.max(1,Math.abs(v),Math.abs(D))}var He=se,We=Ve;function qe(){var t=new m(3);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Ye(t){var e=new m(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Xe(t){var e=t[0],i=t[1],r=t[2];return Math.hypot(e,i,r)}function Qe(t,e,i){var r=new m(3);return r[0]=t,r[1]=e,r[2]=i,r}function Ke(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function $e(t,e,i,r){return t[0]=e,t[1]=i,t[2]=r,t}function Ze(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function Je(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function ti(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t}function ei(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t}function ii(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function ri(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function ai(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t[2]=Math.min(e[2],i[2]),t}function si(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t[2]=Math.max(e[2],i[2]),t}function ni(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function oi(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function hi(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t}function ci(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2];return Math.hypot(i,r,a)}function ui(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2];return i*i+r*r+a*a}function li(t){var e=t[0],i=t[1],r=t[2];return e*e+i*i+r*r}function di(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function _i(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function mi(t,e){var i=e[0],r=e[1],a=e[2],s=i*i+r*r+a*a;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function pi(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function fi(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[0],o=i[1],h=i[2];return t[0]=a*h-s*o,t[1]=s*n-r*h,t[2]=r*o-a*n,t}function gi(t,e,i,r){var a=e[0],s=e[1],n=e[2];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t[2]=n+r*(i[2]-n),t}function vi(t,e,i,r,a,s){var n=s*s,o=n*(2*s-3)+1,h=n*(s-2)+s,c=n*(s-1),u=n*(3-2*s);return t[0]=e[0]*o+i[0]*h+r[0]*c+a[0]*u,t[1]=e[1]*o+i[1]*h+r[1]*c+a[1]*u,t[2]=e[2]*o+i[2]*h+r[2]*c+a[2]*u,t}function bi(t,e,i,r,a,s){var n=1-s,o=n*n,h=s*s,c=o*n,u=3*s*o,l=3*h*n,d=h*s;return t[0]=e[0]*c+i[0]*u+r[0]*l+a[0]*d,t[1]=e[1]*c+i[1]*u+r[1]*l+a[1]*d,t[2]=e[2]*c+i[2]*u+r[2]*l+a[2]*d,t}function Fi(t,e){e=e||1;var i=2*p()*Math.PI,r=2*p()-1,a=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(i)*a,t[1]=Math.sin(i)*a,t[2]=r*e,t}function yi(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[3]*r+i[7]*a+i[11]*s+i[15];return n=n||1,t[0]=(i[0]*r+i[4]*a+i[8]*s+i[12])/n,t[1]=(i[1]*r+i[5]*a+i[9]*s+i[13])/n,t[2]=(i[2]*r+i[6]*a+i[10]*s+i[14])/n,t}function Oi(t,e,i){var r=e[0],a=e[1],s=e[2];return t[0]=r*i[0]+a*i[3]+s*i[6],t[1]=r*i[1]+a*i[4]+s*i[7],t[2]=r*i[2]+a*i[5]+s*i[8],t}function xi(t,e,i){var r=i[0],a=i[1],s=i[2],n=i[3],o=e[0],h=e[1],c=e[2],u=a*c-s*h,l=s*o-r*c,d=r*h-a*o,_=a*d-s*l,m=s*u-r*d,p=r*l-a*u,f=2*n;return u*=f,l*=f,d*=f,_*=2,m*=2,p*=2,t[0]=o+u+_,t[1]=h+l+m,t[2]=c+d+p,t}function Ti(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[0],s[1]=a[1]*Math.cos(r)-a[2]*Math.sin(r),s[2]=a[1]*Math.sin(r)+a[2]*Math.cos(r),t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function Ci(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[2]*Math.sin(r)+a[0]*Math.cos(r),s[1]=a[1],s[2]=a[2]*Math.cos(r)-a[0]*Math.sin(r),t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function Mi(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[0]*Math.cos(r)-a[1]*Math.sin(r),s[1]=a[0]*Math.sin(r)+a[1]*Math.cos(r),s[2]=a[2],t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function Si(t,e){var i=t[0],r=t[1],a=t[2],s=e[0],n=e[1],o=e[2],h=Math.sqrt(i*i+r*r+a*a)*Math.sqrt(s*s+n*n+o*o),c=h&&pi(t,e)/h;return Math.acos(Math.min(Math.max(c,-1),1))}function wi(t){return t[0]=0,t[1]=0,t[2]=0,t}function Ei(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ai(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function Pi(t,e){var i=t[0],r=t[1],a=t[2],s=e[0],n=e[1],o=e[2];return Math.abs(i-s)<=_*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(r-n)<=_*Math.max(1,Math.abs(r),Math.abs(n))&&Math.abs(a-o)<=_*Math.max(1,Math.abs(a),Math.abs(o))}var Ri,Bi=Je,Di=ti,Ii=ei,ki=ci,Ni=ui,Li=Xe,Vi=li,ji=(Ri=qe(),function(t,e,i,r,a,s){var n,o;for(e||(e=3),i||(i=0),o=r?Math.min(r*e+i,t.length):t.length,n=i;n<o;n+=e)Ri[0]=t[n],Ri[1]=t[n+1],Ri[2]=t[n+2],a(Ri,Ri,s),t[n]=Ri[0],t[n+1]=Ri[1],t[n+2]=Ri[2];return t});function Gi(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function zi(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Ui(t,e,i,r){var a=new m(4);return a[0]=t,a[1]=e,a[2]=i,a[3]=r,a}function Hi(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function Wi(t,e,i,r,a){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t}function qi(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t}function Yi(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t}function Xi(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t[3]=e[3]*i[3],t}function Qi(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t[3]=e[3]/i[3],t}function Ki(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t}function $i(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t}function Zi(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t[2]=Math.min(e[2],i[2]),t[3]=Math.min(e[3],i[3]),t}function Ji(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t[2]=Math.max(e[2],i[2]),t[3]=Math.max(e[3],i[3]),t}function tr(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t}function er(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t}function ir(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t}function rr(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return Math.hypot(i,r,a,s)}function ar(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return i*i+r*r+a*a+s*s}function sr(t){var e=t[0],i=t[1],r=t[2],a=t[3];return Math.hypot(e,i,r,a)}function nr(t){var e=t[0],i=t[1],r=t[2],a=t[3];return e*e+i*i+r*r+a*a}function or(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t}function hr(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}function cr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*i+r*r+a*a+s*s;return n>0&&(n=1/Math.sqrt(n)),t[0]=i*n,t[1]=r*n,t[2]=a*n,t[3]=s*n,t}function ur(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function lr(t,e,i,r){var a=i[0]*r[1]-i[1]*r[0],s=i[0]*r[2]-i[2]*r[0],n=i[0]*r[3]-i[3]*r[0],o=i[1]*r[2]-i[2]*r[1],h=i[1]*r[3]-i[3]*r[1],c=i[2]*r[3]-i[3]*r[2],u=e[0],l=e[1],d=e[2],_=e[3];return t[0]=l*c-d*h+_*o,t[1]=-u*c+d*n-_*s,t[2]=u*h-l*n+_*a,t[3]=-u*o+l*s-d*a,t}function dr(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=e[3];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t[2]=n+r*(i[2]-n),t[3]=o+r*(i[3]-o),t}function _r(t,e){var i,r,a,s,n,o;e=e||1;do{n=(i=2*p()-1)*i+(r=2*p()-1)*r}while(n>=1);do{o=(a=2*p()-1)*a+(s=2*p()-1)*s}while(o>=1);var h=Math.sqrt((1-n)/o);return t[0]=e*i,t[1]=e*r,t[2]=e*a*h,t[3]=e*s*h,t}function mr(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3];return t[0]=i[0]*r+i[4]*a+i[8]*s+i[12]*n,t[1]=i[1]*r+i[5]*a+i[9]*s+i[13]*n,t[2]=i[2]*r+i[6]*a+i[10]*s+i[14]*n,t[3]=i[3]*r+i[7]*a+i[11]*s+i[15]*n,t}function pr(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[0],o=i[1],h=i[2],c=i[3],u=c*r+o*s-h*a,l=c*a+h*r-n*s,d=c*s+n*a-o*r,_=-n*r-o*a-h*s;return t[0]=u*c+_*-n+l*-h-d*-o,t[1]=l*c+_*-o+d*-n-u*-h,t[2]=d*c+_*-h+u*-o-l*-n,t[3]=e[3],t}function fr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function gr(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function vr(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function br(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=e[0],o=e[1],h=e[2],c=e[3];return Math.abs(i-n)<=_*Math.max(1,Math.abs(i),Math.abs(n))&&Math.abs(r-o)<=_*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(a-h)<=_*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-c)<=_*Math.max(1,Math.abs(s),Math.abs(c))}var Fr=Yi,yr=Xi,Or=Qi,xr=rr,Tr=ar,Cr=sr,Mr=nr,Sr=function(){var t=Gi();return function(e,i,r,a,s,n){var o,h;for(i||(i=4),r||(r=0),h=a?Math.min(a*i+r,e.length):e.length,o=r;o<h;o+=i)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],t[3]=e[o+3],s(t,t,n),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2],e[o+3]=t[3];return e}}();function wr(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Er(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Ar(t,e,i){i*=.5;var r=Math.sin(i);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(i),t}function Pr(t,e){var i=2*Math.acos(e[3]),r=Math.sin(i/2);return r>_?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),i}function Rr(t,e){var i=oa(t,e);return Math.acos(2*i*i-1)}function Br(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*u+n*o+a*c-s*h,t[1]=a*u+n*h+s*o-r*c,t[2]=s*u+n*c+r*h-a*o,t[3]=n*u-r*o-a*h-s*c,t}function Dr(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+n*o,t[1]=a*h+s*o,t[2]=s*h-a*o,t[3]=n*h-r*o,t}function Ir(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h-s*o,t[1]=a*h+n*o,t[2]=s*h+r*o,t[3]=n*h-a*o,t}function kr(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+a*o,t[1]=a*h-r*o,t[2]=s*h+n*o,t[3]=n*h-s*o,t}function Nr(t,e){var i=e[0],r=e[1],a=e[2];return t[0]=i,t[1]=r,t[2]=a,t[3]=Math.sqrt(Math.abs(1-i*i-r*r-a*a)),t}function Lr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=Math.sqrt(i*i+r*r+a*a),o=Math.exp(s),h=n>0?o*Math.sin(n)/n:0;return t[0]=i*h,t[1]=r*h,t[2]=a*h,t[3]=o*Math.cos(n),t}function Vr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=Math.sqrt(i*i+r*r+a*a),o=n>0?Math.atan2(n,s)/n:0;return t[0]=i*o,t[1]=r*o,t[2]=a*o,t[3]=.5*Math.log(i*i+r*r+a*a+s*s),t}function jr(t,e,i){return Vr(t,e),na(t,t,i),Lr(t,t),t}function Gr(t,e,i,r){var a,s,n,o,h,c=e[0],u=e[1],l=e[2],d=e[3],m=i[0],p=i[1],f=i[2],g=i[3];return(s=c*m+u*p+l*f+d*g)<0&&(s=-s,m=-m,p=-p,f=-f,g=-g),1-s>_?(a=Math.acos(s),n=Math.sin(a),o=Math.sin((1-r)*a)/n,h=Math.sin(r*a)/n):(o=1-r,h=r),t[0]=o*c+h*m,t[1]=o*u+h*p,t[2]=o*l+h*f,t[3]=o*d+h*g,t}function zr(t){var e=p(),i=p(),r=p(),a=Math.sqrt(1-e),s=Math.sqrt(e);return t[0]=a*Math.sin(2*Math.PI*i),t[1]=a*Math.cos(2*Math.PI*i),t[2]=s*Math.sin(2*Math.PI*r),t[3]=s*Math.cos(2*Math.PI*r),t}function Ur(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*i+r*r+a*a+s*s,o=n?1/n:0;return t[0]=-i*o,t[1]=-r*o,t[2]=-a*o,t[3]=s*o,t}function Hr(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function Wr(t,e){var i,r=e[0]+e[4]+e[8];if(r>0)i=Math.sqrt(r+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var a=0;e[4]>e[0]&&(a=1),e[8]>e[3*a+a]&&(a=2);var s=(a+1)%3,n=(a+2)%3;i=Math.sqrt(e[3*a+a]-e[3*s+s]-e[3*n+n]+1),t[a]=.5*i,i=.5/i,t[3]=(e[3*s+n]-e[3*n+s])*i,t[s]=(e[3*s+a]+e[3*a+s])*i,t[n]=(e[3*n+a]+e[3*a+n])*i}return t}function qr(t,e,i,r){var a=.5*Math.PI/180;e*=a,i*=a,r*=a;var s=Math.sin(e),n=Math.cos(e),o=Math.sin(i),h=Math.cos(i),c=Math.sin(r),u=Math.cos(r);return t[0]=s*h*u-n*o*c,t[1]=n*o*u+s*h*c,t[2]=n*h*c-s*o*u,t[3]=n*h*u+s*o*c,t}function Yr(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Xr,Qr,Kr,$r,Zr,Jr,ta=zi,ea=Ui,ia=Hi,ra=Wi,aa=qi,sa=Br,na=er,oa=ur,ha=dr,ca=sr,ua=ca,la=nr,da=la,_a=cr,ma=vr,pa=br,fa=(Xr=qe(),Qr=Qe(1,0,0),Kr=Qe(0,1,0),function(t,e,i){var r=pi(e,i);return r<-.999999?(fi(Xr,Qr,e),Li(Xr)<1e-6&&fi(Xr,Kr,e),mi(Xr,Xr),Ar(t,Xr,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(fi(Xr,e,i),t[0]=Xr[0],t[1]=Xr[1],t[2]=Xr[2],t[3]=1+r,_a(t,t))}),ga=($r=wr(),Zr=wr(),function(t,e,i,r,a,s){return Gr($r,e,a,s),Gr(Zr,i,r,s),Gr(t,$r,Zr,2*s*(1-s)),t}),va=(Jr=gt(),function(t,e,i,r){return Jr[0]=i[0],Jr[3]=i[1],Jr[6]=i[2],Jr[1]=r[0],Jr[4]=r[1],Jr[7]=r[2],Jr[2]=-e[0],Jr[5]=-e[1],Jr[8]=-e[2],_a(t,Wr(t,Jr))});function ba(){var t=new m(8);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function Fa(t){var e=new m(8);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function ya(t,e,i,r,a,s,n,o){var h=new m(8);return h[0]=t,h[1]=e,h[2]=i,h[3]=r,h[4]=a,h[5]=s,h[6]=n,h[7]=o,h}function Oa(t,e,i,r,a,s,n){var o=new m(8);o[0]=t,o[1]=e,o[2]=i,o[3]=r;var h=.5*a,c=.5*s,u=.5*n;return o[4]=h*r+c*i-u*e,o[5]=c*r+u*t-h*i,o[6]=u*r+h*e-c*t,o[7]=-h*t-c*e-u*i,o}function xa(t,e,i){var r=.5*i[0],a=.5*i[1],s=.5*i[2],n=e[0],o=e[1],h=e[2],c=e[3];return t[0]=n,t[1]=o,t[2]=h,t[3]=c,t[4]=r*c+a*h-s*o,t[5]=a*c+s*n-r*h,t[6]=s*c+r*o-a*n,t[7]=-r*n-a*o-s*h,t}function Ta(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t}function Ca(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function Ma(t,e){var i=wr();Oe(i,e);var r=new m(3);return Fe(r,e),xa(t,i,r),t}function Sa(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function wa(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function Ea(t,e,i,r,a,s,n,o,h){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t}var Aa=ia;function Pa(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t}var Ra=ia;function Ba(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t}function Da(t,e){var i=e[4],r=e[5],a=e[6],s=e[7],n=-e[0],o=-e[1],h=-e[2],c=e[3];return t[0]=2*(i*c+s*n+r*h-a*o),t[1]=2*(r*c+s*o+a*n-i*h),t[2]=2*(a*c+s*h+i*o-r*n),t}function Ia(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=.5*i[0],h=.5*i[1],c=.5*i[2],u=e[4],l=e[5],d=e[6],_=e[7];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=n*o+a*c-s*h+u,t[5]=n*h+s*o-r*c+l,t[6]=n*c+r*h-a*o+d,t[7]=-r*o-a*h-s*c+_,t}function ka(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return Dr(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function Na(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return Ir(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function La(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return kr(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function Va(t,e,i){var r=i[0],a=i[1],s=i[2],n=i[3],o=e[0],h=e[1],c=e[2],u=e[3];return t[0]=o*n+u*r+h*s-c*a,t[1]=h*n+u*a+c*r-o*s,t[2]=c*n+u*s+o*a-h*r,t[3]=u*n-o*r-h*a-c*s,o=e[4],h=e[5],c=e[6],u=e[7],t[4]=o*n+u*r+h*s-c*a,t[5]=h*n+u*a+c*r-o*s,t[6]=c*n+u*s+o*a-h*r,t[7]=u*n-o*r-h*a-c*s,t}function ja(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*u+n*o+a*c-s*h,t[1]=a*u+n*h+s*o-r*c,t[2]=s*u+n*c+r*h-a*o,t[3]=n*u-r*o-a*h-s*c,o=i[4],h=i[5],c=i[6],u=i[7],t[4]=r*u+n*o+a*c-s*h,t[5]=a*u+n*h+s*o-r*c,t[6]=s*u+n*c+r*h-a*o,t[7]=n*u-r*o-a*h-s*c,t}function Ga(t,e,i,r){if(Math.abs(r)<_)return Sa(t,e);var a=Math.hypot(i[0],i[1],i[2]);r*=.5;var s=Math.sin(r),n=s*i[0]/a,o=s*i[1]/a,h=s*i[2]/a,c=Math.cos(r),u=e[0],l=e[1],d=e[2],m=e[3];t[0]=u*c+m*n+l*h-d*o,t[1]=l*c+m*o+d*n-u*h,t[2]=d*c+m*h+u*o-l*n,t[3]=m*c-u*n-l*o-d*h;var p=e[4],f=e[5],g=e[6],v=e[7];return t[4]=p*c+v*n+f*h-g*o,t[5]=f*c+v*o+g*n-p*h,t[6]=g*c+v*h+p*o-f*n,t[7]=v*c-p*n-f*o-g*h,t}function za(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t}function Ua(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[4],h=i[5],c=i[6],u=i[7],l=e[4],d=e[5],_=e[6],m=e[7],p=i[0],f=i[1],g=i[2],v=i[3];return t[0]=r*v+n*p+a*g-s*f,t[1]=a*v+n*f+s*p-r*g,t[2]=s*v+n*g+r*f-a*p,t[3]=n*v-r*p-a*f-s*g,t[4]=r*u+n*o+a*c-s*h+l*v+m*p+d*g-_*f,t[5]=a*u+n*h+s*o-r*c+d*v+m*f+_*p-l*g,t[6]=s*u+n*c+r*h-a*o+_*v+m*g+l*f-d*p,t[7]=n*u-r*o-a*h-s*c+m*v-l*p-d*f-_*g,t}var Ha=Ua;function Wa(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t}var qa=oa;function Ya(t,e,i,r){var a=1-r;return qa(e,i)<0&&(r=-r),t[0]=e[0]*a+i[0]*r,t[1]=e[1]*a+i[1]*r,t[2]=e[2]*a+i[2]*r,t[3]=e[3]*a+i[3]*r,t[4]=e[4]*a+i[4]*r,t[5]=e[5]*a+i[5]*r,t[6]=e[6]*a+i[6]*r,t[7]=e[7]*a+i[7]*r,t}function Xa(t,e){var i=Za(e);return t[0]=-e[0]/i,t[1]=-e[1]/i,t[2]=-e[2]/i,t[3]=e[3]/i,t[4]=-e[4]/i,t[5]=-e[5]/i,t[6]=-e[6]/i,t[7]=e[7]/i,t}function Qa(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t}var Ka=ca,$a=Ka,Za=la,Ja=Za;function ts(t,e){var i=Za(e);if(i>0){i=Math.sqrt(i);var r=e[0]/i,a=e[1]/i,s=e[2]/i,n=e[3]/i,o=e[4],h=e[5],c=e[6],u=e[7],l=r*o+a*h+s*c+n*u;t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=(o-r*l)/i,t[5]=(h-a*l)/i,t[6]=(c-s*l)/i,t[7]=(u-n*l)/i}return t}function es(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function is(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]}function rs(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=e[0],l=e[1],d=e[2],m=e[3],p=e[4],f=e[5],g=e[6],v=e[7];return Math.abs(i-u)<=_*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(r-l)<=_*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(a-d)<=_*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(s-m)<=_*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(n-p)<=_*Math.max(1,Math.abs(n),Math.abs(p))&&Math.abs(o-f)<=_*Math.max(1,Math.abs(o),Math.abs(f))&&Math.abs(h-g)<=_*Math.max(1,Math.abs(h),Math.abs(g))&&Math.abs(c-v)<=_*Math.max(1,Math.abs(c),Math.abs(v))}function as(){var t=new m(2);return m!=Float32Array&&(t[0]=0,t[1]=0),t}function ss(t){var e=new m(2);return e[0]=t[0],e[1]=t[1],e}function ns(t,e){var i=new m(2);return i[0]=t,i[1]=e,i}function os(t,e){return t[0]=e[0],t[1]=e[1],t}function hs(t,e,i){return t[0]=e,t[1]=i,t}function cs(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t}function us(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t}function ls(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t}function ds(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t}function _s(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function ms(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function ps(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t}function fs(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t}function gs(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function vs(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t}function bs(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t}function Fs(t,e){var i=e[0]-t[0],r=e[1]-t[1];return Math.hypot(i,r)}function ys(t,e){var i=e[0]-t[0],r=e[1]-t[1];return i*i+r*r}function Os(t){var e=t[0],i=t[1];return Math.hypot(e,i)}function xs(t){var e=t[0],i=t[1];return e*e+i*i}function Ts(t,e){return t[0]=-e[0],t[1]=-e[1],t}function Cs(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function Ms(t,e){var i=e[0],r=e[1],a=i*i+r*r;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t}function Ss(t,e){return t[0]*e[0]+t[1]*e[1]}function ws(t,e,i){var r=e[0]*i[1]-e[1]*i[0];return t[0]=t[1]=0,t[2]=r,t}function Es(t,e,i,r){var a=e[0],s=e[1];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t}function As(t,e){e=e||1;var i=2*p()*Math.PI;return t[0]=Math.cos(i)*e,t[1]=Math.sin(i)*e,t}function Ps(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[2]*a,t[1]=i[1]*r+i[3]*a,t}function Rs(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[2]*a+i[4],t[1]=i[1]*r+i[3]*a+i[5],t}function Bs(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[3]*a+i[6],t[1]=i[1]*r+i[4]*a+i[7],t}function Ds(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[4]*a+i[12],t[1]=i[1]*r+i[5]*a+i[13],t}function Is(t,e,i,r){var a=e[0]-i[0],s=e[1]-i[1],n=Math.sin(r),o=Math.cos(r);return t[0]=a*o-s*n+i[0],t[1]=a*n+s*o+i[1],t}function ks(t,e){var i=t[0],r=t[1],a=e[0],s=e[1],n=Math.sqrt(i*i+r*r)*Math.sqrt(a*a+s*s),o=n&&(i*a+r*s)/n;return Math.acos(Math.min(Math.max(o,-1),1))}function Ns(t){return t[0]=0,t[1]=0,t}function Ls(t){return"vec2("+t[0]+", "+t[1]+")"}function Vs(t,e){return t[0]===e[0]&&t[1]===e[1]}function js(t,e){var i=t[0],r=t[1],a=e[0],s=e[1];return Math.abs(i-a)<=_*Math.max(1,Math.abs(i),Math.abs(a))&&Math.abs(r-s)<=_*Math.max(1,Math.abs(r),Math.abs(s))}var Gs=Os,zs=us,Us=ls,Hs=ds,Ws=Fs,qs=ys,Ys=xs,Xs=function(){var t=as();return function(e,i,r,a,s,n){var o,h;for(i||(i=2),r||(r=0),h=a?Math.min(a*i+r,e.length):e.length,o=r;o<h;o+=i)t[0]=e[o],t[1]=e[o+1],s(t,t,n),e[o]=t[0],e[o+1]=t[1];return e}}()},4500:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(e,i);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,a)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),a(i(8618),e),a(i(8096),e),a(i(7290),e),a(i(7807),e),a(i(4726),e),a(i(7316),e),a(i(2022),e)},2022:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Base64Binary=void 0;class i{static decodeArrayBuffer(t){const e=t.length/4*3,i=new ArrayBuffer(e);return this.decode(t,i),i}static removePaddingChars(t){return 64==i._keyStr.indexOf(t.charAt(t.length-1))?t.substring(0,t.length-1):t}static decode(t,e){t=this.removePaddingChars(t),t=this.removePaddingChars(t);const r=parseInt((t.length/4*3).toString(),10);let a,s,n,o,h,c,u,l,d=0,_=0;for(a=e?new Uint8Array(e):new Uint8Array(r),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,""),d=0;d<r;d+=3)h=i._keyStr.indexOf(t.charAt(_++)),c=i._keyStr.indexOf(t.charAt(_++)),u=i._keyStr.indexOf(t.charAt(_++)),l=i._keyStr.indexOf(t.charAt(_++)),s=h<<2|c>>4,n=(15&c)<<4|u>>2,o=(3&u)<<6|l,a[d]=s,64!=u&&(a[d+1]=n),64!=l&&(a[d+2]=o);return a}}e.Base64Binary=i},8618:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.STLocalStorage=void 0;class i{constructor(){}static hasSuport(){return"undefined"!=typeof Storage}static existsData(t){return!!localStorage.getItem(t)}static retrieveData(t){return localStorage.getItem(t)}static createData(t,e){localStorage.setItem(t,e)}static createTempJSObject(t,e){localStorage.setItem(t,JSON.stringify(e))}static getTempJSObject(t){const e=localStorage.getItem(t);return e?(i.removeData(t),JSON.parse(e)):null}static removeData(t){const e=localStorage.getItem(t);return e&&localStorage.removeItem(t),!!e}}e.STLocalStorage=i},8096:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.STEnumHTTPErrorCode=void 0,(i=e.STEnumHTTPErrorCode||(e.STEnumHTTPErrorCode={}))[i.Ok=200]="Ok",i[i.Created=201]="Created",i[i.MultipleChoices=300]="MultipleChoices",i[i.NotModified=304]="NotModified",i[i.BadRequest=400]="BadRequest",i[i.Unauthorized=401]="Unauthorized",i[i.Forbidden=403]="Forbidden",i[i.NotFound=404]="NotFound",i[i.MethodNotAllowed=405]="MethodNotAllowed",i[i.InternalServerError=500]="InternalServerError",i[i.NotImplemented=501]="NotImplemented",i[i.ServiceUnavailable=503]="ServiceUnavailable"},7290:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.STHelpers=void 0;const r=i(7316);class a{static callIn(t,e,i){return setTimeout((t=>e(t)),t,i)}static getDigitsByValue(t,e){let i=t.toString();const r=e-i.length;for(let t=0;t<r;t++)i="0"+i;return i}static clone(t){const e=t instanceof Date,i=JSON.parse(JSON.stringify(t));return e||a.cloneIterate(i),e?new Date(i):i}static cloneIterate(t){t&&Object.entries(t).forEach((e=>{const i=e[0];"object"==typeof t[i]?a.cloneIterate(t[i]):r.STUtils.isStringActuallyDateRepresentation(t[i])&&(t[i]=new Date(t[i]))}))}static removeTrailingComma(t){const e=(t=t.trim()).lastIndexOf(",");return-1!==e&&e===t.length-1?t.substring(0,e):t}static formatString(t,...e){return e.forEach(((e,i)=>{t=r.STUtils.isNullOrEmpty(e)?a.removeEmptyParameter(t,i):t.replace(`{${i}}`,e)})),-1!==t.indexOf("?")&&t.length-1===t.indexOf("?")&&(t=t.substring(0,t.indexOf("?"))),t}static removeEmptyParameter(t,e){if(a.isParameterProperty(t,e)){const i=a.getParameterPropertyDetails(t,e);t=a.removeParameterPropOfPath(t,i)}return t}static isParameterProperty(t,e){const i=t.indexOf(`{${e}}`);return"="===t[i-1]}static getParameterPropertyDetails(t,e){const i=t.indexOf(`{${e}}`);let r=1,a=!0,s=!1;for(;a;)"?"===t[i-r]?(a=!1,s=!0):"&"===t[i-r]&&(a=!1),r++;return{isFirstParameter:s,firstIndex:i-r+1,lastIndex:t.indexOf("}",i)+1,hasNextParameter:-1!==t.indexOf(`{${e}}`,i)}}static removeParameterPropOfPath(t,e){return e.isFirstParameter?`${t.substring(0,e.firstIndex)}?${t.substring(e.hasNextParameter?e.lastIndex+1:e.lastIndex)}`:t.substring(0,e.firstIndex)+(e.hasNextParameter?"":"&")+t.substring(e.lastIndex)}static eraseCharsInString(t,e){for(const i of e)t=t.replace(i,"");return t}}e.STHelpers=a},4726:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7807:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7316:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.STUtils=void 0;const stEnumHttpErrorCode_1=__webpack_require__(8096),base64_binary_1=__webpack_require__(2022);class STUtils{static isNullOrEmpty(t){return!(t=t?t.toString():t)||0===t.trim().length}static isString(t){return"string"==typeof t||t instanceof String}static isObjectEmpty(t){return 0===Object.keys(t).length}static ternaryNotNull(t,e,i){return t?e:i}static replaceAllInString(t,e,i){return t.split(e).join(i)}static isStringActuallyDateRepresentation(t){return STUtils._regExDate.test(t)}static instanceByClassName(t,e){return new Function("arg1",`return new ${t}(arg1)`)(e)}static instanceByType(t){return new t}static instanceByTypeWithArgs(t,...e){return new t(...e)}static isPowerOfTwo(t){return 0==(t&t-1)}static nextHighestPowerOfTwo(t){--t;for(let e=1;e<32;e<<=1)t|=t>>e;return t+1}static createGuid(){const t=[];for(let e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);const e=4294967296*Math.random()>>>0,i=4294967296*Math.random()>>>0,r=4294967296*Math.random()>>>0,a=4294967296*Math.random()>>>0;return t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&i]+t[i>>8&255]+"-"+t[i>>16&15|64]+t[i>>24&255]+"-"+t[63&r|128]+t[r>>8&255]+"-"+t[r>>16&255]+t[r>>24&255]+t[255&a]+t[a>>8&255]+t[a>>16&255]+t[a>>24&255]}static countPropertiesInObject(t){let e=0;for(const i of Object.keys(t))t.hasOwnProperty(i)&&++e;return e}static arrayInsertArray(t,e,i){for(let r=i.length-1;r>=0;r--)t.splice(e,0,i[r]);return t}static isNullOrUndefinedOrWhiteSpace(t){let e=null==t;return e=e||0===t.length,e}static getFileNameWithoutExtension(t){return t.substr(0,t.lastIndexOf("."))}static getFileNameFromPath(t){return t.replace(/^.*(\\|\/|\:)/,"")}static getExtensionFromFileName(t){return t.substr(t.lastIndexOf(".")+1)}static validateFileType(t,e){return e&&0===t.trim().length&&(t="text/"+(t=STUtils.getExtensionFromFileName(e))),t}static ajaxJustGetHtml(t,e){return new Promise(((i,r)=>{$.get(t,(t=>{i({content:t,args:e})}),"html").fail((()=>{r()}))}))}static ajaxGetHtmlValAndExec(t,e){return new Promise(((i,r)=>{$.get(t,(t=>{STUtils.validateAndExecuteHtml(t),i({content:t,args:e})}),"html").fail((()=>{r()}))}))}static validateAndExecuteHtml(html){const scriptAttached=html.match(/<script\b[^>]*>([\s\S]*?)<\/script>/im);if(scriptAttached)try{eval(scriptAttached[1])}catch(t){t instanceof SyntaxError&&STUtils.staticDebugConsole.error(this,t)}}static dynamicLoadAndAppendCss(t,e){return new Promise((i=>{const r=document.createElement("link");r.rel="stylesheet",r.type="text/css",r.href=t,document.getElementsByTagName("HEAD")[0].appendChild(r),i({content:r,args:e})}))}static mergeObjects(t,e){const i={};for(const e of Object.keys(t))i[e.toString()]=t[e];for(const t of Object.keys(e))i[t.toString()]=e[t];return i}static onLoseFocus(t,e,i,r){const a=r?`click.${r}`:"click";t.on(a,(t=>{let r=!0;const a=$(t.target),s=a.parents(),n=e.split(",");if(STUtils.compareWithMultiple(a.attr("id"),n))r=!1;else for(const t of s)if(STUtils.compareWithMultiple($(t).attr("id"),n)){r=!1;break}i&&i(r)}))}static compareWithMultiple(t,e){return e.some((e=>e===t))}static verifyFixFileNameExtension(t,e){const i=t.lastIndexOf(".");if(-1===i)t=`${t}.${e}`;else if(t.substring(i+1,t.length)!==e){const r=t.substr(0,i);t=`${r}.${e}`}return t}static existsClass(t,e){let i=!1;return t&&(i=t.split(" ").some((t=>t===e))),i}static cloneObjectContainer(t){const e={};for(const i of Object.keys(t))e[i]=t[i];return e}static deepClone(t){return JSON.parse(JSON.stringify(t))}static isServerHostReachable(){const t=new(window.ActiveXObject||XMLHttpRequest)("Microsoft.XMLHTTP");t.open("HEAD",`//${window.location.hostname}/?rand=${Math.floor(65536*(1+Math.random()))}`,!1);try{return t.send(),t.status>=stEnumHttpErrorCode_1.STEnumHTTPErrorCode.Ok&&(t.status<stEnumHttpErrorCode_1.STEnumHTTPErrorCode.MultipleChoices||t.status===stEnumHttpErrorCode_1.STEnumHTTPErrorCode.NotModified)||t.status===stEnumHttpErrorCode_1.STEnumHTTPErrorCode.NotFound}catch(t){return!1}}static downloadToDesktop(t,e,i){const r=document,a=r.createElement("a");if(i=i||"application/octet-stream",navigator.msSaveBlob)return navigator.msSaveBlob(new Blob([t],{type:i}),e);if("download"in a)return a.href=`data:${i},${encodeURIComponent(t)}`,a.setAttribute("download",e),a.innerHTML="downloading...",r.body.appendChild(a),setTimeout((()=>{a.click(),r.body.removeChild(a)}),66),!0;const s=r.createElement("iframe");return r.body.appendChild(s),s.src=`data:${i},${encodeURIComponent(t)}`,setTimeout((()=>r.body.removeChild(s)),333),!0}static uint8ArrayToBase64(t){let e="";const i=t.byteLength;for(let r=0;r<i;r++)e+=String.fromCharCode(t[r]);return window.btoa(e)}static arrayBufferToBase64(t){let e="";const i=new Uint8Array(t),r=i.byteLength;for(let t=0;t<r;t++)e+=String.fromCharCode(i[t]);return window.btoa(e)}static base64ToArrayBuffer(t){return base64_binary_1.Base64Binary.decodeArrayBuffer(t)}static getIndexCoincidenceOn(t,e){const i=[];let r=0,a=!0;const s=e.length-1;for(;a;){const n=t.indexOf(e,r);a=-1!==n,a&&(r=r=n+s,i.push({word:e,index:n}))}return i}static findPreviousChar(t,e,i){let r="",a=!0,s=i;for(;a;){const i=t.charAt(s--);e.some((t=>t===i))||(r=i,a=!1,s<0&&(a=!1))}return{previousChar:r,index:s}}static findNextChar(t,e,i){let r="",a=!0,s=i;const n=t.length;for(;a;){const i=t.charAt(s++);e.some((t=>t===i))||(r=i,a=!1,s>=n&&(a=!1))}return{nextChar:r,index:s-1}}static findClosingChar(t,e,i,r){let a=0,s=!0,n=0,o=0,h=0;const c=t.length;for(;s;){const u=t.charAt(r+n++);u===e?o++:u===i&&h++,o===h&&0!==o&&0!==h&&(s=!1,a=r+(n-1)),s&&r+n>=c&&(s=!1)}return a}static number2Binary(t){return(t>>>0).toString(2)}static binary2Number(t){return parseInt(t,2)}static rangeLimiter(t,e,i){return(t=t>=i?i:t)<=e?e:t}static eraseCharsInString(t,e){for(let i=0;i<e.length;i++)t=t.replace(e[i],"");return t}static existsPropertyAndValue(t,e){return t&&t.hasOwnProperty(e)&&!STUtils.isNullOrEmpty(t[e].toString())}static getPropertyValueOrDefault(t,e,i){return STUtils.existsPropertyAndValue(t,e)?t[e]:i}static doesObjImplementsFunctionFromInterface(t,e){return!!t[e]}static isFunction(t){return!!(t&&t.constructor&&t.call&&t.apply)}static escapeHtml(t){const e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,(t=>e[t]))}}STUtils._regExDate=new RegExp("^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$"),exports.STUtils=STUtils},3139:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFRenderLoop=void 0;class i{constructor(t,e){this._framerate=e,this._functionLoop=t,this._lastTime=(new Date).getTime(),this._gameLoopInterval=setInterval((()=>this.internalLoop()),1e3/this._framerate)}internalLoop(){const t=(new Date).getTime(),e=(t-this._lastTime)/1e3;this._lastTime=t,this._functionLoop(e)}static create(t,e){return new i(t,e)}}e.OFRenderLoop=i},5948:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontCharDescriptor=void 0,e.OFBitmapFontCharDescriptor=class{constructor(){this.id=0,this.x=0,this.y=0,this.width=0,this.height=0,this.textureU=0,this.textureV=0,this.xOffset=0,this.yOffset=0,this.xAdvance=0,this.page=0,this.chnl=0}}},9201:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontCharset=void 0;const r=i(9298),a=i(961);class s{constructor(){this.fontName="",this.size=0,this.bold=!1,this.italic=!1,this.charset="",this.unicode=!1,this.stretchH=0,this.smooth=!1,this.aa=!1,this.padding=null,this.spacing=null,this.outline=!1,this.lineHeight=0,this.base=0,this.scaleWidth=0,this.scaleHeight=0,this.pages=0,this.packed=!1,this.alphaChnl=0,this.redChnl=0,this.greenChnl=0,this.blueChnl=0,this.fontPages=[],this.kernings=[]}getCharDescriptor(t){return this.fontPages[0].chars[t]}existsChar(t){return t-1<this.fontPages[0].charArraySize}getKerning(t,e){let i=0;if(!this.kernings)return i;const r=this.kernings.length;for(let a=0;a<r;a++){const r=this.kernings[a];if(r&&r.first===t&&r.second===e){i=r.amount;break}}return i}measureString(t){const e=r.OFVector2.zero();e.y+=this.base;const i=t.length;let s=0,n=0;for(let r=0;r<i;r++)if(t.charCodeAt(r)===a.OFEnumKeyCode.JumpLine){const i=t.substring(s,r-s);s=r+1;const a=this.measureStringLineal(i);a>n&&(n=a,e.x=n),e.y+=this.base}return 0===e.x&&i>0&&(e.x=this.measureStringLineal(t)),e}measureStringLineal(t){const e=t.length;let i,r=0,a=-1;for(let s=0;s<e;s++){let e=0;const n=t.charCodeAt(s);this.existsChar(n)&&(-1!==a&&(e=this.getKerning(a,n)),i=this.getCharDescriptor(n),r+=i.xAdvance+e,a=n)}return r}}e.OFBitmapFontCharset=s,s.CHAR_DESCRIPTOR_SIZE=256},4979:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontKerning=void 0,e.OFBitmapFontKerning=class{constructor(){this.first=0,this.second=0,this.amount=0}}},9565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontPage=void 0,e.OFBitmapFontPage=class{constructor(){this.id=0,this.charCount=0,this.charArraySize=0,this.path="",this.isInitialized=!1,this.chars=null}}},5610:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontLoader=void 0;const r=i(9201),a=i(9565),s=i(5948),n=i(4979),o=i(19),h=i(961),c=i(4500);var u;!function(t){t[t.DEFAULT_NONE=0]="DEFAULT_NONE",t[t.INFO=1]="INFO",t[t.COMMON=2]="COMMON",t[t.PAGE=3]="PAGE",t[t.CHARS=4]="CHARS",t[t.CHAR=5]="CHAR",t[t.KERNING=6]="KERNING",t[t.KERNINGS=7]="KERNINGS"}(u||(u={}));class l{constructor(){}static parse(t){l.BitmapFontPageTemp=null,l.BitmapFontPageIndexTemp=-1,l.BitmapFontCharIndexTemp=-1,l.BitmapFontKerningIndexTemp=-1,l.FontCharset=null;const e=t.split("\n");let i=!1,s="",n="";l.FontCharset=new r.OFBitmapFontCharset,l.BitmapFontPageTemp=new a.OFBitmapFontPage;for(let t=0,i=e.length;t<i;t++){n=e[t];let i=!1,r=!0,a=!1;const o=n.length;let h=0,c=u.DEFAULT_NONE;for(;!a;){if(h>=o){a=!0,s.length>0&&(l.readingAndSettingValues(c,s),s="");break}{const t=n[h];let e=t===l.SPACE;t===l.QUOTATION_MARK&&(i=!i),e=!i&&e,e?s.length>0&&(r?(r=!1,c=l.getLineType(s)):l.readingAndSettingValues(c,s),s=""):s+=t,h++}}}return i=!0,l.BitmapFontPageIndexTemp=0,l.BitmapFontCharIndexTemp=0,l.BitmapFontKerningIndexTemp=0,l.FontCharset}static readingAndSettingValues(t,e){let i="",h="",d=e.indexOf(l.EQUALS_SIGN);i=e.substring(0,d),h=e.substring(d+1),h=h.replace(l.QUOTATION_MARK,l.NOTHING),h=h.replace(l.BACKSLASH,l.NOTHING);let _=null;switch(t){case u.INFO:switch(i){case"face":l.FontCharset.fontName=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter);break;case"size":l.FontCharset.size=parseInt(h);break;case"bold":l.FontCharset.bold="0"!==h;break;case"italic":l.FontCharset.italic="0"!==h;break;case"charset":l.FontCharset.charset=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter);break;case"unicode":l.FontCharset.unicode="0"!==h;break;case"stretchH":l.FontCharset.stretchH=parseInt(h);break;case"smooth":l.FontCharset.smooth="0"!==h;break;case"aa":l.FontCharset.aa="0"!==h;break;case"padding":const t=h.split(l.COMMA);l.FontCharset.padding=[parseInt(t[0]),parseInt(t[1]),parseInt(t[2]),parseInt(t[3])];break;case"spacing":l.FontCharset.spacing=[parseInt(String.fromCharCode(parseInt(h[0]))),parseInt(String.fromCharCode(parseInt(h[2])))];break;case"outline":l.FontCharset.outline="0"!==h}break;case u.COMMON:switch(i){case"lineHeight":l.FontCharset.lineHeight=parseInt(h);break;case"base":l.FontCharset.base=parseInt(h);break;case"scaleW":l.FontCharset.scaleWidth=parseInt(h);break;case"scaleH":l.FontCharset.scaleHeight=parseInt(h);break;case"pages":l.FontCharset.pages=parseInt(h),l.FontCharset.fontPages=new Array;for(let t=0,e=l.FontCharset.pages;t<e;t++)l.FontCharset.fontPages.push(new a.OFBitmapFontPage);break;case"packed":l.FontCharset.packed="0"!==h;break;case"alphaChnl":l.FontCharset.alphaChnl=parseInt(h);break;case"redChnl":l.FontCharset.redChnl=parseInt(h);break;case"greenChnl":l.FontCharset.greenChnl=parseInt(h);break;case"blueChnl":l.FontCharset.blueChnl=parseInt(h)}break;case u.PAGE:let t=null;for(let e=0;e<l.FontCharset.fontPages.length;e++)if(t=l.FontCharset.fontPages[e],!t.isInitialized){switch(i){case"id":t.id=parseInt(h);break;case"file":t.path=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter),t.isInitialized=!0,l.BitmapFontCharIndexTemp=0,l.BitmapFontPageIndexTemp=e,l.BitmapFontPageTemp=t}l.FontCharset.fontPages[e]=t;break}break;case u.CHARS:if("count"===i){l.BitmapFontCharIndexTemp=-1,l.BitmapFontPageTemp.charCount=parseInt(h),l.BitmapFontPageTemp.chars=[];for(let t=0;t<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE;t++)l.BitmapFontPageTemp.chars.push(new s.OFBitmapFontCharDescriptor);l.BitmapFontPageTemp.charArraySize=r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE,l.FontCharset.fontPages[l.BitmapFontPageIndexTemp]=l.BitmapFontPageTemp}break;case u.CHAR:if(-1!==l.BitmapFontCharIndexTemp){if(!(l.BitmapFontCharIndexTemp<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE))break;"id"===i&&(l.BitmapFontCharIndexTemp=parseInt(h)),_=l.BitmapFontPageTemp.chars[l.BitmapFontCharIndexTemp]}else _=new s.OFBitmapFontCharDescriptor;if(!_)break;switch(i){case"id":_.id=parseInt(h),l.BitmapFontCharIndexTemp=_.id;break;case"x":_.x=parseInt(h);break;case"y":_.y=parseInt(h);break;case"width":_.width=parseInt(h),_.textureU=_.width;break;case"height":_.height=parseInt(h),_.textureV=_.height;break;case"xoffset":_.xOffset=parseInt(h);break;case"yoffset":_.yOffset=parseInt(h);break;case"xadvance":_.xAdvance=parseInt(h);break;case"page":_.page=parseInt(h);break;case"chnl":_.chnl=parseInt(h)}l.BitmapFontCharIndexTemp<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE?(l.BitmapFontPageTemp.chars[l.BitmapFontCharIndexTemp]=_,l.FontCharset.fontPages[l.BitmapFontPageIndexTemp]=l.BitmapFontPageTemp):o.OFConsole.warn("OFBitmapFontLoader> readingAndSettingValues> In the Font: '"+l.FontCharset.fontName+"' the char index: "+l.BitmapFontCharIndexTemp+" is out of the range of the default size of the char description: "+r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE);break;case u.KERNINGS:l.BitmapFontKerningIndexTemp=0,l.FontCharset.kernings=new Array;for(let t=0,e=parseInt(h);t<e;t++)l.FontCharset.kernings.push(new n.OFBitmapFontKerning);break;case u.KERNING:let e=!1;const d=l.FontCharset.kernings[l.BitmapFontKerningIndexTemp];switch(i){case"first":d.first=parseInt(h);break;case"second":d.second=parseInt(h);break;case"amount":e=!0,d.amount=parseInt(h)}l.FontCharset.kernings[l.BitmapFontKerningIndexTemp]=d,e&&l.BitmapFontKerningIndexTemp++}}static getLineType(t){let e=u.DEFAULT_NONE;switch(t){case"info":e=u.INFO;break;case"common":e=u.COMMON;break;case"page":e=u.PAGE;break;case"chars":e=u.CHARS;break;case"char":e=u.CHAR;break;case"kerning":e=u.KERNING;break;case"kernings":e=u.KERNINGS}return e}}e.OFBitmapFontLoader=l,l.BitmapFontPageTemp=null,l.BitmapFontPageIndexTemp=-1,l.BitmapFontCharIndexTemp=-1,l.BitmapFontKerningIndexTemp=-1,l.FontCharset=null,l.COMMA=",",l.DOT=".",l.WHITE_SPACE=" ",l.EQUALS_SIGN="=",l.SLASH="/",l.QUOTATION_MARK=String.fromCharCode(h.OFEnumKeyCode.QuotationMark),l.SPACE=String.fromCharCode(h.OFEnumKeyCode.Space),l.NOTHING=String.fromCharCode(h.OFEnumKeyCode.Nothing),l.BACKSLASH=String.fromCharCode(h.OFEnumKeyCode.Backslash),l.ASCIIFilter=[l.NOTHING,l.BACKSLASH,l.QUOTATION_MARK,l.WHITE_SPACE]},2608:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumShaderDataTypes=void 0,(i=e.OFEnumShaderDataTypes||(e.OFEnumShaderDataTypes={}))[i.Unkown=0]="Unkown",i[i.Matrix2=1]="Matrix2",i[i.Matrix3=2]="Matrix3",i[i.Matrix4=3]="Matrix4",i[i.Vector2=4]="Vector2",i[i.Vector3=5]="Vector3",i[i.Vector4=6]="Vector4",i[i.IntVector2=7]="IntVector2",i[i.IntVector3=8]="IntVector3",i[i.IntVector4=9]="IntVector4",i[i.BooleanVector2=10]="BooleanVector2",i[i.BooleanVector3=11]="BooleanVector3",i[i.BooleanVector4=12]="BooleanVector4",i[i.Sampler2D=13]="Sampler2D",i[i.SamplerCube=14]="SamplerCube",i[i.Float=15]="Float",i[i.Int=16]="Int",i[i.Bool=17]="Bool",i[i.ICamera=18]="ICamera",i[i.IColor=19]="IColor",i[i.ITexture=20]="ITexture"},5377:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumShaderLiterals=void 0,(i=e.OFEnumShaderLiterals||(e.OFEnumShaderLiterals={})).IN_Matrix2="MAT2",i.IN_Matrix3="MAT3",i.IN_Matrix4="MAT4",i.IN_Vector2="VEC2",i.IN_Vector3="VEC3",i.IN_Vector4="VEC4",i.IN_IntVector2="IVEC2",i.IN_IntVector3="IVEC3",i.IN_IntVector4="IVEC4",i.IN_BooleanVector2="BVEC2",i.IN_BooleanVector3="BVEC3",i.IN_BooleanVector4="BVEC4",i.IN_Sampler2D="SAMPLER2D",i.IN_SamplerCube="SAMPLERCUBE",i.IN_Float="FLOAT",i.IN_Int="INT",i.IN_Bool="BOOL",i.DT_Texture="TEXTURE",i.DT_Color="COLOR",i.DT_Camera="CAMERA"},2080:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderAnalizer=void 0;const r=i(2608),a=i(5377);class s{constructor(){}static analize(t,e){const i=e||{attributeCount:0,uniformCount:0,attributes:[],uniforms:[]};let r=0;const a={};for(;;){const e=s.getInputDataInfo(t,r),n=s.getNextInputData(t,e);if(e.inputIndex===s.indexLimit)break;if(n.inputName)switch(r=n.lastIndex,delete n.lastIndex,e.inputType){case s.enumAttribute:i.attributeCount++,i.attributes.push(n);break;case s.enumUniform:a.hasOwnProperty("pp_"+n.inputVariableType)?a["pp_"+n.inputVariableType]++:a["pp_"+n.inputVariableType]=0,n.inputDeclarativeVariableIndex=a["pp_"+n.inputVariableType],i.uniformCount++,i.uniforms.push(n)}}return i}static getInputDataInfo(t,e){const i={inputName:"",inputType:0,inputIndex:-1,inputNameLength:0};let r=t.indexOf("attribute",e),a=t.indexOf("uniform",e);r=-1===r?s.indexLimit:r,a=-1===a?s.indexLimit:a;const n=r<a?s.enumAttribute:s.enumUniform;switch(n){case s.enumAttribute:i.inputName="attribute",i.inputType=n,i.inputIndex=r,i.inputNameLength=s.attributeStringLenght;break;case s.enumUniform:i.inputName="uniform",i.inputType=n,i.inputIndex=a,i.inputNameLength=s.uniformStringLenght}return i}static getNextInputData(t,e){const i=e.inputNameLength,r=e.inputIndex,a=t.indexOf(e.inputName,r);let n,o,h,c,u=r;if(-1!==a){const e=a+i+1,r=t.indexOf(" ",e),s=r+1;let c=t.indexOf(";",s);if(n=t.substr(e,r-e).trim(),o=t.substr(s,c-s),-1!==o.indexOf(":")){c=t.indexOf(":",s),o=t.substr(s,c-s).trim();const e=t.indexOf(":",c)+1,i=t.indexOf(";",e);h=t.substr(e,i-e).trim(),u=i}else u=c}if(o){const t=o.indexOf(" ");-1!==t&&(c=n,n=o.substring(0,t),o=o.substring(t+1,o.length))}return{lastIndex:u,inputPrecision:c,inputVariableType:s.changeVariableTypeToEnum(n,h),inputName:o?o.trim():o,inputDeclarativeVariableIndex:0}}static sanitize(t){let e=0,i=t;for(;;){const r=i.indexOf("uniform",e);if(-1===r)break;{const a=i.indexOf(";",r),s=i.substr(r,a-r+1);if(-1!==s.indexOf(":")){const e=s.substr(0,s.indexOf(":")).trim()+";",n=i.substr(0,r),o=i.substr(a+1,t.length-a);i="",i+=n,i+=e,i+=o}e=r+1}}return i}static changeVariableTypeToEnum(t,e){let i=r.OFEnumShaderDataTypes.Unkown;if(e)switch(e.toUpperCase()){case a.OFEnumShaderLiterals.DT_Texture:i=r.OFEnumShaderDataTypes.ITexture;break;case a.OFEnumShaderLiterals.DT_Color:i=r.OFEnumShaderDataTypes.IColor;break;case a.OFEnumShaderLiterals.DT_Camera:i=r.OFEnumShaderDataTypes.ICamera}if(t&&i===r.OFEnumShaderDataTypes.Unkown)switch(t.toUpperCase()){case a.OFEnumShaderLiterals.IN_Matrix2:i=r.OFEnumShaderDataTypes.Matrix2;break;case a.OFEnumShaderLiterals.IN_Matrix3:i=r.OFEnumShaderDataTypes.Matrix3;break;case a.OFEnumShaderLiterals.IN_Matrix4:i=r.OFEnumShaderDataTypes.Matrix4;break;case a.OFEnumShaderLiterals.IN_Vector2:i=r.OFEnumShaderDataTypes.Vector2;break;case a.OFEnumShaderLiterals.IN_Vector3:i=r.OFEnumShaderDataTypes.Vector3;break;case a.OFEnumShaderLiterals.IN_Vector4:i=r.OFEnumShaderDataTypes.Vector4;break;case a.OFEnumShaderLiterals.IN_IntVector2:i=r.OFEnumShaderDataTypes.IntVector2;break;case a.OFEnumShaderLiterals.IN_IntVector3:i=r.OFEnumShaderDataTypes.IntVector3;break;case a.OFEnumShaderLiterals.IN_IntVector4:i=r.OFEnumShaderDataTypes.IntVector4;break;case a.OFEnumShaderLiterals.IN_BooleanVector2:i=r.OFEnumShaderDataTypes.BooleanVector2;break;case a.OFEnumShaderLiterals.IN_BooleanVector3:i=r.OFEnumShaderDataTypes.BooleanVector3;break;case a.OFEnumShaderLiterals.IN_BooleanVector4:i=r.OFEnumShaderDataTypes.BooleanVector4;break;case a.OFEnumShaderLiterals.IN_Sampler2D:i=r.OFEnumShaderDataTypes.Sampler2D;break;case a.OFEnumShaderLiterals.IN_SamplerCube:i=r.OFEnumShaderDataTypes.SamplerCube;break;case a.OFEnumShaderLiterals.IN_Float:i=r.OFEnumShaderDataTypes.Float;break;case a.OFEnumShaderLiterals.IN_Int:i=r.OFEnumShaderDataTypes.Int;break;case a.OFEnumShaderLiterals.IN_Bool:i=r.OFEnumShaderDataTypes.Bool;break;default:i=r.OFEnumShaderDataTypes.Unkown}return i}}e.OFShaderAnalizer=s,s.enumAttribute=1,s.enumUniform=2,s.attributeStringLenght=9,s.uniformStringLenght=7,s.indexLimit=999999},764:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeltaTimeCorrector=void 0,e.OFDeltaTimeCorrector=class{constructor(){this._deltaTimeBufferIndex=0,this._deltaTimeBufferCount=15,this._deltaTimeBuffer=[]}recomputeDeltaTime(t){this._deltaTimeBuffer[this._deltaTimeBufferIndex++]=t,this._deltaTimeBufferIndex=this._deltaTimeBufferIndex>=this._deltaTimeBufferCount?0:this._deltaTimeBufferIndex;let e=0;for(const t of this._deltaTimeBuffer)e+=t;return e/this._deltaTimeBufferCount}}},5820:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCBitmapTextfield2D=void 0;const r=i(5694),a=i(6227),s=i(1182),n=i(1851),o=i(7924),h=i(9298),c=i(961),u=i(2608);e.OFCBitmapTextfield2D=class{get text(){return this._text}get textSize(){return this._textSize}get color(){return this._color}set color(t){this._color=t,this._uniformData.UniformColor0.value=t}get trackingQuantity(){return this._trackingQuantity}set trackingQuantity(t){this._trackingQuantity=t,this.setText(this._text,!0)}constructor(){this._graphicDevice=r.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._GL=this._graphicDevice.graphicContext,this._color=s.OFColor.white(),this._customQuads=[],this._width=0,this._height=0,this._textureWidth=0,this._textureHeight=0,this._scaleWasModified=!1,this._drawEnable=!1,this._oldNumQuads=0,this._indicesCount=0,this._textQuadCounter=0,this._textPositionRenderX=0,this._textPositionRenderY=0,this._textInternalOffset=0,this._trackingQuantity=0,this._text="",this._textAlign=o.OFEnumTextAlign.Left,this._textSize=h.OFVector2.zero(),this._renderType=this._GL.TRIANGLE_STRIP}initialize(t,e,i){this._fontCharset=e,this._imageContent=i,this._textureWidth=i.imageWidth,this._textureHeight=i.imageHeight,this._polygonBatcher=new a.OFPolygonBatcher,this._polygonBatcher.changeShader("TextShaderTexture"),this._uniformData={},this._uniformData.UniformColor0={index:0,type:u.OFEnumShaderDataTypes.IColor,value:s.OFColor.white()},this.setText(t)}preValidationText(t){return t&&this._text!==t}setText(t,e){if(t=t||"",this.preValidationText(t)||e){this._text=t,this._textQuadCounter=0,this._textPositionRenderX=0,this._textPositionRenderY=0,this._textSize=h.OFVector2.zero(),this._textSize.y=this._fontCharset.base;const e=t.length;(!this._customQuads||this._customQuads&&e>this._customQuads.length)&&(this._customQuads=[]);let i=-1;const r=this._text.length;let a,s=0,n=0,o=!1;for(let t=0;t<r;t++){let e=0;const r=this._text.charCodeAt(t);if(r===c.OFEnumKeyCode.JumpLine){o=!0;const e=this._text.substring(s,t-s),i=this._fontCharset.measureString(e).x;s=t+1,i>n&&(n=i,this._textSize.x=n),this._textSize.y+=this._fontCharset.base}else-1!==i&&(e=this._fontCharset.getKerning(i,r)),this._fontCharset.existsChar(r)&&(a=this._fontCharset.getCharDescriptor(r),this.addTextQuad(a,e,o),i=r,o=!1)}if(0===this._textSize.x){const t=this._fontCharset.measureString(this._text);t.x+=this._text.length*this._trackingQuantity,this._textSize.x=t.x,this._height=t.x}else this._width=this._textSize.x;0===this._textSize.y?(this._textSize.y=this._fontCharset.base,this._height=this._fontCharset.base):this._height=this._textSize.y,this.alignText(this._textAlign),this.transformToRender()}}alignText(t){this._textAlign=t;const e=-this._textSize.x;switch(this._textSize.y,t){case o.OFEnumTextAlign.Left:this._textInternalOffset=0;break;case o.OFEnumTextAlign.Right:this._textInternalOffset=e;break;case o.OFEnumTextAlign.Center:this._textInternalOffset=e/2}}addTextQuad(t,e,i){const r=t.x,a=t.y,o=t.textureU,h=t.textureV,c=n.OFQuadStruct.createAsVertexPositionColorTexture();c.created=!0,this._customQuads.push(c),i&&(this._textPositionRenderX=0,this._textPositionRenderY+=this._fontCharset.base);const u=this._textPositionRenderX+t.xOffset+e+this._trackingQuantity*this._textQuadCounter,l=this._textPositionRenderY+t.yOffset;this._textPositionRenderX+=t.xAdvance+e,c.VPTTopLeft.x=u,c.VPTTopLeft.y=l,c.VPTTopRight.x=u+t.width,c.VPTTopRight.y=l,c.VPTBottomLeft.x=u,c.VPTBottomLeft.y=l+t.height,c.VPTBottomRight.x=u+t.width,c.VPTBottomRight.y=l+t.height;const d=s.OFColor.white();c.VPTTopLeft.color=d,c.VPTTopRight.color=d,c.VPTBottomLeft.color=d,c.VPTBottomRight.color=d,c.VPTTopLeft.u=r/this._textureWidth,c.VPTTopLeft.v=a/this._textureHeight,c.VPTTopRight.u=(r+o)/this._textureWidth,c.VPTTopRight.v=a/this._textureHeight,c.VPTBottomLeft.u=r/this._textureWidth,c.VPTBottomLeft.v=(a+h)/this._textureHeight,c.VPTBottomRight.u=(r+o)/this._textureWidth,c.VPTBottomRight.v=(a+h)/this._textureHeight,this._customQuads[this._textQuadCounter]=c,this._textQuadCounter++}preCalculateIndices(t){if(this._oldNumQuads!==t){let e=0;if(this._indices=[],this._renderType===this._GL.TRIANGLE_STRIP)for(let i=0;i<t;++i)this._indices.push(e+3),this._indices.push(e+2),this._indices.push(e+1),this._indices.push(e),this._indices.push(e),this._indices.push(e+7),e+=4;this._indices[this._indices.length-1]=0,this._oldNumQuads=t,this._indicesCount=6*t}}transformToRender(){let t=0,e=null;const i=this._textQuadCounter;for(let e=0;e<i;e++)this._customQuads[e].created&&t++;this.preCalculateIndices(this._textQuadCounter),this._vertices=[];for(let t=0;t<i;t++)e=this._customQuads[t],e.created&&(this._vertices.push(e.VPTTopRight.x),this._vertices.push(e.VPTTopRight.y),this._vertices.push(e.VPTTopRight.color.r),this._vertices.push(e.VPTTopRight.color.g),this._vertices.push(e.VPTTopRight.color.b),this._vertices.push(e.VPTTopRight.color.a),this._vertices.push(e.VPTTopRight.u),this._vertices.push(e.VPTTopRight.v),this._vertices.push(e.VPTTopLeft.x),this._vertices.push(e.VPTTopLeft.y),this._vertices.push(e.VPTTopRight.color.r),this._vertices.push(e.VPTTopRight.color.g),this._vertices.push(e.VPTTopRight.color.b),this._vertices.push(e.VPTTopRight.color.a),this._vertices.push(e.VPTTopLeft.u),this._vertices.push(e.VPTTopLeft.v),this._vertices.push(e.VPTBottomRight.x),this._vertices.push(e.VPTBottomRight.y),this._vertices.push(e.VPTBottomRight.color.r),this._vertices.push(e.VPTBottomRight.color.g),this._vertices.push(e.VPTBottomRight.color.b),this._vertices.push(e.VPTBottomRight.color.a),this._vertices.push(e.VPTBottomRight.u),this._vertices.push(e.VPTBottomRight.v),this._vertices.push(e.VPTBottomLeft.x),this._vertices.push(e.VPTBottomLeft.y),this._vertices.push(e.VPTBottomLeft.color.r),this._vertices.push(e.VPTBottomLeft.color.g),this._vertices.push(e.VPTBottomLeft.color.b),this._vertices.push(e.VPTBottomLeft.color.a),this._vertices.push(e.VPTBottomLeft.u),this._vertices.push(e.VPTBottomLeft.v));this._drawEnable=t>0,this._polygonBatcher.imageContent=this._imageContent,this._polygonBatcher.beginDraw(),this._polygonBatcher.pushPolygon(this._vertices,this._indices),this._polygonBatcher.endDraw()}setLetterColor(t,e){const i=32*t;this._vertices[i+2]=e.r,this._vertices[i+3]=e.g,this._vertices[i+4]=e.b,this._vertices[i+5]=e.a,this._vertices[i+8+2]=e.r,this._vertices[i+8+3]=e.g,this._vertices[i+8+4]=e.b,this._vertices[i+8+5]=e.a,this._vertices[i+16+2]=e.r,this._vertices[i+16+3]=e.g,this._vertices[i+16+4]=e.b,this._vertices[i+16+5]=e.a,this._vertices[i+24+2]=e.r,this._vertices[i+24+3]=e.b,this._vertices[i+24+4]=e.b,this._vertices[i+24+5]=e.a,this._polygonBatcher.imageContent=this._imageContent,this._polygonBatcher.beginDraw(),this._polygonBatcher.pushPolygon(this._vertices,this._indices),this._polygonBatcher.endDraw()}draw(t,e){this._drawEnable&&this._polygonBatcher.draw(t,e,this._GL.TRIANGLE_STRIP,this._uniformData)}destroy(){var t;this._graphicDevice=null,this._GL=null,null===(t=this._polygonBatcher)||void 0===t||t.destroy(),this._polygonBatcher=null,this._uniformData=null,this._fontCharset=null,this._indices=null,this._vertices=null,this._color=null,this._customQuads=null,this._imageContent=null,this._text=null,this._textAlign=null,this._textSize=null}}},1874:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseContent=void 0,e.OFBaseContent=class{get path(){return this._path}get isLoaded(){return this._isLoaded}get framework(){return this._framework}get graphicContext(){return this._graphicContext}constructor(t){this.contentManager=t,this._isLoaded=!1,this._framework=t.framework,this._graphicContext=this._framework.mainGraphicDevice.graphicContext}initialize(){}changeProperties(t){}load(t){this._path=t}unload(){}}},2724:function(t,e,i){var r=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(a,s){function n(t){try{h(r.next(t))}catch(t){s(t)}}function o(t){try{h(r.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,o)}h((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.OFContentManager=void 0;const a=i(3440),s=i(464),n=i(1348),o=i(19),h=i(9486);e.OFContentManager=class{constructor(t){this.framework=t,this._contentRepository=[]}initialize(){}loadDefault(){}changePropertiesInContent(t,e){const i=this.getContent(t);i?i.changeProperties(e):o.OFConsole.warn(h.OFTranslations.Framework.ContentManagement.changePropertiesInContentNotFound,this.framework.frameworkIdentifier.toString(),t)}getContent(t){let e;const i=this._contentRepository.length;for(let r=0;r<i;r++){const i=this._contentRepository[r];if(i&&i.path===t){e=i;break}}return e}loadMaterialFromJSON(t,e){const i=new n.OFMaterialContent(this);return i.initialize(),i.loadFromJSON(t,e),this._contentRepository.push(i),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadMaterialFromJSON,this.framework.frameworkIdentifier.toString(),e),i}loadMaterial(t){const e=new n.OFMaterialContent(this);return e.initialize(),e.load(t),this._contentRepository.push(e),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadMaterial,this.framework.frameworkIdentifier.toString(),t),e}loadImage(t){const e=new a.OFImageContent(this);return e.initialize(),e.load(t),this._contentRepository.push(e),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadImage,this.framework.frameworkIdentifier.toString(),t),e}asyncLoadSoundFromArrayBuffer(t,e,i){return r(this,void 0,void 0,(function*(){const r=new s.OFSoundContent(this);return r.initialize(),yield r.loadFromArrayBuffer(t,e,i),this._contentRepository.push(r),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadSoundFromArrayABuffer,this.framework.frameworkIdentifier.toString(),e),r}))}loadImageFromHTMLImage(t,e,i){let r=this.getContent(e);return r||(r=new a.OFImageContent(this),r.initialize(),r.loadFromImageHTML(t,e,i),this._contentRepository.push(r),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadImageFromHTMLImage,this.framework.frameworkIdentifier.toString(),e)),r}unloadImage(t){o.OFConsole.error(h.OFTranslations.Framework.ContentManagement.notImplementedException,this.framework.frameworkIdentifier.toString(),t)}}},3440:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFImageContent=void 0;const r=i(1874);class a extends r.OFBaseContent{get imageHTML(){return this._image}get imageWidth(){return this._image.width}get imageHeight(){return this._image.height}get imageTexture(){return this._imageTexture}constructor(t){super(t)}initialize(){super.initialize()}load(t){super.load(t),this._image=new Image;const e=this.graphicContext;this._imageTexture=e.createTexture(),this._image.onload=()=>{e.bindTexture(e.TEXTURE_2D,this._imageTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this._image),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.bindTexture(e.TEXTURE_2D,null),this._isLoaded=!0},this._image.src=t}loadFromImageHTML(t,e,i){i=i||{};const r=this.graphicContext;e&&this.load(e),this._image=t;const a=i.WebGL_MinFilter?i.WebGL_MinFilter:r.LINEAR,s=i.WebGL_MagFilter?i.WebGL_MagFilter:r.LINEAR,n=i.WebGL_WrapS?i.WebGL_WrapS:r.CLAMP_TO_EDGE,o=i.WebGL_WrapT?i.WebGL_WrapT:r.CLAMP_TO_EDGE,h=!!i.GenerateMipMap&&i.GenerateMipMap;this._imageTexture=r.createTexture(),r.bindTexture(r.TEXTURE_2D,this._imageTexture),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,this._image),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,a),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,o),h&&(r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_NEAREST),r.generateMipmap(r.TEXTURE_2D)),r.bindTexture(r.TEXTURE_2D,null),this._isLoaded=!0}changeProperties(t){if(this.isLoaded){t=t||{};const e=this.graphicContext,i=t.WebGL_MinFilter?t.WebGL_MinFilter:e.LINEAR,r=t.WebGL_MagFilter?t.WebGL_MagFilter:e.LINEAR,a=t.WebGL_WrapS?t.WebGL_WrapS:e.CLAMP_TO_EDGE,s=t.WebGL_WrapT?t.WebGL_WrapT:e.CLAMP_TO_EDGE,n=!!t.GenerateMipMap&&t.GenerateMipMap;e.bindTexture(e.TEXTURE_2D,null),e.bindTexture(e.TEXTURE_2D,this._imageTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this._image),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,s),n&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D)),e.bindTexture(e.TEXTURE_2D,null)}}}e.OFImageContent=a},1348:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFMaterialContent=void 0;const r=i(1874),a=i(9486),s=i(19);class n extends r.OFBaseContent{constructor(t){super(t),this._uniforms=[]}initialize(){super.initialize()}load(t){super.load(t)}loadFromJSON(t,e){e&&this.load(e);const i=JSON.parse(t);this._materialName=i.materialName,this._materialTechVersion=i.materialTechVersion,this._shaderName=i.shaderName;for(const t of i.publicProperties){const e=t.shaderUniform,i=t.type;this._uniforms.push({name:e,dataType:i})}}changeProperties(t){s.OFConsole.error(a.OFTranslations.Framework.ContentManagement.MaterialContent.notImplementedException,this.framework.frameworkIdentifier.toString(),t.toString())}}e.OFMaterialContent=n},464:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSoundContent=void 0;const r=i(1874),a=i(19),s=i(9486);class n extends r.OFBaseContent{get audioBuffer(){return this._audioBuffer}get audioBuffer_Error(){return this._audioBufferError}constructor(t){super(t)}initialize(){super.initialize()}load(t){super.load(t)}loadFromArrayBuffer(t,e,i){return e&&super.load(e),this._params=i,this.framework.audioDevice.audioContext.decodeAudioData(t,(t=>this.internal_OnDecodeAudioData(t)),(t=>this.internal_OnErrorDecodeAudioData(t)))}internal_OnDecodeAudioData(t){this._isLoaded=!0,this._audioBuffer=t,this._params&&this._params.setInternal_SoundContent(this)}internal_OnErrorDecodeAudioData(t){this._audioBufferError=t,a.OFConsole.log(s.OFTranslations.Framework.ContentManagement.SoundContent.internal_OnErrorDecodeAudioData,this._framework.frameworkIdentifier.toString(),t.message)}}e.OFSoundContent=n},3587:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioDevice=void 0;const r=i(912),a=i(19),s=i(9486),n=i(6168);e.OFAudioDevice=class{get initialTime(){return this._initialTime}get masterVolume(){return this._masterVolume}get isAudioSupported(){return this._isAudioSupported}get audioContext(){return this._audioContext}get audioDeviceOptimizationManager(){return this._audioDeviceOptimizationManager}constructor(t){this._framework=t,this._isAudioSupported=!1,this._masterVolume=.1}initialize(){try{window.AudioContext=window.AudioContext||window.webAudioContext||window.webkitAudioContext,this._audioContext=new AudioContext,this._initialTime=this._audioContext.currentTime,this._audioDeviceOptimizationManager=new r.OFAudioDeviceOptimizationManager(this),this._audioNodePooler=this._audioDeviceOptimizationManager.audioNodePooler,this._isAudioSupported=!0,a.OFConsole.log(s.OFTranslations.Framework.AudioDevice.initialize,this._framework.frameworkIdentifier.toString())}catch(t){this._isAudioSupported=!1,a.OFConsole.error(s.OFTranslations.Framework.AudioDevice.notSupported,this._framework.frameworkIdentifier.toString())}}requestGainNode(){const t=this._audioNodePooler.getAvailableAudioNode(n.OFEnumAudioNodeType.GainNode);if(t.bufferType===n.OFEnumAudioNodeType.Unsigned){const e=this._audioContext.createGain();t.setWebAudioNode(e,n.OFEnumAudioNodeType.GainNode)}return t}requestStereoPannerNode(){const t=this._audioNodePooler.getAvailableAudioNode(n.OFEnumAudioNodeType.StereoPannerNode);if(t.bufferType===n.OFEnumAudioNodeType.Unsigned&&this._audioContext.createStereoPanner){const e=this._audioContext.createStereoPanner();t.setWebAudioNode(e,n.OFEnumAudioNodeType.StereoPannerNode)}return t}releaseNode(t){t&&(t.webAudioNode.disconnect(),t.deactivate())}update(t){this._audioDeviceOptimizationManager.update(t)}static connectNodes(t,e,...i){const r=i.length;r>1&&e.connect(i[0].webAudioNode);for(let t=0;t+1<r;t++)i[t].webAudioNode.connect(i[t+1].webAudioNode);if(r>2){const e=t.requestGainNode();e.activate(),e.webAudioNode.gain.value=t.masterVolume,i[r-1].webAudioNode.connect(e.webAudioNode),e.webAudioNode.connect(t.audioContext.destination)}}static connectNodesNoMaster(t,e,...i){const r=i.length;r>1&&e.connect(i[0].webAudioNode);for(let t=0;t+1<r;t++)i[t].webAudioNode.connect(i[t+1].webAudioNode);r>1&&i[r-1].webAudioNode.connect(t.audioContext.destination)}}},5431:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeviceCapabilities=void 0;const r=i(9512);class a{get renderEngineType(){return this._renderEngineType}get graphiContext(){return this._graphiContext}constructor(t,e){this._framework=t;const i=this._framework.canvasElement;e||(this._graphiContext=this._framework.canvasContextManager.construcWebGLCanvas(i)),this._graphiContext?this._renderEngineType=r.OFEnumRenderEngineType.WebGL:(this._graphiContext=this._framework.canvasContextManager.constructCanvas(i),this._renderEngineType=r.OFEnumRenderEngineType.CanvasContext2D)}static create(t,e){return new a(t,e)}}e.OFDeviceCapabilities=a},1325:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGraphicDevice=void 0;const r=i(5418),a=i(9248),s=i(7570);e.OFGraphicDevice=class{get currentShaderProgram(){return this._currentShaderProgram}get hasCustomCamera(){return this._hasCustomCamera}get graphicContext(){return this._graphicContext}get canvasElement(){return this._canvasObject.canvasElement}get renderCamera(){return this._renderCamera}get shaderFactory(){return this._shaderFactory}get deviceOptimizationManager(){return this._deviceOptimizationManager}constructor(t){this.framework=t,this._hasCustomCamera=!1,this.clearColor=this.framework.settings.renderClearColor}initialize(t){this._canvasObject=t,this._graphicContext=t.context,this._renderCamera=new r.OFRenderCamera(this.framework),this._renderCamera.initialize(this),this._currentShaderProgram=0,this._shaderFactory=new a.OFShaderFactory(this),this._deviceOptimizationManager=new s.OFDeviceOptimizationManager(this)}invalidateConfiguration(){this._renderCamera.invalidateConfiguration()}resize(t,e,i,r){const a=this._canvasObject.canvasElement;a.setAttribute("width",t.toString()),a.setAttribute("height",e.toString()),this._hasCustomCamera||this._renderCamera.resize(t,e,i,r)}useCustomRenderCamera(t){this._hasCustomCamera=t}useShaderProgram(t){const e=this._graphicContext;this._currentShaderProgram=t,e.useProgram(t)}clear(){const t=this._graphicContext,e=this.clearColor;t.clearColor(e.r,e.g,e.b,e.a),t.clear(t.COLOR_BUFFER_BIT)}update(t){this.clear(),this._renderCamera.update(t),this._deviceOptimizationManager.update(t)}}},7591:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGraphicDeviceManager=void 0;const r=i(1325),a=i(19),s=i(9486);e.OFGraphicDeviceManager=class{get shaderFactories(){const t=[];for(const e of Object.keys(this._graphicDevices)){const i=this._graphicDevices[e].shaderFactory;i&&t.push(i)}return t}constructor(t){this._framework=t,this._graphicDevices={}}initialize(){}createGraphicDevice(t,e){const i=new r.OFGraphicDevice(this._framework);return i.initialize(e),this._graphicDevices[t]=i,a.OFConsole.log(s.OFTranslations.Framework.GraphicDeviceManager.createGraphicDevice,this._framework.frameworkIdentifier.toString(),t),i}loadDefault(){for(const t of Object.keys(this._graphicDevices))this._graphicDevices[t].shaderFactory&&this._graphicDevices[t].shaderFactory.loadDefault()}resize(t,e,i,r){for(const a of Object.keys(this._graphicDevices))this._graphicDevices[a].resize(t,e,i,r)}update(t){for(const e of Object.keys(this._graphicDevices))this._graphicDevices[e].update(t)}}},912:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioDeviceOptimizationManager=void 0;const r=i(5765);e.OFAudioDeviceOptimizationManager=class{get audioNodePooler(){return this._audioNodePooler}constructor(t){this.audioDevice=t,this._audioNodePooler=new r.OFAudioNodePooler(this),this._audioNodePooler.initialize()}update(t){this._audioNodePooler.update(t)}}},8171:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioNodeObject=void 0;const r=i(6168);class a{get id(){return this._objectId}get isAvailable(){return this._isAvailable}constructor(t){this._audioNodePooler=t,this._lifeTime=a.defaultNodeLifeTime,this.bufferType=r.OFEnumAudioNodeType.Unsigned,this.isWaitingForDelete=!1}initialize(t){this._objectId=t,this._isAvailable=!0}setWebAudioNode(t,e){this.bufferType!==r.OFEnumAudioNodeType.Unsigned&&this.bufferType||(this.bufferType=e,this.webAudioNode=t)}activate(){this._isAvailable=!1}deactivate(){this._isAvailable=!0,this._lifeTime=a.defaultNodeLifeTime}update(t){this._isAvailable&&(this._lifeTime-=t.dt,this._lifeTime<=0&&(this.isWaitingForDelete=!0))}destroy(){this.webAudioNode&&this.webAudioNode.disconnect(),this.webAudioNode=null}}e.OFAudioNodeObject=a,a.defaultNodeLifeTime=10},5765:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioNodePooler=void 0;const r=i(8171),a=i(6168);class s{constructor(t){this.audioDeviceOptManagment=t,this._idObjectCounter=0,this._audioNodeRepository=[]}initialize(){this.createAudioNodes(s.OFEnumsInternal.initialAudioNodeCount)}createAudioNodes(t){for(let e=0;e<t;e++){const t=new r.OFAudioNodeObject(this);t.initialize(this._idObjectCounter++),this._audioNodeRepository.push(t)}}getAvailableAudioNode(t){let e;const i=this._audioNodeRepository.length;for(let r=0;r<i;r++){const i=this._audioNodeRepository[r];if(i.isAvailable){const r=i.bufferType;if(r!==a.OFEnumAudioNodeType.Unsigned&&r?r===t&&(e=i):e=i,e)break}}return e||(this.createAudioNodes(s.OFEnumsInternal.resizeAddAudioNodeCount),e=this.getAvailableAudioNode(t)),e}update(t){let e=this._audioNodeRepository.length;for(let i=0;i<e;i++){const r=this._audioNodeRepository[i];r.isWaitingForDelete?(r.destroy(),this._audioNodeRepository.splice(i,1),i--,e--):r.update(t)}}destroy(){}}e.OFAudioNodePooler=s,s.OFEnumsInternal={initialAudioNodeCount:16,resizeAddAudioNodeCount:8}},6168:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumAudioNodeType=void 0,(i=e.OFEnumAudioNodeType||(e.OFEnumAudioNodeType={}))[i.Unsigned=0]="Unsigned",i[i.GainNode=1]="GainNode",i[i.StereoPannerNode=2]="StereoPannerNode"},7570:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeviceOptimizationManager=void 0;const r=i(8238);e.OFDeviceOptimizationManager=class{get vboPooler(){return this._vboPooler}get graphicDevice(){return this._graphicDevice}constructor(t){this._graphicDevice=t,this._vboPooler=new r.OFVBOPooler(this),this._vboPooler.initialize()}update(t){this._vboPooler.update(t)}}},7733:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumVBOObjectType=void 0,(i=e.OFEnumVBOObjectType||(e.OFEnumVBOObjectType={}))[i.Unsigned=0]="Unsigned",i[i.VertexBuffer=1]="VertexBuffer",i[i.IndexBuffer=2]="IndexBuffer"},8287:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVBOObject=void 0;const r=i(7733);class a{get id(){return this._objectId}get isAvailable(){return this._isAvailable}constructor(t){this._vboPooler=t,this._lifeTime=a.defaultNodeLifeTime,this.bufferType=r.OFEnumVBOObjectType.Unsigned,this._GL=t.graphicDeviceOptManager.graphicDevice.graphicContext}initialize(t){this._objectId=t,this._isAvailable=!0,this.vbo=this._GL.createBuffer()}activate(t){this.bufferType!==r.OFEnumVBOObjectType.Unsigned&&this.bufferType||(this.bufferType=t),this._isAvailable=!1}deactivate(){this._isAvailable=!0,this._lifeTime=a.defaultNodeLifeTime}update(t){this._isAvailable&&(this._lifeTime-=t.dt,this._lifeTime<=0&&(this.isWaitingForDelete=!0))}destroy(){this._GL.deleteBuffer(this.vbo)}}e.OFVBOObject=a,a.defaultNodeLifeTime=4.5},8238:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVBOPooler=void 0;const r=i(8287),a=i(7733);class s{get graphicDeviceOptManager(){return this._deviceOptimizationManager}constructor(t){this._deviceOptimizationManager=t,this._framework=t.graphicDevice.framework,this._idObjectCounter=0,this._vboRepository=[]}initialize(){this.createVBOs(s.OFEnumsInternal.initialVBOCount)}createVBOs(t){for(let e=0;e<t;e++){const t=new r.OFVBOObject(this);t.initialize(this._idObjectCounter++),this._vboRepository.push(t)}}getAvailableVBO(t){let e;const i=this._vboRepository.length;for(let r=0;r<i;r++){const i=this._vboRepository[r];if(i.isAvailable){const r=i.bufferType;if(r!==a.OFEnumVBOObjectType.Unsigned&&r?(r===a.OFEnumVBOObjectType.VertexBuffer&&t===a.OFEnumVBOObjectType.VertexBuffer||r===a.OFEnumVBOObjectType.IndexBuffer&&t===a.OFEnumVBOObjectType.IndexBuffer)&&(e=i):e=i,e)break}}return e||(this.createVBOs(s.OFEnumsInternal.resizeAddVBOCount),e=this.getAvailableVBO(t)),e}update(t){if(this._framework.settings.enabledVBOInstancesLife)for(let e=0;e<this._vboRepository.length;e++){const i=this._vboRepository[e];i.isWaitingForDelete?(i.destroy(),this._vboRepository.splice(e,1),e--):i.update(t)}}destroy(){}}e.OFVBOPooler=s,s.OFEnumsInternal={initialVBOCount:16,resizeAddVBOCount:8}},5995:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCanvasContextManager=void 0;const r=i(19),a=i(9486),s=i(4734);e.OFCanvasContextManager=class{constructor(t){this._framework=t,this._canvasContexts=[]}findCanvasObject(t){return this._canvasContexts[t]}createCanvasElement(t,e){const i=s.OFHTMLHelpers.createCanvas(this._framework.settings.message_CanvasHTML5Warning,this._framework.parentDiv,t);i.className="canvas",i.style["z-index"]=null===e?"0":e;const r={id:t,canvasElement:i,context:null};return this._canvasContexts.push(r),r}createCanvasElementAndContext(t,e){const i=s.OFHTMLHelpers.createCanvas(this._framework.settings.message_CanvasHTML5Warning,this._framework.parentDiv,t);i.className="canvas canvas-child",i.style["z-index"]=null===e?"0":e;const r={id:t,canvasElement:i,context:this.construcWebGLCanvas(i)};return this._canvasContexts.push(r),r}construcWebGLCanvas(t,e=!1){let i;const s={alpha:e,preserveDrawingBuffer:!0,desynchronized:!0,powerPreference:"default"};try{i=t.getContext("webgl",s)||t.getContext("experimental-webgl",s)}catch(t){r.OFConsole.error(a.OFTranslations.Framework.CanvasContextManager.issueRenderingContext,t)}return i}constructCanvas(t){return t.getContext(this._framework.settings.canvasContextType)}}},5418:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFRenderCamera=void 0;const r=i(5520),a=i(5516),s=i(887),n=i(3152);class o{get worldMatrix(){return this._worldMatrix}get viewMatrix(){return this._viewMatrix}get projectionMatrix(){return this._projectionMatrix}get transformedMatrix(){return s.mat4.clone(this._transformedMatrix)}get viewport(){return this._viewport}get isChildCamera(){return this._isChildCamera}get width(){return this._width}get height(){return this._height}get zNear(){return this._zNear}get zFar(){return this._zFar}get depth(){return this._depth}set depth(t){this._depth=t,this._worldMatrix=n.OFMath.mat4XVec4(s.mat4.create(),[0,0,this._depth,1])}constructor(t,e=!1){this._framework=t,this._isChildCamera=e,this._viewport=r.OFViewport.empty(),this._depth=o.defaultDepth,this.isFreeAspect=!0,this._transformedMatrix=s.mat4.create(),this._projectionMatrix=s.mat4.create(),this._viewMatrix=s.mat4.create(),this._worldMatrix=s.mat4.create(),s.mat4.lookAt(this._viewMatrix,s.vec3.fromValues(0,0,this._depth),s.vec3.create(),s.vec3.fromValues(0,1,0))}initialize(t){this._graphicDevice=t,this._graphicContext=t.graphicContext;const e=this._framework.appWidth,i=this._framework.appHeight;switch(this.setViewport(0,0,e,i),this._framework.settings.canvasContextType){case a.OFEnumCanvasContextType.D2D:this.createOrthographic(e,i,o.defaultZNear,o.defaultZFar);break;case a.OFEnumCanvasContextType.D3D:this.createPerspective(o.defaultFov,e,i,o.defaultZNear,o.defaultZFar)}}setViewport(t,e,i,r){this._isChildCamera||(this._graphicDevice.canvasElement.width=i,this._graphicDevice.canvasElement.height=r),this._viewport.x=t,this._viewport.y=e,this._viewport.width=i,this._viewport.height=r,this._graphicContext.viewport(t,e,i,r)}createPerspective(t,e,i,r,a){this._width=e,this._height=i,this._zNear=r,this._zFar=a;const n=e/i;s.mat4.perspective(this._projectionMatrix,t,n,r,a)}createOrthographic(t,e,i,r){this._width=t,this._height=e,this._zNear=i,this._zFar=r,s.mat4.ortho(this._projectionMatrix,0,t,e,0,i,r)}resize(t,e,i,r){if(this.isFreeAspect){switch(this._framework.settings.canvasContextType){case a.OFEnumCanvasContextType.D2D:this.createOrthographic(t,e,o.defaultZNear,o.defaultZFar);break;case a.OFEnumCanvasContextType.D3D:this.createPerspective(o.defaultFov,t,e,o.defaultZNear,o.defaultZFar)}this._viewport.width=t,this._viewport.height=e,this._graphicContext.viewport(this._viewport.x,this._viewport.y,this._viewport.width,this._viewport.height)}}invalidateConfiguration(){const t=this._graphicContext;this._graphicContext.viewport(this._viewport.x,this._viewport.y,this._viewport.width,this._viewport.height),t.scissor(this._viewport.x,this._viewport.y,this._viewport.width*this._width,this._viewport.height*this._height)}update(t){s.mat4.multiply(this._transformedMatrix,this._viewMatrix,this._worldMatrix),s.mat4.multiply(this._transformedMatrix,this._projectionMatrix,this._transformedMatrix)}}e.OFRenderCamera=o,o.defaultDepth=10,o.defaultZNear=.01,o.defaultZFar=100,o.defaultFov=45},6313:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAnimation=void 0;const r=i(9736),a=i(3177);class s extends a.OFSprite{get hasAnimationEnded(){return this._hasAnimationEnded}get width(){return this._quadTextCoords.width/this._horizontalTiles}get height(){return this._quadTextCoords.height/this._verticalTiles}get color(){return this._color}set color(t){this._color=t}set imageContent(t){const e=this._graphicContext;if(this._imageContent=t,this._imageHTML=this._imageContent.imageHTML,this._imageGLTexture=this._imageContent.imageTexture,!this._quadTextCoords&&(this._imageRect.width=this._imageHTML.width,this._imageRect.height=this._imageHTML.height,this._quadTextCoords=new r.OFQuadTextCoords(0,0,0,0,this._imageRect.width/this._horizontalTiles*.5,this._imageRect.height/this._verticalTiles*.5),this._vboObject)){const t=this._quadTextCoords.width,i=this._quadTextCoords.height;this._vertices=new Float32Array(20),this._vertices[0]=t,this._vertices[1]=i,this._vertices[2]=0,this._vertices[3]=1,this._vertices[4]=1,this._vertices[5]=-t,this._vertices[6]=i,this._vertices[7]=0,this._vertices[8]=0,this._vertices[9]=1,this._vertices[10]=t,this._vertices[11]=-i,this._vertices[12]=0,this._vertices[13]=1,this._vertices[14]=0,this._vertices[15]=-t,this._vertices[16]=-i,this._vertices[17]=0,this._vertices[18]=0,this._vertices[19]=0,e.bindBuffer(e.ARRAY_BUFFER,this._vboObject.vbo),e.bufferData(e.ARRAY_BUFFER,this._vertices,e.DYNAMIC_DRAW)}}constructor(t=0,e=0,i,r){super(t,e),this._horizontalTiles=i,this._verticalTiles=r,this._currentFrameHorizontal=0,this._currentFrameVertical=0,this._hasAnimationEnded=!1,this._totalFrames=this._horizontalTiles*this._verticalTiles,this.initialize()}setAdvanceAnimationTileConfig(t,e,i,r){this._imageRect.x=t,this._imageRect.y=e,this._imageRect.width=i,this._imageRect.height=r,this._currentFrameHorizontal=0,this._currentFrameVertical=0,this._totalFrames=this._horizontalTiles*this._verticalTiles;const a=this._imageRect.width/this._horizontalTiles*.5,s=this._imageRect.height/this._verticalTiles*.5;this._quadTextCoords.width=this._imageRect.width/this._horizontalTiles,this._quadTextCoords.height=this._imageRect.height/this._verticalTiles,this._vboObject&&(this._vertices[0]=a,this._vertices[1]=s,this._vertices[5]=-a,this._vertices[6]=s,this._vertices[10]=a,this._vertices[11]=-s,this._vertices[15]=-a,this._vertices[16]=-s)}update(t){if(this._hasAnimationEnded=!1,this._imageContent&&this._imageContent.isLoaded){const e=this._graphicContext,i=this._imageRect.width/this._horizontalTiles/this._imageHTML.width,r=this._imageRect.height/this._verticalTiles/this._imageHTML.height,a=this._imageRect.x/this._imageHTML.width+Math.floor(this._currentFrameHorizontal)*i,s=this._imageRect.y/this._imageHTML.height+Math.floor(this._currentFrameVertical)*r;this._quadTextCoords.left=a,this._quadTextCoords.right=a+i,this._quadTextCoords.up=s,this._quadTextCoords.down=s+r,this._spriteBatchInstance?this._spriteBatchInstance.drawGraphic(this):(this._vertices[3]=this._quadTextCoords.right,this._vertices[4]=this._quadTextCoords.down,this._vertices[8]=this._quadTextCoords.left,this._vertices[9]=this._quadTextCoords.down,this._vertices[13]=this._quadTextCoords.right,this._vertices[14]=this._quadTextCoords.up,this._vertices[18]=this._quadTextCoords.left,this._vertices[19]=this._quadTextCoords.up,e.bindBuffer(e.ARRAY_BUFFER,this.vboObject.vbo),e.bufferSubData(e.ARRAY_BUFFER,0,this._vertices),this._shader.color=this._color,this._shader.setTranslate(this.x,this.y,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.draw(t,this._imageGLTexture,this._vboObject.vbo))}this._debugCollisionQuad&&(this._debugCollisionQuad.x=this.x,this._debugCollisionQuad.y=this.y,this._debugCollisionQuad.update(t));const e=this._framework.settings.animationFramerate,i=this._framework.settings.targetFramerate;this._currentFrameHorizontal+=e/i,this._currentFrameHorizontal>=this._horizontalTiles&&(this._currentFrameHorizontal=0,this._currentFrameVertical++,this._currentFrameVertical>=this._verticalTiles&&(this._currentFrameVertical=0,this._hasAnimationEnded=!0))}}e.OFAnimation=s},3344:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveCircle=void 0;const r=i(2213),a=i(7733);class s extends r.OFDrawable2D{get radius(){return this._radius}set radius(t){this._radius=t;const e=2*Math.PI/s.vertexQuality;this._vertices=[],this._vertices.push(0,0,0);for(let t=0;t<this._vertexQuality;t++){const i=Math.cos(e*t)*this._radius*.5,r=Math.sin(e*t)*this._radius*.5;this._vertices.push(i,r,0);const a=this._graphicContext;a.bindBuffer(a.ARRAY_BUFFER,this._vboObject.vbo),a.bufferData(a.ARRAY_BUFFER,new Float32Array(this._vertices),a.STATIC_DRAW),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),a.bufferData(a.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),a.STATIC_DRAW)}}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i,r){super(t,e),this._radius=i,this._color=r,this._vertexQuality=s.vertexQuality,this.initialize()}initialize(){const t=this._graphicContext;this.offsetX=0,this.offsetY=0,this._indices=[],this._drawingCount=0,this._triangleRenderType=t.TRIANGLE_STRIP,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs(),this.radius=this._radius,this.setWireframeVisibility(!1)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}setWireframeVisibility(t){const e=this._graphicContext;if(t){this._drawingCount=2*this._vertexQuality,this._triangleRenderType=e.LINES,this._indices=[];for(let t=1;t<this._vertexQuality;t++)this._indices.push(t,t+1);this._indices.push(this._vertexQuality,1)}else{this._drawingCount=2*this._vertexQuality,this._triangleRenderType=e.TRIANGLE_STRIP,this._indices=[],this._indices.push(0,1,2);for(let t=2;t<this._vertexQuality;t++)this._indices.push(t+1,0);this._indices.push(1,0)}e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW)}hitTest(t){const e=this.x+this.offsetX,i=this.y+this.offsetY,r=t.x+t.offsetX,a=t.y+t.offsetY;return e<r+t.radius&&e+this.radius>r&&i<a+t.radius&&this.radius+i>a}hitTestByPoint(t,e){const i=.5*this.radius,r=.5*this.radius,a=this.x+this.offsetX,s=this.y+this.offsetY;return a-i<t&&a+i>t&&s-r<e&&s+r>e}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._transformation):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}}e.OFPrimitiveCircle=s,s.vertexQuality=64},263:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveGrid=void 0;const r=i(2213),a=i(7733),s=i(887);class n extends r.OFDrawable2D{get width(){return this._width}get height(){return this._height}get tileSizeX(){return this._tileSizeX}get tileSizeY(){return this._tileSizeY}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i){super(t,e),this.offsetX=0,this.offsetY=0,this._width=n.defaultWidth,this._height=n.defaultHeight,this._tileSizeX=n.defaultTileSize,this._tileSizeY=n.defaultTileSize,this._color=i,this._otherTransformation=s.mat4.create(),this.initialize()}initialize(){const t=this._graphicContext;this._triangleRenderType=t.LINES,this._drawingCount=8,this._indices=[0,1,1,3,3,2,2,0],this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs();const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0],t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),this._shader.setColor("uColor",this._color)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}hitTest(t){return!1}hitTestByPoint(t,e){const i=.5*this._width,r=.5*this._height,a=this.x+this.offsetX,s=this.y+this.offsetY;return a-i<t&&a+i>t&&s-r<e&&s+r>e}changeGrid(t,e,i,r){const a=this._graphicContext;this._width=t,this._height=e,this._tileSizeX=i,this._tileSizeY=r,this._vertices=[],this._indices=[];let s=0;const n=this._tileSizeX*this._width,o=this._tileSizeY*this._height;for(let t=0;t<=this._width;t++){const e=t*this._tileSizeX;this._vertices.push(e,0,0),this._vertices.push(e,o,0),this._indices.push(s,s+1),s+=2}for(let t=0;t<=this._height;t++){const e=t*this._tileSizeY;this._vertices.push(0,e,0),this._vertices.push(n,e,0),this._indices.push(s,s+1),s+=2}this._drawingCount=this._indices.length,a.bindBuffer(a.ARRAY_BUFFER,this._vboObject.vbo),a.bufferData(a.ARRAY_BUFFER,new Float32Array(this._vertices),a.STATIC_DRAW),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),a.bufferData(a.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),a.STATIC_DRAW)}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?(s.mat4.fromTranslation(this._otherTransformation,s.vec3.fromValues(this.offsetX,this.offsetY,0)),s.mat4.multiply(this._otherTransformation,this._transformation,this._otherTransformation),this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._otherTransformation)):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}destroy(){this._otherTransformation=null,super.destroy()}}e.OFPrimitiveGrid=n,n.defaultTileSize=32,n.defaultWidth=1,n.defaultHeight=2},4950:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveQuad=void 0;const r=i(2213),a=i(7733),s=i(1446);class n extends r.OFDrawable2D{get width(){return this._width}set width(t){this._width=t;const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0];const r=this._graphicContext;r.bindBuffer(r.ARRAY_BUFFER,this._vboObject.vbo),r.bufferData(r.ARRAY_BUFFER,new Float32Array(this._vertices),r.STATIC_DRAW)}get height(){return this._height}set height(t){this._height=t;const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0];const r=this._graphicContext;r.bindBuffer(r.ARRAY_BUFFER,this._vboObject.vbo),r.bufferData(r.ARRAY_BUFFER,new Float32Array(this._vertices),r.STATIC_DRAW)}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i,r,a){super(t,e),this.offsetX=0,this.offsetY=0,this._width=i,this._height=r,this._color=a,this.initialize()}initialize(){const t=this._graphicContext;this._triangleRenderType=t.TRIANGLE_STRIP,this._drawingCount=4,this._indices=[0,1,2,3],this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs();const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0],t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),this._shader.setColor("uColor",this._color)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}setWireframeVisibility(t){const e=this._graphicContext;t?(this._drawingCount=8,this._triangleRenderType=e.LINES,this._indices=[0,1,1,3,3,2,2,0]):(this._drawingCount=4,this._triangleRenderType=e.TRIANGLE_STRIP,this._indices=[0,1,2,3]),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW)}hitTest(t){return s.OFCollisionHelper.hitTestQuad(this,t)}hitTestByPoint(t,e){return s.OFCollisionHelper.hitTestByPointQuad(this,t,e)}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._transformation):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}}e.OFPrimitiveQuad=n},3177:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSprite=void 0;const r=i(9736),a=i(2213),s=i(1182),n=i(7733),o=i(4950),h=i(1446);class c extends a.OFDrawable2D{get quadTextCoords(){return this._quadTextCoords}get collisionRect(){return this._collisionRect}get debugCollisionQuad(){return this._debugCollisionQuad}get color(){return this._color}set color(t){this._color=t}get width(){return this._imageRect.width}get height(){return this._imageRect.height}get imageContent(){return this._imageContent}set imageContent(t){this._imageContent=t,this._imageHTML=this._imageContent.imageHTML,this._imageGLTexture=this._imageContent.imageTexture,this.updateGLBufferData()}set debugMode(t){this._debugMode=t,this._debugMode&&!this._debugCollisionQuad&&(this._debugCollisionQuad=new o.OFPrimitiveQuad(this._collisionRect.x,this._collisionRect.y,this._collisionRect.width,this._collisionRect.height,s.OFColor.white()))}constructor(t=0,e=0){super(t,e),this.enabledShaderProps=!0,this._imageRect={x:0,y:0,width:0,height:0,offsetX:0,offsetY:0},this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this.initialize()}initialize(){this.createVBOs()}createVBOs(){this.hasSpriteBatch||this._vboObject||(this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(n.OFEnumVBOObjectType.VertexBuffer))}setSpriteBatch(t){super.setSpriteBatch(t),this.createVBOs()}setAdvanceAnimationTileConfig(t,e,i,r){if(this._imageRect.x=t,this._imageRect.y=e,this._imageRect.width=i,this._imageRect.height=r,this._quadTextCoords){const t=.5*this._imageRect.width,e=.5*this._imageRect.height,i=this._imageRect.width/this._imageHTML.width,r=this._imageRect.height/this._imageHTML.height,a=this._imageRect.x/this._imageHTML.width,s=this._imageRect.y/this._imageHTML.height;if(this._quadTextCoords.width=this._imageRect.width,this._quadTextCoords.height=this._imageRect.height,this._quadTextCoords.left=a,this._quadTextCoords.right=a+i,this._quadTextCoords.up=s,this._quadTextCoords.down=s+r,!this.hasSpriteBatch){this._vertices[0]=t,this._vertices[1]=e,this._vertices[5]=-t,this._vertices[6]=e,this._vertices[10]=t,this._vertices[11]=-e,this._vertices[15]=-t,this._vertices[16]=-e,this._vertices[3]=this._quadTextCoords.right,this._vertices[4]=this._quadTextCoords.down,this._vertices[8]=this._quadTextCoords.left,this._vertices[9]=this._quadTextCoords.down,this._vertices[13]=this._quadTextCoords.right,this._vertices[14]=this._quadTextCoords.up,this._vertices[18]=this._quadTextCoords.left,this._vertices[19]=this._quadTextCoords.up;const i=this._graphicContext;i.bindBuffer(i.ARRAY_BUFFER,this._vboObject.vbo),i.bufferData(i.ARRAY_BUFFER,new Float32Array(this._vertices),i.STATIC_DRAW)}}}createCollision(t,e,i,r,a=0,s=0){return this._collisionRect={x:t,y:e,width:i,height:r,offsetX:a,offsetY:s},this._collisionRect}hitTest(t){const e=t;return!(!e.collisionRect||!this.collisionRect)&&h.OFCollisionHelper.hitTestSprite(this,e)}hitTestByPoint(t,e){return h.OFCollisionHelper.hitTestByPointSprite(this,t,e)}updateGLBufferData(){if(this._imageContent.isLoaded&&(this._quadTextCoords=new r.OFQuadTextCoords(0,1,0,1,.5*this._imageHTML.width,.5*this._imageHTML.height),!this.hasSpriteBatch)){this._vertices=[this._quadTextCoords.width,this._quadTextCoords.height,0,this._quadTextCoords.right,this._quadTextCoords.down,-this._quadTextCoords.width,this._quadTextCoords.height,0,this._quadTextCoords.left,this._quadTextCoords.down,this._quadTextCoords.width,-this._quadTextCoords.height,0,this._quadTextCoords.right,this._quadTextCoords.up,-this._quadTextCoords.width,-this._quadTextCoords.height,0,this._quadTextCoords.left,this._quadTextCoords.up];const t=this._graphicContext;t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW)}}update(t){this._imageContent&&this._imageContent.isLoaded&&(this._quadTextCoords||(this.updateGLBufferData(),this.setAdvanceAnimationTileConfig(this._imageRect.x,this._imageRect.y,this._imageRect.width,this._imageRect.height)),this.hasSpriteBatch?this._spriteBatchInstance.drawGraphic(this):(this.enabledShaderProps?(this._shader.setColorByIndex(0,this._color),this._shader.setTextureByIndex(0,this._imageGLTexture)):this._shader.color=this._color,this._transformation?this._shader.draw(t,this._vboObject.vbo,this._transformation):(this._shader.setTranslate(this.x,this.y,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.draw(t,this._imageGLTexture,this._vboObject.vbo)))),this._debugCollisionQuad&&(this._debugCollisionQuad.x=this.x,this._debugCollisionQuad.y=this.y,this._debugCollisionQuad.update(t))}destroy(){this._spriteBatchInstance=null,this._quadTextCoords=null,this._imageContent=null,this._imageHTML=null,this._imageGLTexture=null,this._imageRect=null,this._debugCollisionQuad&&(this._debugCollisionQuad.destroy(),this._debugCollisionQuad=null),super.destroy()}}e.OFSprite=c},6400:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFOptSpriteBatcher=void 0;const r=i(1182),a=i(5694),s=i(7733);e.OFOptSpriteBatcher=class{constructor(){this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this.color=r.OFColor.white(),this._spriteQuadData=[],this._spriteBatchRenderData=[],this._alreadyTransformedForRender=!1}begin(){this._spriteBatchRenderData.length>0&&this._spriteBatchRenderData.forEach((t=>{t.vboObject.deactivate(),t.iboObject.deactivate()})),this._spriteQuadData=[],this._spriteBatchRenderData=[],this._alreadyTransformedForRender=!1}pushSprite(t,e,i,r,a,s,n){const o={x:t,y:e,width:i,height:r,imageContent:s,uv00_x:0,uv00_y:0,uv10_x:0,uv10_y:0,uv11_x:0,uv11_y:0,uv01_x:0,uv01_y:0,sortId:n};a?(o.uv00_x=a.uv00_x,o.uv00_y=a.uv00_y,o.uv10_x=a.uv10_x,o.uv10_y=a.uv10_y,o.uv11_x=a.uv11_x,o.uv11_y=a.uv11_y,o.uv01_x=a.uv01_x,o.uv01_y=a.uv01_y):(o.uv00_x=0,o.uv00_y=0,o.uv10_x=0,o.uv10_y=0,o.uv11_x=0,o.uv11_y=0,o.uv01_x=0,o.uv01_y=0),this._spriteQuadData.push(o)}end(){if(!this._alreadyTransformedForRender){if(this._alreadyTransformedForRender=!0,this._spriteQuadData.length>0){this._spriteQuadData=this._spriteQuadData.sort(((t,e)=>t.sortId.localeCompare(e.sortId)));const t=this._spriteQuadData[0].sortId;let e=[],i=[],r=null,a=0,s=0;this._spriteQuadData.forEach((n=>{t!==n.sortId&&(this.flush(r,e,i,s,a),e=[],i=[],s=0,a=0);const o=n.x,h=n.y,c=n.width,u=n.height;r=n.imageContent,e.push(o+0,h+0,0,n.uv00_x,n.uv00_y,o+c,h+0,0,n.uv10_x,n.uv10_y,o+c,h+u,0,n.uv11_x,n.uv11_y,o+0,h+u,0,n.uv01_x,n.uv01_y),i.push(s+0,s+1,s+2,s+2,s+3,s+0),s+=4,a+=6})),s>0&&a>0&&this.flush(r,e,i,s,a)}this._spriteQuadData=[]}}flush(t,e,i,r,a){const n=this._graphicContext;let o=new Float32Array(e),h=new Uint16Array(i);const c=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(s.OFEnumVBOObjectType.VertexBuffer);c.activate(s.OFEnumVBOObjectType.VertexBuffer);const u=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(s.OFEnumVBOObjectType.IndexBuffer);u.activate(s.OFEnumVBOObjectType.IndexBuffer),n.bindBuffer(n.ARRAY_BUFFER,c.vbo),n.bufferData(n.ARRAY_BUFFER,o,n.DYNAMIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,u.vbo),n.bufferData(n.ELEMENT_ARRAY_BUFFER,h,n.DYNAMIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null),o=null,h=null;const l={};l.vboObject=c,l.iboObject=u,l.vertexCount=r,l.indicesCount=a,l.imageTexture=t.imageTexture,this._spriteBatchRenderData.push(l)}draw(t,e){const i=this._graphicContext;for(const r of this._spriteBatchRenderData)e||(this._shader.setTranslate(0,0,0),this._shader.setRotation(0,0,0),this._shader.setScale(1,1,1)),this._shader.setColorByIndex(0,this.color),this._shader.setTextureByIndex(0,r.imageTexture),this._shader.draw(t,r.vboObject.vbo,e,i.TRIANGLES,r.iboObject.vbo,r.indicesCount)}destroy(){var t;this._framework=null,this._graphicDevice=null,this._graphicContext=null,this.color=null,this._spriteQuadData=null,this._shader=null,null===(t=this._spriteBatchRenderData)||void 0===t||t.forEach((t=>{var e,i;null===(e=t.vboObject)||void 0===e||e.deactivate(),null===(i=t.iboObject)||void 0===i||i.deactivate()})),this._spriteBatchRenderData=null}}},6227:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPolygonBatcher=void 0;const r=i(19),a=i(5694),s=i(9486),n=i(7733),o=i(2608);class h{set imageContent(t){this._imageContent=t}constructor(){this._vertexCount=0,this._indexCount=0,this._imageContent=null,this._vertices=[],this._indices=[],this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER),this._GL=this._graphicDevice.graphicContext,this._vBOObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.VertexBuffer),this._vBOObject.activate(n.OFEnumVBOObjectType.VertexBuffer),this._iBOObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.IndexBuffer),this._iBOObject.activate(n.OFEnumVBOObjectType.IndexBuffer)}changeShader(t){let e=!1;if(t&&t.length>0){const i=this._graphicDevice.shaderFactory.retrieveShader(t);i?(e=!0,this._shader=i):this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER)}e||r.OFConsole.warn(s.OFTranslations.Framework.GraphicsOptimization.PolygonBatcher.changeShader,t)}setShader(t){let e=!1;t&&this._shader&&this._shader.name!==t.name?(e=!0,this._shader=t):t||(this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER)),e||r.OFConsole.warn(s.OFTranslations.Framework.GraphicsOptimization.PolygonBatcher.changeShader,this._shader.name)}beginDraw(){this._vertices=[],this._indices=[],this._vertexCount=0,this._indexCount=0}pushPolygon(t,e){if(!t||!e)return;const i=this._vertexCount/8;for(const t of this._indices)this._indices.push(t+i);this._vertices.push({array:t,count:this._vertexCount}),this._indexCount+=e.length,this._vertexCount+=t.length}endDraw(){if(0!==this._vertexCount){this._arrayBufferGPUVertex&&(this._arrayBufferGPUVertex=null),this._arrayBufferGPUIndex&&(this._arrayBufferGPUIndex=null),this._arrayBufferGPUVertex=new Float32Array(this._vertexCount),this._arrayBufferGPUIndex=new Uint16Array(this._indices);for(let t=0,e=this._vertices.length;t<e;t++){const e=this._vertices[t];this._arrayBufferGPUVertex.set(e.array,e.count)}this._GL.bindBuffer(this._GL.ARRAY_BUFFER,this._vBOObject.vbo),this._GL.bufferData(this._GL.ARRAY_BUFFER,this._arrayBufferGPUVertex,this._GL.DYNAMIC_DRAW),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,this._iBOObject.vbo),this._GL.bufferData(this._GL.ELEMENT_ARRAY_BUFFER,this._arrayBufferGPUIndex,this._GL.STATIC_DRAW),this._GL.bindBuffer(this._GL.ARRAY_BUFFER,null),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,null)}}draw(t,e,i,r){const a=i||this._GL.TRIANGLES;if(e||(this._shader.setTranslate(0,0,0),this._shader.setRotation(0,0,0),this._shader.setScale(1,1,1)),r)for(const t of Object.keys(r)){const e=r[t];switch(e.type){case o.OFEnumShaderDataTypes.IColor:this._shader.setColorByIndex(e.index,e.value);break;case o.OFEnumShaderDataTypes.ITexture:this._shader.setTextureByIndex(e.index,e.value)}}this._imageContent&&this._shader.setTextureByIndex(0,this._imageContent.imageTexture),this._shader.draw(t,this._vBOObject.vbo,e,a,this._iBOObject.vbo,this._indexCount),this._GL.bindBuffer(this._GL.ARRAY_BUFFER,null),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,null)}destroy(){this._GL=null,this._graphicDevice=null,this._imageContent=null,this._arrayBufferGPUVertex=null,this._arrayBufferGPUIndex=null,this._vertices=null,this._indices=null,this._shader=null,this._vBOObject&&this._vBOObject.deactivate(),this._iBOObject&&this._iBOObject.deactivate(),this._vBOObject=null,this._iBOObject=null}}e.OFPolygonBatcher=h,h.MAX_VERTICES=10920,h.CURRENT_DEFAULT_SHADER="SpineShaderTexture"},4840:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSpriteBatcher=void 0;const r=i(5694),a=i(7733);class s{constructor(t,e){this.index=t,this._graphicDevice=e,this.initialize()}initialize(){this.enabled=!1,this.isWaitingForDelete=!1,this.vertexCount=0,this.indexCount=0,this.vertices=[],this.indices=[],this.vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this.vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this.iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this.iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}reset(){this.enabled=!1,this.vertexCount=0,this.indexCount=0,this.vertices=[],this.indices=[]}destroy(){var t,e;this.isWaitingForDelete=!0,null===(t=this.vboObject)||void 0===t||t.deactivate(),null===(e=this.iboObject)||void 0===e||e.deactivate(),this.vboObject=null,this.iboObject=null,this.vertices=null,this.indices=null}}class n{get totalQuads(){let t=0;return this._batchGroups.forEach((e=>t+=e.vertexCount/4)),t}get totalDrawCalls(){return this._batchGroups.filter((t=>t.enabled)).length}constructor(t){this._graphicDevice=r.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this._imageContent=this._framework.contentManager.getContent(t),this._imageGLTexture=this._imageContent.imageTexture,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this._batchGroups=[new s(0,this._graphicDevice)]}beginDraw(){this._batchGroups.forEach((t=>t.reset())),0===this._batchGroups.length&&(this._batchGroups=[new s(0,this._graphicDevice)]),this._currentBatchGroup=this._batchGroups[0]}drawGraphic(t){const e=t.quadTextCoords,i=t.x,r=t.y,a=e.width/2*t.scaleX,o=e.height/2*t.scaleY;if(0!==t.rotation){const s=Math.cos(t.rotation),n=Math.sin(t.rotation);let h=i+a,c=i-a,u=i+a,l=i-a,d=r+o,_=r+o,m=r-o,p=r-o;const f=.25*(h+c+u+l),g=.25*(d+_+m+p);h-=f,c-=f,u-=f,l-=f,d-=g,_-=g,m-=g,p-=g;let v=h,b=c,F=u,y=l;h=s*v-n*d,d=n*v+s*d,c=s*b-n*_,_=n*b+s*_,u=s*F-n*m,m=n*F+s*m,l=s*y-n*p,p=n*y+s*p,h+=f,c+=f,u+=f,l+=f,d+=g,_+=g,m+=g,p+=g,this._currentBatchGroup.vertices.push(h,d,0,e.right,e.down,c,_,0,e.left,e.down,u,m,0,e.right,e.up,l,p,0,e.left,e.up)}else this._currentBatchGroup.vertices.push(i+a,r+o,0,e.right,e.down,i-a,r+o,0,e.left,e.down,i+a,r-o,0,e.right,e.up,i-a,r-o,0,e.left,e.up);0!==this._currentBatchGroup.vertexCount?this._currentBatchGroup.indices.push(this._currentBatchGroup.vertexCount-1,this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount+1,this._currentBatchGroup.vertexCount+2,this._currentBatchGroup.vertexCount+3):this._currentBatchGroup.indices.push(this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount+1,this._currentBatchGroup.vertexCount+2,this._currentBatchGroup.vertexCount+3),this._currentBatchGroup.vertexCount+=4,this._currentBatchGroup.indexCount=this._currentBatchGroup.indices.length,this._currentBatchGroup.vertexCount>=n.MAX_VERTICES&&(this._currentBatchGroup.index>=this._batchGroups.length-1&&this._batchGroups.push(new s(this._batchGroups.length,this._graphicDevice)),this._currentBatchGroup=this._batchGroups[this._currentBatchGroup.index+1])}endDraw(){const t=this._graphicContext;this._batchGroups.forEach((e=>{0!==e.vertexCount?(e.enabled=!0,t.bindBuffer(t.ARRAY_BUFFER,e.vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e.vertices),t.DYNAMIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(e.indices),t.STATIC_DRAW)):e.destroy()})),this._batchGroups=this._batchGroups.filter((t=>!t.isWaitingForDelete))}update(t){this._imageContent.isLoaded&&this._batchGroups.forEach((e=>{if(e.enabled){const i=this._shader;i.setTranslate(0,0,0),i.rotationZ=0,i.setScale(1,1,1),i.drawElements(t,this._imageGLTexture,e.iboObject.vbo,e.vboObject.vbo,e.indexCount)}}))}destroy(){this._batchGroups.forEach((t=>t.destroy())),this._batchGroups=null}}e.OFSpriteBatcher=n,n.MAX_VERTICES=20920},1851:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFQuadStruct=void 0;const r=i(28);class a{static createAsVertexPositionColorTexture(){const t=new a;return t.created=!1,t.initX=0,t.initY=0,t.VPTTopLeft=new r.OFVertexPositionColorTexture,t.VPTTopRight=new r.OFVertexPositionColorTexture,t.VPTBottomLeft=new r.OFVertexPositionColorTexture,t.VPTBottomRight=new r.OFVertexPositionColorTexture,t}}e.OFQuadStruct=a},9736:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFQuadTextCoords=void 0,e.OFQuadTextCoords=class{constructor(t,e,i,r,a,s){this.left=t,this.right=e,this.up=i,this.down=r,this.width=a,this.height=s}}},28:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVertexPositionColorTexture=void 0,e.OFVertexPositionColorTexture=class{}},1182:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFColor=void 0;class i{constructor(t,e,i,r){this.r=t,this.g=e,this.b=i,this.a=r}static fromString(t){const e=t.split(","),r=i.white();return r.r=parseFloat(e[0]),r.g=parseFloat(e[1]),r.b=parseFloat(e[2]),r.a=parseFloat(e[3]),r}static fromObject(t){return{r:parseInt(String(t.r),10),g:parseInt(String(t.g),10),b:parseInt(String(t.b),10),a:parseInt(String(t.a),10)}}static fromNormalized(t){return new i(Math.round(255*t.r),Math.round(255*t.g),Math.round(255*t.b),Math.round(255*t.a))}static convertToStringFromNormalized(t){return`${Math.round(255*t.r).toString()},${Math.round(255*t.g).toString()},${Math.round(255*t.b).toString()},${Math.round(255*t.a).toString()}`}static black(){return new i(0,0,0,1)}static white(){return new i(1,1,1,1)}static red(){return new i(1,0,0,1)}static green(){return new i(0,1,0,1)}static blue(){return new i(0,0,1,1)}}e.OFColor=i},2213:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDrawable2D=void 0;const r=i(1182),a=i(5694);e.OFDrawable2D=class{get vboObject(){return this._vboObject}get iboObject(){return this._iboObject}get hasSpriteBatch(){return!!this._spriteBatchInstance}get alpha(){return this._color.a}set alpha(t){this._color.a=t}get debugMode(){return this._debugMode}set debugMode(t){this._debugMode=t}constructor(t,e,i){this.x=t,this.y=e,this.z=0,this.scaleX=1,this.scaleY=1,this.rotation=0,this._debugMode=!1,this._color=r.OFColor.white(),this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this.setSpriteBatch(i)}setSpriteBatch(t){this._spriteBatchInstance=t,this._spriteBatchInstance&&(this._vboObject&&this._vboObject.deactivate(),this._iboObject&&this._iboObject.deactivate(),this._vboObject=null,this._iboObject=null)}setShader(t){this._shader=t}setTransformationMatrix(t){this._transformation=t}destroy(){this._vboObject&&this._vboObject.deactivate(),this._iboObject&&this._iboObject.deactivate(),this._vboObject=null,this._iboObject=null,this._vertices=null,this._indices=null,this._transformation=null,this._shader=null,this._color=null}}},7582:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseShader=void 0;const r=i(887),a=i(4500);e.OFBaseShader=class{get name(){return this._name}set name(t){a.STUtils.isNullOrEmpty(this._name)&&(this._name=t)}set x(t){this._x!==t&&(this._x=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set y(t){this._y!==t&&(this._y=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set z(t){this._z!==t&&(this._z=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set rotationZ(t){this._rotationZ!==t&&(this._rotationZ=t,r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}get graphicContext(){return this._shaderFactory.graphicDevice.graphicContext}constructor(t,e,i=!1){this._shaderFactory=t,this.isShaderAbstract=i,this._graphicDevice=t.graphicDevice,this._renderCamera=this._graphicDevice.renderCamera,this._shaderProgram=t.instanceShader(e),this._graphicContext=this._shaderFactory.graphicDevice.graphicContext,this._world=r.mat4.create(),this._rotation=r.mat4.create(),this._name="",this._x=this._y=this._z=0,this._scaleX=this._scaleY=this._scaleZ=1,this._rotationX=this._rotationY=this._rotationZ=0,this.getShaderLocations(this._graphicContext)}setTranslate(t,e,i){this._x=t,this._y=e,this._z=i,this._world[12]=t,this._world[13]=e,this._world[14]=i}setRotation(t,e,i){this._rotationX=t,this._rotationY=e,this._rotationZ=i;const a=r.mat4.fromXRotation(r.mat4.create(),this._rotationX),s=r.mat4.fromYRotation(r.mat4.create(),this._rotationY),n=r.mat4.fromZRotation(r.mat4.create(),this._rotationZ);r.mat4.multiply(this._rotation,this._rotation,a),r.mat4.multiply(this._rotation,this._rotation,s),r.mat4.multiply(this._rotation,this._rotation,n),r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z}setScale(t,e,i){this._scaleX=t,this._scaleY=e,this._scaleZ=i,r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z}setTexture(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.activeTexture(r[`TEXTURE${i}`]),r.bindTexture(r.TEXTURE_2D,e),r.uniform1i(a,0)}setColor(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this.getOrCreateUniformLocation(t);i.uniform4f(r,e.r,e.g,e.b,e.a)}getOrCreateUniformLocation(t){if(!this[t]){const e=this._graphicContext;this[t]=e.getUniformLocation(this._shaderProgram,t)}return this[t]}setVector4Float(t,e,i,r,a){const s=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const n=this[t];s.uniform4f(n,e,i,r,a)}setVector3Float(t,e,i,r){const a=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const s=this[t];a.uniform3f(s,e,i,r)}setVector2Float(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.uniform2f(a,e,i)}setVector1Float(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[t];i.uniform1f(r,e)}setVector1Int(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[t];i.uniform1i(r,e)}setVector2Int(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.uniform2i(a,e,i)}setVector3Int(t,e,i,r){const a=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const s=this[t];a.uniform3i(s,e,i,r)}setVector4Int(t,e,i,r,a){const s=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const n=this[t];s.uniform4i(n,e,i,r,a)}setTextureByIndex(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[this[`mTextureUniform${t}`]];i.activeTexture(i[`TEXTURE${t}`]),i.bindTexture(i.TEXTURE_2D,e),i.uniform1i(r,t)}setColorByIndex(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[this[`mColorUniform${t}`]];i.uniform4f(r,e.r,e.g,e.b,e.a)}}},5391:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderAbstract=void 0;const r=i(7582),a=i(887),s=i(2608);class n extends r.OFBaseShader{constructor(t,e,i){super(t,e,!0),this._shaderFactory=t,this._attributeInterleavedDataSize=0,this._colorPropIndexCount=0,this._texturePropIndexCount=0,this._shaderCodeInfo=i,this.updateShader(e,i)}getShaderLocations(t){}updateShader(t,e){const i=this.graphicContext;if(this._shaderCodeInfo){this._attributeInterleavedDataSize=0,this._colorPropIndexCount=0,this._texturePropIndexCount=0;for(let t=0;t<this._shaderCodeInfo.attributeCount;t++)delete this[this._shaderCodeInfo.attributes[t].inputName];let t=0,e=0;for(let i=0;i<this._shaderCodeInfo.uniformCount;i++){const r=this._shaderCodeInfo.uniforms[i];switch(delete this[r.inputName],r.inputVariableType){case s.OFEnumShaderDataTypes.IColor:delete this[`mColorUniform${t}`],t++;break;case s.OFEnumShaderDataTypes.ITexture:delete this[`mTextureUniform${e}`],e++}}}this._shaderCodeInfo=e,this._shaderProgram=this._shaderFactory.instanceShader(t);for(let t=0;t<this._shaderCodeInfo.attributeCount;t++){const e=this._shaderCodeInfo.attributes[t];switch(this[e.inputName]=i.getAttribLocation(this._shaderProgram,e.inputName),e.inputVariableType){case s.OFEnumShaderDataTypes.Float:this._attributeInterleavedDataSize+=4;break;case s.OFEnumShaderDataTypes.Vector2:this._attributeInterleavedDataSize+=8;break;case s.OFEnumShaderDataTypes.Vector3:this._attributeInterleavedDataSize+=12;break;case s.OFEnumShaderDataTypes.Vector4:this._attributeInterleavedDataSize+=16}}this.precomputeUniformsLocation()}precomputeUniformsLocation(){const t=this._graphicContext;for(let e=0;e<this._shaderCodeInfo.uniformCount;e++){const i=this._shaderCodeInfo.uniforms[e],r=i.inputName;switch(this[r]=t.getUniformLocation(this._shaderProgram,r),i.inputVariableType){case s.OFEnumShaderDataTypes.IColor:this[`mColorUniform${this._colorPropIndexCount}`]=r,this._colorPropIndexCount++;break;case s.OFEnumShaderDataTypes.ITexture:this[`mTextureUniform${this._texturePropIndexCount}`]=r,this._texturePropIndexCount++}}}draw(t,e,i=null,r,n,o){const h=this._graphicContext,c=t.hasCustomCamera?t.cameraMVP:this._renderCamera.transformedMatrix;if(c&&this._shaderProgram){h.enable(h.BLEND),h.blendFunc(h.SRC_ALPHA,h.ONE_MINUS_SRC_ALPHA),this._graphicDevice.useShaderProgram(this._shaderProgram);for(let t=0;t<this._shaderCodeInfo.uniformCount;t++){const e=this._shaderCodeInfo.uniforms[t];if(e.inputVariableType===s.OFEnumShaderDataTypes.ICamera){const t=this[e.inputName];i?a.mat4.multiply(c,c,i):a.mat4.multiply(c,c,this._world),h.uniformMatrix4fv(t,!1,c)}}h.bindBuffer(h.ARRAY_BUFFER,e);let t=0;for(let e=0;e<this._shaderCodeInfo.attributeCount;e++){const i=this._shaderCodeInfo.attributes[e],r=this[i.inputName];switch(h.enableVertexAttribArray(r),i.inputVariableType){case s.OFEnumShaderDataTypes.Float:h.vertexAttribPointer(r,1,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=4;break;case s.OFEnumShaderDataTypes.Vector2:h.vertexAttribPointer(r,2,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=8;break;case s.OFEnumShaderDataTypes.Vector3:h.vertexAttribPointer(r,3,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=12;break;case s.OFEnumShaderDataTypes.Vector4:h.vertexAttribPointer(r,4,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=16}}r=r||h.TRIANGLE_STRIP,n?(h.bindBuffer(h.ELEMENT_ARRAY_BUFFER,n),h.drawElements(r,o,h.UNSIGNED_SHORT,0)):h.drawArrays(r,0,4)}}}e.OFShaderAbstract=n},9248:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderFactory=void 0;const r=i(7873),a=i(3689),s=i(5391),n=i(9486),o=i(19),h=i(6618),c=i(2027),u=i(2080);e.OFShaderFactory=class{get framework(){return this._framework}constructor(t){this.graphicDevice=t,this._framework=t.framework,this._shaderRepository={}}retrieveShader(t){let e;if(this._shaderRepository.hasOwnProperty(t))e=this._shaderRepository[t];else for(const i of Object.keys(this._shaderRepository))if(this._shaderRepository[i].name===t){e=this._shaderRepository[i];break}return e}loadDefault(){this.addShader("ShaderPrimitive",new a.OFShaderPrimitive(this,c.OFDefaultShaderSources.SourcesShaderPrimitive)),this.addShader("ShaderTexture",new r.OFShaderTexture(this,c.OFDefaultShaderSources.SourcesShaderTexture))}loadAndAddShaderWithCodeInfo(t,e,i=null,r){return i||(i=u.OFShaderAnalizer.analize(e.vertex),i=u.OFShaderAnalizer.analize(e.fragment,i)),this._shaderRepository[r]=new s.OFShaderAbstract(this,e,i),this._shaderRepository[r].name=t,o.OFConsole.log(n.OFTranslations.Framework.ShaderFactory.loadAndAddShaderWithCodeInfo,this._framework.frameworkIdentifier.toString(),t),this._shaderRepository[r]}addShader(t,e){this._shaderRepository[t]=e,this._shaderRepository[t].name=t,o.OFConsole.log(n.OFTranslations.Framework.ShaderFactory.addShader,this._framework.frameworkIdentifier.toString(),t)}instanceShader(t){const e=this.graphicDevice.graphicContext,i=u.OFShaderAnalizer.sanitize(t.vertex),r=u.OFShaderAnalizer.sanitize(t.fragment),a=h.OFGLHelper.compileShader(e,i,e.VERTEX_SHADER),s=h.OFGLHelper.compileShader(e,r,e.FRAGMENT_SHADER);return h.OFGLHelper.createProgram(e,a,s)}}},3689:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderPrimitive=void 0;const r=i(7582),a=i(1182),s=i(887);class n extends r.OFBaseShader{constructor(t,e){super(t,e),this._shaderFactory=t,this.color=a.OFColor.white()}getShaderLocations(t){this._vertexPositionAttr=t.getAttribLocation(this._shaderProgram,"aVertexPosition"),this._uniformWVPMatrix=t.getUniformLocation(this._shaderProgram,"uWVPMatrix"),this._uniformColor=t.getUniformLocation(this._shaderProgram,"uColor")}draw(t,e,i,r,a,n=null){const o=this._graphicContext;o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA),o.useProgram(this._shaderProgram),o.bindBuffer(o.ARRAY_BUFFER,e),o.enableVertexAttribArray(this._vertexPositionAttr),o.vertexAttribPointer(this._vertexPositionAttr,3,o.FLOAT,!1,0,0);const h=this._renderCamera.transformedMatrix;n?s.mat4.multiply(h,h,n):s.mat4.multiply(h,h,this._world),o.uniformMatrix4fv(this._uniformWVPMatrix,!1,h),o.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),r=r||o.TRIANGLE_STRIP,i?(o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,i),o.drawElements(r,a,o.UNSIGNED_SHORT,0)):o.drawArrays(r,0,a)}}e.OFShaderPrimitive=n},7873:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderTexture=void 0;const r=i(7582),a=i(1182),s=i(887);class n extends r.OFBaseShader{constructor(t,e){super(t,e),this._shaderFactory=t,this.color=a.OFColor.white()}getShaderLocations(t){this._vertexPositionAttr=t.getAttribLocation(this._shaderProgram,"aVertexPosition"),this._textureCoordPositionAttr=t.getAttribLocation(this._shaderProgram,"aTextureCoord"),this._samplerPositionUniform=t.getUniformLocation(this._shaderProgram,"uSamplerTexture"),this._uniformWVPMatrix=t.getUniformLocation(this._shaderProgram,"uWVPMatrix"),this._uniformColor=t.getUniformLocation(this._shaderProgram,"uColor")}draw(t,e,i,r){const a=this._graphicContext;a.enable(a.BLEND),a.blendFunc(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA),a.useProgram(this._shaderProgram),a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,e),a.uniform1i(this._samplerPositionUniform,0),a.bindBuffer(a.ARRAY_BUFFER,i),a.enableVertexAttribArray(this._vertexPositionAttr),a.enableVertexAttribArray(this._textureCoordPositionAttr),a.vertexAttribPointer(this._vertexPositionAttr,3,a.FLOAT,!1,20,0),a.vertexAttribPointer(this._textureCoordPositionAttr,2,a.FLOAT,!1,20,12);const n=this._renderCamera.transformedMatrix;r?s.mat4.multiply(n,n,r):s.mat4.multiply(n,n,this._world),a.uniformMatrix4fv(this._uniformWVPMatrix,!1,n),a.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),a.drawArrays(a.TRIANGLE_STRIP,0,4)}drawElements(t,e,i,r,a){const n=this._graphicContext;n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),n.useProgram(this._shaderProgram),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_2D,e),n.uniform1i(this._samplerPositionUniform,0),n.bindBuffer(n.ARRAY_BUFFER,r),n.enableVertexAttribArray(this._vertexPositionAttr),n.enableVertexAttribArray(this._textureCoordPositionAttr),n.vertexAttribPointer(this._vertexPositionAttr,3,n.FLOAT,!1,20,0),n.vertexAttribPointer(this._textureCoordPositionAttr,2,n.FLOAT,!1,20,12);const o=this._renderCamera.transformedMatrix;s.mat4.multiply(o,o,this._world),n.uniformMatrix4fv(this._uniformWVPMatrix,!1,o),n.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,i),n.drawElements(n.TRIANGLE_STRIP,a,n.UNSIGNED_SHORT,0),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)}}e.OFShaderTexture=n},9151:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat2=void 0,e.SMat2=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m10,this._array[3]=this.m11,this._array}constructor(t,e,i,r){this.m00=t,this.m01=e,this.m10=i,this.m11=r,this._array=[t,e,i,r]}}},8454:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat3=void 0,e.SMat3=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m02,this._array[3]=this.m10,this._array[4]=this.m11,this._array[5]=this.m12,this._array[6]=this.m20,this._array[7]=this.m21,this._array[8]=this.m22,this._array}constructor(t,e,i,r,a,s,n,o,h){this.m00=t,this.m01=e,this.m02=i,this.m10=r,this.m11=a,this.m12=s,this.m20=n,this.m21=o,this.m22=h,this._array=[t,e,i,r,a,s,n,o,h]}}},7876:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat4=void 0,e.SMat4=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m02,this._array[3]=this.m03,this._array[4]=this.m10,this._array[5]=this.m11,this._array[6]=this.m12,this._array[7]=this.m13,this._array[8]=this.m20,this._array[9]=this.m21,this._array[10]=this.m22,this._array[11]=this.m23,this._array[12]=this.m30,this._array[13]=this.m31,this._array[14]=this.m32,this._array[15]=this.m33,this._array}constructor(t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p){this.m00=t,this.m01=e,this.m02=i,this.m03=r,this.m10=a,this.m11=s,this.m12=n,this.m13=o,this.m20=h,this.m21=c,this.m22=u,this.m23=l,this.m30=d,this.m31=_,this.m32=m,this.m33=p,this._array=[t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p]}}},258:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec2=void 0,e.SVec2=class{constructor(t,e){this.x=t,this.y=e}}},1440:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec3=void 0,e.SVec3=class{constructor(t,e,i){this.x=t,this.y=e,this.z=i}}},8620:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec4=void 0,e.SVec4=class{constructor(t,e,i,r){this.x=t,this.y=e,this.z=i,this.w=r}}},5520:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFViewport=void 0;class i{constructor(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}static empty(){return new i(0,0,0,0)}}e.OFViewport=i},2027:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDefaultShaderSources=e.IOFDefaultShaderSource=void 0,e.IOFDefaultShaderSource=class{};class i{}e.OFDefaultShaderSources=i,i.SourcesShaderPrimitive={vertex:"attribute vec3 aVertexPosition;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying mediump vec4 varyingColor;\n\nvoid main(void) {\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 1.0);\n}",fragment:"uniform lowp vec4 uColor : Color;\n\nvoid main(void) {\n    gl_FragColor = uColor;\n}"},i.SourcesShaderTexture={vertex:"attribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 1.0);\n}",fragment:"varying highp vec2 varyingTextureCoord;\n\nuniform lowp vec4 uColor : Color;\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * uColor;\n}"},i.SourcesSpineShaderTexture={vertex:"attribute vec2 aVertexPosition;\nattribute vec4 aVertexColor;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingVertexColor = aVertexColor;\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}",fragment:"varying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * varyingVertexColor;\n}"},i.SourcesTextShaderTexture={vertex:"attribute vec2 aVertexPosition;\nattribute vec4 aVertexColor;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingVertexColor = aVertexColor;\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}",fragment:"varying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nuniform lowp vec4 uTintColor : Color;\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * varyingVertexColor * uTintColor;\n}"}},5516:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumCanvasContextType=void 0,(i=e.OFEnumCanvasContextType||(e.OFEnumCanvasContextType={})).D2D="2d",i.D3D="3d"},961:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumKeyCode=void 0,(i=e.OFEnumKeyCode||(e.OFEnumKeyCode={}))[i.None=-1]="None",i[i.Backspace=8]="Backspace",i[i.JumpLine=10]="JumpLine",i[i.Enter=13]="Enter",i[i.Shift=16]="Shift",i[i.Control=17]="Control",i[i.Escape=27]="Escape",i[i.Space=32]="Space",i[i.QuotationMark=34]="QuotationMark",i[i.Left=37]="Left",i[i.Up=38]="Up",i[i.Right=39]="Right",i[i.Down=40]="Down",i[i.Num_0=96]="Num_0",i[i.Num_1=97]="Num_1",i[i.Num_2=98]="Num_2",i[i.Num_3=99]="Num_3",i[i.Num_4=100]="Num_4",i[i.Num_5=101]="Num_5",i[i.Num_6=102]="Num_6",i[i.Num_7=103]="Num_7",i[i.Num_8=104]="Num_8",i[i.Num_9=105]="Num_9",i[i.EqualsSign=61]="EqualsSign",i[i.A=65]="A",i[i.B=66]="B",i[i.C=67]="C",i[i.D=68]="D",i[i.E=69]="E",i[i.F=70]="F",i[i.G=71]="G",i[i.H=72]="H",i[i.I=73]="I",i[i.J=74]="J",i[i.K=75]="K",i[i.L=76]="L",i[i.M=77]="M",i[i.N=78]="N",i[i.O=79]="O",i[i.P=80]="P",i[i.Q=81]="Q",i[i.R=82]="R",i[i.S=83]="S",i[i.T=84]="T",i[i.U=85]="U",i[i.V=86]="V",i[i.W=87]="W",i[i.X=88]="X",i[i.Y=89]="Y",i[i.Z=90]="Z",i[i.F1=112]="F1",i[i.F2=113]="F2",i[i.F3=114]="F3",i[i.F4=115]="F4",i[i.F5=116]="F5",i[i.F6=117]="F6",i[i.F7=118]="F7",i[i.F8=119]="F8",i[i.F9=120]="F9",i[i.F10=121]="F10",i[i.F11=122]="F11",i[i.F12=123]="F12",i[i.Backslash=92]="Backslash",i[i.Nothing=160]="Nothing"},9512:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumRenderEngineType=void 0,(i=e.OFEnumRenderEngineType||(e.OFEnumRenderEngineType={}))[i.CanvasContext2D=0]="CanvasContext2D",i[i.WebGL=1]="WebGL"},7924:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumTextAlign=void 0,(i=e.OFEnumTextAlign||(e.OFEnumTextAlign={}))[i.Left=1]="Left",i[i.Right=2]="Right",i[i.Center=3]="Center"},1446:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCollisionHelper=void 0,e.OFCollisionHelper=class{static hitTestSprite(t,e){const i=t.x+t.collisionRect.offsetX,r=t.y+t.collisionRect.offsetY,a=e.x+e.collisionRect.offsetX,s=e.y+e.collisionRect.offsetY;return i<a+e.collisionRect.width&&i+t.collisionRect.width>a&&r<s+e.collisionRect.height&&t.collisionRect.height+r>s}static hitTestQuad(t,e){const i=t.x+t.offsetX,r=t.y+t.offsetY,a=e.x+e.offsetX,s=e.y+e.offsetY;return i<a+e.width&&i+t.width>a&&r<s+e.height&&t.height+r>s}static hitTestByPointQuad(t,e,i){const r=.5*t.width,a=.5*t.height,s=t.x+t.offsetX,n=t.y+t.offsetY;return s-r<e&&s+r>e&&n-a<i&&n+a>i}static hitTestByPointSprite(t,e,i){const r=.5*t.width,a=.5*t.height,s=t.x,n=t.y;return s-r<e&&s+r>e&&n-a<i&&n+a>i}}},19:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFConsole=void 0;const r=i(4500);e.OFConsole=class{static info(t,e,...i){console.info(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static log(t,e,...i){console.log(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static warn(t,e,...i){console.warn(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static error(t,e,...i){console.error(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static throwError(t,e,...i){throw Error(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}}},6618:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGLHelper=void 0;const r=i(19),a=i(9486);e.OFGLHelper=class{static compileShader(t,e,i){const s=t;let n;switch(i){case s.VERTEX_SHADER:n=s.createShader(s.VERTEX_SHADER);break;case s.FRAGMENT_SHADER:n=s.createShader(s.FRAGMENT_SHADER)}return s.shaderSource(n,e),s.compileShader(n),s.getShaderParameter(n,s.COMPILE_STATUS)?n:(r.OFConsole.log(a.OFTranslations.Framework.GLHelper.compileShader,s.getShaderInfoLog(n)),null)}static compileShaderWithResults(t,e,i){const r=t;let a,s=null;switch(i){case r.VERTEX_SHADER:a=r.createShader(r.VERTEX_SHADER);break;case r.FRAGMENT_SHADER:a=r.createShader(r.FRAGMENT_SHADER)}return r.shaderSource(a,e),r.compileShader(a),r.getShaderParameter(a,r.COMPILE_STATUS)||(s=r.getShaderInfoLog(a)),{shader:a,hasErrors:null!==s,errorMessage:s}}static createProgram(t,e,i){const s=t,n=s.createProgram();return s.attachShader(n,e),s.attachShader(n,i),s.linkProgram(n),s.getProgramParameter(n,s.LINK_STATUS)||r.OFConsole.log(a.OFTranslations.Framework.GLHelper.createProgram,s.getProgramInfoLog(n)),n}static createProgramWithResults(t,e,i){const r=t,a=r.createProgram();let s=null;return r.attachShader(a,e),r.attachShader(a,i),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS)||(s=r.getProgramInfoLog(a)),{shaderProgram:a,hasErrors:null!==s,errorMessage:s}}}},4734:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFHTMLHelpers=void 0;class i{static createCanvas(t,e,i){const r=document.createTextNode(t),a=document.createElement("canvas");return a.id=i,a.appendChild(r),e.appendChild(a),a}static getPositionOffset(t){let e=0,i=0;for(;t&&!isNaN(t.offsetLeft)&&!isNaN(t.offsetTop);)e+=t.offsetLeft-t.scrollLeft,i+=t.offsetTop-t.scrollTop,t=t.offsetParent;return{x:e,y:i}}static on(t,e,i){if("string"==typeof t){const r=document.getElementsByClassName(t);for(let t=0;t<r.length;t++){const a=r.item(t);a.attachEvent?a.attachEvent("on"+e,i):a.addEventListener&&a.addEventListener(e,i,!0)}}else t.attachEvent?t.attachEvent("on"+e,i):t.addEventListener&&t.addEventListener(e,i,!0)}static off(t,e,i){if("string"==typeof t){const r=document.getElementsByClassName(t);for(let t=0;t<r.length;t++){const a=r.item(t);a["detachEvent "]?a["detachEvent "]("on"+e):a.removeEventListener&&a.removeEventListener(e,i,!0)}}else t.detachEvent?t.detachEvent("on"+e,i):t.removeEventListener&&t.removeEventListener(e,i,!0)}static addClass(t,e){const i=document.getElementsByClassName(t);for(let t=0;t<i.length;t++){const r=i.item(t);r&&(r.className+=r.className?" "+e:e)}}static searchWebElementWithId(t,e){let i=t;for(;i&&(!i.id||i.id&&-1===i.id.indexOf(e));)i=i.parentElement;return i}static searchWebElementWithClass(t,e){let r=t;for(;r&&(!e||!i.webElementHasClass(r,e));)r=r.parentElement;return r}static webElementHasClass(t,e){const i=t.getAttribute("class"),r=i?i.split(" "):null;return!!r&&-1!==r.indexOf(e)}static percentWidth(t){const e=t.offsetParent||t;return Number((t.offsetWidth/e.offsetWidth*100).toFixed(2))}static getMousePosition(t,e){const i={};let r=0,a=0;document.all?(r=e.clientX+document.body.scrollLeft,a=e.clientY+document.body.scrollTop):(r=e.pageX,a=e.pageY);let s=r,n=a;const o=t.mousePositionOffset;return s-=o.x,n-=o.y,s=s<0?0:s,s=s>t.appWidth?t.appWidth:s,n=n<0?0:n,n=n>t.appHeight?t.appHeight:n,i.x=s,i.y=n,i}}e.OFHTMLHelpers=i},1377:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFInterval=void 0,e.OFInterval=class{set finishedLoopCallback(t){this._onFinishedLoopCallback=t}set finishedIntervalCallback(t){this._onFinishedIntervalCallback=t}constructor(t,e){this._currentTime=0,this._currentLoop=0,this._intervalTimeSeconds=t,this._loops=e}update(t){this._currentLoop<this._loops&&(this._currentTime+=t.dt,this._currentTime>=this._intervalTimeSeconds&&(this._currentTime=0,this._currentLoop++,this._currentLoop===this._loops?this._onFinishedIntervalCallback&&this._onFinishedIntervalCallback():this._onFinishedLoopCallback&&this._onFinishedLoopCallback()))}destroy(){this._onFinishedLoopCallback=null,this._onFinishedIntervalCallback=null}}},3910:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2D=void 0;const r=i(6313),a=i(5694);e.OFEffect2D=class{get animation(){return this._animation}get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t,e,i,s,n){this._isWaitingForDelete=!1,this._animation=new r.OFAnimation(e,i,s,n),this._animation.imageContent=a.OFFrameworkFactory.currentFramewok.contentManager.getContent(t)}update(t){this._animation.update(t),this._animation.hasAnimationEnded&&(this._isWaitingForDelete=!0)}destroy(){this._animation.destroy()}}},404:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2DFactory=void 0;const r=i(3910);e.OFEffect2DFactory=class{static createEffect(t,e,i,a,s,n){const o=new r.OFEffect2D(t,e,i,a,s);return o.animation.setSpriteBatch(n),o}}},1055:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2DManager=void 0;const r=i(404);e.OFEffect2DManager=class{constructor(){this._effects=[]}createEffect(t,e,i,a,s,n){const o=r.OFEffect2DFactory.createEffect(t,e,i,a,s,n||this._spriteBatcher);return this._effects.push(o),o}setSpriteBatch(t){this._spriteBatcher=t}update(t){for(let e=0;e<this._effects.length;e++){const i=this._effects[e];i&&(i.isWaitingForDelete?(i.destroy(),this._effects.splice(e,1),e--):i.update(t))}}}},3161:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(e,i);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,a)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),a(i(764),e),a(i(5995),e),a(i(1874),e),a(i(2724),e),a(i(3440),e),a(i(1348),e),a(i(464),e),a(i(912),e),a(i(8171),e),a(i(5765),e),a(i(6168),e),a(i(7570),e),a(i(7733),e),a(i(8287),e),a(i(8238),e),a(i(3587),e),a(i(5431),e),a(i(1325),e),a(i(7591),e),a(i(5418),e),a(i(4840),e),a(i(6400),e),a(i(6227),e),a(i(6313),e),a(i(3344),e),a(i(263),e),a(i(4950),e),a(i(3177),e),a(i(1851),e),a(i(9736),e),a(i(28),e),a(i(1182),e),a(i(2213),e),a(i(7582),e),a(i(5391),e),a(i(9248),e),a(i(3689),e),a(i(7873),e),a(i(5520),e),a(i(5516),e),a(i(961),e),a(i(7924),e),a(i(3910),e),a(i(404),e),a(i(1055),e),a(i(1446),e),a(i(19),e),a(i(6618),e),a(i(4734),e),a(i(1377),e),a(i(2344),e),a(i(7295),e),a(i(4793),e),a(i(5613),e),a(i(3152),e),a(i(9298),e),a(i(6957),e),a(i(1482),e),a(i(2256),e),a(i(8489),e),a(i(5694),e),a(i(9151),e),a(i(8454),e),a(i(7876),e),a(i(258),e),a(i(1440),e),a(i(8620),e)},2344:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7295:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4793:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5613:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFHoming2=void 0;const r=i(9298);e.OFHoming2=class{get x(){return this._currentX}get y(){return this._currentY}get rotation(){return this._rotation}constructor(t,e,i,a){this._targetX=0,this._targetY=0,this._rotation=0,this._rotationCorrection=0,this._currentX=t,this._currentY=e,this._speed=a,this._turnFactor=i,this._velocityVector=r.OFVector2.zero(),this._directionVector=new r.OFVector2(this._targetX-this._currentX,this._targetY-this._currentY),this._directionVector.normalize()}setTarget(t,e){this._targetX=t,this._targetY=e}update(t){this._directionVector.x=this._targetX-this._currentX,this._directionVector.y=this._targetY-this._currentY,this._directionVector.normalize(),this._directionVector.multiplyBy(this._turnFactor),this._velocityVector.add(this._directionVector),this._velocityVector.normalize(),this._velocityVector.multiplyBy(this._speed*t),this._currentX+=this._velocityVector.x,this._currentY+=this._velocityVector.y,this._rotation=Math.atan2(this._velocityVector.y,this._velocityVector.x)+this._rotationCorrection}destroy(){this._directionVector=null,this._velocityVector=null}}},3152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFMath=void 0;const r=i(6957),a=i(887);e.OFMath=class{static random(t,e){return t+(e*Math.random()-t)}static float2Int(t){return 0|t}static quadraticBezier(t,e,i,a){const s=r.OFVector3.zero();return s.x=(1-a)*(1-a)*t.x+(2-2*a)*a*i.x+e.x*a*a,s.y=(1-a)*(1-a)*t.y+(2-2*a)*a*i.y+e.y*a*a,s.z=(1-a)*(1-a)*t.z+(2-2*a)*a*i.z+e.z*a*a,s}static lerp(t,e,i){return t+(e-t)*i}static toDegrees(t){return 57.29577951308232*t}static toRadians(t){return.017453292519943295*t}static isPowerOfTwo(t){return t>0&&0==(t&t-1)}static lowPrecisionCos(t){let e=0;return t<-3.14159265?t+=6.28318531:t>3.14159265&&(t-=6.28318531),e=(t+=1.57079632)<0?1.27323954*t+.405284735*t*t:1.27323954*t-.405284735*t*t,e}static lowPrecisionSin(t){let e=0;return t<-3.14159265?t+=6.28318531:t>3.14159265&&(t-=6.28318531),(t+=3.14159265)>3.14159265&&(t-=6.28318531),e=t<0?1.27323954*t+.405284735*t*t:1.27323954*t-.405284735*t*t,e}static lowPrecision_Atan2(t,e){const i=Math.PI/4,r=3*i,a=Math.abs(t);let s;return s=e>=0?i-i*((e-a)/(e+a)):r-i*((e+a)/(a-e)),t<0?-s:s}static isPointInPolygon(t,e){let i=e[0].x,r=e[0].x,a=e[0].y,s=e[0].y;if(e.forEach((t=>{i=Math.min(t.x,i),r=Math.max(t.x,r),a=Math.min(t.y,a),s=Math.max(t.x,s)})),t.x<i||t.x>r||t.y<a||t.y>s)return!1;let n=!1;for(let i=0,r=e.length-1;i<e.length;r=i++)e[i].y>t.y!=e[r].y>t.y&&t.x<(e[r].x-e[i].x)*(t.y-e[i].y)/(e[r].y-e[i].y)+e[i].x&&(n=!n);return n}static min(t,e){return t<e?t:e}static max(t,e){return t>e?t:e}static mat4XVec4(t,e){const i=a.mat4.create();return i[0]=t[0]*e[0],i[1]=t[1]*e[1],i[2]=t[2]*e[2],i[3]=t[3]*e[3],i[4]=t[4]*e[0],i[5]=t[5]*e[1],i[6]=t[6]*e[2],i[7]=t[7]*e[3],i[8]=t[8]*e[0],i[9]=t[9]*e[1],i[10]=t[10]*e[2],i[11]=t[11]*e[3],i[12]=t[12]*e[0],i[13]=t[13]*e[1],i[14]=t[14]*e[2],i[15]=t[15]*e[3],i}}},9298:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVector2=void 0;const r=i(19);class a{constructor(t,e){this.x=t,this.y=e}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}dot(t){return this.x*t.x+this.y*t.y}add(t){this.x+=t.x,this.y+=t.y}multiplyBy(t){this.x*=t,this.y*=t}multiply(t){this.x*=t.x,this.y*=t.y}scale(t){this.x*=t,this.y*=t}subtract(t){this.x-=t.x,this.y-=t.y}divide(t){this.x/=t.x,this.y/=t.y}angle(){return Math.atan2(this.y,this.x)}normalize(){const t=this.length();t>0?(this.x/=t,this.y/=t):r.OFConsole.warn("[WARN]: OFVector2.normalize: called on a zero-length vector.")}projectionOn(t){const e=t.dot(t);if(0===e)return r.OFConsole.log("[WARN] OFVector2.projectionOn: zero-length projection vector."),this.clone();const i=t.clone();return i.scale(this.dot(t)/e),i}clone(){return new a(this.x,this.y)}static zero(){return new a(0,0)}static one(){return new a(1,1)}static left(){return new a(1,0)}static right(){return new a(0,1)}}e.OFVector2=a},6957:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVector3=void 0;const r=i(19);class a{constructor(t,e,i){this.x=t,this.y=e,this.z=i}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}add(t){this.x+=t.x,this.y+=t.y,this.z+=t.z}multiply(t){this.x*=t.x,this.y*=t.y,this.z*=t.z}scale(t){this.x*=t,this.y*=t,this.z*=t}subtract(t){this.x-=t.x,this.y-=t.y,this.z-=t.z}divide(t){this.x/=t.x,this.y/=t.y,this.z/=t.z}normalize(){const t=this.length();t>0?(this.x/=t,this.y/=t,this.z/=t):r.OFConsole.warn("[WARN]: OFVector3.normalize: called on a zero-length vector.")}projectionOn(t){const e=t.dot(t);if(0===e)return r.OFConsole.log("[WARN] OFVector3.projectionOn: zero-length projection vector."),this.clone();const i=t.clone();return i.scale(this.dot(t)/e),i}clone(){return new a(this.x,this.y,this.z)}static zero(){return new a(0,0,0)}static one(){return new a(1,1,1)}static left(){return new a(-1,0,0)}static right(){return new a(1,0,0)}static up(){return new a(0,1,0)}static down(){return new a(0,-1,0)}static front(){return new a(0,-1,1)}static back(){return new a(0,-1,-1)}}e.OFVector3=a},8489:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFFramework=void 0;const r=i(7149),a=i(764),s=i(9486),n=i(19),o=i(3587),h=i(7591),c=i(5995),u=i(2724),l=i(5694),d=i(4734),_=i(5431),m=i(1182),p=i(2256),f=i(4500);class g{get appWidth(){return this._appWidth}get appHeight(){return this._appHeight}get settings(){return this._settings}get hasCanvas(){return!!this._parentDivNode}get mousePositionOffset(){return this._mousePositionOffset}get getDocument(){return document}get parentDiv(){return this._parentDivNode}get canvasElement(){return this._mainCanvasObject.canvasElement}get mainGraphicDevice(){return this._mainGraphicDevice}get audioDevice(){return this._audioDevice}get graphicDeviceManager(){return this._graphicDeviceManager}get canvasContextManager(){return this._canvasContextManager}get contentManager(){return this._contentManager}get sceneManager(){return this._sceneManager}get params(){return this._params}constructor(t,e=null,i=null){this.frameworkIdentifier=t,this._params=e,this._settings=i||r.OFSettings.create(),this._deltaTimeCorrector=new a.OFDeltaTimeCorrector,f.STUtils.staticDebugConsole=n.OFConsole,n.OFConsole.log(s.OFTranslations.Framework.initialized,this.frameworkIdentifier.toString())}startOctopusFramework2D(t,e,i){if(this._canvasContextManager=new c.OFCanvasContextManager(this),this._parentDivNode=document.getElementById(t),this.hasCanvas){this._parentDivNode.className="canvasContainer",this._mousePositionOffset=d.OFHTMLHelpers.getPositionOffset(this._parentDivNode.parentNode),this._appWidth=e||this._settings.canvasWidth,this._appHeight=i||this._settings.canvasHeight;const t=this.settings.identifier_RenderCanvas+this.frameworkIdentifier;this._mainCanvasObject=this._canvasContextManager.createCanvasElement(t,"absolute"),this._deviceCapabilities=_.OFDeviceCapabilities.create(this,this._settings.forceUseCanvasContextInsteadOfWebGL),this._mainCanvasObject.context=this._deviceCapabilities.graphiContext,this._mainCanvasObject.canvasElement.style.backgroundColor=m.OFColor.convertToStringFromNormalized(this.settings.canvasBackgroundColor),this._mainCanvasObject.canvasElement.style.borderWidth=this.settings.canvasBorderWidth,this._mainCanvasObject.canvasElement.style.borderColor=m.OFColor.convertToStringFromNormalized(this.settings.canvasBorderColor),this._graphicDeviceManager=new h.OFGraphicDeviceManager(this),this._audioDevice=new o.OFAudioDevice(this),this._contentManager=new u.OFContentManager(this),this._graphicDeviceManager.initialize(),this._audioDevice.initialize(),this._contentManager.initialize(),this._mainGraphicDevice=this._graphicDeviceManager.createGraphicDevice("main",this._mainCanvasObject),this._settings.loadDefault&&(this._graphicDeviceManager.loadDefault(),this._contentManager.loadDefault()),this._settings.disableInputDetection&&this.doInputDetections(),this.initializeApplication()}else n.OFConsole.error(s.OFTranslations.Framework.canvasNotFound,this.frameworkIdentifier.toString(),t)}doInputDetections(){$(document.body).on("mousedown",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);r&&r.onMouseDown(t.originalEvent)})),$(document.body).on("mouseup",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);r&&r.onMouseUp(t.originalEvent)})),$(document.body).on("mousemove",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);if(r){const e=d.OFHTMLHelpers.getMousePosition(r,t);r.onMouseMove(e.x,e.y)}})),$(document.body).on("keydown",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1));l.OFFrameworkFactory.getById(i).onKeyDown(t.originalEvent)})),$(document.body).on("keyup",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1));l.OFFrameworkFactory.getById(i).onKeyUp(t.originalEvent)}))}initializeApplication(){this._sceneManager=new p.OFSceneManager(this),n.OFConsole.log(s.OFTranslations.Framework.ready,this.frameworkIdentifier.toString())}onKeyDown(t){this._sceneManager.onKeyDown(t)}onKeyUp(t){this._sceneManager.onKeyUp(t)}onMouseDown(t){this._sceneManager.onMouseDown(t)}onMouseUp(t){this._sceneManager.onMouseUp(t)}onMouseMove(t,e){this._sceneManager.onMouseMove(t,e)}resize(t,e){const i=this._appWidth,r=this._appHeight;this._appWidth=t,this._appHeight=e,this._mousePositionOffset=d.OFHTMLHelpers.getPositionOffset(this._parentDivNode.parentNode),this._graphicDeviceManager.resize(t,e,i,r)}update(t){if(this.hasCanvas){l.OFFrameworkFactory.setCurrentFramework(this.frameworkIdentifier);const e={dt:this._deltaTimeCorrector.recomputeDeltaTime(t.dt),framework:this};this._graphicDeviceManager.update(e),this._sceneManager.update(e)}}destroy(){}static create(t,e=null,i=null){return new g(t,e,i)}}e.OFFramework=g},5694:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFFrameworkFactory=void 0;const r=i(8489),a=i(19),s=i(9486);class n{static get currentFramewok(){return n._frameworks[n._currentFramework]}static create(t=null,e=null){const i=r.OFFramework.create(n._uniqueIdentifier++,t,e);return this._frameworks.push(i),n._currentFramework=i.frameworkIdentifier,i}static popFramework(t){-1==n._popedFramework&&(n._popedFramework=n._currentFramework,n._currentFramework=t.frameworkIdentifier)}static pushFramework(){-1==n._popedFramework&&(n._popedFramework=-1,n._currentFramework=n._popedFramework)}static setCurrentFramework(t){t>n._uniqueIdentifier||t<0?a.OFConsole.warn(s.OFTranslations.Framework.FrameworkFactory.outOfBounds,t.toString()):n._currentFramework=t}static getById(t){return n._frameworks.find((e=>e.frameworkIdentifier===t))}}e.OFFrameworkFactory=n,n._uniqueIdentifier=0,n._currentFramework=0,n._popedFramework=-1,n._frameworks=[]},1482:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseScene=void 0,e.OFBaseScene=class{initialize(t,e){this.framework=t.framework,this.contentManager=this.framework.contentManager}onMouseMove(t,e){}onMouseDown(t){}onMouseUp(t){}onKeyDown(t){}onKeyUp(t){}}},2256:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSceneManager=void 0;const r=i(19),a=i(9486),s=i(4500);e.OFSceneManager=class{get currentScene(){return this._currentScene}constructor(t){this.framework=t}gotoScene(t,e){this._currentScene&&this._currentScene.destroy();const i=s.STUtils.instanceByClassName(t);i?(this._currentScene=i,this._currentScene.initialize(this,e),r.OFConsole.log(a.OFTranslations.Framework.SceneManager.gotoScene,this.framework.frameworkIdentifier.toString(),t)):r.OFConsole.log(a.OFTranslations.Framework.SceneManager.sceneDontExists,this.framework.frameworkIdentifier.toString(),t)}gotoSceneBy(t,e){this._currentScene&&this._currentScene.destroy();const i=s.STUtils.instanceByType(t);i?(this._currentScene=i,this._currentScene.initialize(this,e),r.OFConsole.log(a.OFTranslations.Framework.SceneManager.gotoScene,this.framework.frameworkIdentifier.toString(),"")):r.OFConsole.log(a.OFTranslations.Framework.SceneManager.sceneDontExists,this.framework.frameworkIdentifier.toString(),"")}onMouseMove(t,e){this._currentScene&&this._currentScene.onMouseMove(t,e)}onMouseDown(t){this._currentScene&&this._currentScene.onMouseDown(t)}onMouseUp(t){this._currentScene&&this._currentScene.onMouseUp(t)}onKeyDown(t){this._currentScene&&this._currentScene.onKeyDown(t)}onKeyUp(t){this._currentScene&&this._currentScene.onKeyUp(t)}update(t){this._currentScene&&this._currentScene.update(t)}}},7149:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSettings=void 0;const r=i(1182),a=i(5516),s=i(9486);class n{constructor(){this.targetFramerate=60,this.animationFramerate=60,this.loadDefault=!0,this.disableInputDetection=!0,this.forceUseCanvasContextInsteadOfWebGL=!1,this.canvasContextType=a.OFEnumCanvasContextType.D2D,this.canvasWidth=1024,this.canvasHeight=768,this.canvasBackgroundColor=r.OFColor.black(),this.canvasBorderWidth="0px",this.canvasBorderColor=r.OFColor.black(),this.debugConsoleTextColor=r.OFColor.green(),this.debugConsoleTextWeight="bold",this.debugConsoleTextSize=8,this.debugConsoleTextOffsetX=-90,this.debugConsoleTextOffsetY=3,this.renderClearColor=r.OFColor.black(),this.identifier_RenderCanvas="renderCanvas",this.identifier_RenderTextCanvas="renderTextCanvas",this.message_CanvasHTML5Warning=s.OFTranslations.Framework.Canvas.html5Warning,this.enabledVBOInstancesLife=!0}static create(){return new n}}e.OFSettings=n},9486:(t,e)=>{var i,r,a,s,n,o,h,c,u,l,d,_,m,p;Object.defineProperty(e,"__esModule",{value:!0}),e.OFTranslations=void 0;class f{}e.OFTranslations=f,f.Framework=((i=class{}).initialized="OF(id:{0})> Initializing Octopus framework.",i.ready="OF(id:{0})> Octopus framework Ready.",i.canvasNotFound="OF(id:{0})::constructor> Canvas element not found in: {1}, framework not initialized.",i.FrameworkFactory=((r=class{}).outOfBounds="FrameworkFactory::setCurrentFramework index: {0} out of bounds.",r),i.GraphicsOptimization=((a=class{}).PolygonBatcher=((s=class{}).changeShader="OFPolygonBatcher::changeShader> New shader: {0} applied.",s.setShader="OFPolygonBatcher::setShader> New shader: {0} applied.",s),a),i.AudioDevice=((n=class{}).initialize="OF(id:{0}):OFAudioDevice::Initialize> Initialized.",n.notSupported="OF(id:{0}):OFAudioDevice::Initialize> Web Audio API is not supported in this browser.",n),i.ContentManagement=((o=class{}).changePropertiesInContentNotFound="OF(id:{0})::ContentManagement::changePropertiesImageContent> Content not found in: {1}",o.loadMaterial="OF(id:{0}):ContentManager::loadMaterial> {1}",o.loadImage="OF(id:{0}):ContentManager::loadImage> {1}",o.loadMaterialFromJSON="OF(id:{0}):ContentManager::loadMaterialFromJSON> {1}",o.loadSoundFromArrayABuffer="OF(id:{0}):ContentManager::asyncLoadSoundFromArrayBuffer> {1}",o.loadImageFromHTMLImage="OF(id:{0}):ContentManager::loadImageFromHTMLImage> {1}",o.notImplementedException="OF(id:{0}):ContentManager> Not implemented exception: {1}",o.MaterialContent=((h=class{}).notImplementedException="OF(id:{0}):MaterialContent> Not implemented exception",h),o.SoundContent=((c=class{}).internal_OnErrorDecodeAudioData="OF(id:{0}):SoundContent::internal_OnErrorDecodeAudioData> {1}",c),o),i.SceneManager=((u=class{}).gotoScene="OF(id:{0}):OFSceneManager::gotoScene> Created Scene: {1} and Initialized.",u.sceneDontExists="OF(id:{0}):OFSceneManager::gotoScene> The: {1} doesn't exists.",u),i.Canvas=((l=class{}).html5Warning="Your browser don't support HTML5 Canvas Element.",l),i.GLHelper=((d=class{}).compileShader="GL::CompileShader> An error occurred compiling the shaders: {0}",d.createProgram="GL::CreateProgram> Unable to initialize the shader program:  {0}",d),i.CanvasContextManager=((_=class{}).issueRenderingContext="Can't start the WebGL Rendering Context: {0}",_),i.GraphicDeviceManager=((m=class{}).createGraphicDevice="OF(id:{0}):GraphicDeviceManager::createGraphicDevice> The graphic device: '{1}' was created.",m),i.ShaderFactory=((p=class{}).addShader="OF(id:{0}):ShaderFactory::addShader> Loaded shader: {1}",p.loadAndAddShaderWithCodeInfo="OF(id:{0}):ShaderFactory::LoadAndAddShaderWithCodeInfo> Loaded shader: {1}",p),i)},3460:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecMain=void 0;const r=i(726),a=i(2913),s=i(9513);e.SpecMain=class{constructor(t){switch(t){case r.EnumSpectType.SimpleFramework:this._currentSpec=new a.SpecTestFramework;break;case r.EnumSpectType.SpaceGame:this._currentSpec=new s.SpecSpaceGame}}update(t){this._currentSpec.update(t)}}},726:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumSpectType=void 0,(i=e.EnumSpectType||(e.EnumSpectType={}))[i.SimpleFramework=0]="SimpleFramework",i[i.SpaceGame=1]="SpaceGame"},9513:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecSpaceGame=void 0;const r=i(5694),a=i(7751);e.SpecSpaceGame=class{constructor(){this._framework=r.OFFrameworkFactory.create(),this._framework.startOctopusFramework2D("canvas-scene"),this._framework.sceneManager.gotoSceneBy(a.SpaceGameScene)}update(t){this._framework.update({dt:t})}}},3429:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyHomingMissile=void 0;const r=i(5635),a=i(3161);class s extends r.GBaseBullet{get animation(){return this._animation}constructor(t,e,i,r,s,n){super(t,e,n),this._player=s,this._animation=new a.OFAnimation(t,e,4,2),this._animation.imageContent=a.OFFrameworkFactory.currentFramewok.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._animation.setAdvanceAnimationTileConfig(1024,190,80,15);const o=this._animation.width*this._animation.scaleX,h=this._animation.height*this._animation.scaleY;this._animation.createCollision(0,0,o,h,-o/2,-h/2),this._homingInterpolator=new a.OFHoming2(t,e,i,r)}update(t){if(this._homingInterpolator.update(t.dt),this._animation.x=this._homingInterpolator.x,this._animation.y=this._homingInterpolator.y,this._animation.rotation=this._homingInterpolator.rotation,this._animation.update(t),this._homingInterpolator.setTarget(this._player.x,this._player.y),this._player&&this._player.hitTest(this._animation)){const t=this._bulletFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this._animation.x,this._animation.y,4,4);t.animation.setAdvanceAnimationTileConfig(1024,0,190,190),t.animation.scaleX=.35,t.animation.scaleY=.35,this._isWaitingForDelete=!0,this._player.onHit(1)}}destroy(){this._homingInterpolator.destroy(),this._animation.destroy()}}e.GEnemyHomingMissile=s},9353:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumEnemyType=void 0,(i=e.EnumEnemyType||(e.EnumEnemyType={}))[i.Dummy=1]="Dummy"},7144:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumProyectileType=void 0,(i=e.EnumProyectileType||(e.EnumProyectileType={}))[i.Player=1]="Player",i[i.Enemy=2]="Enemy",i[i.MissileEnemy=3]="MissileEnemy",i[i.MissilePlayer=4]="MissilePlayer"},5635:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GBaseBullet=void 0;const r=i(3161);e.GBaseBullet=class{get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t,e,i){this._bulletFactory=i,this._x=t,this._y=e,this._isWaitingForDelete=!1,this._framework=r.OFFrameworkFactory.currentFramewok,this._enemyFactory=this._bulletFactory.game.enemyFactory}}},5698:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GBulletFactory=void 0;const r=i(7144),a=i(6255),s=i(3429);e.GBulletFactory=class{constructor(t){this.game=t,this._bullets=[]}createBullet(t,e,i,s,n){let o=null;return t===r.EnumProyectileType.Player&&(o=new a.GPlayerBullet(e,i,s,n,this),o.sprite.setSpriteBatch(this._spriteBatch)),o&&this._bullets.push(o),o}createMissile(t,e,i,a,n){let o=null;return t===r.EnumProyectileType.MissileEnemy&&(o=new s.GEnemyHomingMissile(e,i,a,n,this.game.player,this),o.animation.setSpriteBatch(this._spriteBatch)),o&&this._bullets.push(o),o}setSpriteBatch(t){this._spriteBatch=t}update(t){for(let e=0;e<this._bullets.length;e++){const i=this._bullets[e];i.isWaitingForDelete?(i.destroy(),this._bullets.splice(e,1),e--):i.update(t)}}}},4058:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GDummyEnemy=void 0;const r=i(4439),a=i(7144),s=i(1377),n=i(9298),o=i(3177),h=i(3152);class c extends r.GEnemyBase{constructor(t,e,i){super(i),this._direction=new n.OFVector2(-1,0),this._speed=100,this._health=3,this._sprite=new o.OFSprite(t,e),this._sprite.imageContent=this._framework.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._sprite.rotation=-Math.PI/2,this._sprite.scaleX=this._sprite.scaleY=1,this._sprite.setAdvanceAnimationTileConfig(1123,190,32,32);const r=this._sprite.width*this._sprite.scaleX,a=this._sprite.height*this._sprite.scaleY;this._sprite.createCollision(0,0,r,a,-r/2,-a/2),this._iCreationMissile=new s.OFInterval(.025,200),this._iCreationMissile.finishedLoopCallback=()=>this.onFinishedLoop_CreationMissile()}onFinishedLoop_CreationMissile(){if(h.OFMath.random(0,100)>70){const t=.7,e=200;this._enemyFactory.game.bulletFactory.createMissile(a.EnumProyectileType.MissileEnemy,this._sprite.x,this._sprite.y,t,e)}}onHit(t){if(this._health-=t,this._health<=0){this._isWaitingForDelete=!0;const t=this._enemyFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this._sprite.x,this._sprite.y,8,3);t.animation.setAdvanceAnimationTileConfig(0,0,1024,384),t.animation.scaleX=.5,t.animation.scaleY=.5}}update(t){this._iCreationMissile&&this._iCreationMissile.update(t),this._sprite.x+=this._direction.x*this._speed*t.dt,this._sprite.y+=this._direction.y*this._speed*t.dt,this._sprite.update(t),this._sprite.x<-this._sprite.width&&(this._isWaitingForDelete=!0)}destroy(){this._direction=null,super.destroy()}}e.GDummyEnemy=c},4439:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyBase=void 0;const r=i(3161);e.GEnemyBase=class{get sprite(){return this._sprite}get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t){this._enemyFactory=t,this._isWaitingForDelete=!1,this._framework=r.OFFrameworkFactory.currentFramewok}destroy(){this._sprite.destroy(),this._sprite=null}}},7734:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyFactory=void 0;const r=i(9353),a=i(4058),s=i(3161);e.GEnemyFactory=class{get enemies(){return this._enemies}constructor(t){this.game=t,this._enemies=[],this._framework=s.OFFrameworkFactory.currentFramewok,this._icreationEnemy=new s.OFInterval(.001,1e8),this._icreationEnemy.finishedLoopCallback=()=>{this.onFinishedLoop_CreationEnemy()}}onFinishedLoop_CreationEnemy(){const t=this._framework.appWidth+40,e=s.OFMath.random(0,this._framework.appHeight);this.createEnemy(r.EnumEnemyType.Dummy,t,e)}setSpriteBatch(t){this._spriteBatcher=t}createEnemy(t,e,i){let s=null;t===r.EnumEnemyType.Dummy&&(s=new a.GDummyEnemy(e,i,this),s.sprite.setSpriteBatch(this._spriteBatcher)),s&&this._enemies.push(s)}update(t){this._icreationEnemy&&this._icreationEnemy.update(t);for(let e=0;e<this._enemies.length;e++){const i=this._enemies[e];i&&(i.isWaitingForDelete?(i.destroy(),this._enemies.splice(e,1),e--):i.update(t))}}}},6205:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GPlayer=void 0;const r=i(7144),a=i(3161);e.GPlayer=class{get x(){return this._sprite.x}get y(){return this._sprite.y}get sprite(){return this._sprite}constructor(t){this._game=t;const e=a.OFFrameworkFactory.currentFramewok.contentManager.getContent("resources/spSpriteSheetGameElements.png");this._sprite=new a.OFSprite,this._sprite.imageContent=e,this._sprite.rotation=-Math.PI/2,this._sprite.scaleX=this._sprite.scaleY=.3,this._sprite.setAdvanceAnimationTileConfig(1024,205,75,128);const i=this._sprite.width*this._sprite.scaleX-8,r=this._sprite.height*this._sprite.scaleY-14;this._sprite.createCollision(0,0,r,i,-r/2,-i/2)}hitTest(t){return this._sprite.hitTest(t)}onHit(t){}onMouseMove(t,e){this._sprite.x=t,this._sprite.y=e}onKeyDown(t){if(t===a.OFEnumKeyCode.Space){const t=300,e=10,i=.25*Math.PI,s=.5*i,n=i/e;for(let i=0;i<e;i++){const o=-e/2+i,h=new a.OFVector2(1,0),c=n*i-s;h.x=Math.cos(c),h.y=Math.sin(c),this._game.bulletFactory.createBullet(r.EnumProyectileType.Player,this._sprite.x,this._sprite.y+2*o,h,t).sprite.rotation=c}}}update(t){this._sprite.update(t)}}},6255:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GPlayerBullet=void 0;const r=i(5635),a=i(3161);class s extends r.GBaseBullet{get sprite(){return this._sprite}constructor(t,e,i,r,s){super(t,e,s),this._direction=i,this._speed=r,this._sprite=new a.OFSprite(t,e),this._sprite.imageContent=this._framework.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._sprite.setAdvanceAnimationTileConfig(1104,190,19,4);const n=this._sprite.width*this._sprite.scaleX,o=this._sprite.height*this._sprite.scaleY;this._sprite.createCollision(0,0,n,o,-n/2,-o/2)}update(t){this._sprite.x+=this._direction.x*this._speed*t.dt,this._sprite.y+=this._direction.y*this._speed*t.dt,this._sprite.update(t),this._sprite.x+this._sprite.width>this._framework.appWidth&&(this._isWaitingForDelete=!0);for(let t=0;t<this._enemyFactory.enemies.length;t++){const e=this._enemyFactory.enemies[t];if(e&&this._sprite.hitTest(e.sprite)){const t=this._bulletFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this.sprite.x,this.sprite.y,4,4);t.animation.setAdvanceAnimationTileConfig(1024,0,190,190),t.animation.scaleX=.35,t.animation.scaleY=.35,this._isWaitingForDelete=!0,e.onHit(1);break}}}destroy(){this._sprite.destroy(),this._sprite=null,this._direction=null}}e.GPlayerBullet=s},7132:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GraviusGame=void 0;const r=i(5698),a=i(6205),s=i(7734),n=i(4840),o=i(1055);e.GraviusGame=class{get player(){return this._player}get enemyFactory(){return this._enemyFactory}get bulletFactory(){return this._bulletFactory}get effectManager(){return this._effectManager}get spriteBatch(){return this._spriteBatch}constructor(){this._spriteBatch=new n.OFSpriteBatcher("resources/spSpriteSheetGameElements.png"),this._player=new a.GPlayer(this),this._enemyFactory=new s.GEnemyFactory(this),this._bulletFactory=new r.GBulletFactory(this),this._effectManager=new o.OFEffect2DManager,this._player.sprite.setSpriteBatch(this._spriteBatch),this._effectManager.setSpriteBatch(this._spriteBatch),this._enemyFactory.setSpriteBatch(this._spriteBatch),this._bulletFactory.setSpriteBatch(this._spriteBatch)}onMouseMove(t,e){this._player.onMouseMove(t,e)}onKeyDown(t){this._player.onKeyDown(t)}update(t){this._spriteBatch.beginDraw(),this._player.update(t),this._enemyFactory.update(t),this._bulletFactory.update(t),this._effectManager.update(t),this._spriteBatch.endDraw(),this._spriteBatch.update(t)}}},7751:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpaceGameScene=void 0;const r=i(7132),a=i(5610),s=i(5820),n=i(1482),o=i(2027),h=i(1182),c=i(887);class u extends n.OFBaseScene{constructor(){super()}initialize(t,e){super.initialize(t,e),this.framework.contentManager.loadImage("resources/spSpriteSheetGameElements.png"),this._imageContentFont=this.framework.contentManager.loadImage("resources/fnt-arial_0.png"),this.framework.mainGraphicDevice.shaderFactory.loadAndAddShaderWithCodeInfo("SpineShaderTexture",o.OFDefaultShaderSources.SourcesSpineShaderTexture,null,"SpineShaderTexture"),$("#input").on("change",(t=>{const e=t.target.files[0],i=new FileReader;i.readAsText(e),i.onload=t=>this._fontCharset=a.OFBitmapFontLoader.parse(t.target.result)})),this._graviusGame=new r.GraviusGame}onMouseMove(t,e){this._graviusGame&&this._graviusGame.onMouseMove(t,e)}onKeyDown(t){this._graviusGame&&this._graviusGame.onKeyDown(t.keyCode)}update(t){var e,i,r,a;this._graviusGame&&this._graviusGame.update(t),this._fontCharset&&(null===(e=this._imageContentFont)||void 0===e?void 0:e.isLoaded)&&!this._textfield&&(this._textfield=new s.OFCBitmapTextfield2D,this._textfield.initialize("",this._fontCharset,this._imageContentFont),this._textfield.color=h.OFColor.white());const n=c.mat4.create();c.mat4.fromScaling(n,c.vec3.fromValues(.25,.25,.25));const o=1/t.dt;null===(i=this._textfield)||void 0===i||i.setText(`FPS: ${o.toString().substring(0,5)}, # of Quads: ${this._graviusGame.spriteBatch.totalQuads}, # of Draw Calls: ${this._graviusGame.spriteBatch.totalDrawCalls}`),null===(r=this._textfield)||void 0===r||r.setLetterColor(1,h.OFColor.red()),null===(a=this._textfield)||void 0===a||a.draw(t,n)}destroy(){}}e.SpaceGameScene=u},2913:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecTestFramework=void 0;const r=i(3161);e.SpecTestFramework=class{constructor(){this._countTime=0,this._framework=r.OFFrameworkFactory.create(),this._framework.startOctopusFramework2D("canvas-scene");const t=this._framework.contentManager.loadImage("resources/spSpriteSheetGameElements.png");this._sprite=new r.OFSprite(0,0),this._sprite.imageContent=t,this._sprite.setAdvanceAnimationTileConfig(1024,205,75,128),this._explosionAnimation=new r.OFAnimation(320,200,4,4),this._explosionAnimation.imageContent=t,this._explosionAnimation.setAdvanceAnimationTileConfig(1024,0,190,190),this._explosionAnimation.scaleX=.5,this._explosionAnimation.scaleY=.5,this._explosion2Animation=new r.OFAnimation(500,200,8,3),this._explosion2Animation.imageContent=t,this._explosion2Animation.setAdvanceAnimationTileConfig(0,0,1024,384),this._quad=new r.OFPrimitiveQuad(300,20,40,40,r.OFColor.red()),this._quad2=new r.OFPrimitiveQuad(300,200,40,40,r.OFColor.green()),this._circle=new r.OFPrimitiveCircle(300,200,160,r.OFColor.blue()),this._quad.setWireframeVisibility(!0),this._grid=new r.OFPrimitiveGrid(40,40,r.OFColor.white()),this._grid.changeGrid(14,8,32,32)}update(t){this._countTime+=t,this._framework.update({dt:t});const e=Math.cos(this._countTime);this._grid&&this._grid.update({dt:t}),this._sprite&&(this._sprite.x=250*e,this._sprite.y=250*e,this._sprite.rotation+=.1,this._sprite.alpha=Math.abs(e),this._sprite.update({dt:t})),this._quad&&(this._quad.rotation+=1,this._quad.x=200+200*e,this._quad.update({dt:t})),this._circle&&this._circle.update({dt:t}),this._quad2&&(this._quad2.scaleX=e,this._quad2.scaleY=e,this._quad2.y=200+100*e,this._quad2.update({dt:t})),this._explosionAnimation&&this._explosionAnimation.update({dt:t}),this._explosion2Animation&&this._explosion2Animation.update({dt:t})}}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var i=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(i.exports,i,i.exports,__webpack_require__),i.exports}__webpack_require__.d=(t,e)=>{for(var i in e)__webpack_require__.o(e,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{const t=__webpack_require__(3460),e=__webpack_require__(726),i=__webpack_require__(3139);!function(){const r=new t.SpecMain(e.EnumSpectType.SimpleFramework);i.OFRenderLoop.create((t=>r.update(t)),30)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,