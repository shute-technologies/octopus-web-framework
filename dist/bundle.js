(()=>{"use strict";var __webpack_modules__={887:(t,e,i)=>{i.r(e),i.d(e,{glMatrix:()=>r,mat2:()=>a,mat2d:()=>s,mat3:()=>n,mat4:()=>o,quat:()=>u,quat2:()=>l,vec2:()=>d,vec3:()=>h,vec4:()=>c});var r={};i.r(r),i.d(r,{ARRAY_TYPE:()=>m,EPSILON:()=>_,RANDOM:()=>p,equals:()=>b,setMatrixArrayType:()=>f,toRadian:()=>v});var a={};i.r(a),i.d(a,{LDU:()=>N,add:()=>L,adjoint:()=>E,clone:()=>y,copy:()=>O,create:()=>F,determinant:()=>S,equals:()=>G,exactEquals:()=>j,frob:()=>k,fromRotation:()=>B,fromScaling:()=>D,fromValues:()=>T,identity:()=>x,invert:()=>w,mul:()=>H,multiply:()=>A,multiplyScalar:()=>z,multiplyScalarAndAdd:()=>U,rotate:()=>P,scale:()=>R,set:()=>C,str:()=>I,sub:()=>W,subtract:()=>V,transpose:()=>M});var s={};i.r(s),i.d(s,{add:()=>ct,clone:()=>Y,copy:()=>X,create:()=>q,determinant:()=>J,equals:()=>mt,exactEquals:()=>_t,frob:()=>ht,fromRotation:()=>at,fromScaling:()=>st,fromTranslation:()=>nt,fromValues:()=>K,identity:()=>Q,invert:()=>Z,mul:()=>pt,multiply:()=>tt,multiplyScalar:()=>lt,multiplyScalarAndAdd:()=>dt,rotate:()=>et,scale:()=>it,set:()=>$,str:()=>ot,sub:()=>ft,subtract:()=>ut,translate:()=>rt});var n={};i.r(n),i.d(n,{add:()=>Gt,adjoint:()=>Mt,clone:()=>bt,copy:()=>Ft,create:()=>gt,determinant:()=>wt,equals:()=>qt,exactEquals:()=>Wt,frob:()=>jt,fromMat2d:()=>It,fromMat4:()=>vt,fromQuat:()=>kt,fromRotation:()=>Bt,fromScaling:()=>Dt,fromTranslation:()=>Rt,fromValues:()=>yt,identity:()=>xt,invert:()=>Ct,mul:()=>Yt,multiply:()=>Et,multiplyScalar:()=>Ut,multiplyScalarAndAdd:()=>Ht,normalFromMat4:()=>Nt,projection:()=>Lt,rotate:()=>At,scale:()=>Pt,set:()=>Ot,str:()=>Vt,sub:()=>Xt,subtract:()=>zt,translate:()=>St,transpose:()=>Tt});var o={};i.r(o),i.d(o,{add:()=>De,adjoint:()=>re,clone:()=>Kt,copy:()=>$t,create:()=>Qt,determinant:()=>ae,equals:()=>Ve,exactEquals:()=>Le,frob:()=>Be,fromQuat:()=>Ce,fromQuat2:()=>be,fromRotation:()=>me,fromRotationTranslation:()=>ve,fromRotationTranslationScale:()=>xe,fromRotationTranslationScaleOrigin:()=>Te,fromScaling:()=>_e,fromTranslation:()=>de,fromValues:()=>Zt,fromXRotation:()=>pe,fromYRotation:()=>fe,fromZRotation:()=>ge,frustum:()=>Me,getRotation:()=>Oe,getScaling:()=>ye,getTranslation:()=>Fe,identity:()=>te,invert:()=>ie,lookAt:()=>Ae,mul:()=>je,multiply:()=>se,multiplyScalar:()=>ke,multiplyScalarAndAdd:()=>Ne,ortho:()=>Se,perspective:()=>we,perspectiveFromFieldOfView:()=>Ee,rotate:()=>he,rotateX:()=>ce,rotateY:()=>ue,rotateZ:()=>le,scale:()=>oe,set:()=>Jt,str:()=>Re,sub:()=>Ge,subtract:()=>Ie,targetTo:()=>Pe,translate:()=>ne,transpose:()=>ee});var h={};i.r(h),i.d(h,{add:()=>Xe,angle:()=>xi,bezier:()=>pi,ceil:()=>Ze,clone:()=>Ue,copy:()=>qe,create:()=>ze,cross:()=>di,dist:()=>Ri,distance:()=>si,div:()=>Pi,divide:()=>$e,dot:()=>li,equals:()=>wi,exactEquals:()=>Mi,floor:()=>Je,forEach:()=>ki,fromValues:()=>We,hermite:()=>mi,inverse:()=>ci,len:()=>Di,length:()=>He,lerp:()=>_i,max:()=>ei,min:()=>ti,mul:()=>Ai,multiply:()=>Ke,negate:()=>hi,normalize:()=>ui,random:()=>fi,rotateX:()=>Fi,rotateY:()=>yi,rotateZ:()=>Oi,round:()=>ii,scale:()=>ri,scaleAndAdd:()=>ai,set:()=>Ye,sqrDist:()=>Bi,sqrLen:()=>Ii,squaredDistance:()=>ni,squaredLength:()=>oi,str:()=>Ci,sub:()=>Si,subtract:()=>Qe,transformMat3:()=>vi,transformMat4:()=>gi,transformQuat:()=>bi,zero:()=>Ti});var c={};i.r(c),i.d(c,{add:()=>zi,ceil:()=>qi,clone:()=>Li,copy:()=>ji,create:()=>Ni,cross:()=>or,dist:()=>br,distance:()=>Ji,div:()=>vr,divide:()=>Wi,dot:()=>nr,equals:()=>pr,exactEquals:()=>mr,floor:()=>Yi,forEach:()=>xr,fromValues:()=>Vi,inverse:()=>ar,len:()=>yr,length:()=>er,lerp:()=>hr,max:()=>Qi,min:()=>Xi,mul:()=>gr,multiply:()=>Hi,negate:()=>rr,normalize:()=>sr,random:()=>cr,round:()=>Ki,scale:()=>$i,scaleAndAdd:()=>Zi,set:()=>Gi,sqrDist:()=>Fr,sqrLen:()=>Or,squaredDistance:()=>tr,squaredLength:()=>ir,str:()=>_r,sub:()=>fr,subtract:()=>Ui,transformMat4:()=>ur,transformQuat:()=>lr,zero:()=>dr});var u={};i.r(u),i.d(u,{add:()=>ta,calculateW:()=>Br,clone:()=>Kr,conjugate:()=>jr,copy:()=>Zr,create:()=>Tr,dot:()=>ra,equals:()=>la,exactEquals:()=>ua,exp:()=>Dr,fromEuler:()=>zr,fromMat3:()=>Gr,fromValues:()=>$r,getAngle:()=>Er,getAxisAngle:()=>wr,identity:()=>Cr,invert:()=>Vr,len:()=>na,length:()=>sa,lerp:()=>aa,ln:()=>Ir,mul:()=>ea,multiply:()=>Sr,normalize:()=>ca,pow:()=>kr,random:()=>Lr,rotateX:()=>Ar,rotateY:()=>Pr,rotateZ:()=>Rr,rotationTo:()=>da,scale:()=>ia,set:()=>Jr,setAxes:()=>ma,setAxisAngle:()=>Mr,slerp:()=>Nr,sqlerp:()=>_a,sqrLen:()=>ha,squaredLength:()=>oa,str:()=>Ur});var l={};i.r(l),i.d(l,{add:()=>La,clone:()=>fa,conjugate:()=>Wa,copy:()=>xa,create:()=>pa,dot:()=>za,equals:()=>Ja,exactEquals:()=>Za,fromMat4:()=>Oa,fromRotation:()=>ya,fromRotationTranslation:()=>ba,fromRotationTranslationValues:()=>va,fromTranslation:()=>Fa,fromValues:()=>ga,getDual:()=>wa,getReal:()=>Ma,getTranslation:()=>Aa,identity:()=>Ta,invert:()=>Ha,len:()=>Ya,length:()=>qa,lerp:()=>Ua,mul:()=>ja,multiply:()=>Va,normalize:()=>Ka,rotateAroundAxis:()=>Na,rotateByQuatAppend:()=>Ia,rotateByQuatPrepend:()=>ka,rotateX:()=>Ra,rotateY:()=>Ba,rotateZ:()=>Da,scale:()=>Ga,set:()=>Ca,setDual:()=>Sa,setReal:()=>Ea,sqrLen:()=>Qa,squaredLength:()=>Xa,str:()=>$a,translate:()=>Pa});var d={};i.r(d),i.d(d,{add:()=>ss,angle:()=>Rs,ceil:()=>cs,clone:()=>es,copy:()=>rs,create:()=>ts,cross:()=>Ts,dist:()=>Gs,distance:()=>fs,div:()=>js,divide:()=>hs,dot:()=>xs,equals:()=>ks,exactEquals:()=>Is,floor:()=>us,forEach:()=>Hs,fromValues:()=>is,inverse:()=>ys,len:()=>Ns,length:()=>vs,lerp:()=>Cs,max:()=>ds,min:()=>ls,mul:()=>Vs,multiply:()=>os,negate:()=>Fs,normalize:()=>Os,random:()=>Ms,rotate:()=>Ps,round:()=>_s,scale:()=>ms,scaleAndAdd:()=>ps,set:()=>as,sqrDist:()=>zs,sqrLen:()=>Us,squaredDistance:()=>gs,squaredLength:()=>bs,str:()=>Ds,sub:()=>Ls,subtract:()=>ns,transformMat2:()=>ws,transformMat2d:()=>Es,transformMat3:()=>Ss,transformMat4:()=>As,zero:()=>Bs});var _=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,p=Math.random;function f(t){m=t}var g=Math.PI/180;function v(t){return t*g}function b(t,e){return Math.abs(t-e)<=_*Math.max(1,Math.abs(t),Math.abs(e))}function F(){var t=new m(4);return m!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function y(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function O(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function x(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function T(t,e,i,r){var a=new m(4);return a[0]=t,a[1]=e,a[2]=i,a[3]=r,a}function C(t,e,i,r,a){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t}function M(t,e){if(t===e){var i=e[1];t[1]=e[2],t[2]=i}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t}function w(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*s-a*r;return n?(n=1/n,t[0]=s*n,t[1]=-r*n,t[2]=-a*n,t[3]=i*n,t):null}function E(t,e){var i=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=i,t}function S(t){return t[0]*t[3]-t[2]*t[1]}function A(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*o+s*h,t[1]=a*o+n*h,t[2]=r*c+s*u,t[3]=a*c+n*u,t}function P(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+s*o,t[1]=a*h+n*o,t[2]=r*-o+s*h,t[3]=a*-o+n*h,t}function R(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1];return t[0]=r*o,t[1]=a*o,t[2]=s*h,t[3]=n*h,t}function B(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=-i,t[3]=r,t}function D(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t}function I(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function k(t){return Math.hypot(t[0],t[1],t[2],t[3])}function N(t,e,i,r){return t[2]=r[2]/r[0],i[0]=r[0],i[1]=r[1],i[3]=r[3]-t[2]*i[1],[t,e,i]}function L(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t}function V(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t}function j(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function G(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=e[0],o=e[1],h=e[2],c=e[3];return Math.abs(i-n)<=_*Math.max(1,Math.abs(i),Math.abs(n))&&Math.abs(r-o)<=_*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(a-h)<=_*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-c)<=_*Math.max(1,Math.abs(s),Math.abs(c))}function z(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t}function U(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var H=A,W=V;function q(){var t=new m(6);return m!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function Y(t){var e=new m(6);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function X(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function Q(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function K(t,e,i,r,a,s){var n=new m(6);return n[0]=t,n[1]=e,n[2]=i,n[3]=r,n[4]=a,n[5]=s,n}function $(t,e,i,r,a,s,n){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t}function Z(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=i*s-r*a;return h?(h=1/h,t[0]=s*h,t[1]=-r*h,t[2]=-a*h,t[3]=i*h,t[4]=(a*o-s*n)*h,t[5]=(r*n-i*o)*h,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1],l=i[2],d=i[3],_=i[4],m=i[5];return t[0]=r*c+s*u,t[1]=a*c+n*u,t[2]=r*l+s*d,t[3]=a*l+n*d,t[4]=r*_+s*m+o,t[5]=a*_+n*m+h,t}function et(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=Math.sin(i),u=Math.cos(i);return t[0]=r*u+s*c,t[1]=a*u+n*c,t[2]=r*-c+s*u,t[3]=a*-c+n*u,t[4]=o,t[5]=h,t}function it(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1];return t[0]=r*c,t[1]=a*c,t[2]=s*u,t[3]=n*u,t[4]=o,t[5]=h,t}function rt(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=i[0],u=i[1];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=r*c+s*u+o,t[5]=a*c+n*u+h,t}function at(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=-i,t[3]=r,t[4]=0,t[5]=0,t}function st(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t}function nt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t}function ot(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function ht(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)}function ct(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t}function ut(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t}function lt(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t}function dt(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t}function _t(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]}function mt(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=e[0],c=e[1],u=e[2],l=e[3],d=e[4],m=e[5];return Math.abs(i-h)<=_*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(r-c)<=_*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(a-u)<=_*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(s-l)<=_*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(n-d)<=_*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(o-m)<=_*Math.max(1,Math.abs(o),Math.abs(m))}var pt=tt,ft=ut;function gt(){var t=new m(9);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function vt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function bt(t){var e=new m(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Ft(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function yt(t,e,i,r,a,s,n,o,h){var c=new m(9);return c[0]=t,c[1]=e,c[2]=i,c[3]=r,c[4]=a,c[5]=s,c[6]=n,c[7]=o,c[8]=h,c}function Ot(t,e,i,r,a,s,n,o,h,c){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t[8]=c,t}function xt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Tt(t,e){if(t===e){var i=e[1],r=e[2],a=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=a}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function Ct(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=u*n-o*c,d=-u*s+o*h,_=c*s-n*h,m=i*l+r*d+a*_;return m?(m=1/m,t[0]=l*m,t[1]=(-u*r+a*c)*m,t[2]=(o*r-a*n)*m,t[3]=d*m,t[4]=(u*i-a*h)*m,t[5]=(-o*i+a*s)*m,t[6]=_*m,t[7]=(-c*i+r*h)*m,t[8]=(n*i-r*s)*m,t):null}function Mt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8];return t[0]=n*u-o*c,t[1]=a*c-r*u,t[2]=r*o-a*n,t[3]=o*h-s*u,t[4]=i*u-a*h,t[5]=a*s-i*o,t[6]=s*c-n*h,t[7]=r*h-i*c,t[8]=i*n-r*s,t}function wt(t){var e=t[0],i=t[1],r=t[2],a=t[3],s=t[4],n=t[5],o=t[6],h=t[7],c=t[8];return e*(c*s-n*h)+i*(-c*a+n*o)+r*(h*a-s*o)}function Et(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=i[0],_=i[1],m=i[2],p=i[3],f=i[4],g=i[5],v=i[6],b=i[7],F=i[8];return t[0]=d*r+_*n+m*c,t[1]=d*a+_*o+m*u,t[2]=d*s+_*h+m*l,t[3]=p*r+f*n+g*c,t[4]=p*a+f*o+g*u,t[5]=p*s+f*h+g*l,t[6]=v*r+b*n+F*c,t[7]=v*a+b*o+F*u,t[8]=v*s+b*h+F*l,t}function St(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=i[0],_=i[1];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=o,t[5]=h,t[6]=d*r+_*n+c,t[7]=d*a+_*o+u,t[8]=d*s+_*h+l,t}function At(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=Math.sin(i),_=Math.cos(i);return t[0]=_*r+d*n,t[1]=_*a+d*o,t[2]=_*s+d*h,t[3]=_*n-d*r,t[4]=_*o-d*a,t[5]=_*h-d*s,t[6]=c,t[7]=u,t[8]=l,t}function Pt(t,e,i){var r=i[0],a=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=a*e[3],t[4]=a*e[4],t[5]=a*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function Rt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t}function Bt(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=0,t[3]=-i,t[4]=r,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Dt(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function It(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t}function kt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i+i,o=r+r,h=a+a,c=i*n,u=r*n,l=r*o,d=a*n,_=a*o,m=a*h,p=s*n,f=s*o,g=s*h;return t[0]=1-l-m,t[3]=u-g,t[6]=d+f,t[1]=u+g,t[4]=1-c-m,t[7]=_-p,t[2]=d-f,t[5]=_+p,t[8]=1-c-l,t}function Nt(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15],v=i*o-r*n,b=i*h-a*n,F=i*c-s*n,y=r*h-a*o,O=r*c-s*o,x=a*c-s*h,T=u*p-l*m,C=u*f-d*m,M=u*g-_*m,w=l*f-d*p,E=l*g-_*p,S=d*g-_*f,A=v*S-b*E+F*w+y*M-O*C+x*T;return A?(A=1/A,t[0]=(o*S-h*E+c*w)*A,t[1]=(h*M-n*S-c*C)*A,t[2]=(n*E-o*M+c*T)*A,t[3]=(a*E-r*S-s*w)*A,t[4]=(i*S-a*M+s*C)*A,t[5]=(r*M-i*E-s*T)*A,t[6]=(p*x-f*O+g*y)*A,t[7]=(f*F-m*x-g*b)*A,t[8]=(m*O-p*F+g*v)*A,t):null}function Lt(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Vt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function jt(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}function Gt(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function zt(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function Ut(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}function Ht(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t[6]=e[6]+i[6]*r,t[7]=e[7]+i[7]*r,t[8]=e[8]+i[8]*r,t}function Wt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]}function qt(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=t[8],l=e[0],d=e[1],m=e[2],p=e[3],f=e[4],g=e[5],v=e[6],b=e[7],F=e[8];return Math.abs(i-l)<=_*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(r-d)<=_*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(a-m)<=_*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(s-p)<=_*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(n-f)<=_*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(o-g)<=_*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(h-v)<=_*Math.max(1,Math.abs(h),Math.abs(v))&&Math.abs(c-b)<=_*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(u-F)<=_*Math.max(1,Math.abs(u),Math.abs(F))}var Yt=Et,Xt=zt;function Qt(){var t=new m(16);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Kt(t){var e=new m(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function $t(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Zt(t,e,i,r,a,s,n,o,h,c,u,l,d,_,p,f){var g=new m(16);return g[0]=t,g[1]=e,g[2]=i,g[3]=r,g[4]=a,g[5]=s,g[6]=n,g[7]=o,g[8]=h,g[9]=c,g[10]=u,g[11]=l,g[12]=d,g[13]=_,g[14]=p,g[15]=f,g}function Jt(t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p,f){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t[8]=c,t[9]=u,t[10]=l,t[11]=d,t[12]=_,t[13]=m,t[14]=p,t[15]=f,t}function te(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ee(t,e){if(t===e){var i=e[1],r=e[2],a=e[3],s=e[6],n=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=i,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=s,t[11]=e[14],t[12]=a,t[13]=n,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function ie(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15],v=i*o-r*n,b=i*h-a*n,F=i*c-s*n,y=r*h-a*o,O=r*c-s*o,x=a*c-s*h,T=u*p-l*m,C=u*f-d*m,M=u*g-_*m,w=l*f-d*p,E=l*g-_*p,S=d*g-_*f,A=v*S-b*E+F*w+y*M-O*C+x*T;return A?(A=1/A,t[0]=(o*S-h*E+c*w)*A,t[1]=(a*E-r*S-s*w)*A,t[2]=(p*x-f*O+g*y)*A,t[3]=(d*O-l*x-_*y)*A,t[4]=(h*M-n*S-c*C)*A,t[5]=(i*S-a*M+s*C)*A,t[6]=(f*F-m*x-g*b)*A,t[7]=(u*x-d*F+_*b)*A,t[8]=(n*E-o*M+c*T)*A,t[9]=(r*M-i*E-s*T)*A,t[10]=(m*O-p*F+g*v)*A,t[11]=(l*F-u*O-_*v)*A,t[12]=(o*C-n*w-h*T)*A,t[13]=(i*w-r*C+a*T)*A,t[14]=(p*b-m*y-f*v)*A,t[15]=(u*y-l*b+d*v)*A,t):null}function re(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=e[4],o=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],_=e[11],m=e[12],p=e[13],f=e[14],g=e[15];return t[0]=o*(d*g-_*f)-l*(h*g-c*f)+p*(h*_-c*d),t[1]=-(r*(d*g-_*f)-l*(a*g-s*f)+p*(a*_-s*d)),t[2]=r*(h*g-c*f)-o*(a*g-s*f)+p*(a*c-s*h),t[3]=-(r*(h*_-c*d)-o*(a*_-s*d)+l*(a*c-s*h)),t[4]=-(n*(d*g-_*f)-u*(h*g-c*f)+m*(h*_-c*d)),t[5]=i*(d*g-_*f)-u*(a*g-s*f)+m*(a*_-s*d),t[6]=-(i*(h*g-c*f)-n*(a*g-s*f)+m*(a*c-s*h)),t[7]=i*(h*_-c*d)-n*(a*_-s*d)+u*(a*c-s*h),t[8]=n*(l*g-_*p)-u*(o*g-c*p)+m*(o*_-c*l),t[9]=-(i*(l*g-_*p)-u*(r*g-s*p)+m*(r*_-s*l)),t[10]=i*(o*g-c*p)-n*(r*g-s*p)+m*(r*c-s*o),t[11]=-(i*(o*_-c*l)-n*(r*_-s*l)+u*(r*c-s*o)),t[12]=-(n*(l*f-d*p)-u*(o*f-h*p)+m*(o*d-h*l)),t[13]=i*(l*f-d*p)-u*(r*f-a*p)+m*(r*d-a*l),t[14]=-(i*(o*f-h*p)-n*(r*f-a*p)+m*(r*h-a*o)),t[15]=i*(o*d-h*l)-n*(r*d-a*l)+u*(r*h-a*o),t}function ae(t){var e=t[0],i=t[1],r=t[2],a=t[3],s=t[4],n=t[5],o=t[6],h=t[7],c=t[8],u=t[9],l=t[10],d=t[11],_=t[12],m=t[13],p=t[14],f=t[15];return(e*n-i*s)*(l*f-d*p)-(e*o-r*s)*(u*f-d*m)+(e*h-a*s)*(u*p-l*m)+(i*o-r*n)*(c*f-d*_)-(i*h-a*n)*(c*p-l*_)+(r*h-a*o)*(c*m-u*_)}function se(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],_=e[10],m=e[11],p=e[12],f=e[13],g=e[14],v=e[15],b=i[0],F=i[1],y=i[2],O=i[3];return t[0]=b*r+F*o+y*l+O*p,t[1]=b*a+F*h+y*d+O*f,t[2]=b*s+F*c+y*_+O*g,t[3]=b*n+F*u+y*m+O*v,b=i[4],F=i[5],y=i[6],O=i[7],t[4]=b*r+F*o+y*l+O*p,t[5]=b*a+F*h+y*d+O*f,t[6]=b*s+F*c+y*_+O*g,t[7]=b*n+F*u+y*m+O*v,b=i[8],F=i[9],y=i[10],O=i[11],t[8]=b*r+F*o+y*l+O*p,t[9]=b*a+F*h+y*d+O*f,t[10]=b*s+F*c+y*_+O*g,t[11]=b*n+F*u+y*m+O*v,b=i[12],F=i[13],y=i[14],O=i[15],t[12]=b*r+F*o+y*l+O*p,t[13]=b*a+F*h+y*d+O*f,t[14]=b*s+F*c+y*_+O*g,t[15]=b*n+F*u+y*m+O*v,t}function ne(t,e,i){var r,a,s,n,o,h,c,u,l,d,_,m,p=i[0],f=i[1],g=i[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*g+e[12],t[13]=e[1]*p+e[5]*f+e[9]*g+e[13],t[14]=e[2]*p+e[6]*f+e[10]*g+e[14],t[15]=e[3]*p+e[7]*f+e[11]*g+e[15]):(r=e[0],a=e[1],s=e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],_=e[10],m=e[11],t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=o,t[5]=h,t[6]=c,t[7]=u,t[8]=l,t[9]=d,t[10]=_,t[11]=m,t[12]=r*p+o*f+l*g+e[12],t[13]=a*p+h*f+d*g+e[13],t[14]=s*p+c*f+_*g+e[14],t[15]=n*p+u*f+m*g+e[15]),t}function oe(t,e,i){var r=i[0],a=i[1],s=i[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*a,t[5]=e[5]*a,t[6]=e[6]*a,t[7]=e[7]*a,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function he(t,e,i,r){var a,s,n,o,h,c,u,l,d,m,p,f,g,v,b,F,y,O,x,T,C,M,w,E,S=r[0],A=r[1],P=r[2],R=Math.hypot(S,A,P);return R<_?null:(S*=R=1/R,A*=R,P*=R,a=Math.sin(i),n=1-(s=Math.cos(i)),o=e[0],h=e[1],c=e[2],u=e[3],l=e[4],d=e[5],m=e[6],p=e[7],f=e[8],g=e[9],v=e[10],b=e[11],F=S*S*n+s,y=A*S*n+P*a,O=P*S*n-A*a,x=S*A*n-P*a,T=A*A*n+s,C=P*A*n+S*a,M=S*P*n+A*a,w=A*P*n-S*a,E=P*P*n+s,t[0]=o*F+l*y+f*O,t[1]=h*F+d*y+g*O,t[2]=c*F+m*y+v*O,t[3]=u*F+p*y+b*O,t[4]=o*x+l*T+f*C,t[5]=h*x+d*T+g*C,t[6]=c*x+m*T+v*C,t[7]=u*x+p*T+b*C,t[8]=o*M+l*w+f*E,t[9]=h*M+d*w+g*E,t[10]=c*M+m*w+v*E,t[11]=u*M+p*w+b*E,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function ce(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[4],n=e[5],o=e[6],h=e[7],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=s*a+c*r,t[5]=n*a+u*r,t[6]=o*a+l*r,t[7]=h*a+d*r,t[8]=c*a-s*r,t[9]=u*a-n*r,t[10]=l*a-o*r,t[11]=d*a-h*r,t}function ue(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[0],n=e[1],o=e[2],h=e[3],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a-c*r,t[1]=n*a-u*r,t[2]=o*a-l*r,t[3]=h*a-d*r,t[8]=s*r+c*a,t[9]=n*r+u*a,t[10]=o*r+l*a,t[11]=h*r+d*a,t}function le(t,e,i){var r=Math.sin(i),a=Math.cos(i),s=e[0],n=e[1],o=e[2],h=e[3],c=e[4],u=e[5],l=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=s*a+c*r,t[1]=n*a+u*r,t[2]=o*a+l*r,t[3]=h*a+d*r,t[4]=c*a-s*r,t[5]=u*a-n*r,t[6]=l*a-o*r,t[7]=d*a-h*r,t}function de(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function _e(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function me(t,e,i){var r,a,s,n=i[0],o=i[1],h=i[2],c=Math.hypot(n,o,h);return c<_?null:(n*=c=1/c,o*=c,h*=c,r=Math.sin(e),s=1-(a=Math.cos(e)),t[0]=n*n*s+a,t[1]=o*n*s+h*r,t[2]=h*n*s-o*r,t[3]=0,t[4]=n*o*s-h*r,t[5]=o*o*s+a,t[6]=h*o*s+n*r,t[7]=0,t[8]=n*h*s+o*r,t[9]=o*h*s-n*r,t[10]=h*h*s+a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function pe(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=i,t[7]=0,t[8]=0,t[9]=-i,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function fe(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-i,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=i,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ge(t,e){var i=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=i,t[2]=0,t[3]=0,t[4]=-i,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ve(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=r+r,h=a+a,c=s+s,u=r*o,l=r*h,d=r*c,_=a*h,m=a*c,p=s*c,f=n*o,g=n*h,v=n*c;return t[0]=1-(_+p),t[1]=l+v,t[2]=d-g,t[3]=0,t[4]=l-v,t[5]=1-(u+p),t[6]=m+f,t[7]=0,t[8]=d+g,t[9]=m-f,t[10]=1-(u+_),t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function be(t,e){var i=new m(3),r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=r*r+a*a+s*s+n*n;return l>0?(i[0]=2*(o*n+u*r+h*s-c*a)/l,i[1]=2*(h*n+u*a+c*r-o*s)/l,i[2]=2*(c*n+u*s+o*a-h*r)/l):(i[0]=2*(o*n+u*r+h*s-c*a),i[1]=2*(h*n+u*a+c*r-o*s),i[2]=2*(c*n+u*s+o*a-h*r)),ve(t,e,i),t}function Fe(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function ye(t,e){var i=e[0],r=e[1],a=e[2],s=e[4],n=e[5],o=e[6],h=e[8],c=e[9],u=e[10];return t[0]=Math.hypot(i,r,a),t[1]=Math.hypot(s,n,o),t[2]=Math.hypot(h,c,u),t}function Oe(t,e){var i=new m(3);ye(i,e);var r=1/i[0],a=1/i[1],s=1/i[2],n=e[0]*r,o=e[1]*a,h=e[2]*s,c=e[4]*r,u=e[5]*a,l=e[6]*s,d=e[8]*r,_=e[9]*a,p=e[10]*s,f=n+u+p,g=0;return f>0?(g=2*Math.sqrt(f+1),t[3]=.25*g,t[0]=(l-_)/g,t[1]=(d-h)/g,t[2]=(o-c)/g):n>u&&n>p?(g=2*Math.sqrt(1+n-u-p),t[3]=(l-_)/g,t[0]=.25*g,t[1]=(o+c)/g,t[2]=(d+h)/g):u>p?(g=2*Math.sqrt(1+u-n-p),t[3]=(d-h)/g,t[0]=(o+c)/g,t[1]=.25*g,t[2]=(l+_)/g):(g=2*Math.sqrt(1+p-n-u),t[3]=(o-c)/g,t[0]=(d+h)/g,t[1]=(l+_)/g,t[2]=.25*g),t}function xe(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=e[3],h=a+a,c=s+s,u=n+n,l=a*h,d=a*c,_=a*u,m=s*c,p=s*u,f=n*u,g=o*h,v=o*c,b=o*u,F=r[0],y=r[1],O=r[2];return t[0]=(1-(m+f))*F,t[1]=(d+b)*F,t[2]=(_-v)*F,t[3]=0,t[4]=(d-b)*y,t[5]=(1-(l+f))*y,t[6]=(p+g)*y,t[7]=0,t[8]=(_+v)*O,t[9]=(p-g)*O,t[10]=(1-(l+m))*O,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function Te(t,e,i,r,a){var s=e[0],n=e[1],o=e[2],h=e[3],c=s+s,u=n+n,l=o+o,d=s*c,_=s*u,m=s*l,p=n*u,f=n*l,g=o*l,v=h*c,b=h*u,F=h*l,y=r[0],O=r[1],x=r[2],T=a[0],C=a[1],M=a[2],w=(1-(p+g))*y,E=(_+F)*y,S=(m-b)*y,A=(_-F)*O,P=(1-(d+g))*O,R=(f+v)*O,B=(m+b)*x,D=(f-v)*x,I=(1-(d+p))*x;return t[0]=w,t[1]=E,t[2]=S,t[3]=0,t[4]=A,t[5]=P,t[6]=R,t[7]=0,t[8]=B,t[9]=D,t[10]=I,t[11]=0,t[12]=i[0]+T-(w*T+A*C+B*M),t[13]=i[1]+C-(E*T+P*C+D*M),t[14]=i[2]+M-(S*T+R*C+I*M),t[15]=1,t}function Ce(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i+i,o=r+r,h=a+a,c=i*n,u=r*n,l=r*o,d=a*n,_=a*o,m=a*h,p=s*n,f=s*o,g=s*h;return t[0]=1-l-m,t[1]=u+g,t[2]=d-f,t[3]=0,t[4]=u-g,t[5]=1-c-m,t[6]=_+p,t[7]=0,t[8]=d+f,t[9]=_-p,t[10]=1-c-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Me(t,e,i,r,a,s,n){var o=1/(i-e),h=1/(a-r),c=1/(s-n);return t[0]=2*s*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*s*h,t[6]=0,t[7]=0,t[8]=(i+e)*o,t[9]=(a+r)*h,t[10]=(n+s)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=n*s*2*c,t[15]=0,t}function we(t,e,i,r,a){var s,n=1/Math.tan(e/2);return t[0]=n/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(s=1/(r-a),t[10]=(a+r)*s,t[14]=2*a*r*s):(t[10]=-1,t[14]=-2*r),t}function Ee(t,e,i,r){var a=Math.tan(e.upDegrees*Math.PI/180),s=Math.tan(e.downDegrees*Math.PI/180),n=Math.tan(e.leftDegrees*Math.PI/180),o=Math.tan(e.rightDegrees*Math.PI/180),h=2/(n+o),c=2/(a+s);return t[0]=h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(n-o)*h*.5,t[9]=(a-s)*c*.5,t[10]=r/(i-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*i/(i-r),t[15]=0,t}function Se(t,e,i,r,a,s,n){var o=1/(e-i),h=1/(r-a),c=1/(s-n);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+i)*o,t[13]=(a+r)*h,t[14]=(n+s)*c,t[15]=1,t}function Ae(t,e,i,r){var a,s,n,o,h,c,u,l,d,m,p=e[0],f=e[1],g=e[2],v=r[0],b=r[1],F=r[2],y=i[0],O=i[1],x=i[2];return Math.abs(p-y)<_&&Math.abs(f-O)<_&&Math.abs(g-x)<_?te(t):(u=p-y,l=f-O,d=g-x,a=b*(d*=m=1/Math.hypot(u,l,d))-F*(l*=m),s=F*(u*=m)-v*d,n=v*l-b*u,(m=Math.hypot(a,s,n))?(a*=m=1/m,s*=m,n*=m):(a=0,s=0,n=0),o=l*n-d*s,h=d*a-u*n,c=u*s-l*a,(m=Math.hypot(o,h,c))?(o*=m=1/m,h*=m,c*=m):(o=0,h=0,c=0),t[0]=a,t[1]=o,t[2]=u,t[3]=0,t[4]=s,t[5]=h,t[6]=l,t[7]=0,t[8]=n,t[9]=c,t[10]=d,t[11]=0,t[12]=-(a*p+s*f+n*g),t[13]=-(o*p+h*f+c*g),t[14]=-(u*p+l*f+d*g),t[15]=1,t)}function Pe(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=r[0],h=r[1],c=r[2],u=a-i[0],l=s-i[1],d=n-i[2],_=u*u+l*l+d*d;_>0&&(u*=_=1/Math.sqrt(_),l*=_,d*=_);var m=h*d-c*l,p=c*u-o*d,f=o*l-h*u;return(_=m*m+p*p+f*f)>0&&(m*=_=1/Math.sqrt(_),p*=_,f*=_),t[0]=m,t[1]=p,t[2]=f,t[3]=0,t[4]=l*f-d*p,t[5]=d*m-u*f,t[6]=u*p-l*m,t[7]=0,t[8]=u,t[9]=l,t[10]=d,t[11]=0,t[12]=a,t[13]=s,t[14]=n,t[15]=1,t}function Re(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Be(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function De(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t[9]=e[9]+i[9],t[10]=e[10]+i[10],t[11]=e[11]+i[11],t[12]=e[12]+i[12],t[13]=e[13]+i[13],t[14]=e[14]+i[14],t[15]=e[15]+i[15],t}function Ie(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t[9]=e[9]-i[9],t[10]=e[10]-i[10],t[11]=e[11]-i[11],t[12]=e[12]-i[12],t[13]=e[13]-i[13],t[14]=e[14]-i[14],t[15]=e[15]-i[15],t}function ke(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12]*i,t[13]=e[13]*i,t[14]=e[14]*i,t[15]=e[15]*i,t}function Ne(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t[4]=e[4]+i[4]*r,t[5]=e[5]+i[5]*r,t[6]=e[6]+i[6]*r,t[7]=e[7]+i[7]*r,t[8]=e[8]+i[8]*r,t[9]=e[9]+i[9]*r,t[10]=e[10]+i[10]*r,t[11]=e[11]+i[11]*r,t[12]=e[12]+i[12]*r,t[13]=e[13]+i[13]*r,t[14]=e[14]+i[14]*r,t[15]=e[15]+i[15]*r,t}function Le(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function Ve(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=t[8],l=t[9],d=t[10],m=t[11],p=t[12],f=t[13],g=t[14],v=t[15],b=e[0],F=e[1],y=e[2],O=e[3],x=e[4],T=e[5],C=e[6],M=e[7],w=e[8],E=e[9],S=e[10],A=e[11],P=e[12],R=e[13],B=e[14],D=e[15];return Math.abs(i-b)<=_*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(r-F)<=_*Math.max(1,Math.abs(r),Math.abs(F))&&Math.abs(a-y)<=_*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(s-O)<=_*Math.max(1,Math.abs(s),Math.abs(O))&&Math.abs(n-x)<=_*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(o-T)<=_*Math.max(1,Math.abs(o),Math.abs(T))&&Math.abs(h-C)<=_*Math.max(1,Math.abs(h),Math.abs(C))&&Math.abs(c-M)<=_*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(u-w)<=_*Math.max(1,Math.abs(u),Math.abs(w))&&Math.abs(l-E)<=_*Math.max(1,Math.abs(l),Math.abs(E))&&Math.abs(d-S)<=_*Math.max(1,Math.abs(d),Math.abs(S))&&Math.abs(m-A)<=_*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(p-P)<=_*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(f-R)<=_*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(g-B)<=_*Math.max(1,Math.abs(g),Math.abs(B))&&Math.abs(v-D)<=_*Math.max(1,Math.abs(v),Math.abs(D))}var je=se,Ge=Ie;function ze(){var t=new m(3);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Ue(t){var e=new m(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function He(t){var e=t[0],i=t[1],r=t[2];return Math.hypot(e,i,r)}function We(t,e,i){var r=new m(3);return r[0]=t,r[1]=e,r[2]=i,r}function qe(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Ye(t,e,i,r){return t[0]=e,t[1]=i,t[2]=r,t}function Xe(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function Qe(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function Ke(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t}function $e(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t}function Ze(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function Je(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function ti(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t[2]=Math.min(e[2],i[2]),t}function ei(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t[2]=Math.max(e[2],i[2]),t}function ii(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function ri(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function ai(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t}function si(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2];return Math.hypot(i,r,a)}function ni(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2];return i*i+r*r+a*a}function oi(t){var e=t[0],i=t[1],r=t[2];return e*e+i*i+r*r}function hi(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function ci(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function ui(t,e){var i=e[0],r=e[1],a=e[2],s=i*i+r*r+a*a;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function li(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function di(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[0],o=i[1],h=i[2];return t[0]=a*h-s*o,t[1]=s*n-r*h,t[2]=r*o-a*n,t}function _i(t,e,i,r){var a=e[0],s=e[1],n=e[2];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t[2]=n+r*(i[2]-n),t}function mi(t,e,i,r,a,s){var n=s*s,o=n*(2*s-3)+1,h=n*(s-2)+s,c=n*(s-1),u=n*(3-2*s);return t[0]=e[0]*o+i[0]*h+r[0]*c+a[0]*u,t[1]=e[1]*o+i[1]*h+r[1]*c+a[1]*u,t[2]=e[2]*o+i[2]*h+r[2]*c+a[2]*u,t}function pi(t,e,i,r,a,s){var n=1-s,o=n*n,h=s*s,c=o*n,u=3*s*o,l=3*h*n,d=h*s;return t[0]=e[0]*c+i[0]*u+r[0]*l+a[0]*d,t[1]=e[1]*c+i[1]*u+r[1]*l+a[1]*d,t[2]=e[2]*c+i[2]*u+r[2]*l+a[2]*d,t}function fi(t,e){e=e||1;var i=2*p()*Math.PI,r=2*p()-1,a=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(i)*a,t[1]=Math.sin(i)*a,t[2]=r*e,t}function gi(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[3]*r+i[7]*a+i[11]*s+i[15];return n=n||1,t[0]=(i[0]*r+i[4]*a+i[8]*s+i[12])/n,t[1]=(i[1]*r+i[5]*a+i[9]*s+i[13])/n,t[2]=(i[2]*r+i[6]*a+i[10]*s+i[14])/n,t}function vi(t,e,i){var r=e[0],a=e[1],s=e[2];return t[0]=r*i[0]+a*i[3]+s*i[6],t[1]=r*i[1]+a*i[4]+s*i[7],t[2]=r*i[2]+a*i[5]+s*i[8],t}function bi(t,e,i){var r=i[0],a=i[1],s=i[2],n=i[3],o=e[0],h=e[1],c=e[2],u=a*c-s*h,l=s*o-r*c,d=r*h-a*o,_=a*d-s*l,m=s*u-r*d,p=r*l-a*u,f=2*n;return u*=f,l*=f,d*=f,_*=2,m*=2,p*=2,t[0]=o+u+_,t[1]=h+l+m,t[2]=c+d+p,t}function Fi(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[0],s[1]=a[1]*Math.cos(r)-a[2]*Math.sin(r),s[2]=a[1]*Math.sin(r)+a[2]*Math.cos(r),t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function yi(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[2]*Math.sin(r)+a[0]*Math.cos(r),s[1]=a[1],s[2]=a[2]*Math.cos(r)-a[0]*Math.sin(r),t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function Oi(t,e,i,r){var a=[],s=[];return a[0]=e[0]-i[0],a[1]=e[1]-i[1],a[2]=e[2]-i[2],s[0]=a[0]*Math.cos(r)-a[1]*Math.sin(r),s[1]=a[0]*Math.sin(r)+a[1]*Math.cos(r),s[2]=a[2],t[0]=s[0]+i[0],t[1]=s[1]+i[1],t[2]=s[2]+i[2],t}function xi(t,e){var i=t[0],r=t[1],a=t[2],s=e[0],n=e[1],o=e[2],h=Math.sqrt(i*i+r*r+a*a)*Math.sqrt(s*s+n*n+o*o),c=h&&li(t,e)/h;return Math.acos(Math.min(Math.max(c,-1),1))}function Ti(t){return t[0]=0,t[1]=0,t[2]=0,t}function Ci(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Mi(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function wi(t,e){var i=t[0],r=t[1],a=t[2],s=e[0],n=e[1],o=e[2];return Math.abs(i-s)<=_*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(r-n)<=_*Math.max(1,Math.abs(r),Math.abs(n))&&Math.abs(a-o)<=_*Math.max(1,Math.abs(a),Math.abs(o))}var Ei,Si=Qe,Ai=Ke,Pi=$e,Ri=si,Bi=ni,Di=He,Ii=oi,ki=(Ei=ze(),function(t,e,i,r,a,s){var n,o;for(e||(e=3),i||(i=0),o=r?Math.min(r*e+i,t.length):t.length,n=i;n<o;n+=e)Ei[0]=t[n],Ei[1]=t[n+1],Ei[2]=t[n+2],a(Ei,Ei,s),t[n]=Ei[0],t[n+1]=Ei[1],t[n+2]=Ei[2];return t});function Ni(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Li(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Vi(t,e,i,r){var a=new m(4);return a[0]=t,a[1]=e,a[2]=i,a[3]=r,a}function ji(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function Gi(t,e,i,r,a){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t}function zi(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t}function Ui(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t}function Hi(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t[3]=e[3]*i[3],t}function Wi(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t[3]=e[3]/i[3],t}function qi(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t}function Yi(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t}function Xi(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t[2]=Math.min(e[2],i[2]),t[3]=Math.min(e[3],i[3]),t}function Qi(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t[2]=Math.max(e[2],i[2]),t[3]=Math.max(e[3],i[3]),t}function Ki(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t}function $i(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t}function Zi(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t[2]=e[2]+i[2]*r,t[3]=e[3]+i[3]*r,t}function Ji(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return Math.hypot(i,r,a,s)}function tr(t,e){var i=e[0]-t[0],r=e[1]-t[1],a=e[2]-t[2],s=e[3]-t[3];return i*i+r*r+a*a+s*s}function er(t){var e=t[0],i=t[1],r=t[2],a=t[3];return Math.hypot(e,i,r,a)}function ir(t){var e=t[0],i=t[1],r=t[2],a=t[3];return e*e+i*i+r*r+a*a}function rr(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t}function ar(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}function sr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*i+r*r+a*a+s*s;return n>0&&(n=1/Math.sqrt(n)),t[0]=i*n,t[1]=r*n,t[2]=a*n,t[3]=s*n,t}function nr(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function or(t,e,i,r){var a=i[0]*r[1]-i[1]*r[0],s=i[0]*r[2]-i[2]*r[0],n=i[0]*r[3]-i[3]*r[0],o=i[1]*r[2]-i[2]*r[1],h=i[1]*r[3]-i[3]*r[1],c=i[2]*r[3]-i[3]*r[2],u=e[0],l=e[1],d=e[2],_=e[3];return t[0]=l*c-d*h+_*o,t[1]=-u*c+d*n-_*s,t[2]=u*h-l*n+_*a,t[3]=-u*o+l*s-d*a,t}function hr(t,e,i,r){var a=e[0],s=e[1],n=e[2],o=e[3];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t[2]=n+r*(i[2]-n),t[3]=o+r*(i[3]-o),t}function cr(t,e){var i,r,a,s,n,o;e=e||1;do{n=(i=2*p()-1)*i+(r=2*p()-1)*r}while(n>=1);do{o=(a=2*p()-1)*a+(s=2*p()-1)*s}while(o>=1);var h=Math.sqrt((1-n)/o);return t[0]=e*i,t[1]=e*r,t[2]=e*a*h,t[3]=e*s*h,t}function ur(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3];return t[0]=i[0]*r+i[4]*a+i[8]*s+i[12]*n,t[1]=i[1]*r+i[5]*a+i[9]*s+i[13]*n,t[2]=i[2]*r+i[6]*a+i[10]*s+i[14]*n,t[3]=i[3]*r+i[7]*a+i[11]*s+i[15]*n,t}function lr(t,e,i){var r=e[0],a=e[1],s=e[2],n=i[0],o=i[1],h=i[2],c=i[3],u=c*r+o*s-h*a,l=c*a+h*r-n*s,d=c*s+n*a-o*r,_=-n*r-o*a-h*s;return t[0]=u*c+_*-n+l*-h-d*-o,t[1]=l*c+_*-o+d*-n-u*-h,t[2]=d*c+_*-h+u*-o-l*-n,t[3]=e[3],t}function dr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function _r(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function mr(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function pr(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=e[0],o=e[1],h=e[2],c=e[3];return Math.abs(i-n)<=_*Math.max(1,Math.abs(i),Math.abs(n))&&Math.abs(r-o)<=_*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(a-h)<=_*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(s-c)<=_*Math.max(1,Math.abs(s),Math.abs(c))}var fr=Ui,gr=Hi,vr=Wi,br=Ji,Fr=tr,yr=er,Or=ir,xr=function(){var t=Ni();return function(e,i,r,a,s,n){var o,h;for(i||(i=4),r||(r=0),h=a?Math.min(a*i+r,e.length):e.length,o=r;o<h;o+=i)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],t[3]=e[o+3],s(t,t,n),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2],e[o+3]=t[3];return e}}();function Tr(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Cr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Mr(t,e,i){i*=.5;var r=Math.sin(i);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(i),t}function wr(t,e){var i=2*Math.acos(e[3]),r=Math.sin(i/2);return r>_?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),i}function Er(t,e){var i=ra(t,e);return Math.acos(2*i*i-1)}function Sr(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*u+n*o+a*c-s*h,t[1]=a*u+n*h+s*o-r*c,t[2]=s*u+n*c+r*h-a*o,t[3]=n*u-r*o-a*h-s*c,t}function Ar(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+n*o,t[1]=a*h+s*o,t[2]=s*h-a*o,t[3]=n*h-r*o,t}function Pr(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h-s*o,t[1]=a*h+n*o,t[2]=s*h+r*o,t[3]=n*h-a*o,t}function Rr(t,e,i){i*=.5;var r=e[0],a=e[1],s=e[2],n=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=r*h+a*o,t[1]=a*h-r*o,t[2]=s*h+n*o,t[3]=n*h-s*o,t}function Br(t,e){var i=e[0],r=e[1],a=e[2];return t[0]=i,t[1]=r,t[2]=a,t[3]=Math.sqrt(Math.abs(1-i*i-r*r-a*a)),t}function Dr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=Math.sqrt(i*i+r*r+a*a),o=Math.exp(s),h=n>0?o*Math.sin(n)/n:0;return t[0]=i*h,t[1]=r*h,t[2]=a*h,t[3]=o*Math.cos(n),t}function Ir(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=Math.sqrt(i*i+r*r+a*a),o=n>0?Math.atan2(n,s)/n:0;return t[0]=i*o,t[1]=r*o,t[2]=a*o,t[3]=.5*Math.log(i*i+r*r+a*a+s*s),t}function kr(t,e,i){return Ir(t,e),ia(t,t,i),Dr(t,t),t}function Nr(t,e,i,r){var a,s,n,o,h,c=e[0],u=e[1],l=e[2],d=e[3],m=i[0],p=i[1],f=i[2],g=i[3];return(s=c*m+u*p+l*f+d*g)<0&&(s=-s,m=-m,p=-p,f=-f,g=-g),1-s>_?(a=Math.acos(s),n=Math.sin(a),o=Math.sin((1-r)*a)/n,h=Math.sin(r*a)/n):(o=1-r,h=r),t[0]=o*c+h*m,t[1]=o*u+h*p,t[2]=o*l+h*f,t[3]=o*d+h*g,t}function Lr(t){var e=p(),i=p(),r=p(),a=Math.sqrt(1-e),s=Math.sqrt(e);return t[0]=a*Math.sin(2*Math.PI*i),t[1]=a*Math.cos(2*Math.PI*i),t[2]=s*Math.sin(2*Math.PI*r),t[3]=s*Math.cos(2*Math.PI*r),t}function Vr(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=i*i+r*r+a*a+s*s,o=n?1/n:0;return t[0]=-i*o,t[1]=-r*o,t[2]=-a*o,t[3]=s*o,t}function jr(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function Gr(t,e){var i,r=e[0]+e[4]+e[8];if(r>0)i=Math.sqrt(r+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var a=0;e[4]>e[0]&&(a=1),e[8]>e[3*a+a]&&(a=2);var s=(a+1)%3,n=(a+2)%3;i=Math.sqrt(e[3*a+a]-e[3*s+s]-e[3*n+n]+1),t[a]=.5*i,i=.5/i,t[3]=(e[3*s+n]-e[3*n+s])*i,t[s]=(e[3*s+a]+e[3*a+s])*i,t[n]=(e[3*n+a]+e[3*a+n])*i}return t}function zr(t,e,i,r){var a=.5*Math.PI/180;e*=a,i*=a,r*=a;var s=Math.sin(e),n=Math.cos(e),o=Math.sin(i),h=Math.cos(i),c=Math.sin(r),u=Math.cos(r);return t[0]=s*h*u-n*o*c,t[1]=n*o*u+s*h*c,t[2]=n*h*c-s*o*u,t[3]=n*h*u+s*o*c,t}function Ur(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Hr,Wr,qr,Yr,Xr,Qr,Kr=Li,$r=Vi,Zr=ji,Jr=Gi,ta=zi,ea=Sr,ia=$i,ra=nr,aa=hr,sa=er,na=sa,oa=ir,ha=oa,ca=sr,ua=mr,la=pr,da=(Hr=ze(),Wr=We(1,0,0),qr=We(0,1,0),function(t,e,i){var r=li(e,i);return r<-.999999?(di(Hr,Wr,e),Di(Hr)<1e-6&&di(Hr,qr,e),ui(Hr,Hr),Mr(t,Hr,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(di(Hr,e,i),t[0]=Hr[0],t[1]=Hr[1],t[2]=Hr[2],t[3]=1+r,ca(t,t))}),_a=(Yr=Tr(),Xr=Tr(),function(t,e,i,r,a,s){return Nr(Yr,e,a,s),Nr(Xr,i,r,s),Nr(t,Yr,Xr,2*s*(1-s)),t}),ma=(Qr=gt(),function(t,e,i,r){return Qr[0]=i[0],Qr[3]=i[1],Qr[6]=i[2],Qr[1]=r[0],Qr[4]=r[1],Qr[7]=r[2],Qr[2]=-e[0],Qr[5]=-e[1],Qr[8]=-e[2],ca(t,Gr(t,Qr))});function pa(){var t=new m(8);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function fa(t){var e=new m(8);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function ga(t,e,i,r,a,s,n,o){var h=new m(8);return h[0]=t,h[1]=e,h[2]=i,h[3]=r,h[4]=a,h[5]=s,h[6]=n,h[7]=o,h}function va(t,e,i,r,a,s,n){var o=new m(8);o[0]=t,o[1]=e,o[2]=i,o[3]=r;var h=.5*a,c=.5*s,u=.5*n;return o[4]=h*r+c*i-u*e,o[5]=c*r+u*t-h*i,o[6]=u*r+h*e-c*t,o[7]=-h*t-c*e-u*i,o}function ba(t,e,i){var r=.5*i[0],a=.5*i[1],s=.5*i[2],n=e[0],o=e[1],h=e[2],c=e[3];return t[0]=n,t[1]=o,t[2]=h,t[3]=c,t[4]=r*c+a*h-s*o,t[5]=a*c+s*n-r*h,t[6]=s*c+r*o-a*n,t[7]=-r*n-a*o-s*h,t}function Fa(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t}function ya(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function Oa(t,e){var i=Tr();Oe(i,e);var r=new m(3);return Fe(r,e),ba(t,i,r),t}function xa(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function Ta(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function Ca(t,e,i,r,a,s,n,o,h){return t[0]=e,t[1]=i,t[2]=r,t[3]=a,t[4]=s,t[5]=n,t[6]=o,t[7]=h,t}var Ma=Zr;function wa(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t}var Ea=Zr;function Sa(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t}function Aa(t,e){var i=e[4],r=e[5],a=e[6],s=e[7],n=-e[0],o=-e[1],h=-e[2],c=e[3];return t[0]=2*(i*c+s*n+r*h-a*o),t[1]=2*(r*c+s*o+a*n-i*h),t[2]=2*(a*c+s*h+i*o-r*n),t}function Pa(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=.5*i[0],h=.5*i[1],c=.5*i[2],u=e[4],l=e[5],d=e[6],_=e[7];return t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=n*o+a*c-s*h+u,t[5]=n*h+s*o-r*c+l,t[6]=n*c+r*h-a*o+d,t[7]=-r*o-a*h-s*c+_,t}function Ra(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return Ar(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function Ba(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return Pr(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function Da(t,e,i){var r=-e[0],a=-e[1],s=-e[2],n=e[3],o=e[4],h=e[5],c=e[6],u=e[7],l=o*n+u*r+h*s-c*a,d=h*n+u*a+c*r-o*s,_=c*n+u*s+o*a-h*r,m=u*n-o*r-h*a-c*s;return Rr(t,e,i),r=t[0],a=t[1],s=t[2],n=t[3],t[4]=l*n+m*r+d*s-_*a,t[5]=d*n+m*a+_*r-l*s,t[6]=_*n+m*s+l*a-d*r,t[7]=m*n-l*r-d*a-_*s,t}function Ia(t,e,i){var r=i[0],a=i[1],s=i[2],n=i[3],o=e[0],h=e[1],c=e[2],u=e[3];return t[0]=o*n+u*r+h*s-c*a,t[1]=h*n+u*a+c*r-o*s,t[2]=c*n+u*s+o*a-h*r,t[3]=u*n-o*r-h*a-c*s,o=e[4],h=e[5],c=e[6],u=e[7],t[4]=o*n+u*r+h*s-c*a,t[5]=h*n+u*a+c*r-o*s,t[6]=c*n+u*s+o*a-h*r,t[7]=u*n-o*r-h*a-c*s,t}function ka(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[0],h=i[1],c=i[2],u=i[3];return t[0]=r*u+n*o+a*c-s*h,t[1]=a*u+n*h+s*o-r*c,t[2]=s*u+n*c+r*h-a*o,t[3]=n*u-r*o-a*h-s*c,o=i[4],h=i[5],c=i[6],u=i[7],t[4]=r*u+n*o+a*c-s*h,t[5]=a*u+n*h+s*o-r*c,t[6]=s*u+n*c+r*h-a*o,t[7]=n*u-r*o-a*h-s*c,t}function Na(t,e,i,r){if(Math.abs(r)<_)return xa(t,e);var a=Math.hypot(i[0],i[1],i[2]);r*=.5;var s=Math.sin(r),n=s*i[0]/a,o=s*i[1]/a,h=s*i[2]/a,c=Math.cos(r),u=e[0],l=e[1],d=e[2],m=e[3];t[0]=u*c+m*n+l*h-d*o,t[1]=l*c+m*o+d*n-u*h,t[2]=d*c+m*h+u*o-l*n,t[3]=m*c-u*n-l*o-d*h;var p=e[4],f=e[5],g=e[6],v=e[7];return t[4]=p*c+v*n+f*h-g*o,t[5]=f*c+v*o+g*n-p*h,t[6]=g*c+v*h+p*o-f*n,t[7]=v*c-p*n-f*o-g*h,t}function La(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t}function Va(t,e,i){var r=e[0],a=e[1],s=e[2],n=e[3],o=i[4],h=i[5],c=i[6],u=i[7],l=e[4],d=e[5],_=e[6],m=e[7],p=i[0],f=i[1],g=i[2],v=i[3];return t[0]=r*v+n*p+a*g-s*f,t[1]=a*v+n*f+s*p-r*g,t[2]=s*v+n*g+r*f-a*p,t[3]=n*v-r*p-a*f-s*g,t[4]=r*u+n*o+a*c-s*h+l*v+m*p+d*g-_*f,t[5]=a*u+n*h+s*o-r*c+d*v+m*f+_*p-l*g,t[6]=s*u+n*c+r*h-a*o+_*v+m*g+l*f-d*p,t[7]=n*u-r*o-a*h-s*c+m*v-l*p-d*f-_*g,t}var ja=Va;function Ga(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t}var za=ra;function Ua(t,e,i,r){var a=1-r;return za(e,i)<0&&(r=-r),t[0]=e[0]*a+i[0]*r,t[1]=e[1]*a+i[1]*r,t[2]=e[2]*a+i[2]*r,t[3]=e[3]*a+i[3]*r,t[4]=e[4]*a+i[4]*r,t[5]=e[5]*a+i[5]*r,t[6]=e[6]*a+i[6]*r,t[7]=e[7]*a+i[7]*r,t}function Ha(t,e){var i=Xa(e);return t[0]=-e[0]/i,t[1]=-e[1]/i,t[2]=-e[2]/i,t[3]=e[3]/i,t[4]=-e[4]/i,t[5]=-e[5]/i,t[6]=-e[6]/i,t[7]=e[7]/i,t}function Wa(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t}var qa=sa,Ya=qa,Xa=oa,Qa=Xa;function Ka(t,e){var i=Xa(e);if(i>0){i=Math.sqrt(i);var r=e[0]/i,a=e[1]/i,s=e[2]/i,n=e[3]/i,o=e[4],h=e[5],c=e[6],u=e[7],l=r*o+a*h+s*c+n*u;t[0]=r,t[1]=a,t[2]=s,t[3]=n,t[4]=(o-r*l)/i,t[5]=(h-a*l)/i,t[6]=(c-s*l)/i,t[7]=(u-n*l)/i}return t}function $a(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function Za(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]}function Ja(t,e){var i=t[0],r=t[1],a=t[2],s=t[3],n=t[4],o=t[5],h=t[6],c=t[7],u=e[0],l=e[1],d=e[2],m=e[3],p=e[4],f=e[5],g=e[6],v=e[7];return Math.abs(i-u)<=_*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(r-l)<=_*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(a-d)<=_*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(s-m)<=_*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(n-p)<=_*Math.max(1,Math.abs(n),Math.abs(p))&&Math.abs(o-f)<=_*Math.max(1,Math.abs(o),Math.abs(f))&&Math.abs(h-g)<=_*Math.max(1,Math.abs(h),Math.abs(g))&&Math.abs(c-v)<=_*Math.max(1,Math.abs(c),Math.abs(v))}function ts(){var t=new m(2);return m!=Float32Array&&(t[0]=0,t[1]=0),t}function es(t){var e=new m(2);return e[0]=t[0],e[1]=t[1],e}function is(t,e){var i=new m(2);return i[0]=t,i[1]=e,i}function rs(t,e){return t[0]=e[0],t[1]=e[1],t}function as(t,e,i){return t[0]=e,t[1]=i,t}function ss(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t}function ns(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t}function os(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t}function hs(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t}function cs(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function us(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function ls(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t}function ds(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t}function _s(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function ms(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t}function ps(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t}function fs(t,e){var i=e[0]-t[0],r=e[1]-t[1];return Math.hypot(i,r)}function gs(t,e){var i=e[0]-t[0],r=e[1]-t[1];return i*i+r*r}function vs(t){var e=t[0],i=t[1];return Math.hypot(e,i)}function bs(t){var e=t[0],i=t[1];return e*e+i*i}function Fs(t,e){return t[0]=-e[0],t[1]=-e[1],t}function ys(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function Os(t,e){var i=e[0],r=e[1],a=i*i+r*r;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t}function xs(t,e){return t[0]*e[0]+t[1]*e[1]}function Ts(t,e,i){var r=e[0]*i[1]-e[1]*i[0];return t[0]=t[1]=0,t[2]=r,t}function Cs(t,e,i,r){var a=e[0],s=e[1];return t[0]=a+r*(i[0]-a),t[1]=s+r*(i[1]-s),t}function Ms(t,e){e=e||1;var i=2*p()*Math.PI;return t[0]=Math.cos(i)*e,t[1]=Math.sin(i)*e,t}function ws(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[2]*a,t[1]=i[1]*r+i[3]*a,t}function Es(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[2]*a+i[4],t[1]=i[1]*r+i[3]*a+i[5],t}function Ss(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[3]*a+i[6],t[1]=i[1]*r+i[4]*a+i[7],t}function As(t,e,i){var r=e[0],a=e[1];return t[0]=i[0]*r+i[4]*a+i[12],t[1]=i[1]*r+i[5]*a+i[13],t}function Ps(t,e,i,r){var a=e[0]-i[0],s=e[1]-i[1],n=Math.sin(r),o=Math.cos(r);return t[0]=a*o-s*n+i[0],t[1]=a*n+s*o+i[1],t}function Rs(t,e){var i=t[0],r=t[1],a=e[0],s=e[1],n=Math.sqrt(i*i+r*r)*Math.sqrt(a*a+s*s),o=n&&(i*a+r*s)/n;return Math.acos(Math.min(Math.max(o,-1),1))}function Bs(t){return t[0]=0,t[1]=0,t}function Ds(t){return"vec2("+t[0]+", "+t[1]+")"}function Is(t,e){return t[0]===e[0]&&t[1]===e[1]}function ks(t,e){var i=t[0],r=t[1],a=e[0],s=e[1];return Math.abs(i-a)<=_*Math.max(1,Math.abs(i),Math.abs(a))&&Math.abs(r-s)<=_*Math.max(1,Math.abs(r),Math.abs(s))}var Ns=vs,Ls=ns,Vs=os,js=hs,Gs=fs,zs=gs,Us=bs,Hs=function(){var t=ts();return function(e,i,r,a,s,n){var o,h;for(i||(i=2),r||(r=0),h=a?Math.min(a*i+r,e.length):e.length,o=r;o<h;o+=i)t[0]=e[o],t[1]=e[o+1],s(t,t,n),e[o]=t[0],e[o+1]=t[1];return e}}()},4500:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(e,i);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,a)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),a(i(7290),e),a(i(7807),e),a(i(4726),e),a(i(7316),e),a(i(2022),e)},2022:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Base64Binary=void 0;class i{static decodeArrayBuffer(t){const e=t.length/4*3,i=new ArrayBuffer(e);return this.decode(t,i),i}static removePaddingChars(t){return 64==i._keyStr.indexOf(t.charAt(t.length-1))?t.substring(0,t.length-1):t}static decode(t,e){t=this.removePaddingChars(t),t=this.removePaddingChars(t);const r=parseInt((t.length/4*3).toString(),10);let a,s,n,o,h,c,u,l,d=0,_=0;for(a=e?new Uint8Array(e):new Uint8Array(r),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,""),d=0;d<r;d+=3)h=i._keyStr.indexOf(t.charAt(_++)),c=i._keyStr.indexOf(t.charAt(_++)),u=i._keyStr.indexOf(t.charAt(_++)),l=i._keyStr.indexOf(t.charAt(_++)),s=h<<2|c>>4,n=(15&c)<<4|u>>2,o=(3&u)<<6|l,a[d]=s,64!=u&&(a[d+1]=n),64!=l&&(a[d+2]=o);return a}}e.Base64Binary=i},8096:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.STEnumHTTPErrorCode=void 0,(i=e.STEnumHTTPErrorCode||(e.STEnumHTTPErrorCode={}))[i.Ok=200]="Ok",i[i.Created=201]="Created",i[i.MultipleChoices=300]="MultipleChoices",i[i.NotModified=304]="NotModified",i[i.BadRequest=400]="BadRequest",i[i.Unauthorized=401]="Unauthorized",i[i.Forbidden=403]="Forbidden",i[i.NotFound=404]="NotFound",i[i.MethodNotAllowed=405]="MethodNotAllowed",i[i.InternalServerError=500]="InternalServerError",i[i.NotImplemented=501]="NotImplemented",i[i.ServiceUnavailable=503]="ServiceUnavailable"},7290:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.STHelpers=void 0;const r=i(7316);class a{static callIn(t,e,i){return setTimeout((t=>e(t)),t,i)}static getDigitsByValue(t,e){let i=t.toString();const r=e-i.length;for(let t=0;t<r;t++)i="0"+i;return i}static clone(t){const e=t instanceof Date,i=JSON.parse(JSON.stringify(t));return e||a.cloneIterate(i),e?new Date(i):i}static cloneIterate(t){t&&Object.entries(t).forEach((e=>{const i=e[0];"object"==typeof t[i]?a.cloneIterate(t[i]):r.STUtils.isStringActuallyDateRepresentation(t[i])&&(t[i]=new Date(t[i]))}))}static removeTrailingComma(t){const e=(t=t.trim()).lastIndexOf(",");return-1!==e&&e===t.length-1?t.substring(0,e):t}static formatString(t,...e){return e.forEach(((e,i)=>{t=r.STUtils.isNullOrEmpty(e)?a.removeEmptyParameter(t,i):t.replace(`{${i}}`,e)})),-1!==t.indexOf("?")&&t.length-1===t.indexOf("?")&&(t=t.substring(0,t.indexOf("?"))),t}static removeEmptyParameter(t,e){if(a.isParameterProperty(t,e)){const i=a.getParameterPropertyDetails(t,e);t=a.removeParameterPropOfPath(t,i)}return t}static isParameterProperty(t,e){const i=t.indexOf(`{${e}}`);return"="===t[i-1]}static getParameterPropertyDetails(t,e){const i=t.indexOf(`{${e}}`);let r=1,a=!0,s=!1;for(;a;)"?"===t[i-r]?(a=!1,s=!0):"&"===t[i-r]&&(a=!1),r++;return{isFirstParameter:s,firstIndex:i-r+1,lastIndex:t.indexOf("}",i)+1,hasNextParameter:-1!==t.indexOf(`{${e}}`,i)}}static removeParameterPropOfPath(t,e){return e.isFirstParameter?`${t.substring(0,e.firstIndex)}?${t.substring(e.hasNextParameter?e.lastIndex+1:e.lastIndex)}`:t.substring(0,e.firstIndex)+(e.hasNextParameter?"":"&")+t.substring(e.lastIndex)}static eraseCharsInString(t,e){for(const i of e)t=t.replace(i,"");return t}}e.STHelpers=a},4726:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7807:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7316:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.STUtils=void 0;const stEnumHttpErrorCode_1=__webpack_require__(8096),base64_binary_1=__webpack_require__(2022);class STUtils{static isNullOrEmpty(t){return!(t=t?t.toString():t)||0===t.trim().length}static isString(t){return"string"==typeof t||t instanceof String}static isObjectEmpty(t){return 0===Object.keys(t).length}static ternaryNotNull(t,e,i){return t?e:i}static replaceAllInString(t,e,i){return t.split(e).join(i)}static isStringActuallyDateRepresentation(t){return STUtils._regExDate.test(t)}static instanceByClassName(t,e){return new Function("arg1",`return new ${t}(arg1)`)(e)}static instanceByType(t){return new t}static instanceByTypeWithArgs(t,...e){return new t(...e)}static isPowerOfTwo(t){return 0==(t&t-1)}static nextHighestPowerOfTwo(t){--t;for(let e=1;e<32;e<<=1)t|=t>>e;return t+1}static createGuid(){const t=[];for(let e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);const e=4294967296*Math.random()>>>0,i=4294967296*Math.random()>>>0,r=4294967296*Math.random()>>>0,a=4294967296*Math.random()>>>0;return t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&i]+t[i>>8&255]+"-"+t[i>>16&15|64]+t[i>>24&255]+"-"+t[63&r|128]+t[r>>8&255]+"-"+t[r>>16&255]+t[r>>24&255]+t[255&a]+t[a>>8&255]+t[a>>16&255]+t[a>>24&255]}static countPropertiesInObject(t){let e=0;for(const i of Object.keys(t))t.hasOwnProperty(i)&&++e;return e}static arrayInsertArray(t,e,i){for(let r=i.length-1;r>=0;r--)t.splice(e,0,i[r]);return t}static isNullOrUndefinedOrWhiteSpace(t){let e=null==t;return e=e||0===t.length,e}static getFileNameWithoutExtension(t){return t.substr(0,t.lastIndexOf("."))}static getFileNameFromPath(t){return t.replace(/^.*(\\|\/|\:)/,"")}static getExtensionFromFileName(t){return t.substr(t.lastIndexOf(".")+1)}static validateFileType(t,e){return e&&0===t.trim().length&&(t="text/"+(t=STUtils.getExtensionFromFileName(e))),t}static ajaxJustGetHtml(t,e){return new Promise(((i,r)=>{$.get(t,(t=>{i({content:t,args:e})}),"html").fail((()=>{r()}))}))}static ajaxGetHtmlValAndExec(t,e){return new Promise(((i,r)=>{$.get(t,(t=>{STUtils.validateAndExecuteHtml(t),i({content:t,args:e})}),"html").fail((()=>{r()}))}))}static validateAndExecuteHtml(html){const scriptAttached=html.match(/<script\b[^>]*>([\s\S]*?)<\/script>/im);if(scriptAttached)try{eval(scriptAttached[1])}catch(t){t instanceof SyntaxError&&STUtils.staticDebugConsole.error(this,t)}}static dynamicLoadAndAppendCss(t,e){return new Promise((i=>{const r=document.createElement("link");r.rel="stylesheet",r.type="text/css",r.href=t,document.getElementsByTagName("HEAD")[0].appendChild(r),i({content:r,args:e})}))}static mergeObjects(t,e){const i={};for(const e of Object.keys(t))i[e.toString()]=t[e];for(const t of Object.keys(e))i[t.toString()]=e[t];return i}static onLoseFocus(t,e,i,r){const a=r?`click.${r}`:"click";t.on(a,(t=>{let r=!0;const a=$(t.target),s=a.parents(),n=e.split(",");if(STUtils.compareWithMultiple(a.attr("id"),n))r=!1;else for(const t of s)if(STUtils.compareWithMultiple($(t).attr("id"),n)){r=!1;break}i&&i(r)}))}static compareWithMultiple(t,e){return e.some((e=>e===t))}static verifyFixFileNameExtension(t,e){const i=t.lastIndexOf(".");if(-1===i)t=`${t}.${e}`;else if(t.substring(i+1,t.length)!==e){const r=t.substr(0,i);t=`${r}.${e}`}return t}static existsClass(t,e){let i=!1;return t&&(i=t.split(" ").some((t=>t===e))),i}static cloneObjectContainer(t){const e={};for(const i of Object.keys(t))e[i]=t[i];return e}static deepClone(t){return JSON.parse(JSON.stringify(t))}static isServerHostReachable(){const t=new(window.ActiveXObject||XMLHttpRequest)("Microsoft.XMLHTTP");t.open("HEAD",`//${window.location.hostname}/?rand=${Math.floor(65536*(1+Math.random()))}`,!1);try{return t.send(),t.status>=stEnumHttpErrorCode_1.STEnumHTTPErrorCode.Ok&&(t.status<stEnumHttpErrorCode_1.STEnumHTTPErrorCode.MultipleChoices||t.status===stEnumHttpErrorCode_1.STEnumHTTPErrorCode.NotModified)||t.status===stEnumHttpErrorCode_1.STEnumHTTPErrorCode.NotFound}catch(t){return!1}}static downloadToDesktop(t,e,i){const r=document,a=r.createElement("a");if(i=i||"application/octet-stream",navigator.msSaveBlob)return navigator.msSaveBlob(new Blob([t],{type:i}),e);if("download"in a)return a.href=`data:${i},${encodeURIComponent(t)}`,a.setAttribute("download",e),a.innerHTML="downloading...",r.body.appendChild(a),setTimeout((()=>{a.click(),r.body.removeChild(a)}),66),!0;const s=r.createElement("iframe");return r.body.appendChild(s),s.src=`data:${i},${encodeURIComponent(t)}`,setTimeout((()=>r.body.removeChild(s)),333),!0}static uint8ArrayToBase64(t){let e="";const i=t.byteLength;for(let r=0;r<i;r++)e+=String.fromCharCode(t[r]);return window.btoa(e)}static arrayBufferToBase64(t){let e="";const i=new Uint8Array(t),r=i.byteLength;for(let t=0;t<r;t++)e+=String.fromCharCode(i[t]);return window.btoa(e)}static base64ToArrayBuffer(t){return base64_binary_1.Base64Binary.decodeArrayBuffer(t)}static getIndexCoincidenceOn(t,e){const i=[];let r=0,a=!0;const s=e.length-1;for(;a;){const n=t.indexOf(e,r);a=-1!==n,a&&(r=r=n+s,i.push({word:e,index:n}))}return i}static findPreviousChar(t,e,i){let r="",a=!0,s=i;for(;a;){const i=t.charAt(s--);e.some((t=>t===i))||(r=i,a=!1,s<0&&(a=!1))}return{previousChar:r,index:s}}static findNextChar(t,e,i){let r="",a=!0,s=i;const n=t.length;for(;a;){const i=t.charAt(s++);e.some((t=>t===i))||(r=i,a=!1,s>=n&&(a=!1))}return{nextChar:r,index:s-1}}static findClosingChar(t,e,i,r){let a=0,s=!0,n=0,o=0,h=0;const c=t.length;for(;s;){const u=t.charAt(r+n++);u===e?o++:u===i&&h++,o===h&&0!==o&&0!==h&&(s=!1,a=r+(n-1)),s&&r+n>=c&&(s=!1)}return a}static number2Binary(t){return(t>>>0).toString(2)}static binary2Number(t){return parseInt(t,2)}static rangeLimiter(t,e,i){return(t=t>=i?i:t)<=e?e:t}static eraseCharsInString(t,e){for(let i=0;i<e.length;i++)t=t.replace(e[i],"");return t}static existsPropertyAndValue(t,e){return t&&t.hasOwnProperty(e)&&!STUtils.isNullOrEmpty(t[e].toString())}static getPropertyValueOrDefault(t,e,i){return STUtils.existsPropertyAndValue(t,e)?t[e]:i}static doesObjImplementsFunctionFromInterface(t,e){return!!t[e]}static isFunction(t){return!!(t&&t.constructor&&t.call&&t.apply)}static escapeHtml(t){const e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,(t=>e[t]))}}STUtils._regExDate=new RegExp("^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$"),exports.STUtils=STUtils},3139:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFRenderLoop=void 0;class i{constructor(t,e){this._framerate=e,this._functionLoop=t,this._lastTime=(new Date).getTime(),this._gameLoopInterval=setInterval((()=>this.internalLoop()),1e3/this._framerate)}internalLoop(){const t=(new Date).getTime(),e=(t-this._lastTime)/1e3;this._lastTime=t,this._functionLoop(e)}static create(t,e){return new i(t,e)}}e.OFRenderLoop=i},5948:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontCharDescriptor=void 0,e.OFBitmapFontCharDescriptor=class{constructor(){this.id=0,this.x=0,this.y=0,this.width=0,this.height=0,this.textureU=0,this.textureV=0,this.xOffset=0,this.yOffset=0,this.xAdvance=0,this.page=0,this.chnl=0}}},9201:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontCharset=void 0;const r=i(9298),a=i(961);class s{constructor(){this.fontName="",this.size=0,this.bold=!1,this.italic=!1,this.charset="",this.unicode=!1,this.stretchH=0,this.smooth=!1,this.aa=!1,this.padding=null,this.spacing=null,this.outline=!1,this.lineHeight=0,this.base=0,this.scaleWidth=0,this.scaleHeight=0,this.pages=0,this.packed=!1,this.alphaChnl=0,this.redChnl=0,this.greenChnl=0,this.blueChnl=0,this.fontPages=[],this.kernings=[]}getCharDescriptor(t){return this.fontPages[0].chars[t]}existsChar(t){return t-1<this.fontPages[0].charArraySize}getKerning(t,e){let i=0;if(!this.kernings)return i;const r=this.kernings.length;for(let a=0;a<r;a++){const r=this.kernings[a];if(r&&r.first===t&&r.second===e){i=r.amount;break}}return i}measureString(t){const e=r.OFVector2.zero();e.y+=this.base;const i=t.length;let s=0,n=0;for(let r=0;r<i;r++)if(t.charCodeAt(r)===a.OFEnumKeyCode.JumpLine){const i=t.substring(s,r-s);s=r+1;const a=this.measureStringLineal(i);a>n&&(n=a,e.x=n),e.y+=this.base}return 0===e.x&&i>0&&(e.x=this.measureStringLineal(t)),e}measureStringLineal(t){const e=t.length;let i,r=0,a=-1;for(let s=0;s<e;s++){let e=0;const n=t.charCodeAt(s);this.existsChar(n)&&(-1!==a&&(e=this.getKerning(a,n)),i=this.getCharDescriptor(n),r+=i.xAdvance+e,a=n)}return r}}e.OFBitmapFontCharset=s,s.CHAR_DESCRIPTOR_SIZE=256},4979:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontKerning=void 0,e.OFBitmapFontKerning=class{constructor(){this.first=0,this.second=0,this.amount=0}}},9565:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontPage=void 0,e.OFBitmapFontPage=class{constructor(){this.id=0,this.charCount=0,this.charArraySize=0,this.path="",this.isInitialized=!1,this.chars=null}}},5610:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBitmapFontLoader=void 0;const r=i(9201),a=i(9565),s=i(5948),n=i(4979),o=i(19),h=i(961),c=i(4500);var u;!function(t){t[t.DEFAULT_NONE=0]="DEFAULT_NONE",t[t.INFO=1]="INFO",t[t.COMMON=2]="COMMON",t[t.PAGE=3]="PAGE",t[t.CHARS=4]="CHARS",t[t.CHAR=5]="CHAR",t[t.KERNING=6]="KERNING",t[t.KERNINGS=7]="KERNINGS"}(u||(u={}));class l{constructor(){}static parse(t){l.BitmapFontPageTemp=null,l.BitmapFontPageIndexTemp=-1,l.BitmapFontCharIndexTemp=-1,l.BitmapFontKerningIndexTemp=-1,l.FontCharset=null;const e=t.split("\n");let i=!1,s="",n="";l.FontCharset=new r.OFBitmapFontCharset,l.BitmapFontPageTemp=new a.OFBitmapFontPage;for(let t=0,i=e.length;t<i;t++){n=e[t];let i=!1,r=!0,a=!1;const o=n.length;let h=0,c=u.DEFAULT_NONE;for(;!a;){if(h>=o){a=!0,s.length>0&&(l.readingAndSettingValues(c,s),s="");break}{const t=n[h];let e=t===l.SPACE;t===l.QUOTATION_MARK&&(i=!i),e=!i&&e,e?s.length>0&&(r?(r=!1,c=l.getLineType(s)):l.readingAndSettingValues(c,s),s=""):s+=t,h++}}}return i=!0,l.BitmapFontPageIndexTemp=0,l.BitmapFontCharIndexTemp=0,l.BitmapFontKerningIndexTemp=0,l.FontCharset}static readingAndSettingValues(t,e){let i="",h="",d=e.indexOf(l.EQUALS_SIGN);i=e.substring(0,d),h=e.substring(d+1),h=h.replace(l.QUOTATION_MARK,l.NOTHING),h=h.replace(l.BACKSLASH,l.NOTHING);let _=null;switch(t){case u.INFO:switch(i){case"face":l.FontCharset.fontName=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter);break;case"size":l.FontCharset.size=parseInt(h);break;case"bold":l.FontCharset.bold="0"!==h;break;case"italic":l.FontCharset.italic="0"!==h;break;case"charset":l.FontCharset.charset=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter);break;case"unicode":l.FontCharset.unicode="0"!==h;break;case"stretchH":l.FontCharset.stretchH=parseInt(h);break;case"smooth":l.FontCharset.smooth="0"!==h;break;case"aa":l.FontCharset.aa="0"!==h;break;case"padding":const t=h.split(l.COMMA);l.FontCharset.padding=[parseInt(t[0]),parseInt(t[1]),parseInt(t[2]),parseInt(t[3])];break;case"spacing":l.FontCharset.spacing=[parseInt(String.fromCharCode(parseInt(h[0]))),parseInt(String.fromCharCode(parseInt(h[2])))];break;case"outline":l.FontCharset.outline="0"!==h}break;case u.COMMON:switch(i){case"lineHeight":l.FontCharset.lineHeight=parseInt(h);break;case"base":l.FontCharset.base=parseInt(h);break;case"scaleW":l.FontCharset.scaleWidth=parseInt(h);break;case"scaleH":l.FontCharset.scaleHeight=parseInt(h);break;case"pages":l.FontCharset.pages=parseInt(h),l.FontCharset.fontPages=new Array;for(let t=0,e=l.FontCharset.pages;t<e;t++)l.FontCharset.fontPages.push(new a.OFBitmapFontPage);break;case"packed":l.FontCharset.packed="0"!==h;break;case"alphaChnl":l.FontCharset.alphaChnl=parseInt(h);break;case"redChnl":l.FontCharset.redChnl=parseInt(h);break;case"greenChnl":l.FontCharset.greenChnl=parseInt(h);break;case"blueChnl":l.FontCharset.blueChnl=parseInt(h)}break;case u.PAGE:let t=null;for(let e=0;e<l.FontCharset.fontPages.length;e++)if(t=l.FontCharset.fontPages[e],!t.isInitialized){switch(i){case"id":t.id=parseInt(h);break;case"file":t.path=c.STHelpers.eraseCharsInString(h,l.ASCIIFilter),t.isInitialized=!0,l.BitmapFontCharIndexTemp=0,l.BitmapFontPageIndexTemp=e,l.BitmapFontPageTemp=t}l.FontCharset.fontPages[e]=t;break}break;case u.CHARS:if("count"===i){l.BitmapFontCharIndexTemp=-1,l.BitmapFontPageTemp.charCount=parseInt(h),l.BitmapFontPageTemp.chars=[];for(let t=0;t<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE;t++)l.BitmapFontPageTemp.chars.push(new s.OFBitmapFontCharDescriptor);l.BitmapFontPageTemp.charArraySize=r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE,l.FontCharset.fontPages[l.BitmapFontPageIndexTemp]=l.BitmapFontPageTemp}break;case u.CHAR:if(-1!==l.BitmapFontCharIndexTemp){if(!(l.BitmapFontCharIndexTemp<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE))break;"id"===i&&(l.BitmapFontCharIndexTemp=parseInt(h)),_=l.BitmapFontPageTemp.chars[l.BitmapFontCharIndexTemp]}else _=new s.OFBitmapFontCharDescriptor;if(!_)break;switch(i){case"id":_.id=parseInt(h),l.BitmapFontCharIndexTemp=_.id;break;case"x":_.x=parseInt(h);break;case"y":_.y=parseInt(h);break;case"width":_.width=parseInt(h),_.textureU=_.width;break;case"height":_.height=parseInt(h),_.textureV=_.height;break;case"xoffset":_.xOffset=parseInt(h);break;case"yoffset":_.yOffset=parseInt(h);break;case"xadvance":_.xAdvance=parseInt(h);break;case"page":_.page=parseInt(h);break;case"chnl":_.chnl=parseInt(h)}l.BitmapFontCharIndexTemp<r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE?(l.BitmapFontPageTemp.chars[l.BitmapFontCharIndexTemp]=_,l.FontCharset.fontPages[l.BitmapFontPageIndexTemp]=l.BitmapFontPageTemp):o.OFConsole.warn("OFBitmapFontLoader> readingAndSettingValues> In the Font: '"+l.FontCharset.fontName+"' the char index: "+l.BitmapFontCharIndexTemp+" is out of the range of the default size of the char description: "+r.OFBitmapFontCharset.CHAR_DESCRIPTOR_SIZE);break;case u.KERNINGS:l.BitmapFontKerningIndexTemp=0,l.FontCharset.kernings=new Array;for(let t=0,e=parseInt(h);t<e;t++)l.FontCharset.kernings.push(new n.OFBitmapFontKerning);break;case u.KERNING:let e=!1;const d=l.FontCharset.kernings[l.BitmapFontKerningIndexTemp];switch(i){case"first":d.first=parseInt(h);break;case"second":d.second=parseInt(h);break;case"amount":e=!0,d.amount=parseInt(h)}l.FontCharset.kernings[l.BitmapFontKerningIndexTemp]=d,e&&l.BitmapFontKerningIndexTemp++}}static getLineType(t){let e=u.DEFAULT_NONE;switch(t){case"info":e=u.INFO;break;case"common":e=u.COMMON;break;case"page":e=u.PAGE;break;case"chars":e=u.CHARS;break;case"char":e=u.CHAR;break;case"kerning":e=u.KERNING;break;case"kernings":e=u.KERNINGS}return e}}e.OFBitmapFontLoader=l,l.BitmapFontPageTemp=null,l.BitmapFontPageIndexTemp=-1,l.BitmapFontCharIndexTemp=-1,l.BitmapFontKerningIndexTemp=-1,l.FontCharset=null,l.COMMA=",",l.DOT=".",l.WHITE_SPACE=" ",l.EQUALS_SIGN="=",l.SLASH="/",l.QUOTATION_MARK=String.fromCharCode(h.OFEnumKeyCode.QuotationMark),l.SPACE=String.fromCharCode(h.OFEnumKeyCode.Space),l.NOTHING=String.fromCharCode(h.OFEnumKeyCode.Nothing),l.BACKSLASH=String.fromCharCode(h.OFEnumKeyCode.Backslash),l.ASCIIFilter=[l.NOTHING,l.BACKSLASH,l.QUOTATION_MARK,l.WHITE_SPACE]},2608:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumShaderDataTypes=void 0,(i=e.OFEnumShaderDataTypes||(e.OFEnumShaderDataTypes={}))[i.Unkown=0]="Unkown",i[i.Matrix2=1]="Matrix2",i[i.Matrix3=2]="Matrix3",i[i.Matrix4=3]="Matrix4",i[i.Vector2=4]="Vector2",i[i.Vector3=5]="Vector3",i[i.Vector4=6]="Vector4",i[i.IntVector2=7]="IntVector2",i[i.IntVector3=8]="IntVector3",i[i.IntVector4=9]="IntVector4",i[i.BooleanVector2=10]="BooleanVector2",i[i.BooleanVector3=11]="BooleanVector3",i[i.BooleanVector4=12]="BooleanVector4",i[i.Sampler2D=13]="Sampler2D",i[i.SamplerCube=14]="SamplerCube",i[i.Float=15]="Float",i[i.Int=16]="Int",i[i.Bool=17]="Bool",i[i.ICamera=18]="ICamera",i[i.IColor=19]="IColor",i[i.ITexture=20]="ITexture"},5377:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumShaderLiterals=void 0,(i=e.OFEnumShaderLiterals||(e.OFEnumShaderLiterals={})).IN_Matrix2="MAT2",i.IN_Matrix3="MAT3",i.IN_Matrix4="MAT4",i.IN_Vector2="VEC2",i.IN_Vector3="VEC3",i.IN_Vector4="VEC4",i.IN_IntVector2="IVEC2",i.IN_IntVector3="IVEC3",i.IN_IntVector4="IVEC4",i.IN_BooleanVector2="BVEC2",i.IN_BooleanVector3="BVEC3",i.IN_BooleanVector4="BVEC4",i.IN_Sampler2D="SAMPLER2D",i.IN_SamplerCube="SAMPLERCUBE",i.IN_Float="FLOAT",i.IN_Int="INT",i.IN_Bool="BOOL",i.DT_Texture="TEXTURE",i.DT_Color="COLOR",i.DT_Camera="CAMERA"},2080:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderAnalizer=void 0;const r=i(2608),a=i(5377);class s{constructor(){}static analize(t,e){const i=e||{attributeCount:0,uniformCount:0,attributes:[],uniforms:[]};let r=0;const a={};for(;;){const e=s.getInputDataInfo(t,r),n=s.getNextInputData(t,e);if(e.inputIndex===s.indexLimit)break;if(n.inputName)switch(r=n.lastIndex,delete n.lastIndex,e.inputType){case s.enumAttribute:i.attributeCount++,i.attributes.push(n);break;case s.enumUniform:a.hasOwnProperty("pp_"+n.inputVariableType)?a["pp_"+n.inputVariableType]++:a["pp_"+n.inputVariableType]=0,n.inputDeclarativeVariableIndex=a["pp_"+n.inputVariableType],i.uniformCount++,i.uniforms.push(n)}}return i}static getInputDataInfo(t,e){const i={inputName:"",inputType:0,inputIndex:-1,inputNameLength:0};let r=t.indexOf("attribute",e),a=t.indexOf("uniform",e);r=-1===r?s.indexLimit:r,a=-1===a?s.indexLimit:a;const n=r<a?s.enumAttribute:s.enumUniform;switch(n){case s.enumAttribute:i.inputName="attribute",i.inputType=n,i.inputIndex=r,i.inputNameLength=s.attributeStringLenght;break;case s.enumUniform:i.inputName="uniform",i.inputType=n,i.inputIndex=a,i.inputNameLength=s.uniformStringLenght}return i}static getNextInputData(t,e){const i=e.inputNameLength,r=e.inputIndex,a=t.indexOf(e.inputName,r);let n,o,h,c,u=r;if(-1!==a){const e=a+i+1,r=t.indexOf(" ",e),s=r+1;let c=t.indexOf(";",s);if(n=t.substr(e,r-e).trim(),o=t.substr(s,c-s),-1!==o.indexOf(":")){c=t.indexOf(":",s),o=t.substr(s,c-s).trim();const e=t.indexOf(":",c)+1,i=t.indexOf(";",e);h=t.substr(e,i-e).trim(),u=i}else u=c}if(o){const t=o.indexOf(" ");-1!==t&&(c=n,n=o.substring(0,t),o=o.substring(t+1,o.length))}return{lastIndex:u,inputPrecision:c,inputVariableType:s.changeVariableTypeToEnum(n,h),inputName:o?o.trim():o,inputDeclarativeVariableIndex:0}}static sanitize(t){let e=0,i=t;for(;;){const r=i.indexOf("uniform",e);if(-1===r)break;{const a=i.indexOf(";",r),s=i.substr(r,a-r+1);if(-1!==s.indexOf(":")){const e=s.substr(0,s.indexOf(":")).trim()+";",n=i.substr(0,r),o=i.substr(a+1,t.length-a);i="",i+=n,i+=e,i+=o}e=r+1}}return i}static changeVariableTypeToEnum(t,e){let i=r.OFEnumShaderDataTypes.Unkown;if(e)switch(e.toUpperCase()){case a.OFEnumShaderLiterals.DT_Texture:i=r.OFEnumShaderDataTypes.ITexture;break;case a.OFEnumShaderLiterals.DT_Color:i=r.OFEnumShaderDataTypes.IColor;break;case a.OFEnumShaderLiterals.DT_Camera:i=r.OFEnumShaderDataTypes.ICamera}if(t&&i===r.OFEnumShaderDataTypes.Unkown)switch(t.toUpperCase()){case a.OFEnumShaderLiterals.IN_Matrix2:i=r.OFEnumShaderDataTypes.Matrix2;break;case a.OFEnumShaderLiterals.IN_Matrix3:i=r.OFEnumShaderDataTypes.Matrix3;break;case a.OFEnumShaderLiterals.IN_Matrix4:i=r.OFEnumShaderDataTypes.Matrix4;break;case a.OFEnumShaderLiterals.IN_Vector2:i=r.OFEnumShaderDataTypes.Vector2;break;case a.OFEnumShaderLiterals.IN_Vector3:i=r.OFEnumShaderDataTypes.Vector3;break;case a.OFEnumShaderLiterals.IN_Vector4:i=r.OFEnumShaderDataTypes.Vector4;break;case a.OFEnumShaderLiterals.IN_IntVector2:i=r.OFEnumShaderDataTypes.IntVector2;break;case a.OFEnumShaderLiterals.IN_IntVector3:i=r.OFEnumShaderDataTypes.IntVector3;break;case a.OFEnumShaderLiterals.IN_IntVector4:i=r.OFEnumShaderDataTypes.IntVector4;break;case a.OFEnumShaderLiterals.IN_BooleanVector2:i=r.OFEnumShaderDataTypes.BooleanVector2;break;case a.OFEnumShaderLiterals.IN_BooleanVector3:i=r.OFEnumShaderDataTypes.BooleanVector3;break;case a.OFEnumShaderLiterals.IN_BooleanVector4:i=r.OFEnumShaderDataTypes.BooleanVector4;break;case a.OFEnumShaderLiterals.IN_Sampler2D:i=r.OFEnumShaderDataTypes.Sampler2D;break;case a.OFEnumShaderLiterals.IN_SamplerCube:i=r.OFEnumShaderDataTypes.SamplerCube;break;case a.OFEnumShaderLiterals.IN_Float:i=r.OFEnumShaderDataTypes.Float;break;case a.OFEnumShaderLiterals.IN_Int:i=r.OFEnumShaderDataTypes.Int;break;case a.OFEnumShaderLiterals.IN_Bool:i=r.OFEnumShaderDataTypes.Bool;break;default:i=r.OFEnumShaderDataTypes.Unkown}return i}}e.OFShaderAnalizer=s,s.enumAttribute=1,s.enumUniform=2,s.attributeStringLenght=9,s.uniformStringLenght=7,s.indexLimit=999999},764:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeltaTimeCorrector=void 0,e.OFDeltaTimeCorrector=class{constructor(){this._deltaTimeBufferIndex=0,this._deltaTimeBufferCount=15,this._deltaTimeBuffer=[]}recomputeDeltaTime(t){this._deltaTimeBuffer[this._deltaTimeBufferIndex++]=t,this._deltaTimeBufferIndex=this._deltaTimeBufferIndex>=this._deltaTimeBufferCount?0:this._deltaTimeBufferIndex;let e=0;for(const t of this._deltaTimeBuffer)e+=t;return e/this._deltaTimeBufferCount}}},5820:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCBitmapTextfield2D=void 0;const r=i(5694),a=i(6227),s=i(1182),n=i(1851),o=i(7924),h=i(9298),c=i(961),u=i(2608);e.OFCBitmapTextfield2D=class{get text(){return this._text}get textSize(){return this._textSize}get color(){return this._color}set color(t){this._color=t,this._uniformData.UniformColor0.value=t}get trackingQuantity(){return this._trackingQuantity}set trackingQuantity(t){this._trackingQuantity=t,this.setText(this._text,!0)}constructor(){this._graphicDevice=r.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._GL=this._graphicDevice.graphicContext,this._color=s.OFColor.white(),this._customQuads=[],this._width=0,this._height=0,this._textureWidth=0,this._textureHeight=0,this._scaleWasModified=!1,this._drawEnable=!1,this._oldNumQuads=0,this._indicesCount=0,this._textQuadCounter=0,this._textPositionRenderX=0,this._textPositionRenderY=0,this._textInternalOffset=0,this._trackingQuantity=0,this._text="",this._textAlign=o.OFEnumTextAlign.Left,this._textSize=h.OFVector2.zero(),this._renderType=this._GL.TRIANGLE_STRIP}initialize(t,e,i){this._fontCharset=e,this._imageContent=i,this._textureWidth=i.imageWidth,this._textureHeight=i.imageHeight,this._polygonBatcher=new a.OFPolygonBatcher,this._polygonBatcher.changeShader("TextShaderTexture"),this._uniformData={},this._uniformData.UniformColor0={index:0,type:u.OFEnumShaderDataTypes.IColor,value:s.OFColor.white()},this.setText(t)}preValidationText(t){return t&&this._text!==t}setText(t,e){if(t=t||"",this.preValidationText(t)||e){this._text=t,this._textQuadCounter=0,this._textPositionRenderX=0,this._textPositionRenderY=0,this._textSize=h.OFVector2.zero(),this._textSize.y=this._fontCharset.base;const e=t.length;(!this._customQuads||this._customQuads&&e>this._customQuads.length)&&(this._customQuads=[]);let i=-1;const r=this._text.length;let a,s=0,n=0,o=!1;for(let t=0;t<r;t++){let e=0;const r=this._text.charCodeAt(t);if(r===c.OFEnumKeyCode.JumpLine){o=!0;const e=this._text.substring(s,t-s),i=this._fontCharset.measureString(e).x;s=t+1,i>n&&(n=i,this._textSize.x=n),this._textSize.y+=this._fontCharset.base}else-1!==i&&(e=this._fontCharset.getKerning(i,r)),this._fontCharset.existsChar(r)&&(a=this._fontCharset.getCharDescriptor(r),this.addTextQuad(a,e,o),i=r,o=!1)}if(0===this._textSize.x){const t=this._fontCharset.measureString(this._text);t.x+=this._text.length*this._trackingQuantity,this._textSize.x=t.x,this._height=t.x}else this._width=this._textSize.x;0===this._textSize.y?(this._textSize.y=this._fontCharset.base,this._height=this._fontCharset.base):this._height=this._textSize.y,this.alignText(this._textAlign),this.transformToRender()}}alignText(t){this._textAlign=t;const e=-this._textSize.x;switch(this._textSize.y,t){case o.OFEnumTextAlign.Left:this._textInternalOffset=0;break;case o.OFEnumTextAlign.Right:this._textInternalOffset=e;break;case o.OFEnumTextAlign.Center:this._textInternalOffset=e/2}}addTextQuad(t,e,i){const r=t.x,a=t.y,o=t.textureU,h=t.textureV,c=n.OFQuadStruct.createAsVertexPositionColorTexture();c.created=!0,this._customQuads.push(c),i&&(this._textPositionRenderX=0,this._textPositionRenderY+=this._fontCharset.base);const u=this._textPositionRenderX+t.xOffset+e+this._trackingQuantity*this._textQuadCounter,l=this._textPositionRenderY+t.yOffset;this._textPositionRenderX+=t.xAdvance+e,c.VPTTopLeft.x=u,c.VPTTopLeft.y=l,c.VPTTopRight.x=u+t.width,c.VPTTopRight.y=l,c.VPTBottomLeft.x=u,c.VPTBottomLeft.y=l+t.height,c.VPTBottomRight.x=u+t.width,c.VPTBottomRight.y=l+t.height;const d=s.OFColor.white();c.VPTTopLeft.color=d,c.VPTTopRight.color=d,c.VPTBottomLeft.color=d,c.VPTBottomRight.color=d,c.VPTTopLeft.u=r/this._textureWidth,c.VPTTopLeft.v=a/this._textureHeight,c.VPTTopRight.u=(r+o)/this._textureWidth,c.VPTTopRight.v=a/this._textureHeight,c.VPTBottomLeft.u=r/this._textureWidth,c.VPTBottomLeft.v=(a+h)/this._textureHeight,c.VPTBottomRight.u=(r+o)/this._textureWidth,c.VPTBottomRight.v=(a+h)/this._textureHeight,this._customQuads[this._textQuadCounter]=c,this._textQuadCounter++}preCalculateIndices(t){if(this._oldNumQuads!==t){let e=0;if(this._indices=[],this._renderType===this._GL.TRIANGLE_STRIP)for(let i=0;i<t;++i)this._indices.push(e+3),this._indices.push(e+2),this._indices.push(e+1),this._indices.push(e),this._indices.push(e),this._indices.push(e+7),e+=4;this._indices[this._indices.length-1]=0,this._oldNumQuads=t,this._indicesCount=6*t}}transformToRender(){let t=0,e=null;const i=this._textQuadCounter;for(let e=0;e<i;e++)this._customQuads[e].created&&t++;this.preCalculateIndices(this._textQuadCounter),this._vertices=[];for(let t=0;t<i;t++)e=this._customQuads[t],e.created&&(this._vertices.push(e.VPTTopRight.x),this._vertices.push(e.VPTTopRight.y),this._vertices.push(e.VPTTopRight.color.r),this._vertices.push(e.VPTTopRight.color.g),this._vertices.push(e.VPTTopRight.color.b),this._vertices.push(e.VPTTopRight.color.a),this._vertices.push(e.VPTTopRight.u),this._vertices.push(e.VPTTopRight.v),this._vertices.push(e.VPTTopLeft.x),this._vertices.push(e.VPTTopLeft.y),this._vertices.push(e.VPTTopRight.color.r),this._vertices.push(e.VPTTopRight.color.g),this._vertices.push(e.VPTTopRight.color.b),this._vertices.push(e.VPTTopRight.color.a),this._vertices.push(e.VPTTopLeft.u),this._vertices.push(e.VPTTopLeft.v),this._vertices.push(e.VPTBottomRight.x),this._vertices.push(e.VPTBottomRight.y),this._vertices.push(e.VPTBottomRight.color.r),this._vertices.push(e.VPTBottomRight.color.g),this._vertices.push(e.VPTBottomRight.color.b),this._vertices.push(e.VPTBottomRight.color.a),this._vertices.push(e.VPTBottomRight.u),this._vertices.push(e.VPTBottomRight.v),this._vertices.push(e.VPTBottomLeft.x),this._vertices.push(e.VPTBottomLeft.y),this._vertices.push(e.VPTBottomLeft.color.r),this._vertices.push(e.VPTBottomLeft.color.g),this._vertices.push(e.VPTBottomLeft.color.b),this._vertices.push(e.VPTBottomLeft.color.a),this._vertices.push(e.VPTBottomLeft.u),this._vertices.push(e.VPTBottomLeft.v));this._drawEnable=t>0,this._polygonBatcher.imageContent=this._imageContent,this._polygonBatcher.beginDraw(),this._polygonBatcher.pushPolygon(this._vertices,this._indices),this._polygonBatcher.endDraw()}setLetterColor(t,e){const i=32*t;this._vertices[i+2]=e.r,this._vertices[i+3]=e.g,this._vertices[i+4]=e.b,this._vertices[i+5]=e.a,this._vertices[i+8+2]=e.r,this._vertices[i+8+3]=e.g,this._vertices[i+8+4]=e.b,this._vertices[i+8+5]=e.a,this._vertices[i+16+2]=e.r,this._vertices[i+16+3]=e.g,this._vertices[i+16+4]=e.b,this._vertices[i+16+5]=e.a,this._vertices[i+24+2]=e.r,this._vertices[i+24+3]=e.b,this._vertices[i+24+4]=e.b,this._vertices[i+24+5]=e.a,this._polygonBatcher.imageContent=this._imageContent,this._polygonBatcher.beginDraw(),this._polygonBatcher.pushPolygon(this._vertices,this._indices),this._polygonBatcher.endDraw()}draw(t,e){this._drawEnable&&this._polygonBatcher.draw(t,e,this._GL.TRIANGLE_STRIP,this._uniformData)}destroy(){var t;this._graphicDevice=null,this._GL=null,null===(t=this._polygonBatcher)||void 0===t||t.destroy(),this._polygonBatcher=null,this._uniformData=null,this._fontCharset=null,this._indices=null,this._vertices=null,this._color=null,this._customQuads=null,this._imageContent=null,this._text=null,this._textAlign=null,this._textSize=null}}},1874:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseContent=void 0,e.OFBaseContent=class{get path(){return this._path}get isLoaded(){return this._isLoaded}get framework(){return this._framework}get graphicContext(){return this._graphicContext}constructor(t){this.contentManager=t,this._isLoaded=!1,this._framework=t.framework,this._graphicContext=this._framework.mainGraphicDevice.graphicContext}initialize(){}changeProperties(t){}load(t){this._path=t}unload(){}}},2724:function(t,e,i){var r=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(a,s){function n(t){try{h(r.next(t))}catch(t){s(t)}}function o(t){try{h(r.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,o)}h((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.OFContentManager=void 0;const a=i(3440),s=i(464),n=i(1348),o=i(19),h=i(9486);e.OFContentManager=class{constructor(t){this.framework=t,this._contentRepository=[]}initialize(){}loadDefault(){}changePropertiesInContent(t,e){const i=this.getContent(t);i?i.changeProperties(e):o.OFConsole.warn(h.OFTranslations.Framework.ContentManagement.changePropertiesInContentNotFound,this.framework.frameworkIdentifier.toString(),t)}getContent(t){let e;const i=this._contentRepository.length;for(let r=0;r<i;r++){const i=this._contentRepository[r];if(i&&i.path===t){e=i;break}}return e}loadMaterialFromJSON(t,e){const i=new n.OFMaterialContent(this);return i.initialize(),i.loadFromJSON(t,e),this._contentRepository.push(i),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadMaterialFromJSON,this.framework.frameworkIdentifier.toString(),e),i}loadMaterial(t){const e=new n.OFMaterialContent(this);return e.initialize(),e.load(t),this._contentRepository.push(e),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadMaterial,this.framework.frameworkIdentifier.toString(),t),e}loadImage(t){const e=new a.OFImageContent(this);return e.initialize(),e.load(t),this._contentRepository.push(e),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadImage,this.framework.frameworkIdentifier.toString(),t),e}asyncLoadSoundFromArrayBuffer(t,e,i){return r(this,void 0,void 0,(function*(){const r=new s.OFSoundContent(this);return r.initialize(),yield r.loadFromArrayBuffer(t,e,i),this._contentRepository.push(r),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadSoundFromArrayABuffer,this.framework.frameworkIdentifier.toString(),e),r}))}loadImageFromHTMLImage(t,e,i){let r=this.getContent(e);return r||(r=new a.OFImageContent(this),r.initialize(),r.loadFromImageHTML(t,e,i),this._contentRepository.push(r),o.OFConsole.log(h.OFTranslations.Framework.ContentManagement.loadImageFromHTMLImage,this.framework.frameworkIdentifier.toString(),e)),r}unloadImage(t){o.OFConsole.error(h.OFTranslations.Framework.ContentManagement.notImplementedException,this.framework.frameworkIdentifier.toString(),t)}}},3440:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFImageContent=void 0;const r=i(1874);class a extends r.OFBaseContent{get imageHTML(){return this._image}get imageWidth(){return this._image.width}get imageHeight(){return this._image.height}get imageTexture(){return this._imageTexture}constructor(t){super(t)}initialize(){super.initialize()}load(t){super.load(t),this._image=new Image;const e=this.graphicContext;this._imageTexture=e.createTexture(),this._image.onload=()=>{e.bindTexture(e.TEXTURE_2D,this._imageTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this._image),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.bindTexture(e.TEXTURE_2D,null),this._isLoaded=!0},this._image.src=t}loadFromImageHTML(t,e,i){i=i||{};const r=this.graphicContext;e&&this.load(e),this._image=t;const a=i.WebGL_MinFilter?i.WebGL_MinFilter:r.LINEAR,s=i.WebGL_MagFilter?i.WebGL_MagFilter:r.LINEAR,n=i.WebGL_WrapS?i.WebGL_WrapS:r.CLAMP_TO_EDGE,o=i.WebGL_WrapT?i.WebGL_WrapT:r.CLAMP_TO_EDGE,h=!!i.GenerateMipMap&&i.GenerateMipMap;this._imageTexture=r.createTexture(),r.bindTexture(r.TEXTURE_2D,this._imageTexture),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,this._image),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,a),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,s),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,o),h&&(r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_NEAREST),r.generateMipmap(r.TEXTURE_2D)),r.bindTexture(r.TEXTURE_2D,null),this._isLoaded=!0}changeProperties(t){if(this.isLoaded){t=t||{};const e=this.graphicContext,i=t.WebGL_MinFilter?t.WebGL_MinFilter:e.LINEAR,r=t.WebGL_MagFilter?t.WebGL_MagFilter:e.LINEAR,a=t.WebGL_WrapS?t.WebGL_WrapS:e.CLAMP_TO_EDGE,s=t.WebGL_WrapT?t.WebGL_WrapT:e.CLAMP_TO_EDGE,n=!!t.GenerateMipMap&&t.GenerateMipMap;e.bindTexture(e.TEXTURE_2D,null),e.bindTexture(e.TEXTURE_2D,this._imageTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this._image),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,s),n&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D)),e.bindTexture(e.TEXTURE_2D,null)}}}e.OFImageContent=a},1348:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFMaterialContent=void 0;const r=i(1874),a=i(9486),s=i(19);class n extends r.OFBaseContent{constructor(t){super(t),this._uniforms=[]}initialize(){super.initialize()}load(t){super.load(t)}loadFromJSON(t,e){e&&this.load(e);const i=JSON.parse(t);this._materialName=i.materialName,this._materialTechVersion=i.materialTechVersion,this._shaderName=i.shaderName;for(const t of i.publicProperties){const e=t.shaderUniform,i=t.type;this._uniforms.push({name:e,dataType:i})}}changeProperties(t){s.OFConsole.error(a.OFTranslations.Framework.ContentManagement.MaterialContent.notImplementedException,this.framework.frameworkIdentifier.toString(),t.toString())}}e.OFMaterialContent=n},464:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSoundContent=void 0;const r=i(1874),a=i(19),s=i(9486);class n extends r.OFBaseContent{get audioBuffer(){return this._audioBuffer}get audioBuffer_Error(){return this._audioBufferError}constructor(t){super(t)}initialize(){super.initialize()}load(t){super.load(t)}loadFromArrayBuffer(t,e,i){return e&&super.load(e),this._params=i,this.framework.audioDevice.audioContext.decodeAudioData(t,(t=>this.internal_OnDecodeAudioData(t)),(t=>this.internal_OnErrorDecodeAudioData(t)))}internal_OnDecodeAudioData(t){this._isLoaded=!0,this._audioBuffer=t,this._params&&this._params.setInternal_SoundContent(this)}internal_OnErrorDecodeAudioData(t){this._audioBufferError=t,a.OFConsole.log(s.OFTranslations.Framework.ContentManagement.SoundContent.internal_OnErrorDecodeAudioData,this._framework.frameworkIdentifier.toString(),t.message)}}e.OFSoundContent=n},3587:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioDevice=void 0;const r=i(912),a=i(19),s=i(9486),n=i(6168);e.OFAudioDevice=class{get initialTime(){return this._initialTime}get masterVolume(){return this._masterVolume}get isAudioSupported(){return this._isAudioSupported}get audioContext(){return this._audioContext}get audioDeviceOptimizationManager(){return this._audioDeviceOptimizationManager}constructor(t){this._framework=t,this._isAudioSupported=!1,this._masterVolume=.1}initialize(){try{window.AudioContext=window.AudioContext||window.webAudioContext||window.webkitAudioContext,this._audioContext=new AudioContext,this._initialTime=this._audioContext.currentTime,this._audioDeviceOptimizationManager=new r.OFAudioDeviceOptimizationManager(this),this._audioNodePooler=this._audioDeviceOptimizationManager.audioNodePooler,this._isAudioSupported=!0,a.OFConsole.log(s.OFTranslations.Framework.AudioDevice.initialize,this._framework.frameworkIdentifier.toString())}catch(t){this._isAudioSupported=!1,a.OFConsole.error(s.OFTranslations.Framework.AudioDevice.notSupported,this._framework.frameworkIdentifier.toString())}}requestGainNode(){const t=this._audioNodePooler.getAvailableAudioNode(n.OFEnumAudioNodeType.GainNode);if(t.bufferType===n.OFEnumAudioNodeType.Unsigned){const e=this._audioContext.createGain();t.setWebAudioNode(e,n.OFEnumAudioNodeType.GainNode)}return t}requestStereoPannerNode(){const t=this._audioNodePooler.getAvailableAudioNode(n.OFEnumAudioNodeType.StereoPannerNode);if(t.bufferType===n.OFEnumAudioNodeType.Unsigned&&this._audioContext.createStereoPanner){const e=this._audioContext.createStereoPanner();t.setWebAudioNode(e,n.OFEnumAudioNodeType.StereoPannerNode)}return t}releaseNode(t){t&&(t.webAudioNode.disconnect(),t.deactivate())}update(t){this._audioDeviceOptimizationManager.update(t)}static connectNodes(t,e,...i){const r=i.length;r>1&&e.connect(i[0].webAudioNode);for(let t=0;t+1<r;t++)i[t].webAudioNode.connect(i[t+1].webAudioNode);if(r>2){const e=t.requestGainNode();e.activate(),e.webAudioNode.gain.value=t.masterVolume,i[r-1].webAudioNode.connect(e.webAudioNode),e.webAudioNode.connect(t.audioContext.destination)}}static connectNodesNoMaster(t,e,...i){const r=i.length;r>1&&e.connect(i[0].webAudioNode);for(let t=0;t+1<r;t++)i[t].webAudioNode.connect(i[t+1].webAudioNode);r>1&&i[r-1].webAudioNode.connect(t.audioContext.destination)}}},5431:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeviceCapabilities=void 0;const r=i(9512);class a{get renderEngineType(){return this._renderEngineType}get graphiContext(){return this._graphiContext}constructor(t,e){this._framework=t;const i=this._framework.canvasElement;e||(this._graphiContext=this._framework.canvasContextManager.construcWebGLCanvas(i)),this._graphiContext?this._renderEngineType=r.OFEnumRenderEngineType.WebGL:(this._graphiContext=this._framework.canvasContextManager.constructCanvas(i),this._renderEngineType=r.OFEnumRenderEngineType.CanvasContext2D)}static create(t,e){return new a(t,e)}}e.OFDeviceCapabilities=a},1325:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGraphicDevice=void 0;const r=i(5418),a=i(9248),s=i(7570);e.OFGraphicDevice=class{get currentShaderProgram(){return this._currentShaderProgram}get hasCustomCamera(){return this._hasCustomCamera}get graphicContext(){return this._graphicContext}get canvasElement(){return this._canvasObject.canvasElement}get renderCamera(){return this._renderCamera}get shaderFactory(){return this._shaderFactory}get deviceOptimizationManager(){return this._deviceOptimizationManager}constructor(t){this.framework=t,this._hasCustomCamera=!1,this.clearColor=this.framework.settings.renderClearColor}initialize(t){this._canvasObject=t,this._graphicContext=t.context,this._renderCamera=new r.OFRenderCamera(this.framework),this._renderCamera.initialize(this),this._currentShaderProgram=0,this._shaderFactory=new a.OFShaderFactory(this),this._deviceOptimizationManager=new s.OFDeviceOptimizationManager(this)}invalidateConfiguration(){this._renderCamera.invalidateConfiguration()}resize(t,e,i,r){const a=this._canvasObject.canvasElement;a.setAttribute("width",t.toString()),a.setAttribute("height",e.toString()),this._hasCustomCamera||this._renderCamera.resize(t,e,i,r)}useCustomRenderCamera(t){this._hasCustomCamera=t}useShaderProgram(t){const e=this._graphicContext;this._currentShaderProgram=t,e.useProgram(t)}clear(){const t=this._graphicContext,e=this.clearColor;t.clearColor(e.r,e.g,e.b,e.a),t.clear(t.COLOR_BUFFER_BIT)}update(t){this.clear(),this._renderCamera.update(t),this._deviceOptimizationManager.update(t)}}},7591:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGraphicDeviceManager=void 0;const r=i(1325),a=i(19),s=i(9486);e.OFGraphicDeviceManager=class{get shaderFactories(){const t=[];for(const e of Object.keys(this._graphicDevices)){const i=this._graphicDevices[e].shaderFactory;i&&t.push(i)}return t}constructor(t){this._framework=t,this._graphicDevices={}}initialize(){}createGraphicDevice(t,e){const i=new r.OFGraphicDevice(this._framework);return i.initialize(e),this._graphicDevices[t]=i,a.OFConsole.log(s.OFTranslations.Framework.GraphicDeviceManager.createGraphicDevice,this._framework.frameworkIdentifier.toString(),t),i}loadDefault(){for(const t of Object.keys(this._graphicDevices))this._graphicDevices[t].shaderFactory&&this._graphicDevices[t].shaderFactory.loadDefault()}resize(t,e,i,r){for(const a of Object.keys(this._graphicDevices))this._graphicDevices[a].resize(t,e,i,r)}update(t){for(const e of Object.keys(this._graphicDevices))this._graphicDevices[e].update(t)}}},912:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioDeviceOptimizationManager=void 0;const r=i(5765);e.OFAudioDeviceOptimizationManager=class{get audioNodePooler(){return this._audioNodePooler}constructor(t){this.audioDevice=t,this._audioNodePooler=new r.OFAudioNodePooler(this),this._audioNodePooler.initialize()}update(t){this._audioNodePooler.update(t)}}},8171:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioNodeObject=void 0;const r=i(6168);class a{get id(){return this._objectId}get isAvailable(){return this._isAvailable}constructor(t){this._audioNodePooler=t,this._lifeTime=a.defaultNodeLifeTime,this.bufferType=r.OFEnumAudioNodeType.Unsigned,this.isWaitingForDelete=!1}initialize(t){this._objectId=t,this._isAvailable=!0}setWebAudioNode(t,e){this.bufferType!==r.OFEnumAudioNodeType.Unsigned&&this.bufferType||(this.bufferType=e,this.webAudioNode=t)}activate(){this._isAvailable=!1}deactivate(){this._isAvailable=!0,this._lifeTime=a.defaultNodeLifeTime}update(t){this._isAvailable&&(this._lifeTime-=t.dt,this._lifeTime<=0&&(this.isWaitingForDelete=!0))}destroy(){this.webAudioNode&&this.webAudioNode.disconnect(),this.webAudioNode=null}}e.OFAudioNodeObject=a,a.defaultNodeLifeTime=10},5765:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAudioNodePooler=void 0;const r=i(8171),a=i(6168);class s{constructor(t){this.audioDeviceOptManagment=t,this._idObjectCounter=0,this._audioNodeRepository=[]}initialize(){this.createAudioNodes(s.OFEnumsInternal.initialAudioNodeCount)}createAudioNodes(t){for(let e=0;e<t;e++){const t=new r.OFAudioNodeObject(this);t.initialize(this._idObjectCounter++),this._audioNodeRepository.push(t)}}getAvailableAudioNode(t){let e;const i=this._audioNodeRepository.length;for(let r=0;r<i;r++){const i=this._audioNodeRepository[r];if(i.isAvailable){const r=i.bufferType;if(r!==a.OFEnumAudioNodeType.Unsigned&&r?r===t&&(e=i):e=i,e)break}}return e||(this.createAudioNodes(s.OFEnumsInternal.resizeAddAudioNodeCount),e=this.getAvailableAudioNode(t)),e}update(t){let e=this._audioNodeRepository.length;for(let i=0;i<e;i++){const r=this._audioNodeRepository[i];r.isWaitingForDelete?(r.destroy(),this._audioNodeRepository.splice(i,1),i--,e--):r.update(t)}}destroy(){}}e.OFAudioNodePooler=s,s.OFEnumsInternal={initialAudioNodeCount:16,resizeAddAudioNodeCount:8}},6168:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumAudioNodeType=void 0,(i=e.OFEnumAudioNodeType||(e.OFEnumAudioNodeType={}))[i.Unsigned=0]="Unsigned",i[i.GainNode=1]="GainNode",i[i.StereoPannerNode=2]="StereoPannerNode"},7570:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDeviceOptimizationManager=void 0;const r=i(8238);e.OFDeviceOptimizationManager=class{get vboPooler(){return this._vboPooler}get graphicDevice(){return this._graphicDevice}constructor(t){this._graphicDevice=t,this._vboPooler=new r.OFVBOPooler(this),this._vboPooler.initialize()}update(t){this._vboPooler.update(t)}}},7733:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumVBOObjectType=void 0,(i=e.OFEnumVBOObjectType||(e.OFEnumVBOObjectType={}))[i.Unsigned=0]="Unsigned",i[i.VertexBuffer=1]="VertexBuffer",i[i.IndexBuffer=2]="IndexBuffer"},8287:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVBOObject=void 0;const r=i(7733);class a{get id(){return this._objectId}get isAvailable(){return this._isAvailable}constructor(t){this._vboPooler=t,this._lifeTime=a.defaultNodeLifeTime,this.bufferType=r.OFEnumVBOObjectType.Unsigned,this._GL=t.graphicDeviceOptManager.graphicDevice.graphicContext}initialize(t){this._objectId=t,this._isAvailable=!0,this.vbo=this._GL.createBuffer()}activate(t){this.bufferType!==r.OFEnumVBOObjectType.Unsigned&&this.bufferType||(this.bufferType=t),this._isAvailable=!1}deactivate(){this._isAvailable=!0,this._lifeTime=a.defaultNodeLifeTime}update(t){this._isAvailable&&(this._lifeTime-=t.dt,this._lifeTime<=0&&(this.isWaitingForDelete=!0))}destroy(){this._GL.deleteBuffer(this.vbo)}}e.OFVBOObject=a,a.defaultNodeLifeTime=4.5},8238:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVBOPooler=void 0;const r=i(8287),a=i(7733);class s{get graphicDeviceOptManager(){return this._deviceOptimizationManager}constructor(t){this._deviceOptimizationManager=t,this._framework=t.graphicDevice.framework,this._idObjectCounter=0,this._vboRepository=[]}initialize(){this.createVBOs(s.OFEnumsInternal.initialVBOCount)}createVBOs(t){for(let e=0;e<t;e++){const t=new r.OFVBOObject(this);t.initialize(this._idObjectCounter++),this._vboRepository.push(t)}}getAvailableVBO(t){let e;const i=this._vboRepository.length;for(let r=0;r<i;r++){const i=this._vboRepository[r];if(i.isAvailable){const r=i.bufferType;if(r!==a.OFEnumVBOObjectType.Unsigned&&r?(r===a.OFEnumVBOObjectType.VertexBuffer&&t===a.OFEnumVBOObjectType.VertexBuffer||r===a.OFEnumVBOObjectType.IndexBuffer&&t===a.OFEnumVBOObjectType.IndexBuffer)&&(e=i):e=i,e)break}}return e||(this.createVBOs(s.OFEnumsInternal.resizeAddVBOCount),e=this.getAvailableVBO(t)),e}update(t){if(this._framework.settings.enabledVBOInstancesLife)for(let e=0;e<this._vboRepository.length;e++){const i=this._vboRepository[e];i.isWaitingForDelete?(i.destroy(),this._vboRepository.splice(e,1),e--):i.update(t)}}destroy(){}}e.OFVBOPooler=s,s.OFEnumsInternal={initialVBOCount:16,resizeAddVBOCount:8}},5995:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCanvasContextManager=void 0;const r=i(19),a=i(9486),s=i(4734);e.OFCanvasContextManager=class{constructor(t){this._framework=t,this._canvasContexts=[]}findCanvasObject(t){return this._canvasContexts[t]}createCanvasElement(t,e){const i=s.OFHTMLHelpers.createCanvas(this._framework.settings.message_CanvasHTML5Warning,this._framework.parentDiv,t);i.className="canvas",i.style["z-index"]=null===e?"0":e;const r={id:t,canvasElement:i,context:null};return this._canvasContexts.push(r),r}createCanvasElementAndContext(t,e){const i=s.OFHTMLHelpers.createCanvas(this._framework.settings.message_CanvasHTML5Warning,this._framework.parentDiv,t);i.className="canvas canvas-child",i.style["z-index"]=null===e?"0":e;const r={id:t,canvasElement:i,context:this.construcWebGLCanvas(i)};return this._canvasContexts.push(r),r}construcWebGLCanvas(t,e=!1){let i;const s={alpha:e,preserveDrawingBuffer:!0,desynchronized:!0,powerPreference:"default"};try{i=t.getContext("webgl",s)||t.getContext("experimental-webgl",s)}catch(t){r.OFConsole.error(a.OFTranslations.Framework.CanvasContextManager.issueRenderingContext,t)}return i}constructCanvas(t){return t.getContext(this._framework.settings.canvasContextType)}}},5418:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFRenderCamera=void 0;const r=i(5520),a=i(5516),s=i(887),n=i(3152);class o{get worldMatrix(){return this._worldMatrix}get viewMatrix(){return this._viewMatrix}get projectionMatrix(){return this._projectionMatrix}get transformedMatrix(){return s.mat4.clone(this._transformedMatrix)}get viewport(){return this._viewport}get isChildCamera(){return this._isChildCamera}get width(){return this._width}get height(){return this._height}get zNear(){return this._zNear}get zFar(){return this._zFar}get depth(){return this._depth}set depth(t){this._depth=t,this._worldMatrix=n.OFMath.mat4XVec4(s.mat4.create(),[0,0,this._depth,1])}constructor(t,e=!1){this._framework=t,this._isChildCamera=e,this._viewport=r.OFViewport.empty(),this._depth=o.defaultDepth,this.isFreeAspect=!0,this._transformedMatrix=s.mat4.create(),this._projectionMatrix=s.mat4.create(),this._viewMatrix=s.mat4.create(),this._worldMatrix=s.mat4.create(),s.mat4.lookAt(this._viewMatrix,s.vec3.fromValues(0,0,this._depth),s.vec3.create(),s.vec3.fromValues(0,1,0))}initialize(t){this._graphicDevice=t,this._graphicContext=t.graphicContext;const e=this._framework.appWidth,i=this._framework.appHeight;switch(this.setViewport(0,0,e,i),this._framework.settings.canvasContextType){case a.OFEnumCanvasContextType.D2D:this.createOrthographic(e,i,o.defaultZNear,o.defaultZFar);break;case a.OFEnumCanvasContextType.D3D:this.createPerspective(o.defaultFov,e,i,o.defaultZNear,o.defaultZFar)}}setViewport(t,e,i,r){this._isChildCamera||(this._graphicDevice.canvasElement.width=i,this._graphicDevice.canvasElement.height=r),this._viewport.x=t,this._viewport.y=e,this._viewport.width=i,this._viewport.height=r,this._graphicContext.viewport(t,e,i,r)}createPerspective(t,e,i,r,a){this._width=e,this._height=i,this._zNear=r,this._zFar=a;const n=e/i;s.mat4.perspective(this._projectionMatrix,t,n,r,a)}createOrthographic(t,e,i,r){this._width=t,this._height=e,this._zNear=i,this._zFar=r,s.mat4.ortho(this._projectionMatrix,0,t,e,0,i,r)}resize(t,e,i,r){if(this.isFreeAspect){switch(this._framework.settings.canvasContextType){case a.OFEnumCanvasContextType.D2D:this.createOrthographic(t,e,o.defaultZNear,o.defaultZFar);break;case a.OFEnumCanvasContextType.D3D:this.createPerspective(o.defaultFov,t,e,o.defaultZNear,o.defaultZFar)}this._viewport.width=t,this._viewport.height=e,this._graphicContext.viewport(this._viewport.x,this._viewport.y,this._viewport.width,this._viewport.height)}}invalidateConfiguration(){const t=this._graphicContext;this._graphicContext.viewport(this._viewport.x,this._viewport.y,this._viewport.width,this._viewport.height),t.scissor(this._viewport.x,this._viewport.y,this._viewport.width*this._width,this._viewport.height*this._height)}update(t){s.mat4.multiply(this._transformedMatrix,this._viewMatrix,this._worldMatrix),s.mat4.multiply(this._transformedMatrix,this._projectionMatrix,this._transformedMatrix)}}e.OFRenderCamera=o,o.defaultDepth=10,o.defaultZNear=.01,o.defaultZFar=100,o.defaultFov=45},6313:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFAnimation=void 0;const r=i(9736),a=i(3177);class s extends a.OFSprite{get hasAnimationEnded(){return this._hasAnimationEnded}get width(){return this._quadTextCoords.width/this._horizontalTiles}get height(){return this._quadTextCoords.height/this._verticalTiles}get color(){return this._color}set color(t){this._color=t}set imageContent(t){const e=this._graphicContext;if(this._imageContent=t,this._imageHTML=this._imageContent.imageHTML,this._imageGLTexture=this._imageContent.imageTexture,!this._quadTextCoords&&(this._imageRect.width=this._imageHTML.width,this._imageRect.height=this._imageHTML.height,this._quadTextCoords=new r.OFQuadTextCoords(0,0,0,0,this._imageRect.width/this._horizontalTiles*.5,this._imageRect.height/this._verticalTiles*.5),this._vboObject)){const t=this._quadTextCoords.width,i=this._quadTextCoords.height;this._vertices=new Float32Array(20),this._vertices[0]=t,this._vertices[1]=i,this._vertices[2]=0,this._vertices[3]=1,this._vertices[4]=1,this._vertices[5]=-t,this._vertices[6]=i,this._vertices[7]=0,this._vertices[8]=0,this._vertices[9]=1,this._vertices[10]=t,this._vertices[11]=-i,this._vertices[12]=0,this._vertices[13]=1,this._vertices[14]=0,this._vertices[15]=-t,this._vertices[16]=-i,this._vertices[17]=0,this._vertices[18]=0,this._vertices[19]=0,e.bindBuffer(e.ARRAY_BUFFER,this._vboObject.vbo),e.bufferData(e.ARRAY_BUFFER,this._vertices,e.DYNAMIC_DRAW)}}constructor(t=0,e=0,i,r){super(t,e),this._horizontalTiles=i,this._verticalTiles=r,this._currentFrameHorizontal=0,this._currentFrameVertical=0,this._hasAnimationEnded=!1,this._totalFrames=this._horizontalTiles*this._verticalTiles,this.initialize()}setAdvanceAnimationTileConfig(t,e,i,r){this._imageRect.x=t,this._imageRect.y=e,this._imageRect.width=i,this._imageRect.height=r,this._currentFrameHorizontal=0,this._currentFrameVertical=0,this._totalFrames=this._horizontalTiles*this._verticalTiles;const a=this._imageRect.width/this._horizontalTiles*.5,s=this._imageRect.height/this._verticalTiles*.5;this._quadTextCoords.width=this._imageRect.width/this._horizontalTiles,this._quadTextCoords.height=this._imageRect.height/this._verticalTiles,this._vboObject&&(this._vertices[0]=a,this._vertices[1]=s,this._vertices[5]=-a,this._vertices[6]=s,this._vertices[10]=a,this._vertices[11]=-s,this._vertices[15]=-a,this._vertices[16]=-s)}update(t){if(this._hasAnimationEnded=!1,this._imageContent&&this._imageContent.isLoaded){const e=this._graphicContext,i=this._imageRect.width/this._horizontalTiles/this._imageHTML.width,r=this._imageRect.height/this._verticalTiles/this._imageHTML.height,a=this._imageRect.x/this._imageHTML.width+Math.floor(this._currentFrameHorizontal)*i,s=this._imageRect.y/this._imageHTML.height+Math.floor(this._currentFrameVertical)*r;this._quadTextCoords.left=a,this._quadTextCoords.right=a+i,this._quadTextCoords.up=s,this._quadTextCoords.down=s+r,this._spriteBatchInstance?this._spriteBatchInstance.drawGraphic(this):(this._vertices[3]=this._quadTextCoords.right,this._vertices[4]=this._quadTextCoords.down,this._vertices[8]=this._quadTextCoords.left,this._vertices[9]=this._quadTextCoords.down,this._vertices[13]=this._quadTextCoords.right,this._vertices[14]=this._quadTextCoords.up,this._vertices[18]=this._quadTextCoords.left,this._vertices[19]=this._quadTextCoords.up,e.bindBuffer(e.ARRAY_BUFFER,this.vboObject.vbo),e.bufferSubData(e.ARRAY_BUFFER,0,this._vertices),this._shader.color=this._color,this._shader.setTranslate(this.x,this.y,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.draw(t,this._imageGLTexture,this._vboObject.vbo))}this._debugCollisionQuad&&(this._debugCollisionQuad.x=this.x,this._debugCollisionQuad.y=this.y,this._debugCollisionQuad.update(t));const e=this._framework.settings.animationFramerate,i=this._framework.settings.targetFramerate;this._currentFrameHorizontal+=e/i,this._currentFrameHorizontal>=this._horizontalTiles&&(this._currentFrameHorizontal=0,this._currentFrameVertical++,this._currentFrameVertical>=this._verticalTiles&&(this._currentFrameVertical=0,this._hasAnimationEnded=!0))}}e.OFAnimation=s},3344:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveCircle=void 0;const r=i(2213),a=i(7733);class s extends r.OFDrawable2D{get radius(){return this._radius}set radius(t){this._radius=t;const e=2*Math.PI/s.vertexQuality;this._vertices=[],this._vertices.push(0,0,0);for(let t=0;t<this._vertexQuality;t++){const i=Math.cos(e*t)*this._radius*.5,r=Math.sin(e*t)*this._radius*.5;this._vertices.push(i,r,0);const a=this._graphicContext;a.bindBuffer(a.ARRAY_BUFFER,this._vboObject.vbo),a.bufferData(a.ARRAY_BUFFER,new Float32Array(this._vertices),a.STATIC_DRAW),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),a.bufferData(a.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),a.STATIC_DRAW)}}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i,r){super(t,e),this._radius=i,this._color=r,this._vertexQuality=s.vertexQuality,this.initialize()}initialize(){const t=this._graphicContext;this.offsetX=0,this.offsetY=0,this._indices=[],this._drawingCount=0,this._triangleRenderType=t.TRIANGLE_STRIP,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs(),this.radius=this._radius,this.setWireframeVisibility(!1)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}setWireframeVisibility(t){const e=this._graphicContext;if(t){this._drawingCount=2*this._vertexQuality,this._triangleRenderType=e.LINES,this._indices=[];for(let t=1;t<this._vertexQuality;t++)this._indices.push(t,t+1);this._indices.push(this._vertexQuality,1)}else{this._drawingCount=2*this._vertexQuality,this._triangleRenderType=e.TRIANGLE_STRIP,this._indices=[],this._indices.push(0,1,2);for(let t=2;t<this._vertexQuality;t++)this._indices.push(t+1,0);this._indices.push(1,0)}e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW)}hitTest(t){const e=this.x+this.offsetX,i=this.y+this.offsetY,r=t.x+t.offsetX,a=t.y+t.offsetY;return e<r+t.radius&&e+this.radius>r&&i<a+t.radius&&this.radius+i>a}hitTestByPoint(t,e){const i=.5*this.radius,r=.5*this.radius,a=this.x+this.offsetX,s=this.y+this.offsetY;return a-i<t&&a+i>t&&s-r<e&&s+r>e}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._transformation):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}}e.OFPrimitiveCircle=s,s.vertexQuality=64},263:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveGrid=void 0;const r=i(2213),a=i(7733),s=i(887);class n extends r.OFDrawable2D{get width(){return this._width}get height(){return this._height}get tileSizeX(){return this._tileSizeX}get tileSizeY(){return this._tileSizeY}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i){super(t,e),this.offsetX=0,this.offsetY=0,this._width=n.defaultWidth,this._height=n.defaultHeight,this._tileSizeX=n.defaultTileSize,this._tileSizeY=n.defaultTileSize,this._color=i,this._otherTransformation=s.mat4.create(),this.initialize()}initialize(){const t=this._graphicContext;this._triangleRenderType=t.LINES,this._drawingCount=8,this._indices=[0,1,1,3,3,2,2,0],this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs();const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0],t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),this._shader.setColor("uColor",this._color)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}hitTest(t){return!1}hitTestByPoint(t,e){const i=.5*this._width,r=.5*this._height,a=this.x+this.offsetX,s=this.y+this.offsetY;return a-i<t&&a+i>t&&s-r<e&&s+r>e}changeGrid(t,e,i,r){const a=this._graphicContext;this._width=t,this._height=e,this._tileSizeX=i,this._tileSizeY=r,this._vertices=[],this._indices=[];let s=0;const n=this._tileSizeX*this._width,o=this._tileSizeY*this._height;for(let t=0;t<=this._width;t++){const e=t*this._tileSizeX;this._vertices.push(e,0,0),this._vertices.push(e,o,0),this._indices.push(s,s+1),s+=2}for(let t=0;t<=this._height;t++){const e=t*this._tileSizeY;this._vertices.push(0,e,0),this._vertices.push(n,e,0),this._indices.push(s,s+1),s+=2}this._drawingCount=this._indices.length,a.bindBuffer(a.ARRAY_BUFFER,this._vboObject.vbo),a.bufferData(a.ARRAY_BUFFER,new Float32Array(this._vertices),a.STATIC_DRAW),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),a.bufferData(a.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),a.STATIC_DRAW)}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?(s.mat4.fromTranslation(this._otherTransformation,s.vec3.fromValues(this.offsetX,this.offsetY,0)),s.mat4.multiply(this._otherTransformation,this._transformation,this._otherTransformation),this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._otherTransformation)):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}destroy(){this._otherTransformation=null,super.destroy()}}e.OFPrimitiveGrid=n,n.defaultTileSize=32,n.defaultWidth=1,n.defaultHeight=2},4950:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPrimitiveQuad=void 0;const r=i(2213),a=i(7733),s=i(1446);class n extends r.OFDrawable2D{get width(){return this._width}set width(t){this._width=t;const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0];const r=this._graphicContext;r.bindBuffer(r.ARRAY_BUFFER,this._vboObject.vbo),r.bufferData(r.ARRAY_BUFFER,new Float32Array(this._vertices),r.STATIC_DRAW)}get height(){return this._height}set height(t){this._height=t;const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0];const r=this._graphicContext;r.bindBuffer(r.ARRAY_BUFFER,this._vboObject.vbo),r.bufferData(r.ARRAY_BUFFER,new Float32Array(this._vertices),r.STATIC_DRAW)}get color(){return this._color}set color(t){this._color=t}constructor(t,e,i,r,a){super(t,e),this.offsetX=0,this.offsetY=0,this._width=i,this._height=r,this._color=a,this.initialize()}initialize(){const t=this._graphicContext;this._triangleRenderType=t.TRIANGLE_STRIP,this._drawingCount=4,this._indices=[0,1,2,3],this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderPrimitive"),this.createVBOs();const e=this._width/2,i=this._height/2;this._vertices=[e,i,0,-e,i,0,e,-i,0,-e,-i,0],t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),this._shader.setColor("uColor",this._color)}createVBOs(){this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this._iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this._iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}setWireframeVisibility(t){const e=this._graphicContext;t?(this._drawingCount=8,this._triangleRenderType=e.LINES,this._indices=[0,1,1,3,3,2,2,0]):(this._drawingCount=4,this._triangleRenderType=e.TRIANGLE_STRIP,this._indices=[0,1,2,3]),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._iboObject.vbo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW)}hitTest(t){return s.OFCollisionHelper.hitTestQuad(this,t)}hitTestByPoint(t,e){return s.OFCollisionHelper.hitTestByPointQuad(this,t,e)}update(t){this._shader.isShaderAbstract||0===this._color.a||(this._transformation?this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount,this._transformation):(this._shader.setTranslate(this.x+this.offsetX,this.y+this.offsetY,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.color=this._color,this._shader.draw(t,this._vboObject.vbo,this._iboObject.vbo,this._triangleRenderType,this._drawingCount)))}}e.OFPrimitiveQuad=n},3177:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSprite=void 0;const r=i(9736),a=i(2213),s=i(1182),n=i(7733),o=i(4950),h=i(1446);class c extends a.OFDrawable2D{get quadTextCoords(){return this._quadTextCoords}get collisionRect(){return this._collisionRect}get debugCollisionQuad(){return this._debugCollisionQuad}get color(){return this._color}set color(t){this._color=t}get width(){return this._imageRect.width}get height(){return this._imageRect.height}get imageContent(){return this._imageContent}set imageContent(t){this._imageContent=t,this._imageHTML=this._imageContent.imageHTML,this._imageGLTexture=this._imageContent.imageTexture,this.updateGLBufferData()}set debugMode(t){this._debugMode=t,this._debugMode&&!this._debugCollisionQuad&&(this._debugCollisionQuad=new o.OFPrimitiveQuad(this._collisionRect.x,this._collisionRect.y,this._collisionRect.width,this._collisionRect.height,s.OFColor.white()))}constructor(t=0,e=0){super(t,e),this.enabledShaderProps=!0,this._imageRect={x:0,y:0,width:0,height:0,offsetX:0,offsetY:0},this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this.initialize()}initialize(){this.createVBOs()}createVBOs(){this.hasSpriteBatch||this._vboObject||(this._vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.VertexBuffer),this._vboObject.activate(n.OFEnumVBOObjectType.VertexBuffer))}setSpriteBatch(t){super.setSpriteBatch(t),this.createVBOs()}setAdvanceAnimationTileConfig(t,e,i,r){if(this._imageRect.x=t,this._imageRect.y=e,this._imageRect.width=i,this._imageRect.height=r,this._quadTextCoords){const t=.5*this._imageRect.width,e=.5*this._imageRect.height,i=this._imageRect.width/this._imageHTML.width,r=this._imageRect.height/this._imageHTML.height,a=this._imageRect.x/this._imageHTML.width,s=this._imageRect.y/this._imageHTML.height;if(this._quadTextCoords.width=this._imageRect.width,this._quadTextCoords.height=this._imageRect.height,this._quadTextCoords.left=a,this._quadTextCoords.right=a+i,this._quadTextCoords.up=s,this._quadTextCoords.down=s+r,!this.hasSpriteBatch){this._vertices[0]=t,this._vertices[1]=e,this._vertices[5]=-t,this._vertices[6]=e,this._vertices[10]=t,this._vertices[11]=-e,this._vertices[15]=-t,this._vertices[16]=-e,this._vertices[3]=this._quadTextCoords.right,this._vertices[4]=this._quadTextCoords.down,this._vertices[8]=this._quadTextCoords.left,this._vertices[9]=this._quadTextCoords.down,this._vertices[13]=this._quadTextCoords.right,this._vertices[14]=this._quadTextCoords.up,this._vertices[18]=this._quadTextCoords.left,this._vertices[19]=this._quadTextCoords.up;const i=this._graphicContext;i.bindBuffer(i.ARRAY_BUFFER,this._vboObject.vbo),i.bufferData(i.ARRAY_BUFFER,new Float32Array(this._vertices),i.STATIC_DRAW)}}}createCollision(t,e,i,r,a=0,s=0){return this._collisionRect={x:t,y:e,width:i,height:r,offsetX:a,offsetY:s},this._collisionRect}hitTest(t){const e=t;return!(!e.collisionRect||!this.collisionRect)&&h.OFCollisionHelper.hitTestSprite(this,e)}hitTestByPoint(t,e){return h.OFCollisionHelper.hitTestByPointSprite(this,t,e)}updateGLBufferData(){if(this._imageContent.isLoaded&&(this._quadTextCoords=new r.OFQuadTextCoords(0,1,0,1,.5*this._imageHTML.width,.5*this._imageHTML.height),!this.hasSpriteBatch)){this._vertices=[this._quadTextCoords.width,this._quadTextCoords.height,0,this._quadTextCoords.right,this._quadTextCoords.down,-this._quadTextCoords.width,this._quadTextCoords.height,0,this._quadTextCoords.left,this._quadTextCoords.down,this._quadTextCoords.width,-this._quadTextCoords.height,0,this._quadTextCoords.right,this._quadTextCoords.up,-this._quadTextCoords.width,-this._quadTextCoords.height,0,this._quadTextCoords.left,this._quadTextCoords.up];const t=this._graphicContext;t.bindBuffer(t.ARRAY_BUFFER,this._vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW)}}update(t){this._imageContent&&this._imageContent.isLoaded&&(this._quadTextCoords||(this.updateGLBufferData(),this.setAdvanceAnimationTileConfig(this._imageRect.x,this._imageRect.y,this._imageRect.width,this._imageRect.height)),this.hasSpriteBatch?this._spriteBatchInstance.drawGraphic(this):(this.enabledShaderProps?(this._shader.setColorByIndex(0,this._color),this._shader.setTextureByIndex(0,this._imageGLTexture)):this._shader.color=this._color,this._transformation?this._shader.draw(t,this._vboObject.vbo,this._transformation):(this._shader.setTranslate(this.x,this.y,this.z),this._shader.rotationZ=this.rotation,this._shader.setScale(this.scaleX,this.scaleY,1),this._shader.draw(t,this._imageGLTexture,this._vboObject.vbo)))),this._debugCollisionQuad&&(this._debugCollisionQuad.x=this.x,this._debugCollisionQuad.y=this.y,this._debugCollisionQuad.update(t))}destroy(){this._spriteBatchInstance=null,this._quadTextCoords=null,this._imageContent=null,this._imageHTML=null,this._imageGLTexture=null,this._imageRect=null,this._debugCollisionQuad&&(this._debugCollisionQuad.destroy(),this._debugCollisionQuad=null),super.destroy()}}e.OFSprite=c},6400:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFOptSpriteBatcher=void 0;const r=i(1182),a=i(5694),s=i(7733);e.OFOptSpriteBatcher=class{constructor(){this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this.color=r.OFColor.white(),this._spriteQuadData=[],this._spriteBatchRenderData=[],this._alreadyTransformedForRender=!1}begin(){this._spriteBatchRenderData.length>0&&this._spriteBatchRenderData.forEach((t=>{t.vboObject.deactivate(),t.iboObject.deactivate()})),this._spriteQuadData=[],this._spriteBatchRenderData=[],this._alreadyTransformedForRender=!1}pushSprite(t,e,i,r,a,s,n){const o={x:t,y:e,width:i,height:r,imageContent:s,uv00_x:0,uv00_y:0,uv10_x:0,uv10_y:0,uv11_x:0,uv11_y:0,uv01_x:0,uv01_y:0,sortId:n};a?(o.uv00_x=a.uv00_x,o.uv00_y=a.uv00_y,o.uv10_x=a.uv10_x,o.uv10_y=a.uv10_y,o.uv11_x=a.uv11_x,o.uv11_y=a.uv11_y,o.uv01_x=a.uv01_x,o.uv01_y=a.uv01_y):(o.uv00_x=0,o.uv00_y=0,o.uv10_x=0,o.uv10_y=0,o.uv11_x=0,o.uv11_y=0,o.uv01_x=0,o.uv01_y=0),this._spriteQuadData.push(o)}end(){if(!this._alreadyTransformedForRender){if(this._alreadyTransformedForRender=!0,this._spriteQuadData.length>0){this._spriteQuadData=this._spriteQuadData.sort(((t,e)=>t.sortId.localeCompare(e.sortId)));const t=this._spriteQuadData[0].sortId;let e=[],i=[],r=null,a=0,s=0;this._spriteQuadData.forEach((n=>{t!==n.sortId&&(this.flush(r,e,i,s,a),e=[],i=[],s=0,a=0);const o=n.x,h=n.y,c=n.width,u=n.height;r=n.imageContent,e.push(o+0,h+0,0,n.uv00_x,n.uv00_y,o+c,h+0,0,n.uv10_x,n.uv10_y,o+c,h+u,0,n.uv11_x,n.uv11_y,o+0,h+u,0,n.uv01_x,n.uv01_y),i.push(s+0,s+1,s+2,s+2,s+3,s+0),s+=4,a+=6})),s>0&&a>0&&this.flush(r,e,i,s,a)}this._spriteQuadData=[]}}flush(t,e,i,r,a){const n=this._graphicContext;let o=new Float32Array(e),h=new Uint16Array(i);const c=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(s.OFEnumVBOObjectType.VertexBuffer);c.activate(s.OFEnumVBOObjectType.VertexBuffer);const u=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(s.OFEnumVBOObjectType.IndexBuffer);u.activate(s.OFEnumVBOObjectType.IndexBuffer),n.bindBuffer(n.ARRAY_BUFFER,c.vbo),n.bufferData(n.ARRAY_BUFFER,o,n.DYNAMIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,u.vbo),n.bufferData(n.ELEMENT_ARRAY_BUFFER,h,n.DYNAMIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null),o=null,h=null;const l={};l.vboObject=c,l.iboObject=u,l.vertexCount=r,l.indicesCount=a,l.imageTexture=t.imageTexture,this._spriteBatchRenderData.push(l)}draw(t,e){const i=this._graphicContext;for(const r of this._spriteBatchRenderData)e||(this._shader.setTranslate(0,0,0),this._shader.setRotation(0,0,0),this._shader.setScale(1,1,1)),this._shader.setColorByIndex(0,this.color),this._shader.setTextureByIndex(0,r.imageTexture),this._shader.draw(t,r.vboObject.vbo,e,i.TRIANGLES,r.iboObject.vbo,r.indicesCount)}destroy(){var t;this._framework=null,this._graphicDevice=null,this._graphicContext=null,this.color=null,this._spriteQuadData=null,this._shader=null,null===(t=this._spriteBatchRenderData)||void 0===t||t.forEach((t=>{var e,i;null===(e=t.vboObject)||void 0===e||e.deactivate(),null===(i=t.iboObject)||void 0===i||i.deactivate()})),this._spriteBatchRenderData=null}}},6227:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFPolygonBatcher=void 0;const r=i(19),a=i(5694),s=i(9486),n=i(7733),o=i(2608);class h{set imageContent(t){this._imageContent=t}constructor(){this._vertexCount=0,this._indexCount=0,this._imageContent=null,this._vertices=[],this._indices=[],this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER),this._GL=this._graphicDevice.graphicContext,this._vBOObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.VertexBuffer),this._vBOObject.activate(n.OFEnumVBOObjectType.VertexBuffer),this._iBOObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(n.OFEnumVBOObjectType.IndexBuffer),this._iBOObject.activate(n.OFEnumVBOObjectType.IndexBuffer)}changeShader(t){let e=!1;if(t&&t.length>0){const i=this._graphicDevice.shaderFactory.retrieveShader(t);i?(e=!0,this._shader=i):this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER)}e||r.OFConsole.warn(s.OFTranslations.Framework.GraphicsOptimization.PolygonBatcher.changeShader,t)}setShader(t){let e=!1;t&&this._shader&&this._shader.name!==t.name?(e=!0,this._shader=t):t||(this._shader=this._graphicDevice.shaderFactory.retrieveShader(h.CURRENT_DEFAULT_SHADER)),e||r.OFConsole.warn(s.OFTranslations.Framework.GraphicsOptimization.PolygonBatcher.changeShader,this._shader.name)}beginDraw(){this._vertices=[],this._indices=[],this._vertexCount=0,this._indexCount=0}pushPolygon(t,e){if(!t||!e)return;const i=this._vertexCount/8;for(const t of this._indices)this._indices.push(t+i);this._vertices.push({array:t,count:this._vertexCount}),this._indexCount+=e.length,this._vertexCount+=t.length}endDraw(){if(0!==this._vertexCount){this._arrayBufferGPUVertex&&(this._arrayBufferGPUVertex=null),this._arrayBufferGPUIndex&&(this._arrayBufferGPUIndex=null),this._arrayBufferGPUVertex=new Float32Array(this._vertexCount),this._arrayBufferGPUIndex=new Uint16Array(this._indices);for(let t=0,e=this._vertices.length;t<e;t++){const e=this._vertices[t];this._arrayBufferGPUVertex.set(e.array,e.count)}this._GL.bindBuffer(this._GL.ARRAY_BUFFER,this._vBOObject.vbo),this._GL.bufferData(this._GL.ARRAY_BUFFER,this._arrayBufferGPUVertex,this._GL.DYNAMIC_DRAW),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,this._iBOObject.vbo),this._GL.bufferData(this._GL.ELEMENT_ARRAY_BUFFER,this._arrayBufferGPUIndex,this._GL.STATIC_DRAW),this._GL.bindBuffer(this._GL.ARRAY_BUFFER,null),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,null)}}draw(t,e,i,r){const a=i||this._GL.TRIANGLES;if(e||(this._shader.setTranslate(0,0,0),this._shader.setRotation(0,0,0),this._shader.setScale(1,1,1)),r)for(const t of Object.keys(r)){const e=r[t];switch(e.type){case o.OFEnumShaderDataTypes.IColor:this._shader.setColorByIndex(e.index,e.value);break;case o.OFEnumShaderDataTypes.ITexture:this._shader.setTextureByIndex(e.index,e.value)}}this._imageContent&&this._shader.setTextureByIndex(0,this._imageContent.imageTexture),this._shader.draw(t,this._vBOObject.vbo,e,a,this._iBOObject.vbo,this._indexCount),this._GL.bindBuffer(this._GL.ARRAY_BUFFER,null),this._GL.bindBuffer(this._GL.ELEMENT_ARRAY_BUFFER,null)}destroy(){this._GL=null,this._graphicDevice=null,this._imageContent=null,this._arrayBufferGPUVertex=null,this._arrayBufferGPUIndex=null,this._vertices=null,this._indices=null,this._shader=null,this._vBOObject&&this._vBOObject.deactivate(),this._iBOObject&&this._iBOObject.deactivate(),this._vBOObject=null,this._iBOObject=null}}e.OFPolygonBatcher=h,h.MAX_VERTICES=10920,h.CURRENT_DEFAULT_SHADER="SpineShaderTexture"},4840:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSpriteBatcher=void 0;const r=i(5694),a=i(7733);class s{constructor(t,e){this.index=t,this._graphicDevice=e,this.initialize()}initialize(){this.enabled=!1,this.isWaitingForDelete=!1,this.vertexCount=0,this.indexCount=0,this.vertices=[],this.indices=[],this.vboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.VertexBuffer),this.vboObject.activate(a.OFEnumVBOObjectType.VertexBuffer),this.iboObject=this._graphicDevice.deviceOptimizationManager.vboPooler.getAvailableVBO(a.OFEnumVBOObjectType.IndexBuffer),this.iboObject.activate(a.OFEnumVBOObjectType.IndexBuffer)}reset(){this.enabled=!1,this.vertexCount=0,this.indexCount=0,this.vertices=[],this.indices=[]}destroy(){var t,e;this.isWaitingForDelete=!0,null===(t=this.vboObject)||void 0===t||t.deactivate(),null===(e=this.iboObject)||void 0===e||e.deactivate(),this.vboObject=null,this.iboObject=null,this.vertices=null,this.indices=null}}class n{get totalQuads(){let t=0;return this._batchGroups.forEach((e=>t+=e.vertexCount/4)),t}get totalDrawCalls(){return this._batchGroups.filter((t=>t.enabled)).length}constructor(t){this._graphicDevice=r.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this._imageContent=this._framework.contentManager.getContent(t),this._imageGLTexture=this._imageContent.imageTexture,this._shader=this._graphicDevice.shaderFactory.retrieveShader("ShaderTexture"),this._batchGroups=[new s(0,this._graphicDevice)]}beginDraw(){this._batchGroups.forEach((t=>t.reset())),0===this._batchGroups.length&&(this._batchGroups=[new s(0,this._graphicDevice)]),this._currentBatchGroup=this._batchGroups[0]}drawGraphic(t){const e=t.quadTextCoords,i=t.x,r=t.y,a=e.width/2*t.scaleX,o=e.height/2*t.scaleY;if(0!==t.rotation){const s=Math.cos(t.rotation),n=Math.sin(t.rotation);let h=i+a,c=i-a,u=i+a,l=i-a,d=r+o,_=r+o,m=r-o,p=r-o;const f=.25*(h+c+u+l),g=.25*(d+_+m+p);h-=f,c-=f,u-=f,l-=f,d-=g,_-=g,m-=g,p-=g;let v=h,b=c,F=u,y=l;h=s*v-n*d,d=n*v+s*d,c=s*b-n*_,_=n*b+s*_,u=s*F-n*m,m=n*F+s*m,l=s*y-n*p,p=n*y+s*p,h+=f,c+=f,u+=f,l+=f,d+=g,_+=g,m+=g,p+=g,this._currentBatchGroup.vertices.push(h,d,0,e.right,e.down,c,_,0,e.left,e.down,u,m,0,e.right,e.up,l,p,0,e.left,e.up)}else this._currentBatchGroup.vertices.push(i+a,r+o,0,e.right,e.down,i-a,r+o,0,e.left,e.down,i+a,r-o,0,e.right,e.up,i-a,r-o,0,e.left,e.up);0!==this._currentBatchGroup.vertexCount?this._currentBatchGroup.indices.push(this._currentBatchGroup.vertexCount-1,this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount+1,this._currentBatchGroup.vertexCount+2,this._currentBatchGroup.vertexCount+3):this._currentBatchGroup.indices.push(this._currentBatchGroup.vertexCount,this._currentBatchGroup.vertexCount+1,this._currentBatchGroup.vertexCount+2,this._currentBatchGroup.vertexCount+3),this._currentBatchGroup.vertexCount+=4,this._currentBatchGroup.indexCount=this._currentBatchGroup.indices.length,this._currentBatchGroup.vertexCount>=n.MAX_VERTICES&&(this._currentBatchGroup.index>=this._batchGroups.length-1&&this._batchGroups.push(new s(this._batchGroups.length,this._graphicDevice)),this._currentBatchGroup=this._batchGroups[this._currentBatchGroup.index+1])}endDraw(){const t=this._graphicContext;this._batchGroups.forEach((e=>{0!==e.vertexCount?(e.enabled=!0,t.bindBuffer(t.ARRAY_BUFFER,e.vboObject.vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e.vertices),t.DYNAMIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.iboObject.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(e.indices),t.STATIC_DRAW)):e.destroy()})),this._batchGroups=this._batchGroups.filter((t=>!t.isWaitingForDelete))}update(t){this._imageContent.isLoaded&&this._batchGroups.forEach((e=>{if(e.enabled){const i=this._shader;i.setTranslate(0,0,0),i.rotationZ=0,i.setScale(1,1,1),i.drawElements(t,this._imageGLTexture,e.iboObject.vbo,e.vboObject.vbo,e.indexCount)}}))}destroy(){this._batchGroups.forEach((t=>t.destroy())),this._batchGroups=null}}e.OFSpriteBatcher=n,n.MAX_VERTICES=20920},1851:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFQuadStruct=void 0;const r=i(28);class a{static createAsVertexPositionColorTexture(){const t=new a;return t.created=!1,t.initX=0,t.initY=0,t.VPTTopLeft=new r.OFVertexPositionColorTexture,t.VPTTopRight=new r.OFVertexPositionColorTexture,t.VPTBottomLeft=new r.OFVertexPositionColorTexture,t.VPTBottomRight=new r.OFVertexPositionColorTexture,t}}e.OFQuadStruct=a},9736:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFQuadTextCoords=void 0,e.OFQuadTextCoords=class{constructor(t,e,i,r,a,s){this.left=t,this.right=e,this.up=i,this.down=r,this.width=a,this.height=s}}},28:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVertexPositionColorTexture=void 0,e.OFVertexPositionColorTexture=class{}},1182:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFColor=void 0;class i{constructor(t,e,i,r){this.r=t,this.g=e,this.b=i,this.a=r}static fromString(t){const e=t.split(","),r=i.white();return r.r=parseFloat(e[0]),r.g=parseFloat(e[1]),r.b=parseFloat(e[2]),r.a=parseFloat(e[3]),r}static fromObject(t){return{r:parseInt(String(t.r),10),g:parseInt(String(t.g),10),b:parseInt(String(t.b),10),a:parseInt(String(t.a),10)}}static fromNormalized(t){return new i(Math.round(255*t.r),Math.round(255*t.g),Math.round(255*t.b),Math.round(255*t.a))}static convertToStringFromNormalized(t){return`${Math.round(255*t.r).toString()},${Math.round(255*t.g).toString()},${Math.round(255*t.b).toString()},${Math.round(255*t.a).toString()}`}static black(){return new i(0,0,0,1)}static white(){return new i(1,1,1,1)}static red(){return new i(1,0,0,1)}static green(){return new i(0,1,0,1)}static blue(){return new i(0,0,1,1)}}e.OFColor=i},2213:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDrawable2D=void 0;const r=i(1182),a=i(5694);e.OFDrawable2D=class{get vboObject(){return this._vboObject}get iboObject(){return this._iboObject}get hasSpriteBatch(){return!!this._spriteBatchInstance}get alpha(){return this._color.a}set alpha(t){this._color.a=t}get debugMode(){return this._debugMode}set debugMode(t){this._debugMode=t}constructor(t,e,i){this.x=t,this.y=e,this.z=0,this.scaleX=1,this.scaleY=1,this.rotation=0,this._debugMode=!1,this._color=r.OFColor.white(),this._graphicDevice=a.OFFrameworkFactory.currentFramewok.mainGraphicDevice,this._graphicContext=this._graphicDevice.graphicContext,this._framework=this._graphicDevice.framework,this.setSpriteBatch(i)}setSpriteBatch(t){this._spriteBatchInstance=t,this._spriteBatchInstance&&(this._vboObject&&this._vboObject.deactivate(),this._iboObject&&this._iboObject.deactivate(),this._vboObject=null,this._iboObject=null)}setShader(t){this._shader=t}setTransformationMatrix(t){this._transformation=t}destroy(){this._vboObject&&this._vboObject.deactivate(),this._iboObject&&this._iboObject.deactivate(),this._vboObject=null,this._iboObject=null,this._vertices=null,this._indices=null,this._transformation=null,this._shader=null,this._color=null}}},7582:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseShader=void 0;const r=i(887),a=i(4500);e.OFBaseShader=class{get name(){return this._name}set name(t){a.STUtils.isNullOrEmpty(this._name)&&(this._name=t)}set x(t){this._x!==t&&(this._x=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set y(t){this._y!==t&&(this._y=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set z(t){this._z!==t&&(this._z=t,this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}set rotationZ(t){this._rotationZ!==t&&(this._rotationZ=t,r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z)}get graphicContext(){return this._shaderFactory.graphicDevice.graphicContext}constructor(t,e,i=!1){this._shaderFactory=t,this.isShaderAbstract=i,this._graphicDevice=t.graphicDevice,this._renderCamera=this._graphicDevice.renderCamera,this._shaderProgram=t.instanceShader(e),this._graphicContext=this._shaderFactory.graphicDevice.graphicContext,this._world=r.mat4.create(),this._rotation=r.mat4.create(),this._name="",this._x=this._y=this._z=0,this._scaleX=this._scaleY=this._scaleZ=1,this._rotationX=this._rotationY=this._rotationZ=0,this.getShaderLocations(this._graphicContext)}setTranslate(t,e,i){this._x=t,this._y=e,this._z=i,this._world[12]=t,this._world[13]=e,this._world[14]=i}setRotation(t,e,i){this._rotationX=t,this._rotationY=e,this._rotationZ=i;const a=r.mat4.fromXRotation(r.mat4.create(),this._rotationX),s=r.mat4.fromYRotation(r.mat4.create(),this._rotationY),n=r.mat4.fromZRotation(r.mat4.create(),this._rotationZ);r.mat4.multiply(this._rotation,this._rotation,a),r.mat4.multiply(this._rotation,this._rotation,s),r.mat4.multiply(this._rotation,this._rotation,n),r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z}setScale(t,e,i){this._scaleX=t,this._scaleY=e,this._scaleZ=i,r.mat4.fromScaling(this._world,r.vec3.fromValues(this._scaleX,this._scaleY,this._scaleZ)),r.mat4.fromZRotation(this._rotation,this._rotationZ),r.mat4.multiply(this._world,this._world,this._rotation),this._world[12]=this._x,this._world[13]=this._y,this._world[14]=this._z}setTexture(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.activeTexture(r[`TEXTURE${i}`]),r.bindTexture(r.TEXTURE_2D,e),r.uniform1i(a,0)}setColor(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this.getOrCreateUniformLocation(t);i.uniform4f(r,e.r,e.g,e.b,e.a)}getOrCreateUniformLocation(t){if(!this[t]){const e=this._graphicContext;this[t]=e.getUniformLocation(this._shaderProgram,t)}return this[t]}setVector4Float(t,e,i,r,a){const s=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const n=this[t];s.uniform4f(n,e,i,r,a)}setVector3Float(t,e,i,r){const a=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const s=this[t];a.uniform3f(s,e,i,r)}setVector2Float(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.uniform2f(a,e,i)}setVector1Float(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[t];i.uniform1f(r,e)}setVector1Int(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[t];i.uniform1i(r,e)}setVector2Int(t,e,i){const r=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const a=this[t];r.uniform2i(a,e,i)}setVector3Int(t,e,i,r){const a=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const s=this[t];a.uniform3i(s,e,i,r)}setVector4Int(t,e,i,r,a){const s=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const n=this[t];s.uniform4i(n,e,i,r,a)}setTextureByIndex(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[this[`mTextureUniform${t}`]];i.activeTexture(i[`TEXTURE${t}`]),i.bindTexture(i.TEXTURE_2D,e),i.uniform1i(r,t)}setColorByIndex(t,e){const i=this._graphicContext;this._graphicDevice.useShaderProgram(this._shaderProgram);const r=this[this[`mColorUniform${t}`]];i.uniform4f(r,e.r,e.g,e.b,e.a)}}},5391:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderAbstract=void 0;const r=i(7582),a=i(887),s=i(2608);class n extends r.OFBaseShader{constructor(t,e,i){super(t,e,!0),this._shaderFactory=t,this._attributeInterleavedDataSize=0,this._colorPropIndexCount=0,this._texturePropIndexCount=0,this._shaderCodeInfo=i,this.updateShader(e,i)}getShaderLocations(t){}updateShader(t,e){const i=this.graphicContext;if(this._shaderCodeInfo){this._attributeInterleavedDataSize=0,this._colorPropIndexCount=0,this._texturePropIndexCount=0;for(let t=0;t<this._shaderCodeInfo.attributeCount;t++)delete this[this._shaderCodeInfo.attributes[t].inputName];let t=0,e=0;for(let i=0;i<this._shaderCodeInfo.uniformCount;i++){const r=this._shaderCodeInfo.uniforms[i];switch(delete this[r.inputName],r.inputVariableType){case s.OFEnumShaderDataTypes.IColor:delete this[`mColorUniform${t}`],t++;break;case s.OFEnumShaderDataTypes.ITexture:delete this[`mTextureUniform${e}`],e++}}}this._shaderCodeInfo=e,this._shaderProgram=this._shaderFactory.instanceShader(t);for(let t=0;t<this._shaderCodeInfo.attributeCount;t++){const e=this._shaderCodeInfo.attributes[t];switch(this[e.inputName]=i.getAttribLocation(this._shaderProgram,e.inputName),e.inputVariableType){case s.OFEnumShaderDataTypes.Float:this._attributeInterleavedDataSize+=4;break;case s.OFEnumShaderDataTypes.Vector2:this._attributeInterleavedDataSize+=8;break;case s.OFEnumShaderDataTypes.Vector3:this._attributeInterleavedDataSize+=12;break;case s.OFEnumShaderDataTypes.Vector4:this._attributeInterleavedDataSize+=16}}this.precomputeUniformsLocation()}precomputeUniformsLocation(){const t=this._graphicContext;for(let e=0;e<this._shaderCodeInfo.uniformCount;e++){const i=this._shaderCodeInfo.uniforms[e],r=i.inputName;switch(this[r]=t.getUniformLocation(this._shaderProgram,r),i.inputVariableType){case s.OFEnumShaderDataTypes.IColor:this[`mColorUniform${this._colorPropIndexCount}`]=r,this._colorPropIndexCount++;break;case s.OFEnumShaderDataTypes.ITexture:this[`mTextureUniform${this._texturePropIndexCount}`]=r,this._texturePropIndexCount++}}}draw(t,e,i=null,r,n,o){const h=this._graphicContext,c=t.hasCustomCamera?t.cameraMVP:this._renderCamera.transformedMatrix;if(c&&this._shaderProgram){h.enable(h.BLEND),h.blendFunc(h.SRC_ALPHA,h.ONE_MINUS_SRC_ALPHA),this._graphicDevice.useShaderProgram(this._shaderProgram);for(let t=0;t<this._shaderCodeInfo.uniformCount;t++){const e=this._shaderCodeInfo.uniforms[t];if(e.inputVariableType===s.OFEnumShaderDataTypes.ICamera){const t=this[e.inputName];i?a.mat4.multiply(c,c,i):a.mat4.multiply(c,c,this._world),h.uniformMatrix4fv(t,!1,c)}}h.bindBuffer(h.ARRAY_BUFFER,e);let t=0;for(let e=0;e<this._shaderCodeInfo.attributeCount;e++){const i=this._shaderCodeInfo.attributes[e],r=this[i.inputName];switch(h.enableVertexAttribArray(r),i.inputVariableType){case s.OFEnumShaderDataTypes.Float:h.vertexAttribPointer(r,1,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=4;break;case s.OFEnumShaderDataTypes.Vector2:h.vertexAttribPointer(r,2,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=8;break;case s.OFEnumShaderDataTypes.Vector3:h.vertexAttribPointer(r,3,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=12;break;case s.OFEnumShaderDataTypes.Vector4:h.vertexAttribPointer(r,4,h.FLOAT,!1,this._attributeInterleavedDataSize,t),t+=16}}r=r||h.TRIANGLE_STRIP,n?(h.bindBuffer(h.ELEMENT_ARRAY_BUFFER,n),h.drawElements(r,o,h.UNSIGNED_SHORT,0)):h.drawArrays(r,0,4)}}}e.OFShaderAbstract=n},9248:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderFactory=void 0;const r=i(7873),a=i(3689),s=i(5391),n=i(9486),o=i(19),h=i(6618),c=i(2027),u=i(2080);e.OFShaderFactory=class{get framework(){return this._framework}constructor(t){this.graphicDevice=t,this._framework=t.framework,this._shaderRepository={}}retrieveShader(t){let e;if(this._shaderRepository.hasOwnProperty(t))e=this._shaderRepository[t];else for(const i of Object.keys(this._shaderRepository))if(this._shaderRepository[i].name===t){e=this._shaderRepository[i];break}return e}loadDefault(){this.addShader("ShaderPrimitive",new a.OFShaderPrimitive(this,c.OFDefaultShaderSources.SourcesShaderPrimitive)),this.addShader("ShaderTexture",new r.OFShaderTexture(this,c.OFDefaultShaderSources.SourcesShaderTexture))}loadAndAddShaderWithCodeInfo(t,e,i=null,r){return i||(i=u.OFShaderAnalizer.analize(e.vertex),i=u.OFShaderAnalizer.analize(e.fragment,i)),this._shaderRepository[r]=new s.OFShaderAbstract(this,e,i),this._shaderRepository[r].name=t,o.OFConsole.log(n.OFTranslations.Framework.ShaderFactory.loadAndAddShaderWithCodeInfo,this._framework.frameworkIdentifier.toString(),t),this._shaderRepository[r]}addShader(t,e){this._shaderRepository[t]=e,this._shaderRepository[t].name=t,o.OFConsole.log(n.OFTranslations.Framework.ShaderFactory.addShader,this._framework.frameworkIdentifier.toString(),t)}instanceShader(t){const e=this.graphicDevice.graphicContext,i=u.OFShaderAnalizer.sanitize(t.vertex),r=u.OFShaderAnalizer.sanitize(t.fragment),a=h.OFGLHelper.compileShader(e,i,e.VERTEX_SHADER),s=h.OFGLHelper.compileShader(e,r,e.FRAGMENT_SHADER);return h.OFGLHelper.createProgram(e,a,s)}}},3689:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderPrimitive=void 0;const r=i(7582),a=i(1182),s=i(887);class n extends r.OFBaseShader{constructor(t,e){super(t,e),this._shaderFactory=t,this.color=a.OFColor.white()}getShaderLocations(t){this._vertexPositionAttr=t.getAttribLocation(this._shaderProgram,"aVertexPosition"),this._uniformWVPMatrix=t.getUniformLocation(this._shaderProgram,"uWVPMatrix"),this._uniformColor=t.getUniformLocation(this._shaderProgram,"uColor")}draw(t,e,i,r,a,n=null){const o=this._graphicContext;o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA),o.useProgram(this._shaderProgram),o.bindBuffer(o.ARRAY_BUFFER,e),o.enableVertexAttribArray(this._vertexPositionAttr),o.vertexAttribPointer(this._vertexPositionAttr,3,o.FLOAT,!1,0,0);const h=this._renderCamera.transformedMatrix;n?s.mat4.multiply(h,h,n):s.mat4.multiply(h,h,this._world),o.uniformMatrix4fv(this._uniformWVPMatrix,!1,h),o.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),r=r||o.TRIANGLE_STRIP,i?(o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,i),o.drawElements(r,a,o.UNSIGNED_SHORT,0)):o.drawArrays(r,0,a)}}e.OFShaderPrimitive=n},7873:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFShaderTexture=void 0;const r=i(7582),a=i(1182),s=i(887);class n extends r.OFBaseShader{constructor(t,e){super(t,e),this._shaderFactory=t,this.color=a.OFColor.white()}getShaderLocations(t){this._vertexPositionAttr=t.getAttribLocation(this._shaderProgram,"aVertexPosition"),this._textureCoordPositionAttr=t.getAttribLocation(this._shaderProgram,"aTextureCoord"),this._samplerPositionUniform=t.getUniformLocation(this._shaderProgram,"uSamplerTexture"),this._uniformWVPMatrix=t.getUniformLocation(this._shaderProgram,"uWVPMatrix"),this._uniformColor=t.getUniformLocation(this._shaderProgram,"uColor")}draw(t,e,i,r){const a=this._graphicContext;a.enable(a.BLEND),a.blendFunc(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA),a.useProgram(this._shaderProgram),a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,e),a.uniform1i(this._samplerPositionUniform,0),a.bindBuffer(a.ARRAY_BUFFER,i),a.enableVertexAttribArray(this._vertexPositionAttr),a.enableVertexAttribArray(this._textureCoordPositionAttr),a.vertexAttribPointer(this._vertexPositionAttr,3,a.FLOAT,!1,20,0),a.vertexAttribPointer(this._textureCoordPositionAttr,2,a.FLOAT,!1,20,12);const n=this._renderCamera.transformedMatrix;r?s.mat4.multiply(n,n,r):s.mat4.multiply(n,n,this._world),a.uniformMatrix4fv(this._uniformWVPMatrix,!1,n),a.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),a.drawArrays(a.TRIANGLE_STRIP,0,4)}drawElements(t,e,i,r,a){const n=this._graphicContext;n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),n.useProgram(this._shaderProgram),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_2D,e),n.uniform1i(this._samplerPositionUniform,0),n.bindBuffer(n.ARRAY_BUFFER,r),n.enableVertexAttribArray(this._vertexPositionAttr),n.enableVertexAttribArray(this._textureCoordPositionAttr),n.vertexAttribPointer(this._vertexPositionAttr,3,n.FLOAT,!1,20,0),n.vertexAttribPointer(this._textureCoordPositionAttr,2,n.FLOAT,!1,20,12);const o=this._renderCamera.transformedMatrix;s.mat4.multiply(o,o,this._world),n.uniformMatrix4fv(this._uniformWVPMatrix,!1,o),n.uniform4f(this._uniformColor,this.color.r,this.color.g,this.color.b,this.color.a),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,i),n.drawElements(n.TRIANGLE_STRIP,a,n.UNSIGNED_SHORT,0),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)}}e.OFShaderTexture=n},9151:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat2=void 0,e.SMat2=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m10,this._array[3]=this.m11,this._array}constructor(t,e,i,r){this.m00=t,this.m01=e,this.m10=i,this.m11=r,this._array=[t,e,i,r]}}},8454:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat3=void 0,e.SMat3=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m02,this._array[3]=this.m10,this._array[4]=this.m11,this._array[5]=this.m12,this._array[6]=this.m20,this._array[7]=this.m21,this._array[8]=this.m22,this._array}constructor(t,e,i,r,a,s,n,o,h){this.m00=t,this.m01=e,this.m02=i,this.m10=r,this.m11=a,this.m12=s,this.m20=n,this.m21=o,this.m22=h,this._array=[t,e,i,r,a,s,n,o,h]}}},7876:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SMat4=void 0,e.SMat4=class{get array(){return this._array[0]=this.m00,this._array[1]=this.m01,this._array[2]=this.m02,this._array[3]=this.m03,this._array[4]=this.m10,this._array[5]=this.m11,this._array[6]=this.m12,this._array[7]=this.m13,this._array[8]=this.m20,this._array[9]=this.m21,this._array[10]=this.m22,this._array[11]=this.m23,this._array[12]=this.m30,this._array[13]=this.m31,this._array[14]=this.m32,this._array[15]=this.m33,this._array}constructor(t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p){this.m00=t,this.m01=e,this.m02=i,this.m03=r,this.m10=a,this.m11=s,this.m12=n,this.m13=o,this.m20=h,this.m21=c,this.m22=u,this.m23=l,this.m30=d,this.m31=_,this.m32=m,this.m33=p,this._array=[t,e,i,r,a,s,n,o,h,c,u,l,d,_,m,p]}}},258:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec2=void 0,e.SVec2=class{constructor(t,e){this.x=t,this.y=e}}},1440:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec3=void 0,e.SVec3=class{constructor(t,e,i){this.x=t,this.y=e,this.z=i}}},8620:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVec4=void 0,e.SVec4=class{constructor(t,e,i,r){this.x=t,this.y=e,this.z=i,this.w=r}}},5520:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFViewport=void 0;class i{constructor(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r}static empty(){return new i(0,0,0,0)}}e.OFViewport=i},2027:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFDefaultShaderSources=e.IOFDefaultShaderSource=void 0,e.IOFDefaultShaderSource=class{};class i{}e.OFDefaultShaderSources=i,i.SourcesShaderPrimitive={vertex:"attribute vec3 aVertexPosition;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying mediump vec4 varyingColor;\n\nvoid main(void) {\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 1.0);\n}",fragment:"uniform lowp vec4 uColor : Color;\n\nvoid main(void) {\n    gl_FragColor = uColor;\n}"},i.SourcesShaderTexture={vertex:"attribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 1.0);\n}",fragment:"varying highp vec2 varyingTextureCoord;\n\nuniform lowp vec4 uColor : Color;\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * uColor;\n}"},i.SourcesSpineShaderTexture={vertex:"attribute vec2 aVertexPosition;\nattribute vec4 aVertexColor;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingVertexColor = aVertexColor;\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}",fragment:"varying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * varyingVertexColor;\n}"},i.SourcesTextShaderTexture={vertex:"attribute vec2 aVertexPosition;\nattribute vec4 aVertexColor;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uWVPMatrix : Camera;\n\nvarying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nvoid main(void) {\n    varyingVertexColor = aVertexColor;\n    varyingTextureCoord = aTextureCoord;\n    gl_Position = uWVPMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}",fragment:"varying lowp vec4 varyingVertexColor;\nvarying highp vec2 varyingTextureCoord;\n\nuniform lowp vec4 uTintColor : Color;\nuniform sampler2D uSamplerTexture : Texture;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSamplerTexture, varyingTextureCoord) * varyingVertexColor * uTintColor;\n}"}},5516:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumCanvasContextType=void 0,(i=e.OFEnumCanvasContextType||(e.OFEnumCanvasContextType={})).D2D="2d",i.D3D="3d"},961:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumKeyCode=void 0,(i=e.OFEnumKeyCode||(e.OFEnumKeyCode={}))[i.None=-1]="None",i[i.Backspace=8]="Backspace",i[i.JumpLine=10]="JumpLine",i[i.Enter=13]="Enter",i[i.Shift=16]="Shift",i[i.Control=17]="Control",i[i.Escape=27]="Escape",i[i.Space=32]="Space",i[i.QuotationMark=34]="QuotationMark",i[i.Left=37]="Left",i[i.Up=38]="Up",i[i.Right=39]="Right",i[i.Down=40]="Down",i[i.Num_0=96]="Num_0",i[i.Num_1=97]="Num_1",i[i.Num_2=98]="Num_2",i[i.Num_3=99]="Num_3",i[i.Num_4=100]="Num_4",i[i.Num_5=101]="Num_5",i[i.Num_6=102]="Num_6",i[i.Num_7=103]="Num_7",i[i.Num_8=104]="Num_8",i[i.Num_9=105]="Num_9",i[i.EqualsSign=61]="EqualsSign",i[i.A=65]="A",i[i.B=66]="B",i[i.C=67]="C",i[i.D=68]="D",i[i.E=69]="E",i[i.F=70]="F",i[i.G=71]="G",i[i.H=72]="H",i[i.I=73]="I",i[i.J=74]="J",i[i.K=75]="K",i[i.L=76]="L",i[i.M=77]="M",i[i.N=78]="N",i[i.O=79]="O",i[i.P=80]="P",i[i.Q=81]="Q",i[i.R=82]="R",i[i.S=83]="S",i[i.T=84]="T",i[i.U=85]="U",i[i.V=86]="V",i[i.W=87]="W",i[i.X=88]="X",i[i.Y=89]="Y",i[i.Z=90]="Z",i[i.F1=112]="F1",i[i.F2=113]="F2",i[i.F3=114]="F3",i[i.F4=115]="F4",i[i.F5=116]="F5",i[i.F6=117]="F6",i[i.F7=118]="F7",i[i.F8=119]="F8",i[i.F9=120]="F9",i[i.F10=121]="F10",i[i.F11=122]="F11",i[i.F12=123]="F12",i[i.Backslash=92]="Backslash",i[i.Nothing=160]="Nothing"},9512:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumRenderEngineType=void 0,(i=e.OFEnumRenderEngineType||(e.OFEnumRenderEngineType={}))[i.CanvasContext2D=0]="CanvasContext2D",i[i.WebGL=1]="WebGL"},7924:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.OFEnumTextAlign=void 0,(i=e.OFEnumTextAlign||(e.OFEnumTextAlign={}))[i.Left=1]="Left",i[i.Right=2]="Right",i[i.Center=3]="Center"},1446:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFCollisionHelper=void 0,e.OFCollisionHelper=class{static hitTestSprite(t,e){const i=t.x+t.collisionRect.offsetX,r=t.y+t.collisionRect.offsetY,a=e.x+e.collisionRect.offsetX,s=e.y+e.collisionRect.offsetY;return i<a+e.collisionRect.width&&i+t.collisionRect.width>a&&r<s+e.collisionRect.height&&t.collisionRect.height+r>s}static hitTestQuad(t,e){const i=t.x+t.offsetX,r=t.y+t.offsetY,a=e.x+e.offsetX,s=e.y+e.offsetY;return i<a+e.width&&i+t.width>a&&r<s+e.height&&t.height+r>s}static hitTestByPointQuad(t,e,i){const r=.5*t.width,a=.5*t.height,s=t.x+t.offsetX,n=t.y+t.offsetY;return s-r<e&&s+r>e&&n-a<i&&n+a>i}static hitTestByPointSprite(t,e,i){const r=.5*t.width,a=.5*t.height,s=t.x,n=t.y;return s-r<e&&s+r>e&&n-a<i&&n+a>i}}},19:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFConsole=void 0;const r=i(4500);e.OFConsole=class{static info(t,e,...i){console.info(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static log(t,e,...i){console.log(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static warn(t,e,...i){console.warn(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static error(t,e,...i){console.error(`${t.constructor.name}-> ${r.STHelpers.formatString(e,...i)}`)}static throwError(t,e,...i){return null}}},6618:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFGLHelper=void 0;const r=i(19),a=i(9486);e.OFGLHelper=class{static compileShader(t,e,i){const s=t;let n;switch(i){case s.VERTEX_SHADER:n=s.createShader(s.VERTEX_SHADER);break;case s.FRAGMENT_SHADER:n=s.createShader(s.FRAGMENT_SHADER)}return s.shaderSource(n,e),s.compileShader(n),s.getShaderParameter(n,s.COMPILE_STATUS)?n:(r.OFConsole.log(a.OFTranslations.Framework.GLHelper.compileShader,s.getShaderInfoLog(n)),null)}static compileShaderWithResults(t,e,i){const r=t;let a,s=null;switch(i){case r.VERTEX_SHADER:a=r.createShader(r.VERTEX_SHADER);break;case r.FRAGMENT_SHADER:a=r.createShader(r.FRAGMENT_SHADER)}return r.shaderSource(a,e),r.compileShader(a),r.getShaderParameter(a,r.COMPILE_STATUS)||(s=r.getShaderInfoLog(a)),{shader:a,hasErrors:null!==s,errorMessage:s}}static createProgram(t,e,i){const s=t,n=s.createProgram();return s.attachShader(n,e),s.attachShader(n,i),s.linkProgram(n),s.getProgramParameter(n,s.LINK_STATUS)||r.OFConsole.log(a.OFTranslations.Framework.GLHelper.createProgram,s.getProgramInfoLog(n)),n}static createProgramWithResults(t,e,i){const r=t,a=r.createProgram();let s=null;return r.attachShader(a,e),r.attachShader(a,i),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS)||(s=r.getProgramInfoLog(a)),{shaderProgram:a,hasErrors:null!==s,errorMessage:s}}}},4734:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFHTMLHelpers=void 0;class i{static createCanvas(t,e,i){const r=document.createTextNode(t),a=document.createElement("canvas");return a.id=i,a.appendChild(r),e.appendChild(a),a}static getPositionOffset(t){let e=0,i=0;for(;t&&!isNaN(t.offsetLeft)&&!isNaN(t.offsetTop);)e+=t.offsetLeft-t.scrollLeft,i+=t.offsetTop-t.scrollTop,t=t.offsetParent;return{x:e,y:i}}static on(t,e,i){if("string"==typeof t){const r=document.getElementsByClassName(t);for(let t=0;t<r.length;t++){const a=r.item(t);a.attachEvent?a.attachEvent("on"+e,i):a.addEventListener&&a.addEventListener(e,i,!0)}}else t.attachEvent?t.attachEvent("on"+e,i):t.addEventListener&&t.addEventListener(e,i,!0)}static off(t,e,i){if("string"==typeof t){const r=document.getElementsByClassName(t);for(let t=0;t<r.length;t++){const a=r.item(t);a["detachEvent "]?a["detachEvent "]("on"+e):a.removeEventListener&&a.removeEventListener(e,i,!0)}}else t.detachEvent?t.detachEvent("on"+e,i):t.removeEventListener&&t.removeEventListener(e,i,!0)}static addClass(t,e){const i=document.getElementsByClassName(t);for(let t=0;t<i.length;t++){const r=i.item(t);r&&(r.className+=r.className?" "+e:e)}}static searchWebElementWithId(t,e){let i=t;for(;i&&(!i.id||i.id&&-1===i.id.indexOf(e));)i=i.parentElement;return i}static searchWebElementWithClass(t,e){let r=t;for(;r&&(!e||!i.webElementHasClass(r,e));)r=r.parentElement;return r}static webElementHasClass(t,e){const i=t.getAttribute("class"),r=i?i.split(" "):null;return!!r&&-1!==r.indexOf(e)}static percentWidth(t){const e=t.offsetParent||t;return Number((t.offsetWidth/e.offsetWidth*100).toFixed(2))}static getMousePosition(t,e){const i={};let r=0,a=0;document.all?(r=e.clientX+document.body.scrollLeft,a=e.clientY+document.body.scrollTop):(r=e.pageX,a=e.pageY);let s=r,n=a;const o=t.mousePositionOffset;return s-=o.x,n-=o.y,s=s<0?0:s,s=s>t.appWidth?t.appWidth:s,n=n<0?0:n,n=n>t.appHeight?t.appHeight:n,i.x=s,i.y=n,i}}e.OFHTMLHelpers=i},1377:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFInterval=void 0,e.OFInterval=class{set finishedLoopCallback(t){this._onFinishedLoopCallback=t}set finishedIntervalCallback(t){this._onFinishedIntervalCallback=t}constructor(t,e){this._currentTime=0,this._currentLoop=0,this._intervalTimeSeconds=t,this._loops=e}update(t){this._currentLoop<this._loops&&(this._currentTime+=t.dt,this._currentTime>=this._intervalTimeSeconds&&(this._currentTime=0,this._currentLoop++,this._currentLoop===this._loops?this._onFinishedIntervalCallback&&this._onFinishedIntervalCallback():this._onFinishedLoopCallback&&this._onFinishedLoopCallback()))}destroy(){this._onFinishedLoopCallback=null,this._onFinishedIntervalCallback=null}}},3910:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2D=void 0;const r=i(6313),a=i(5694);e.OFEffect2D=class{get animation(){return this._animation}get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t,e,i,s,n){this._isWaitingForDelete=!1,this._animation=new r.OFAnimation(e,i,s,n),this._animation.imageContent=a.OFFrameworkFactory.currentFramewok.contentManager.getContent(t)}update(t){this._animation.update(t),this._animation.hasAnimationEnded&&(this._isWaitingForDelete=!0)}destroy(){this._animation.destroy()}}},404:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2DFactory=void 0;const r=i(3910);e.OFEffect2DFactory=class{static createEffect(t,e,i,a,s,n){const o=new r.OFEffect2D(t,e,i,a,s);return o.animation.setSpriteBatch(n),o}}},1055:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFEffect2DManager=void 0;const r=i(404);e.OFEffect2DManager=class{constructor(){this._effects=[]}createEffect(t,e,i,a,s,n){const o=r.OFEffect2DFactory.createEffect(t,e,i,a,s,n||this._spriteBatcher);return this._effects.push(o),o}setSpriteBatch(t){this._spriteBatcher=t}update(t){for(let e=0;e<this._effects.length;e++){const i=this._effects[e];i&&(i.isWaitingForDelete?(i.destroy(),this._effects.splice(e,1),e--):i.update(t))}}}},3161:function(t,e,i){var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(e,i);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,a)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),a=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),a(i(764),e),a(i(5995),e),a(i(1874),e),a(i(2724),e),a(i(3440),e),a(i(1348),e),a(i(464),e),a(i(912),e),a(i(8171),e),a(i(5765),e),a(i(6168),e),a(i(7570),e),a(i(7733),e),a(i(8287),e),a(i(8238),e),a(i(3587),e),a(i(5431),e),a(i(1325),e),a(i(7591),e),a(i(5418),e),a(i(4840),e),a(i(6400),e),a(i(6227),e),a(i(6313),e),a(i(3344),e),a(i(263),e),a(i(4950),e),a(i(3177),e),a(i(1851),e),a(i(9736),e),a(i(28),e),a(i(1182),e),a(i(2213),e),a(i(7582),e),a(i(5391),e),a(i(9248),e),a(i(3689),e),a(i(7873),e),a(i(5520),e),a(i(5516),e),a(i(961),e),a(i(7924),e),a(i(3910),e),a(i(404),e),a(i(1055),e),a(i(1446),e),a(i(19),e),a(i(6618),e),a(i(4734),e),a(i(1377),e),a(i(2344),e),a(i(7295),e),a(i(4793),e),a(i(5613),e),a(i(3152),e),a(i(9298),e),a(i(6957),e),a(i(1482),e),a(i(2256),e),a(i(8489),e),a(i(5694),e),a(i(9151),e),a(i(8454),e),a(i(7876),e),a(i(258),e),a(i(1440),e),a(i(8620),e)},2344:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},7295:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},4793:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},5613:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFHoming2=void 0;const r=i(9298);e.OFHoming2=class{get x(){return this._currentX}get y(){return this._currentY}get rotation(){return this._rotation}constructor(t,e,i,a){this._targetX=0,this._targetY=0,this._rotation=0,this._rotationCorrection=0,this._currentX=t,this._currentY=e,this._speed=a,this._turnFactor=i,this._velocityVector=r.OFVector2.zero(),this._directionVector=new r.OFVector2(this._targetX-this._currentX,this._targetY-this._currentY),this._directionVector.normalize()}setTarget(t,e){this._targetX=t,this._targetY=e}update(t){this._directionVector.x=this._targetX-this._currentX,this._directionVector.y=this._targetY-this._currentY,this._directionVector.normalize(),this._directionVector.multiplyBy(this._turnFactor),this._velocityVector.add(this._directionVector),this._velocityVector.normalize(),this._velocityVector.multiplyBy(this._speed*t),this._currentX+=this._velocityVector.x,this._currentY+=this._velocityVector.y,this._rotation=Math.atan2(this._velocityVector.y,this._velocityVector.x)+this._rotationCorrection}destroy(){this._directionVector=null,this._velocityVector=null}}},3152:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFMath=void 0;const r=i(6957),a=i(887);e.OFMath=class{static random(t,e){return t+(e*Math.random()-t)}static float2Int(t){return 0|t}static quadraticBezier(t,e,i,a){const s=r.OFVector3.zero();return s.x=(1-a)*(1-a)*t.x+(2-2*a)*a*i.x+e.x*a*a,s.y=(1-a)*(1-a)*t.y+(2-2*a)*a*i.y+e.y*a*a,s.z=(1-a)*(1-a)*t.z+(2-2*a)*a*i.z+e.z*a*a,s}static lerp(t,e,i){return t+(e-t)*i}static toDegrees(t){return 57.29577951308232*t}static toRadians(t){return.017453292519943295*t}static isPowerOfTwo(t){return t>0&&0==(t&t-1)}static lowPrecisionCos(t){let e=0;return t<-3.14159265?t+=6.28318531:t>3.14159265&&(t-=6.28318531),e=(t+=1.57079632)<0?1.27323954*t+.405284735*t*t:1.27323954*t-.405284735*t*t,e}static lowPrecisionSin(t){let e=0;return t<-3.14159265?t+=6.28318531:t>3.14159265&&(t-=6.28318531),(t+=3.14159265)>3.14159265&&(t-=6.28318531),e=t<0?1.27323954*t+.405284735*t*t:1.27323954*t-.405284735*t*t,e}static lowPrecision_Atan2(t,e){const i=Math.PI/4,r=3*i,a=Math.abs(t);let s;return s=e>=0?i-i*((e-a)/(e+a)):r-i*((e+a)/(a-e)),t<0?-s:s}static isPointInPolygon(t,e){let i=e[0].x,r=e[0].x,a=e[0].y,s=e[0].y;if(e.forEach((t=>{i=Math.min(t.x,i),r=Math.max(t.x,r),a=Math.min(t.y,a),s=Math.max(t.x,s)})),t.x<i||t.x>r||t.y<a||t.y>s)return!1;let n=!1;for(let i=0,r=e.length-1;i<e.length;r=i++)e[i].y>t.y!=e[r].y>t.y&&t.x<(e[r].x-e[i].x)*(t.y-e[i].y)/(e[r].y-e[i].y)+e[i].x&&(n=!n);return n}static min(t,e){return t<e?t:e}static max(t,e){return t>e?t:e}static mat4XVec4(t,e){const i=a.mat4.create();return i[0]=t[0]*e[0],i[1]=t[1]*e[1],i[2]=t[2]*e[2],i[3]=t[3]*e[3],i[4]=t[4]*e[0],i[5]=t[5]*e[1],i[6]=t[6]*e[2],i[7]=t[7]*e[3],i[8]=t[8]*e[0],i[9]=t[9]*e[1],i[10]=t[10]*e[2],i[11]=t[11]*e[3],i[12]=t[12]*e[0],i[13]=t[13]*e[1],i[14]=t[14]*e[2],i[15]=t[15]*e[3],i}}},9298:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVector2=void 0;const r=i(19);class a{constructor(t,e){this.x=t,this.y=e}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}dot(t){return this.x*t.x+this.y*t.y}add(t){this.x+=t.x,this.y+=t.y}multiplyBy(t){this.x*=t,this.y*=t}multiply(t){this.x*=t.x,this.y*=t.y}scale(t){this.x*=t,this.y*=t}subtract(t){this.x-=t.x,this.y-=t.y}divide(t){this.x/=t.x,this.y/=t.y}angle(){return Math.atan2(this.y,this.x)}normalize(){const t=this.length();t>0?(this.x/=t,this.y/=t):r.OFConsole.warn("[WARN]: OFVector2.normalize: called on a zero-length vector.")}projectionOn(t){const e=t.dot(t);if(0===e)return r.OFConsole.log("[WARN] OFVector2.projectionOn: zero-length projection vector."),this.clone();const i=t.clone();return i.scale(this.dot(t)/e),i}clone(){return new a(this.x,this.y)}static zero(){return new a(0,0)}static one(){return new a(1,1)}static left(){return new a(1,0)}static right(){return new a(0,1)}}e.OFVector2=a},6957:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFVector3=void 0;const r=i(19);class a{constructor(t,e,i){this.x=t,this.y=e,this.z=i}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}add(t){this.x+=t.x,this.y+=t.y,this.z+=t.z}multiply(t){this.x*=t.x,this.y*=t.y,this.z*=t.z}scale(t){this.x*=t,this.y*=t,this.z*=t}subtract(t){this.x-=t.x,this.y-=t.y,this.z-=t.z}divide(t){this.x/=t.x,this.y/=t.y,this.z/=t.z}normalize(){const t=this.length();t>0?(this.x/=t,this.y/=t,this.z/=t):r.OFConsole.warn("[WARN]: OFVector3.normalize: called on a zero-length vector.")}projectionOn(t){const e=t.dot(t);if(0===e)return r.OFConsole.log("[WARN] OFVector3.projectionOn: zero-length projection vector."),this.clone();const i=t.clone();return i.scale(this.dot(t)/e),i}clone(){return new a(this.x,this.y,this.z)}static zero(){return new a(0,0,0)}static one(){return new a(1,1,1)}static left(){return new a(-1,0,0)}static right(){return new a(1,0,0)}static up(){return new a(0,1,0)}static down(){return new a(0,-1,0)}static front(){return new a(0,-1,1)}static back(){return new a(0,-1,-1)}}e.OFVector3=a},8489:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFFramework=void 0;const r=i(7149),a=i(764),s=i(9486),n=i(19),o=i(3587),h=i(7591),c=i(5995),u=i(2724),l=i(5694),d=i(4734),_=i(5431),m=i(1182),p=i(2256),f=i(4500);class g{get appWidth(){return this._appWidth}get appHeight(){return this._appHeight}get settings(){return this._settings}get hasCanvas(){return!!this._parentDivNode}get mousePositionOffset(){return this._mousePositionOffset}get getDocument(){return document}get parentDiv(){return this._parentDivNode}get canvasElement(){return this._mainCanvasObject.canvasElement}get mainGraphicDevice(){return this._mainGraphicDevice}get audioDevice(){return this._audioDevice}get graphicDeviceManager(){return this._graphicDeviceManager}get canvasContextManager(){return this._canvasContextManager}get contentManager(){return this._contentManager}get sceneManager(){return this._sceneManager}get params(){return this._params}constructor(t,e=null,i=null){this.frameworkIdentifier=t,this._params=e,this._settings=i||r.OFSettings.create(),this._deltaTimeCorrector=new a.OFDeltaTimeCorrector,f.STUtils.staticDebugConsole=n.OFConsole,n.OFConsole.log(s.OFTranslations.Framework.initialized,this.frameworkIdentifier.toString())}startOctopusFramework2D(t,e,i){if(this._canvasContextManager=new c.OFCanvasContextManager(this),this._parentDivNode=document.getElementById(t),this.hasCanvas){this._parentDivNode.className="canvasContainer",this._mousePositionOffset=d.OFHTMLHelpers.getPositionOffset(this._parentDivNode.parentNode),this._appWidth=e||this._settings.canvasWidth,this._appHeight=i||this._settings.canvasHeight;const t=this.settings.identifier_RenderCanvas+this.frameworkIdentifier;this._mainCanvasObject=this._canvasContextManager.createCanvasElement(t,"absolute"),this._deviceCapabilities=_.OFDeviceCapabilities.create(this,this._settings.forceUseCanvasContextInsteadOfWebGL),this._mainCanvasObject.context=this._deviceCapabilities.graphiContext,this._mainCanvasObject.canvasElement.style.backgroundColor=m.OFColor.convertToStringFromNormalized(this.settings.canvasBackgroundColor),this._mainCanvasObject.canvasElement.style.borderWidth=this.settings.canvasBorderWidth,this._mainCanvasObject.canvasElement.style.borderColor=m.OFColor.convertToStringFromNormalized(this.settings.canvasBorderColor),this._graphicDeviceManager=new h.OFGraphicDeviceManager(this),this._audioDevice=new o.OFAudioDevice(this),this._contentManager=new u.OFContentManager(this),this._graphicDeviceManager.initialize(),this._audioDevice.initialize(),this._contentManager.initialize(),this._mainGraphicDevice=this._graphicDeviceManager.createGraphicDevice("main",this._mainCanvasObject),this._settings.loadDefault&&(this._graphicDeviceManager.loadDefault(),this._contentManager.loadDefault()),this._settings.disableInputDetection&&this.doInputDetections(),this.initializeApplication()}else n.OFConsole.error(s.OFTranslations.Framework.canvasNotFound,this.frameworkIdentifier.toString(),t)}doInputDetections(){$(document.body).on("mousedown",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);r&&r.onMouseDown(t.originalEvent)})),$(document.body).on("mouseup",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);r&&r.onMouseUp(t.originalEvent)})),$(document.body).on("mousemove",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1)),r=l.OFFrameworkFactory.getById(i);if(r){const e=d.OFHTMLHelpers.getMousePosition(r,t);r.onMouseMove(e.x,e.y)}})),$(document.body).on("keydown",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1));l.OFFrameworkFactory.getById(i).onKeyDown(t.originalEvent)})),$(document.body).on("keyup",(t=>{const e=this.parentDiv.firstChild.id,i=parseInt(e.charAt(e.length-1));l.OFFrameworkFactory.getById(i).onKeyUp(t.originalEvent)}))}initializeApplication(){this._sceneManager=new p.OFSceneManager(this),n.OFConsole.log(s.OFTranslations.Framework.ready,this.frameworkIdentifier.toString())}onKeyDown(t){this._sceneManager.onKeyDown(t)}onKeyUp(t){this._sceneManager.onKeyUp(t)}onMouseDown(t){this._sceneManager.onMouseDown(t)}onMouseUp(t){this._sceneManager.onMouseUp(t)}onMouseMove(t,e){this._sceneManager.onMouseMove(t,e)}resize(t,e){const i=this._appWidth,r=this._appHeight;this._appWidth=t,this._appHeight=e,this._mousePositionOffset=d.OFHTMLHelpers.getPositionOffset(this._parentDivNode.parentNode),this._graphicDeviceManager.resize(t,e,i,r)}update(t){if(this.hasCanvas){l.OFFrameworkFactory.setCurrentFramework(this.frameworkIdentifier);const e={dt:this._deltaTimeCorrector.recomputeDeltaTime(t.dt),framework:this};this._graphicDeviceManager.update(e),this._sceneManager.update(e)}}destroy(){}static create(t,e=null,i=null){return new g(t,e,i)}}e.OFFramework=g},5694:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFFrameworkFactory=void 0;const r=i(8489),a=i(19),s=i(9486);class n{static get currentFramewok(){return n._frameworks[n._currentFramework]}static create(t=null,e=null){const i=r.OFFramework.create(n._uniqueIdentifier++,t,e);return this._frameworks.push(i),n._currentFramework=i.frameworkIdentifier,i}static popFramework(t){-1==n._popedFramework&&(n._popedFramework=n._currentFramework,n._currentFramework=t.frameworkIdentifier)}static pushFramework(){-1==n._popedFramework&&(n._popedFramework=-1,n._currentFramework=n._popedFramework)}static setCurrentFramework(t){t>n._uniqueIdentifier||t<0?a.OFConsole.warn(s.OFTranslations.Framework.FrameworkFactory.outOfBounds,t.toString()):n._currentFramework=t}static getById(t){return n._frameworks.find((e=>e.frameworkIdentifier===t))}}e.OFFrameworkFactory=n,n._uniqueIdentifier=0,n._currentFramework=0,n._popedFramework=-1,n._frameworks=[]},1482:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFBaseScene=void 0,e.OFBaseScene=class{initialize(t,e){this.framework=t.framework,this.contentManager=this.framework.contentManager}onMouseMove(t,e){}onMouseDown(t){}onMouseUp(t){}onKeyDown(t){}onKeyUp(t){}}},2256:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSceneManager=void 0;const r=i(19),a=i(9486),s=i(4500);e.OFSceneManager=class{get currentScene(){return this._currentScene}constructor(t){this.framework=t}gotoScene(t,e){this._currentScene&&this._currentScene.destroy();const i=s.STUtils.instanceByClassName(t);i?(this._currentScene=i,this._currentScene.initialize(this,e),r.OFConsole.log(a.OFTranslations.Framework.SceneManager.gotoScene,this.framework.frameworkIdentifier.toString(),t)):r.OFConsole.log(a.OFTranslations.Framework.SceneManager.sceneDontExists,this.framework.frameworkIdentifier.toString(),t)}gotoSceneBy(t,e){this._currentScene&&this._currentScene.destroy();const i=s.STUtils.instanceByType(t);i?(this._currentScene=i,this._currentScene.initialize(this,e),r.OFConsole.log(a.OFTranslations.Framework.SceneManager.gotoScene,this.framework.frameworkIdentifier.toString(),"")):r.OFConsole.log(a.OFTranslations.Framework.SceneManager.sceneDontExists,this.framework.frameworkIdentifier.toString(),"")}onMouseMove(t,e){this._currentScene&&this._currentScene.onMouseMove(t,e)}onMouseDown(t){this._currentScene&&this._currentScene.onMouseDown(t)}onMouseUp(t){this._currentScene&&this._currentScene.onMouseUp(t)}onKeyDown(t){this._currentScene&&this._currentScene.onKeyDown(t)}onKeyUp(t){this._currentScene&&this._currentScene.onKeyUp(t)}update(t){this._currentScene&&this._currentScene.update(t)}}},7149:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OFSettings=void 0;const r=i(1182),a=i(5516),s=i(9486);class n{constructor(){this.targetFramerate=60,this.animationFramerate=60,this.loadDefault=!0,this.disableInputDetection=!0,this.forceUseCanvasContextInsteadOfWebGL=!1,this.canvasContextType=a.OFEnumCanvasContextType.D2D,this.canvasWidth=1024,this.canvasHeight=768,this.canvasBackgroundColor=r.OFColor.black(),this.canvasBorderWidth="0px",this.canvasBorderColor=r.OFColor.black(),this.debugConsoleTextColor=r.OFColor.green(),this.debugConsoleTextWeight="bold",this.debugConsoleTextSize=8,this.debugConsoleTextOffsetX=-90,this.debugConsoleTextOffsetY=3,this.renderClearColor=r.OFColor.black(),this.identifier_RenderCanvas="renderCanvas",this.identifier_RenderTextCanvas="renderTextCanvas",this.message_CanvasHTML5Warning=s.OFTranslations.Framework.Canvas.html5Warning,this.enabledVBOInstancesLife=!0}static create(){return new n}}e.OFSettings=n},9486:(t,e)=>{var i,r,a,s,n,o,h,c,u,l,d,_,m,p;Object.defineProperty(e,"__esModule",{value:!0}),e.OFTranslations=void 0;class f{}e.OFTranslations=f,f.Framework=((i=class{}).initialized="OF(id:{0})> Initializing Octopus framework.",i.ready="OF(id:{0})> Octopus framework Ready.",i.canvasNotFound="OF(id:{0})::constructor> Canvas element not found in: {1}, framework not initialized.",i.FrameworkFactory=((r=class{}).outOfBounds="FrameworkFactory::setCurrentFramework index: {0} out of bounds.",r),i.GraphicsOptimization=((a=class{}).PolygonBatcher=((s=class{}).changeShader="OFPolygonBatcher::changeShader> New shader: {0} applied.",s.setShader="OFPolygonBatcher::setShader> New shader: {0} applied.",s),a),i.AudioDevice=((n=class{}).initialize="OF(id:{0}):OFAudioDevice::Initialize> Initialized.",n.notSupported="OF(id:{0}):OFAudioDevice::Initialize> Web Audio API is not supported in this browser.",n),i.ContentManagement=((o=class{}).changePropertiesInContentNotFound="OF(id:{0})::ContentManagement::changePropertiesImageContent> Content not found in: {1}",o.loadMaterial="OF(id:{0}):ContentManager::loadMaterial> {1}",o.loadImage="OF(id:{0}):ContentManager::loadImage> {1}",o.loadMaterialFromJSON="OF(id:{0}):ContentManager::loadMaterialFromJSON> {1}",o.loadSoundFromArrayABuffer="OF(id:{0}):ContentManager::asyncLoadSoundFromArrayBuffer> {1}",o.loadImageFromHTMLImage="OF(id:{0}):ContentManager::loadImageFromHTMLImage> {1}",o.notImplementedException="OF(id:{0}):ContentManager> Not implemented exception: {1}",o.MaterialContent=((h=class{}).notImplementedException="OF(id:{0}):MaterialContent> Not implemented exception",h),o.SoundContent=((c=class{}).internal_OnErrorDecodeAudioData="OF(id:{0}):SoundContent::internal_OnErrorDecodeAudioData> {1}",c),o),i.SceneManager=((u=class{}).gotoScene="OF(id:{0}):OFSceneManager::gotoScene> Created Scene: {1} and Initialized.",u.sceneDontExists="OF(id:{0}):OFSceneManager::gotoScene> The: {1} doesn't exists.",u),i.Canvas=((l=class{}).html5Warning="Your browser don't support HTML5 Canvas Element.",l),i.GLHelper=((d=class{}).compileShader="GL::CompileShader> An error occurred compiling the shaders: {0}",d.createProgram="GL::CreateProgram> Unable to initialize the shader program:  {0}",d),i.CanvasContextManager=((_=class{}).issueRenderingContext="Can't start the WebGL Rendering Context: {0}",_),i.GraphicDeviceManager=((m=class{}).createGraphicDevice="OF(id:{0}):GraphicDeviceManager::createGraphicDevice> The graphic device: '{1}' was created.",m),i.ShaderFactory=((p=class{}).addShader="OF(id:{0}):ShaderFactory::addShader> Loaded shader: {1}",p.loadAndAddShaderWithCodeInfo="OF(id:{0}):ShaderFactory::LoadAndAddShaderWithCodeInfo> Loaded shader: {1}",p),i)},3460:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecMain=void 0;const r=i(726),a=i(2913),s=i(9513);e.SpecMain=class{constructor(t){switch(t){case r.EnumSpectType.SimpleFramework:this._currentSpec=new a.SpecTestFramework;break;case r.EnumSpectType.SpaceGame:this._currentSpec=new s.SpecSpaceGame}}update(t){this._currentSpec.update(t)}}},726:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumSpectType=void 0,(i=e.EnumSpectType||(e.EnumSpectType={}))[i.SimpleFramework=0]="SimpleFramework",i[i.SpaceGame=1]="SpaceGame"},9513:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecSpaceGame=void 0;const r=i(5694),a=i(7751);e.SpecSpaceGame=class{constructor(){this._framework=r.OFFrameworkFactory.create(),this._framework.startOctopusFramework2D("canvas-scene"),this._framework.sceneManager.gotoSceneBy(a.SpaceGameScene)}update(t){this._framework.update({dt:t})}}},3429:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyHomingMissile=void 0;const r=i(5635),a=i(3161);class s extends r.GBaseBullet{get animation(){return this._animation}constructor(t,e,i,r,s,n){super(t,e,n),this._player=s,this._animation=new a.OFAnimation(t,e,4,2),this._animation.imageContent=a.OFFrameworkFactory.currentFramewok.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._animation.setAdvanceAnimationTileConfig(1024,190,80,15);const o=this._animation.width*this._animation.scaleX,h=this._animation.height*this._animation.scaleY;this._animation.createCollision(0,0,o,h,-o/2,-h/2),this._homingInterpolator=new a.OFHoming2(t,e,i,r)}update(t){if(this._homingInterpolator.update(t.dt),this._animation.x=this._homingInterpolator.x,this._animation.y=this._homingInterpolator.y,this._animation.rotation=this._homingInterpolator.rotation,this._animation.update(t),this._homingInterpolator.setTarget(this._player.x,this._player.y),this._player&&this._player.hitTest(this._animation)){const t=this._bulletFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this._animation.x,this._animation.y,4,4);t.animation.setAdvanceAnimationTileConfig(1024,0,190,190),t.animation.scaleX=.35,t.animation.scaleY=.35,this._isWaitingForDelete=!0,this._player.onHit(1)}}destroy(){this._homingInterpolator.destroy(),this._animation.destroy()}}e.GEnemyHomingMissile=s},9353:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumEnemyType=void 0,(i=e.EnumEnemyType||(e.EnumEnemyType={}))[i.Dummy=1]="Dummy"},7144:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumProyectileType=void 0,(i=e.EnumProyectileType||(e.EnumProyectileType={}))[i.Player=1]="Player",i[i.Enemy=2]="Enemy",i[i.MissileEnemy=3]="MissileEnemy",i[i.MissilePlayer=4]="MissilePlayer"},5635:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GBaseBullet=void 0;const r=i(3161);e.GBaseBullet=class{get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t,e,i){this._bulletFactory=i,this._x=t,this._y=e,this._isWaitingForDelete=!1,this._framework=r.OFFrameworkFactory.currentFramewok,this._enemyFactory=this._bulletFactory.game.enemyFactory}}},5698:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GBulletFactory=void 0;const r=i(7144),a=i(6255),s=i(3429);e.GBulletFactory=class{constructor(t){this.game=t,this._bullets=[]}createBullet(t,e,i,s,n){let o=null;return t===r.EnumProyectileType.Player&&(o=new a.GPlayerBullet(e,i,s,n,this),o.sprite.setSpriteBatch(this._spriteBatch)),o&&this._bullets.push(o),o}createMissile(t,e,i,a,n){let o=null;return t===r.EnumProyectileType.MissileEnemy&&(o=new s.GEnemyHomingMissile(e,i,a,n,this.game.player,this),o.animation.setSpriteBatch(this._spriteBatch)),o&&this._bullets.push(o),o}setSpriteBatch(t){this._spriteBatch=t}update(t){for(let e=0;e<this._bullets.length;e++){const i=this._bullets[e];i.isWaitingForDelete?(i.destroy(),this._bullets.splice(e,1),e--):i.update(t)}}}},4058:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GDummyEnemy=void 0;const r=i(4439),a=i(7144),s=i(1377),n=i(9298),o=i(3177),h=i(3152);class c extends r.GEnemyBase{constructor(t,e,i){super(i),this._direction=new n.OFVector2(-1,0),this._speed=100,this._health=3,this._sprite=new o.OFSprite(t,e),this._sprite.imageContent=this._framework.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._sprite.rotation=-Math.PI/2,this._sprite.scaleX=this._sprite.scaleY=1,this._sprite.setAdvanceAnimationTileConfig(1123,190,32,32);const r=this._sprite.width*this._sprite.scaleX,a=this._sprite.height*this._sprite.scaleY;this._sprite.createCollision(0,0,r,a,-r/2,-a/2),this._iCreationMissile=new s.OFInterval(.025,200),this._iCreationMissile.finishedLoopCallback=()=>this.onFinishedLoop_CreationMissile()}onFinishedLoop_CreationMissile(){if(h.OFMath.random(0,100)>70){const t=.7,e=200;this._enemyFactory.game.bulletFactory.createMissile(a.EnumProyectileType.MissileEnemy,this._sprite.x,this._sprite.y,t,e)}}onHit(t){if(this._health-=t,this._health<=0){this._isWaitingForDelete=!0;const t=this._enemyFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this._sprite.x,this._sprite.y,8,3);t.animation.setAdvanceAnimationTileConfig(0,0,1024,384),t.animation.scaleX=.5,t.animation.scaleY=.5}}update(t){this._iCreationMissile&&this._iCreationMissile.update(t),this._sprite.x+=this._direction.x*this._speed*t.dt,this._sprite.y+=this._direction.y*this._speed*t.dt,this._sprite.update(t),this._sprite.x<-this._sprite.width&&(this._isWaitingForDelete=!0)}destroy(){this._direction=null,super.destroy()}}e.GDummyEnemy=c},4439:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyBase=void 0;const r=i(3161);e.GEnemyBase=class{get sprite(){return this._sprite}get isWaitingForDelete(){return this._isWaitingForDelete}constructor(t){this._enemyFactory=t,this._isWaitingForDelete=!1,this._framework=r.OFFrameworkFactory.currentFramewok}destroy(){this._sprite.destroy(),this._sprite=null}}},7734:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GEnemyFactory=void 0;const r=i(9353),a=i(4058),s=i(3161);e.GEnemyFactory=class{get enemies(){return this._enemies}constructor(t){this.game=t,this._enemies=[],this._framework=s.OFFrameworkFactory.currentFramewok,this._icreationEnemy=new s.OFInterval(.001,1e8),this._icreationEnemy.finishedLoopCallback=()=>{this.onFinishedLoop_CreationEnemy()}}onFinishedLoop_CreationEnemy(){const t=this._framework.appWidth+40,e=s.OFMath.random(0,this._framework.appHeight);this.createEnemy(r.EnumEnemyType.Dummy,t,e)}setSpriteBatch(t){this._spriteBatcher=t}createEnemy(t,e,i){let s=null;t===r.EnumEnemyType.Dummy&&(s=new a.GDummyEnemy(e,i,this),s.sprite.setSpriteBatch(this._spriteBatcher)),s&&this._enemies.push(s)}update(t){this._icreationEnemy&&this._icreationEnemy.update(t);for(let e=0;e<this._enemies.length;e++){const i=this._enemies[e];i&&(i.isWaitingForDelete?(i.destroy(),this._enemies.splice(e,1),e--):i.update(t))}}}},6205:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GPlayer=void 0;const r=i(7144),a=i(3161);e.GPlayer=class{get x(){return this._sprite.x}get y(){return this._sprite.y}get sprite(){return this._sprite}constructor(t){this._game=t;const e=a.OFFrameworkFactory.currentFramewok.contentManager.getContent("resources/spSpriteSheetGameElements.png");this._sprite=new a.OFSprite,this._sprite.imageContent=e,this._sprite.rotation=-Math.PI/2,this._sprite.scaleX=this._sprite.scaleY=.3,this._sprite.setAdvanceAnimationTileConfig(1024,205,75,128);const i=this._sprite.width*this._sprite.scaleX-8,r=this._sprite.height*this._sprite.scaleY-14;this._sprite.createCollision(0,0,r,i,-r/2,-i/2)}hitTest(t){return this._sprite.hitTest(t)}onHit(t){}onMouseMove(t,e){this._sprite.x=t,this._sprite.y=e}onKeyDown(t){if(t===a.OFEnumKeyCode.Space){const t=300,e=10,i=.25*Math.PI,s=.5*i,n=i/e;for(let i=0;i<e;i++){const o=-e/2+i,h=new a.OFVector2(1,0),c=n*i-s;h.x=Math.cos(c),h.y=Math.sin(c),this._game.bulletFactory.createBullet(r.EnumProyectileType.Player,this._sprite.x,this._sprite.y+2*o,h,t).sprite.rotation=c}}}update(t){this._sprite.update(t)}}},6255:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GPlayerBullet=void 0;const r=i(5635),a=i(3161);class s extends r.GBaseBullet{get sprite(){return this._sprite}constructor(t,e,i,r,s){super(t,e,s),this._direction=i,this._speed=r,this._sprite=new a.OFSprite(t,e),this._sprite.imageContent=this._framework.contentManager.getContent("resources/spSpriteSheetGameElements.png"),this._sprite.setAdvanceAnimationTileConfig(1104,190,19,4);const n=this._sprite.width*this._sprite.scaleX,o=this._sprite.height*this._sprite.scaleY;this._sprite.createCollision(0,0,n,o,-n/2,-o/2)}update(t){this._sprite.x+=this._direction.x*this._speed*t.dt,this._sprite.y+=this._direction.y*this._speed*t.dt,this._sprite.update(t),this._sprite.x+this._sprite.width>this._framework.appWidth&&(this._isWaitingForDelete=!0);for(let t=0;t<this._enemyFactory.enemies.length;t++){const e=this._enemyFactory.enemies[t];if(e&&this._sprite.hitTest(e.sprite)){const t=this._bulletFactory.game.effectManager.createEffect("resources/spSpriteSheetGameElements.png",this.sprite.x,this.sprite.y,4,4);t.animation.setAdvanceAnimationTileConfig(1024,0,190,190),t.animation.scaleX=.35,t.animation.scaleY=.35,this._isWaitingForDelete=!0,e.onHit(1);break}}}destroy(){this._sprite.destroy(),this._sprite=null,this._direction=null}}e.GPlayerBullet=s},7132:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GraviusGame=void 0;const r=i(5698),a=i(6205),s=i(7734),n=i(4840),o=i(1055);e.GraviusGame=class{get player(){return this._player}get enemyFactory(){return this._enemyFactory}get bulletFactory(){return this._bulletFactory}get effectManager(){return this._effectManager}get spriteBatch(){return this._spriteBatch}constructor(){this._spriteBatch=new n.OFSpriteBatcher("resources/spSpriteSheetGameElements.png"),this._player=new a.GPlayer(this),this._enemyFactory=new s.GEnemyFactory(this),this._bulletFactory=new r.GBulletFactory(this),this._effectManager=new o.OFEffect2DManager,this._player.sprite.setSpriteBatch(this._spriteBatch),this._effectManager.setSpriteBatch(this._spriteBatch),this._enemyFactory.setSpriteBatch(this._spriteBatch),this._bulletFactory.setSpriteBatch(this._spriteBatch)}onMouseMove(t,e){this._player.onMouseMove(t,e)}onKeyDown(t){this._player.onKeyDown(t)}update(t){this._spriteBatch.beginDraw(),this._player.update(t),this._enemyFactory.update(t),this._bulletFactory.update(t),this._effectManager.update(t),this._spriteBatch.endDraw(),this._spriteBatch.update(t)}}},7751:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpaceGameScene=void 0;const r=i(7132),a=i(5610),s=i(5820),n=i(1482),o=i(2027),h=i(1182),c=i(887);class u extends n.OFBaseScene{constructor(){super()}initialize(t,e){super.initialize(t,e),this.framework.contentManager.loadImage("resources/spSpriteSheetGameElements.png"),this._imageContentFont=this.framework.contentManager.loadImage("resources/fnt-arial_0.png"),this.framework.mainGraphicDevice.shaderFactory.loadAndAddShaderWithCodeInfo("SpineShaderTexture",o.OFDefaultShaderSources.SourcesSpineShaderTexture,null,"SpineShaderTexture"),$("#input").on("change",(t=>{const e=t.target.files[0],i=new FileReader;i.readAsText(e),i.onload=t=>this._fontCharset=a.OFBitmapFontLoader.parse(t.target.result)})),this._graviusGame=new r.GraviusGame}onMouseMove(t,e){this._graviusGame&&this._graviusGame.onMouseMove(t,e)}onKeyDown(t){this._graviusGame&&this._graviusGame.onKeyDown(t.keyCode)}update(t){var e,i,r,a;this._graviusGame&&this._graviusGame.update(t),this._fontCharset&&(null===(e=this._imageContentFont)||void 0===e?void 0:e.isLoaded)&&!this._textfield&&(this._textfield=new s.OFCBitmapTextfield2D,this._textfield.initialize("",this._fontCharset,this._imageContentFont),this._textfield.color=h.OFColor.white());const n=c.mat4.create();c.mat4.fromScaling(n,c.vec3.fromValues(.25,.25,.25));const o=1/t.dt;null===(i=this._textfield)||void 0===i||i.setText(`FPS: ${o.toString().substring(0,5)}, # of Quads: ${this._graviusGame.spriteBatch.totalQuads}, # of Draw Calls: ${this._graviusGame.spriteBatch.totalDrawCalls}`),null===(r=this._textfield)||void 0===r||r.setLetterColor(1,h.OFColor.red()),null===(a=this._textfield)||void 0===a||a.draw(t,n)}destroy(){}}e.SpaceGameScene=u},2913:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SpecTestFramework=void 0;const r=i(3161);e.SpecTestFramework=class{constructor(){this._countTime=0,this._framework=r.OFFrameworkFactory.create(),this._framework.startOctopusFramework2D("canvas-scene");const t=this._framework.contentManager.loadImage("resources/spSpriteSheetGameElements.png");this._sprite=new r.OFSprite(0,0),this._sprite.imageContent=t,this._sprite.setAdvanceAnimationTileConfig(1024,205,75,128),this._explosionAnimation=new r.OFAnimation(320,200,4,4),this._explosionAnimation.imageContent=t,this._explosionAnimation.setAdvanceAnimationTileConfig(1024,0,190,190),this._explosionAnimation.scaleX=.5,this._explosionAnimation.scaleY=.5,this._explosion2Animation=new r.OFAnimation(500,200,8,3),this._explosion2Animation.imageContent=t,this._explosion2Animation.setAdvanceAnimationTileConfig(0,0,1024,384),this._quad=new r.OFPrimitiveQuad(300,20,40,40,r.OFColor.red()),this._quad2=new r.OFPrimitiveQuad(300,200,40,40,r.OFColor.green()),this._circle=new r.OFPrimitiveCircle(300,200,160,r.OFColor.blue()),this._quad.setWireframeVisibility(!0),this._grid=new r.OFPrimitiveGrid(40,40,r.OFColor.white()),this._grid.changeGrid(14,8,32,32)}update(t){this._countTime+=t,this._framework.update({dt:t});const e=Math.cos(this._countTime);this._grid&&this._grid.update({dt:t}),this._sprite&&(this._sprite.x=250*e,this._sprite.y=250*e,this._sprite.rotation+=.1,this._sprite.alpha=Math.abs(e),this._sprite.update({dt:t})),this._quad&&(this._quad.rotation+=1,this._quad.x=200+200*e,this._quad.update({dt:t})),this._circle&&this._circle.update({dt:t}),this._quad2&&(this._quad2.scaleX=e,this._quad2.scaleY=e,this._quad2.y=200+100*e,this._quad2.update({dt:t})),this._explosionAnimation&&this._explosionAnimation.update({dt:t}),this._explosion2Animation&&this._explosion2Animation.update({dt:t})}}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var i=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(i.exports,i,i.exports,__webpack_require__),i.exports}__webpack_require__.d=(t,e)=>{for(var i in e)__webpack_require__.o(e,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{const t=__webpack_require__(3460),e=__webpack_require__(726),i=__webpack_require__(3139);!function(){const r=new t.SpecMain(e.EnumSpectType.SimpleFramework);i.OFRenderLoop.create((t=>r.update(t)),30)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxFQUFFLEdBQ2xCSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxHQUFLTixFQUFFLEdBQUtFLEVBQUUsR0FDbEJJLEVBQUksR0FBS04sRUFBRSxHQUFLRSxFQUFFLEdBQ2xCSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxHQUFLTixFQUFFLEdBQUtFLEVBQUUsR0FDbEJJLEVBQUksSUFBTU4sRUFBRSxJQUFNRSxFQUFFLElBQ3BCSSxFQUFJLElBQU1OLEVBQUUsSUFBTUUsRUFBRSxJQUNwQkksRUFBSSxJQUFNTixFQUFFLElBQU1FLEVBQUUsSUFDcEJJLEVBQUksSUFBTU4sRUFBRSxJQUFNRSxFQUFFLElBQ3BCSSxFQUFJLElBQU1OLEVBQUUsSUFBTUUsRUFBRSxJQUNwQkksRUFBSSxJQUFNTixFQUFFLElBQU1FLEVBQUUsSUFDYkksQ0FDVCxDQVVPLFNBQVMsR0FBU0EsRUFBS04sRUFBR0UsR0FpQi9CLE9BaEJBSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxHQUFLTixFQUFFLEdBQUtFLEVBQUUsR0FDbEJJLEVBQUksR0FBS04sRUFBRSxHQUFLRSxFQUFFLEdBQ2xCSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxHQUFLTixFQUFFLEdBQUtFLEVBQUUsR0FDbEJJLEVBQUksR0FBS04sRUFBRSxHQUFLRSxFQUFFLEdBQ2xCSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxHQUFLTixFQUFFLEdBQUtFLEVBQUUsR0FDbEJJLEVBQUksR0FBS04sRUFBRSxHQUFLRSxFQUFFLEdBQ2xCSSxFQUFJLEdBQUtOLEVBQUUsR0FBS0UsRUFBRSxHQUNsQkksRUFBSSxJQUFNTixFQUFFLElBQU1FLEVBQUUsSUFDcEJJLEVBQUksSUFBTU4sRUFBRSxJQUFNRSxFQUFFLElBQ3BCSSxFQUFJLElBQU1OLEVBQUUsSUFBTUUsRUFBRSxJQUNwQkksRUFBSSxJQUFNTixFQUFFLElBQU1FLEVB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RSxHQUFZLENBR2pEMzZDLFFBQVMsQ0FBQyxHQU9YLE9BSEE4NkMsb0JBQW9CSCxHQUFVeDZDLEtBQUswNkMsRUFBTzc2QyxRQUFTNjZDLEVBQVFBLEVBQU83NkMsUUFBUzA2QyxxQkFHcEVHLEVBQU83NkMsT0FDZixDQ3JCQTA2QyxvQkFBb0I1eUQsRUFBSSxDQUFDa1ksRUFBUys2QyxLQUNqQyxJQUFJLElBQUk5M0MsS0FBTzgzQyxFQUNYTCxvQkFBb0JwcUQsRUFBRXlxRCxFQUFZOTNDLEtBQVN5M0Msb0JBQW9CcHFELEVBQUUwUCxFQUFTaUQsSUFDNUU3RCxPQUFPVSxlQUFlRSxFQUFTaUQsRUFBSyxDQUFFckQsWUFBWSxFQUFNQyxJQUFLazdDLEVBQVc5M0MsSUFFMUUsRUNORHkzQyxvQkFBb0JwcUQsRUFBSSxDQUFDd1UsRUFBS29pQixJQUFVOW5CLE9BQU9hLFVBQVVDLGVBQWVDLEtBQUsyRSxFQUFLb2lCLEdDQ2xGd3pCLG9CQUFvQnJrRCxFQUFLMkosSUFDSCxvQkFBWGc3QyxRQUEwQkEsT0FBT0MsYUFDMUM3N0MsT0FBT1UsZUFBZUUsRUFBU2c3QyxPQUFPQyxZQUFhLENBQUU3NkMsTUFBTyxXQUU3RGhCLE9BQU9VLGVBQWVFLEVBQVMsYUFBYyxDQUFFSSxPQUFPLEdBQU8sRSxpQ0NMOUQsa0NBQ0EsMkJBQ0EsNkJBRUEsV0FDRSxNQUFNc3pDLEVBQVcsSUFBSSxFQUFBd0gsU0FBUyxFQUFBOUYsY0FBY0MsaUJBRzVDLEVBQUF2bkMsYUFBYXhwQixRQUFRbXFCLEdBQWNpbEMsRUFBU2pwQixPQUFPaGMsSUFGakMsR0FHbkIsQ0FMRCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0Mi5qcyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0MmQuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDMuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDQuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzMuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzQuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3F1YXQuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3F1YXQyLmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS92ZWMyLmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9ub2RlX21vZHVsZXMvc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9ub2RlX21vZHVsZXMvc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMvbGliL3NyYy9leHRlcm5hbC1saWJzL2Jhc2U2NC1iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9zaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlscy9saWIvc3JjL3NodXRlLXRlY2hub2xvZ2llcy9lbnVtcy9zdEVudW1IdHRwRXJyb3JDb2RlLmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9ub2RlX21vZHVsZXMvc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMvbGliL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvaGVscGVycy9zdEhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9zaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlscy9saWIvc3JjL3NodXRlLXRlY2hub2xvZ2llcy9pbnRlcmZhY2VzL3N0RGVidWdDb25zb2xlLmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9ub2RlX21vZHVsZXMvc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMvbGliL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvaW50ZXJmYWNlcy9zdEludGVyZmFjZXMuanMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL25vZGVfbW9kdWxlcy9zaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlscy9saWIvc3JjL3NodXRlLXRlY2hub2xvZ2llcy91dGlscy9zdFV0aWxzLmpzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvY29tbW9uL29mUmVuZGVyTG9vcC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2Nyb3NzLWN1dHRpbmcvZm9udC1sb2FkZXIvZGF0YS9vZkJpdG1hcEZvbnRDaGFyRGVzY3JpcHRvci50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2Nyb3NzLWN1dHRpbmcvZm9udC1sb2FkZXIvZGF0YS9vZkJpdG1hcEZvbnRDaGFyc2V0LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvY3Jvc3MtY3V0dGluZy9mb250LWxvYWRlci9kYXRhL29mQml0bWFwRm9udEtlcm5pbmcudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9jcm9zcy1jdXR0aW5nL2ZvbnQtbG9hZGVyL2RhdGEvb2ZCaXRtYXBGb250UGFnZS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2Nyb3NzLWN1dHRpbmcvZm9udC1sb2FkZXIvb2ZCaXRtYXBGb250TG9hZGVyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvY3Jvc3MtY3V0dGluZy9zaGFkZXItYW5hbGl6ZXIvb2ZFbnVtU2hhZGVyRGF0YVR5cGVzLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvY3Jvc3MtY3V0dGluZy9zaGFkZXItYW5hbGl6ZXIvb2ZFbnVtU2hhZGVyTGl0ZXJhbHMudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9jcm9zcy1jdXR0aW5nL3NoYWRlci1hbmFsaXplci9vZlNoYWRlckFuYWxpemVyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvbW1vbi9vZkRlbHRhVGltZUNvcnJlY3Rvci50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb21wb25lbnRzL29mQ0JpdG1hcFRleHRmaWVsZDJELnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvY29udGVudC9vZkJhc2VDb250ZW50LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvY29udGVudC9vZkNvbnRlbnRNYW5hZ2VyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvY29udGVudC9vZkltYWdlQ29udGVudC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL2NvbnRlbnQvb2ZNYXRlcmlhbENvbnRlbnQudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9jb250ZW50L29mU291bmRDb250ZW50LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvZGV2aWNlL29mQXVkaW9EZXZpY2UudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb2ZEZXZpY2VDYXBhYmlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvZGV2aWNlL29mR3JhcGhpY0RldmljZU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2F1ZGlvL29mQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvZGV2aWNlL29wdGltaXphdGlvbi9hdWRpby9vZkF1ZGlvTm9kZU9iamVjdC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL2RldmljZS9vcHRpbWl6YXRpb24vYXVkaW8vb2ZBdWRpb05vZGVQb29sZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2F1ZGlvL29mRW51bUF1ZGlvTm9kZVR5cGUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkRldmljZU9wdGltaXphdGlvbk1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkVudW1WQk9PYmplY3RUeXBlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvZGV2aWNlL29wdGltaXphdGlvbi9ncHUvb2ZWQk9PYmplY3QudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZlZCT1Bvb2xlci50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL29mQ2FudmFzQ29udGV4dE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvY2FtZXJhL29mUmVuZGVyQ2FtZXJhLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZkFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb2ZQcmltaXRpdmVDaXJjbGUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29mUHJpbWl0aXZlR3JpZC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb2ZQcmltaXRpdmVRdWFkLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZlNwcml0ZS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb3B0aW1pemF0aW9uL29mT3B0U3ByaXRlQmF0Y2hlci50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb3B0aW1pemF0aW9uL29mUG9seWdvbkJhdGNoZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29wdGltaXphdGlvbi9vZlNwcml0ZUJhdGNoZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvZ3JhcGhpY3MvZGF0YS9vZlF1YWQudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvZ3JhcGhpY3MvZGF0YS9vZlF1YWRUZXh0Q29vcmRzLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2RhdGEvb2ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9ncmFwaGljcy9vZkNvbG9yLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL29mRHJhd2FibGUyRC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL3JlbmRlci9zaGFkZXIvb2ZCYXNlU2hhZGVyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL3NoYWRlci9vZlNoYWRlckFic3RyYWN0LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL3NoYWRlci9vZlNoYWRlckZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL29mU2hhZGVyUHJpbWl0aXZlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL3NoYWRlci9vZlNoYWRlclRleHR1cmUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc01hdDIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc01hdDMudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc01hdDQudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc1ZlYzIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc1ZlYzMudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc1ZlYzQudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvdmlld3BvcnQvb2ZWaWV3cG9ydC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9kZWZhdWx0LWFzc2V0cy9vZkRlZmF1bHRTaGFkZXJTb3VyY2VzLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2VudW1zL29mRW51bUNhbnZhc0NvbnRleHRUeXBlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2VudW1zL29mRW51bUtleUNvZGUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvZW51bXMvb2ZFbnVtUmVuZGVyRW5naW5lLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2VudW1zL29mRW51bVRleHRBbGlnbi50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9oZWxwZXJzL29mQ29sbGlzaW9uSGVscGVyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2hlbHBlcnMvb2ZDb25zb2xlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2hlbHBlcnMvb2ZHTEhlbHBlci50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9oZWxwZXJzL29mSFRNTEhlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvaGVscGVycy9vZkludGVydmFsLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2hlbHBlcnMvcmVuZGVyL2VmZmVjdHMvb2ZFZmZlY3QyRC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9oZWxwZXJzL3JlbmRlci9lZmZlY3RzL29mRWZmZWN0MkRGYWN0b3J5LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL21vZHVsZXMvZnJhbWV3b3JrL2hlbHBlcnMvcmVuZGVyL2VmZmVjdHMvb2ZFZmZlY3QyRE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvbWF0aC9pbnRlcnBvbGF0b3JzL29mSG9taW5nMi50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9tYXRoL29mTWF0aC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9tYXRoL29mVmVjdG9yMi50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9tYXRoL29mVmVjdG9yMy50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9vZkZyYW1ld29yay50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9vZkZyYW1ld29ya0ZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvc2NlbmUvb2ZCYXNlU2NlbmUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvc2NlbmUvb2ZTY2VuZU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9mcmFtZXdvcmsvc2V0dGluZ3Mvb2ZTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9tb2R1bGVzL2ZyYW1ld29yay9zZXR0aW5ncy9vZlRyYW5zbGF0aW9ucy50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjTWFpbi50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy9lbnVtU3BlY1R5cGUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvc3BlY3MvdHlwZXMvc3BlY1NwYWNlR2FtZS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy90eXBlcy9zcGVjU3BhY2VHYW1lL2VFbmVteUhvbWluZ01pc3NpbGUudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvc3BlY3MvdHlwZXMvc3BlY1NwYWNlR2FtZS9lbnVtcy9lbnVtRW5lbXlUeXBlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWUvZW51bXMvZW51bVByb3llY3RpbGVUeXBlLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWUvZ0Jhc2VCdWxsZXQudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvc3BlY3MvdHlwZXMvc3BlY1NwYWNlR2FtZS9nQnVsbGV0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy90eXBlcy9zcGVjU3BhY2VHYW1lL2dEdW1teUVuZW15LnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWUvZ0VuZW15QmFzZS50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy90eXBlcy9zcGVjU3BhY2VHYW1lL2dFbmVteUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay8uL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvc3BlY3MvdHlwZXMvc3BlY1NwYWNlR2FtZS9nUGxheWVyLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWUvZ1BsYXllckJ1bGxldC50cyIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy90eXBlcy9zcGVjU3BhY2VHYW1lL2dyYXZpdXNHYW1lLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWUvc2NlbmVzL3NwYWNlR2FtZVNjZW5lLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNzL3R5cGVzL3NwZWNUZXN0RnJhbWV3b3JrLnRzIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2h1dGUtdGVjaG5vbG9naWVzLm9jdG9wdXMtd2ViLWZyYW1ld29yay93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NodXRlLXRlY2hub2xvZ2llcy5vY3RvcHVzLXdlYi1mcmFtZXdvcmsvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9zaHV0ZS10ZWNobm9sb2dpZXMub2N0b3B1cy13ZWItZnJhbWV3b3JrLy4vZW50cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1vbiB1dGlsaXRpZXNcclxuICogQG1vZHVsZSBnbE1hdHJpeFxyXG4gKi9cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuLyoqXHJcbiAqIFNldHMgdGhlIHR5cGUgb2YgYXJyYXkgdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheUNvbnN0cnVjdG9yIHwgQXJyYXlDb25zdHJ1Y3Rvcn0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1hdHJpeEFycmF5VHlwZSh0eXBlKSB7XG4gIEFSUkFZX1RZUEUgPSB0eXBlO1xufVxudmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XG4vKipcclxuICogQ29udmVydCBEZWdyZWUgVG8gUmFkaWFuXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIEFuZ2xlIGluIERlZ3JlZXNcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JhZGlhbihhKSB7XG4gIHJldHVybiBhICogZGVncmVlO1xufVxuLyoqXHJcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcclxuICogb3IgcmVsYXRpdmUgdG9sZXJhbmNlIG9mIGdsTWF0cml4LkVQU0lMT04gKGFuIGFic29sdXRlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciB2YWx1ZXMgbGVzc1xyXG4gKiB0aGFuIG9yIGVxdWFsIHRvIDEuMCwgYW5kIGEgcmVsYXRpdmUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIGxhcmdlciB2YWx1ZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIFRoZSBmaXJzdCBudW1iZXIgdG8gdGVzdC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCBudW1iZXIgdG8gdGVzdC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG59XG5pZiAoIU1hdGguaHlwb3QpIE1hdGguaHlwb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB5ID0gMCxcbiAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB5ICs9IGFyZ3VtZW50c1tpXSAqIGFyZ3VtZW50c1tpXTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLnNxcnQoeSk7XG59OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXHJcbiAqIDJ4MiBNYXRyaXhcclxuICogQG1vZHVsZSBtYXQyXHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQyXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICB9XG5cbiAgb3V0WzBdID0gMTtcbiAgb3V0WzNdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDIgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgYSBtYXQyIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQyIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXQgQSBuZXcgMngyIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0xMCwgbTExKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0xMDtcbiAgb3V0WzNdID0gbTExO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDIgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTEwLCBtMTEpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0xMDtcbiAgb3V0WzNdID0gbTExO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlXG4gIC8vIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICB2YXIgYTEgPSBhWzFdO1xuICAgIG91dFsxXSA9IGFbMl07XG4gICAgb3V0WzJdID0gYTE7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzJdO1xuICAgIG91dFsyXSA9IGFbMV07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBhMCAqIGEzIC0gYTIgKiBhMTtcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSBhMyAqIGRldDtcbiAgb3V0WzFdID0gLWExICogZGV0O1xuICBvdXRbMl0gPSAtYTIgKiBkZXQ7XG4gIG91dFszXSA9IGEwICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgLy8gQ2FjaGluZyB0aGlzIHZhbHVlIGlzIG5lc3NlY2FyeSBpZiBvdXQgPT0gYVxuICB2YXIgYTAgPSBhWzBdO1xuICBvdXRbMF0gPSBhWzNdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IGEwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICByZXR1cm4gYVswXSAqIGFbM10gLSBhWzJdICogYVsxXTtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQyJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgb3V0WzBdID0gYTAgKiBiMCArIGEyICogYjE7XG4gIG91dFsxXSA9IGExICogYjAgKyBhMyAqIGIxO1xuICBvdXRbMl0gPSBhMCAqIGIyICsgYTIgKiBiMztcbiAgb3V0WzNdID0gYTEgKiBiMiArIGEzICogYjM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdDIgYnkgdGhlIGdpdmVuIGFuZ2xlXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogYyArIGEyICogcztcbiAgb3V0WzFdID0gYTEgKiBjICsgYTMgKiBzO1xuICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xuICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNjYWxlcyB0aGUgbWF0MiBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciB2MCA9IHZbMF0sXG4gICAgICB2MSA9IHZbMV07XG4gIG91dFswXSA9IGEwICogdjA7XG4gIG91dFsxXSA9IGExICogdjA7XG4gIG91dFsyXSA9IGEyICogdjE7XG4gIG91dFszXSA9IGEzICogdjE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0Mi5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgbWF0MiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBjO1xuICBvdXRbMV0gPSBzO1xuICBvdXRbMl0gPSAtcztcbiAgb3V0WzNdID0gYztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQyLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSB2WzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJtYXQyKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQyXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pO1xufVxuLyoqXHJcbiAqIFJldHVybnMgTCwgRCBhbmQgVSBtYXRyaWNlcyAoTG93ZXIgdHJpYW5ndWxhciwgRGlhZ29uYWwgYW5kIFVwcGVyIHRyaWFuZ3VsYXIpIGJ5IGZhY3Rvcml6aW5nIHRoZSBpbnB1dCBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IEwgdGhlIGxvd2VyIHRyaWFuZ3VsYXIgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBEIHRoZSBkaWFnb25hbCBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IFUgdGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBpbnB1dCBtYXRyaXggdG8gZmFjdG9yaXplXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gTERVKEwsIEQsIFUsIGEpIHtcbiAgTFsyXSA9IGFbMl0gLyBhWzBdO1xuICBVWzBdID0gYVswXTtcbiAgVVsxXSA9IGFbMV07XG4gIFVbM10gPSBhWzNdIC0gTFsyXSAqIFVbMV07XG4gIHJldHVybiBbTCwgRCwgVV07XG59XG4vKipcclxuICogQWRkcyB0d28gbWF0MidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKTtcbn1cbi8qKlxyXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gbWF0MidzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXHJcbiAqIDJ4MyBNYXRyaXhcclxuICogQG1vZHVsZSBtYXQyZFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBtYXQyZCBjb250YWlucyBzaXggZWxlbWVudHMgZGVmaW5lZCBhczpcclxuICogPHByZT5cclxuICogW2EsIGIsXHJcbiAqICBjLCBkLFxyXG4gKiAgdHgsIHR5XVxyXG4gKiA8L3ByZT5cclxuICogVGhpcyBpcyBhIHNob3J0IGZvcm0gZm9yIHRoZSAzeDMgbWF0cml4OlxyXG4gKiA8cHJlPlxyXG4gKiBbYSwgYiwgMCxcclxuICogIGMsIGQsIDAsXHJcbiAqICB0eCwgdHksIDFdXHJcbiAqIDwvcHJlPlxyXG4gKiBUaGUgbGFzdCBjb2x1bW4gaXMgaWdub3JlZCBzbyB0aGUgYXJyYXkgaXMgc2hvcnRlciBhbmQgb3BlcmF0aW9ucyBhcmUgZmFzdGVyLlxyXG4gKi9cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MmRcclxuICpcclxuICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNik7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gMDtcbiAgfVxuXG4gIG91dFswXSA9IDE7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQyZCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gYSBuZXcgMngzIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQyZCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCBhIG1hdDJkIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlIGEgbmV3IG1hdDJkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgQ29tcG9uZW50IEIgKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR4IENvbXBvbmVudCBUWCAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcclxuICogQHJldHVybnMge21hdDJkfSBBIG5ldyBtYXQyZFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcbiAgb3V0WzBdID0gYTtcbiAgb3V0WzFdID0gYjtcbiAgb3V0WzJdID0gYztcbiAgb3V0WzNdID0gZDtcbiAgb3V0WzRdID0gdHg7XG4gIG91dFs1XSA9IHR5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDJkIHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIENvbXBvbmVudCBBIChpbmRleCAwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBDb21wb25lbnQgQiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGMgQ29tcG9uZW50IEMgKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBkIENvbXBvbmVudCBEIChpbmRleCAzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gdHggQ29tcG9uZW50IFRYIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gdHkgQ29tcG9uZW50IFRZIChpbmRleCA1KVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICBvdXRbMF0gPSBhO1xuICBvdXRbMV0gPSBiO1xuICBvdXRbMl0gPSBjO1xuICBvdXRbM10gPSBkO1xuICBvdXRbNF0gPSB0eDtcbiAgb3V0WzVdID0gdHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIHZhciBhYSA9IGFbMF0sXG4gICAgICBhYiA9IGFbMV0sXG4gICAgICBhYyA9IGFbMl0sXG4gICAgICBhZCA9IGFbM107XG4gIHZhciBhdHggPSBhWzRdLFxuICAgICAgYXR5ID0gYVs1XTtcbiAgdmFyIGRldCA9IGFhICogYWQgLSBhYiAqIGFjO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGFkICogZGV0O1xuICBvdXRbMV0gPSAtYWIgKiBkZXQ7XG4gIG91dFsyXSA9IC1hYyAqIGRldDtcbiAgb3V0WzNdID0gYWEgKiBkZXQ7XG4gIG91dFs0XSA9IChhYyAqIGF0eSAtIGFkICogYXR4KSAqIGRldDtcbiAgb3V0WzVdID0gKGFiICogYXR4IC0gYWEgKiBhdHkpICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gIHJldHVybiBhWzBdICogYVszXSAtIGFbMV0gKiBhWzJdO1xufVxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDJkJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV07XG4gIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xuICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcbiAgb3V0WzJdID0gYTAgKiBiMiArIGEyICogYjM7XG4gIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xuICBvdXRbNF0gPSBhMCAqIGI0ICsgYTIgKiBiNSArIGE0O1xuICBvdXRbNV0gPSBhMSAqIGI0ICsgYTMgKiBiNSArIGE1O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXQyZCBieSB0aGUgZ2l2ZW4gYW5nbGVcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYTAgKiBjICsgYTIgKiBzO1xuICBvdXRbMV0gPSBhMSAqIGMgKyBhMyAqIHM7XG4gIG91dFsyXSA9IGEwICogLXMgKyBhMiAqIGM7XG4gIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XG4gIG91dFs0XSA9IGE0O1xuICBvdXRbNV0gPSBhNTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XTtcbiAgdmFyIHYwID0gdlswXSxcbiAgICAgIHYxID0gdlsxXTtcbiAgb3V0WzBdID0gYTAgKiB2MDtcbiAgb3V0WzFdID0gYTEgKiB2MDtcbiAgb3V0WzJdID0gYTIgKiB2MTtcbiAgb3V0WzNdID0gYTMgKiB2MTtcbiAgb3V0WzRdID0gYTQ7XG4gIG91dFs1XSA9IGE1O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zbGF0ZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gdHJhbnNsYXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgdjAgPSB2WzBdLFxuICAgICAgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMDtcbiAgb3V0WzFdID0gYTE7XG4gIG91dFsyXSA9IGEyO1xuICBvdXRbM10gPSBhMztcbiAgb3V0WzRdID0gYTAgKiB2MCArIGEyICogdjEgKyBhNDtcbiAgb3V0WzVdID0gYTEgKiB2MCArIGEzICogdjEgKyBhNTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0MmQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gLXM7XG4gIG91dFszXSA9IGM7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDJkLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSB2WzFdO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0MmQudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IHZbMF07XG4gIG91dFs1XSA9IHZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0MmQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIilcIjtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIDEpO1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDJkJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgb3V0WzRdID0gYVs0XSAqIGI7XG4gIG91dFs1XSA9IGFbNV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDJkJ3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKTtcbn1cbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDJkLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQyZC5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXHJcbiAqIDN4MyBNYXRyaXhcclxuICogQG1vZHVsZSBtYXQzXHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQzXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQzfSBhIG5ldyAzeDMgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgM3gzIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSAgIHRoZSBzb3VyY2UgNHg0IG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbNF07XG4gIG91dFs0XSA9IGFbNV07XG4gIG91dFs1XSA9IGFbNl07XG4gIG91dFs2XSA9IGFbOF07XG4gIG91dFs3XSA9IGFbOV07XG4gIG91dFs4XSA9IGFbMTBdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBtYXRyaXggdG8gY2xvbmVcclxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MyB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQzIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcmV0dXJucyB7bWF0M30gQSBuZXcgbWF0M1xyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MyB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMTtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICBpZiAob3V0ID09PSBhKSB7XG4gICAgdmFyIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgb3V0WzFdID0gYVszXTtcbiAgICBvdXRbMl0gPSBhWzZdO1xuICAgIG91dFszXSA9IGEwMTtcbiAgICBvdXRbNV0gPSBhWzddO1xuICAgIG91dFs2XSA9IGEwMjtcbiAgICBvdXRbN10gPSBhMTI7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzNdO1xuICAgIG91dFsyXSA9IGFbNl07XG4gICAgb3V0WzNdID0gYVsxXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbN107XG4gICAgb3V0WzZdID0gYVsyXTtcbiAgICBvdXRbN10gPSBhWzVdO1xuICAgIG91dFs4XSA9IGFbOF07XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEludmVydHMgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl07XG4gIHZhciBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV07XG4gIHZhciBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF07XG4gIHZhciBiMDEgPSBhMjIgKiBhMTEgLSBhMTIgKiBhMjE7XG4gIHZhciBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwO1xuICB2YXIgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG5cbiAgdmFyIGRldCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMTtcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSBiMDEgKiBkZXQ7XG4gIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcbiAgb3V0WzJdID0gKGExMiAqIGEwMSAtIGEwMiAqIGExMSkgKiBkZXQ7XG4gIG91dFszXSA9IGIxMSAqIGRldDtcbiAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XG4gIG91dFs1XSA9ICgtYTEyICogYTAwICsgYTAyICogYTEwKSAqIGRldDtcbiAgb3V0WzZdID0gYjIxICogZGV0O1xuICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XG4gIG91dFs4XSA9IChhMTEgKiBhMDAgLSBhMDEgKiBhMTApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgb3V0WzBdID0gYTExICogYTIyIC0gYTEyICogYTIxO1xuICBvdXRbMV0gPSBhMDIgKiBhMjEgLSBhMDEgKiBhMjI7XG4gIG91dFsyXSA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgb3V0WzNdID0gYTEyICogYTIwIC0gYTEwICogYTIyO1xuICBvdXRbNF0gPSBhMDAgKiBhMjIgLSBhMDIgKiBhMjA7XG4gIG91dFs1XSA9IGEwMiAqIGExMCAtIGEwMCAqIGExMjtcbiAgb3V0WzZdID0gYTEwICogYTIxIC0gYTExICogYTIwO1xuICBvdXRbN10gPSBhMDEgKiBhMjAgLSBhMDAgKiBhMjE7XG4gIG91dFs4XSA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gbWF0MydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl07XG4gIHZhciBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV07XG4gIHZhciBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF07XG4gIHZhciBiMDAgPSBiWzBdLFxuICAgICAgYjAxID0gYlsxXSxcbiAgICAgIGIwMiA9IGJbMl07XG4gIHZhciBiMTAgPSBiWzNdLFxuICAgICAgYjExID0gYls0XSxcbiAgICAgIGIxMiA9IGJbNV07XG4gIHZhciBiMjAgPSBiWzZdLFxuICAgICAgYjIxID0gYls3XSxcbiAgICAgIGIyMiA9IGJbOF07XG4gIG91dFswXSA9IGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMDtcbiAgb3V0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICBvdXRbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjI7XG4gIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcbiAgb3V0WzRdID0gYjEwICogYTAxICsgYjExICogYTExICsgYjEyICogYTIxO1xuICBvdXRbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XG4gIG91dFs2XSA9IGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMDtcbiAgb3V0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xuICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XSxcbiAgICAgIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XSxcbiAgICAgIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV07XG4gIG91dFswXSA9IGEwMDtcbiAgb3V0WzFdID0gYTAxO1xuICBvdXRbMl0gPSBhMDI7XG4gIG91dFszXSA9IGExMDtcbiAgb3V0WzRdID0gYTExO1xuICBvdXRbNV0gPSBhMTI7XG4gIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xuICBvdXRbN10gPSB4ICogYTAxICsgeSAqIGExMSArIGEyMTtcbiAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdDMgYnkgdGhlIGdpdmVuIGFuZ2xlXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XSxcbiAgICAgIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XSxcbiAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcbiAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG4gIG91dFszXSA9IGMgKiBhMTAgLSBzICogYTAwO1xuICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcbiAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG4gIG91dFs2XSA9IGEyMDtcbiAgb3V0WzddID0gYTIxO1xuICBvdXRbOF0gPSBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2NhbGVzIHRoZSBtYXQzIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV07XG4gIG91dFswXSA9IHggKiBhWzBdO1xuICBvdXRbMV0gPSB4ICogYVsxXTtcbiAgb3V0WzJdID0geCAqIGFbMl07XG4gIG91dFszXSA9IHkgKiBhWzNdO1xuICBvdXRbNF0gPSB5ICogYVs0XTtcbiAgb3V0WzVdID0geSAqIGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDMudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IHZbMF07XG4gIG91dFs3XSA9IHZbMV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0My5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBjO1xuICBvdXRbMV0gPSBzO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAtcztcbiAgb3V0WzRdID0gYztcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQzLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB2WzFdO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjb3B5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDJkKG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSBhWzJdO1xuICBvdXRbNF0gPSBhWzNdO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSBhWzRdO1xuICBvdXRbN10gPSBhWzVdO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeXggPSB5ICogeDI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHp4ID0geiAqIHgyO1xuICB2YXIgenkgPSB6ICogeTI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gIG91dFszXSA9IHl4IC0gd3o7XG4gIG91dFs2XSA9IHp4ICsgd3k7XG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xuICBvdXRbN10gPSB6eSAtIHd4O1xuICBvdXRbMl0gPSB6eCAtIHd5O1xuICBvdXRbNV0gPSB6eSArIHd4O1xuICBvdXRbOF0gPSAxIC0geHggLSB5eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsRnJvbU1hdDQob3V0LCBhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdO1xuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICB2YXIgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICB2YXIgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICB2YXIgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICB2YXIgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICB2YXIgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICB2YXIgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICB2YXIgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG5cbiAgdmFyIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgb3V0WzFdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuICBvdXRbM10gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gIG91dFs4XSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcclxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbihvdXQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgb3V0WzBdID0gMiAvIHdpZHRoO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAtMiAvIGhlaWdodDtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gLTE7XG4gIG91dFs3XSA9IDE7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcIm1hdDMoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIiwgXCIgKyBhWzZdICsgXCIsIFwiICsgYVs3XSArIFwiLCBcIiArIGFbOF0gKyBcIilcIjtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCBhWzZdLCBhWzddLCBhWzhdKTtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQzJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgb3V0WzZdID0gYVs2XSAtIGJbNl07XG4gIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQzJ3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdICogc2NhbGU7XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdICogc2NhbGU7XG4gIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdLFxuICAgICAgYTYgPSBhWzZdLFxuICAgICAgYTcgPSBhWzddLFxuICAgICAgYTggPSBhWzhdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdLFxuICAgICAgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdLFxuICAgICAgYjYgPSBiWzZdLFxuICAgICAgYjcgPSBiWzddLFxuICAgICAgYjggPSBiWzhdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcclxuICogNHg0IE1hdHJpeDxicj5Gb3JtYXQ6IGNvbHVtbi1tYWpvciwgd2hlbiB0eXBlZCBvdXQgaXQgbG9va3MgbGlrZSByb3ctbWFqb3I8YnI+VGhlIG1hdHJpY2VzIGFyZSBiZWluZyBwb3N0IG11bHRpcGxpZWQuXHJcbiAqIEBtb2R1bGUgbWF0NFxyXG4gKi9cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0NFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0NH0gYSBuZXcgNHg0IG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gYSBuZXcgNHg0IG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgb3V0WzldID0gYVs5XTtcbiAgb3V0WzEwXSA9IGFbMTBdO1xuICBvdXRbMTFdID0gYVsxMV07XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICBvdXRbOV0gPSBhWzldO1xuICBvdXRbMTBdID0gYVsxMF07XG4gIG91dFsxMV0gPSBhWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQ0IHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAzIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDMgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDkpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzAgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMTIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzMgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTUpXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBBIG5ldyBtYXQ0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTAzO1xuICBvdXRbNF0gPSBtMTA7XG4gIG91dFs1XSA9IG0xMTtcbiAgb3V0WzZdID0gbTEyO1xuICBvdXRbN10gPSBtMTM7XG4gIG91dFs4XSA9IG0yMDtcbiAgb3V0WzldID0gbTIxO1xuICBvdXRbMTBdID0gbTIyO1xuICBvdXRbMTFdID0gbTIzO1xuICBvdXRbMTJdID0gbTMwO1xuICBvdXRbMTNdID0gbTMxO1xuICBvdXRbMTRdID0gbTMyO1xuICBvdXRbMTVdID0gbTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAzIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDMgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDkpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzAgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMTIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzMgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTUpXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTAzO1xuICBvdXRbNF0gPSBtMTA7XG4gIG91dFs1XSA9IG0xMTtcbiAgb3V0WzZdID0gbTEyO1xuICBvdXRbN10gPSBtMTM7XG4gIG91dFs4XSA9IG0yMDtcbiAgb3V0WzldID0gbTIxO1xuICBvdXRbMTBdID0gbTIyO1xuICBvdXRbMTFdID0gbTIzO1xuICBvdXRbMTJdID0gbTMwO1xuICBvdXRbMTNdID0gbTMxO1xuICBvdXRbMTRdID0gbTMyO1xuICBvdXRbMTVdID0gbTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIHZhciBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIHZhciBhMjMgPSBhWzExXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYTAxO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYTAyO1xuICAgIG91dFs5XSA9IGExMjtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGEwMztcbiAgICBvdXRbMTNdID0gYTEzO1xuICAgIG91dFsxNF0gPSBhMjM7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYVsxXTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYVsyXTtcbiAgICBvdXRbOV0gPSBhWzZdO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGFbM107XG4gICAgb3V0WzEzXSA9IGFbN107XG4gICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xuICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xuICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcbiAgb3V0WzFdID0gLShhMDEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbMl0gPSBhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzRdID0gLShhMTAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbNV0gPSBhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMik7XG4gIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzddID0gYTAwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xuICBvdXRbOF0gPSBhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSk7XG4gIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcbiAgb3V0WzEwXSA9IGEwMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMyAtIGEwMyAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKTtcbiAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcbiAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcbiAgb3V0WzEzXSA9IGEwMCAqIChhMjEgKiBhMzIgLSBhMjIgKiBhMzEpIC0gYTIwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKTtcbiAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcbiAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xufVxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdOyAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcblxuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzRdO1xuICBiMSA9IGJbNV07XG4gIGIyID0gYls2XTtcbiAgYjMgPSBiWzddO1xuICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzhdO1xuICBiMSA9IGJbOV07XG4gIGIyID0gYlsxMF07XG4gIGIzID0gYlsxMV07XG4gIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG4gIGIwID0gYlsxMl07XG4gIGIxID0gYlsxM107XG4gIGIyID0gYlsxNF07XG4gIGIzID0gYlsxNV07XG4gIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXSxcbiAgICAgIHogPSB2WzJdO1xuICB2YXIgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICB2YXIgYTEwLCBhMTEsIGExMiwgYTEzO1xuICB2YXIgYTIwLCBhMjEsIGEyMiwgYTIzO1xuXG4gIGlmIChhID09PSBvdXQpIHtcbiAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcbiAgfSBlbHNlIHtcbiAgICBhMDAgPSBhWzBdO1xuICAgIGEwMSA9IGFbMV07XG4gICAgYTAyID0gYVsyXTtcbiAgICBhMDMgPSBhWzNdO1xuICAgIGExMCA9IGFbNF07XG4gICAgYTExID0gYVs1XTtcbiAgICBhMTIgPSBhWzZdO1xuICAgIGExMyA9IGFbN107XG4gICAgYTIwID0gYVs4XTtcbiAgICBhMjEgPSBhWzldO1xuICAgIGEyMiA9IGFbMTBdO1xuICAgIGEyMyA9IGFbMTFdO1xuICAgIG91dFswXSA9IGEwMDtcbiAgICBvdXRbMV0gPSBhMDE7XG4gICAgb3V0WzJdID0gYTAyO1xuICAgIG91dFszXSA9IGEwMztcbiAgICBvdXRbNF0gPSBhMTA7XG4gICAgb3V0WzVdID0gYTExO1xuICAgIG91dFs2XSA9IGExMjtcbiAgICBvdXRbN10gPSBhMTM7XG4gICAgb3V0WzhdID0gYTIwO1xuICAgIG91dFs5XSA9IGEyMTtcbiAgICBvdXRbMTBdID0gYTIyO1xuICAgIG91dFsxMV0gPSBhMjM7XG4gICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYTAyICogeCArIGExMiAqIHkgKyBhMjIgKiB6ICsgYVsxNF07XG4gICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gIHZhciB4ID0gdlswXSxcbiAgICAgIHkgPSB2WzFdLFxuICAgICAgeiA9IHZbMl07XG4gIG91dFswXSA9IGFbMF0gKiB4O1xuICBvdXRbMV0gPSBhWzFdICogeDtcbiAgb3V0WzJdID0gYVsyXSAqIHg7XG4gIG91dFszXSA9IGFbM10gKiB4O1xuICBvdXRbNF0gPSBhWzRdICogeTtcbiAgb3V0WzVdID0gYVs1XSAqIHk7XG4gIG91dFs2XSA9IGFbNl0gKiB5O1xuICBvdXRbN10gPSBhWzddICogeTtcbiAgb3V0WzhdID0gYVs4XSAqIHo7XG4gIG91dFs5XSA9IGFbOV0gKiB6O1xuICBvdXRbMTBdID0gYVsxMF0gKiB6O1xuICBvdXRbMTFdID0gYVsxMV0gKiB6O1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQsIGF4aXMpIHtcbiAgdmFyIHggPSBheGlzWzBdLFxuICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICB6ID0gYXhpc1syXTtcbiAgdmFyIGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XG4gIHZhciBzLCBjLCB0O1xuICB2YXIgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICB2YXIgYTEwLCBhMTEsIGExMiwgYTEzO1xuICB2YXIgYTIwLCBhMjEsIGEyMiwgYTIzO1xuICB2YXIgYjAwLCBiMDEsIGIwMjtcbiAgdmFyIGIxMCwgYjExLCBiMTI7XG4gIHZhciBiMjAsIGIyMSwgYjIyO1xuXG4gIGlmIChsZW4gPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZW4gPSAxIC8gbGVuO1xuICB4ICo9IGxlbjtcbiAgeSAqPSBsZW47XG4gIHogKj0gbGVuO1xuICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgYyA9IE1hdGguY29zKHJhZCk7XG4gIHQgPSAxIC0gYztcbiAgYTAwID0gYVswXTtcbiAgYTAxID0gYVsxXTtcbiAgYTAyID0gYVsyXTtcbiAgYTAzID0gYVszXTtcbiAgYTEwID0gYVs0XTtcbiAgYTExID0gYVs1XTtcbiAgYTEyID0gYVs2XTtcbiAgYTEzID0gYVs3XTtcbiAgYTIwID0gYVs4XTtcbiAgYTIxID0gYVs5XTtcbiAgYTIyID0gYVsxMF07XG4gIGEyMyA9IGFbMTFdOyAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcblxuICBiMDAgPSB4ICogeCAqIHQgKyBjO1xuICBiMDEgPSB5ICogeCAqIHQgKyB6ICogcztcbiAgYjAyID0geiAqIHggKiB0IC0geSAqIHM7XG4gIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO1xuICBiMTEgPSB5ICogeSAqIHQgKyBjO1xuICBiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcbiAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7XG4gIGIyMSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICBiMjIgPSB6ICogeiAqIHQgKyBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xuICBvdXRbMl0gPSBhMDIgKiBiMDAgKyBhMTIgKiBiMDEgKyBhMjIgKiBiMDI7XG4gIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcbiAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xuICBvdXRbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcbiAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xuICBvdXRbOF0gPSBhMDAgKiBiMjAgKyBhMTAgKiBiMjEgKyBhMjAgKiBiMjI7XG4gIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcbiAgb3V0WzExXSA9IGEwMyAqIGIyMCArIGExMyAqIGIyMSArIGEyMyAqIGIyMjtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTEwID0gYVs0XTtcbiAgdmFyIGExMSA9IGFbNV07XG4gIHZhciBhMTIgPSBhWzZdO1xuICB2YXIgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF07XG4gIHZhciBhMjEgPSBhWzldO1xuICB2YXIgYTIyID0gYVsxMF07XG4gIHZhciBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFs0XSA9IGExMCAqIGMgKyBhMjAgKiBzO1xuICBvdXRbNV0gPSBhMTEgKiBjICsgYTIxICogcztcbiAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XG4gIG91dFs3XSA9IGExMyAqIGMgKyBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMjAgKiBjIC0gYTEwICogcztcbiAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XG4gIG91dFsxMF0gPSBhMjIgKiBjIC0gYTEyICogcztcbiAgb3V0WzExXSA9IGEyMyAqIGMgLSBhMTMgKiBzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGEyMCA9IGFbOF07XG4gIHZhciBhMjEgPSBhWzldO1xuICB2YXIgYTIyID0gYVsxMF07XG4gIHZhciBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcbiAgb3V0WzJdID0gYTAyICogYyAtIGEyMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcbiAgb3V0WzldID0gYTAxICogcyArIGEyMSAqIGM7XG4gIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF07XG4gIHZhciBhMTEgPSBhWzVdO1xuICB2YXIgYTEyID0gYVs2XTtcbiAgdmFyIGExMyA9IGFbN107XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICBvdXRbOV0gPSBhWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgKyBhMTAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjICsgYTExICogcztcbiAgb3V0WzJdID0gYTAyICogYyArIGExMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgKyBhMTMgKiBzO1xuICBvdXRbNF0gPSBhMTAgKiBjIC0gYTAwICogcztcbiAgb3V0WzVdID0gYTExICogYyAtIGEwMSAqIHM7XG4gIG91dFs2XSA9IGExMiAqIGMgLSBhMDIgKiBzO1xuICBvdXRbN10gPSBhMTMgKiBjIC0gYTAzICogcztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHYpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMTtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDE7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSB2WzFdO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gdlsyXTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkLCBheGlzKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQsIGF4aXMpIHtcbiAgdmFyIHggPSBheGlzWzBdLFxuICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICB6ID0gYXhpc1syXTtcbiAgdmFyIGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XG4gIHZhciBzLCBjLCB0O1xuXG4gIGlmIChsZW4gPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZW4gPSAxIC8gbGVuO1xuICB4ICo9IGxlbjtcbiAgeSAqPSBsZW47XG4gIHogKj0gbGVuO1xuICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgYyA9IE1hdGguY29zKHJhZCk7XG4gIHQgPSAxIC0gYzsgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSB4ICogeCAqIHQgKyBjO1xuICBvdXRbMV0gPSB5ICogeCAqIHQgKyB6ICogcztcbiAgb3V0WzJdID0geiAqIHggKiB0IC0geSAqIHM7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHggKiB5ICogdCAtIHogKiBzO1xuICBvdXRbNV0gPSB5ICogeSAqIHQgKyBjO1xuICBvdXRbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geCAqIHogKiB0ICsgeSAqIHM7XG4gIG91dFs5XSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICBvdXRbMTBdID0geiAqIHogKiB0ICsgYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGVYKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAtcztcbiAgb3V0WzEwXSA9IGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQucm90YXRlWShkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gLXM7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHM7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVpSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IC1zO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtICh5eSArIHp6KTtcbiAgb3V0WzFdID0geHkgKyB3ejtcbiAgb3V0WzJdID0geHogLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geHkgLSB3ejtcbiAgb3V0WzVdID0gMSAtICh4eCArIHp6KTtcbiAgb3V0WzZdID0geXogKyB3eDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geHogKyB3eTtcbiAgb3V0WzldID0geXogLSB3eDtcbiAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDQgZnJvbSBhIGR1YWwgcXVhdC5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgTWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cclxuICogQHJldHVybnMge21hdDR9IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdDIob3V0LCBhKSB7XG4gIHZhciB0cmFuc2xhdGlvbiA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICB2YXIgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdLFxuICAgICAgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddO1xuICB2YXIgbWFnbml0dWRlID0gYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6ICsgYncgKiBidzsgLy9Pbmx5IHNjYWxlIGlmIGl0IG1ha2VzIHNlbnNlXG5cbiAgaWYgKG1hZ25pdHVkZSA+IDApIHtcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDIgLyBtYWduaXR1ZGU7XG4gICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyIC8gbWFnbml0dWRlO1xuICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMiAvIG1hZ25pdHVkZTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XG4gICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyO1xuICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcbiAgfVxuXG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgYSwgdHJhbnNsYXRpb24pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxyXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxyXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcclxuICogQHBhcmFtICB7UmVhZG9ubHlNYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxyXG4gKiBAcmV0dXJuIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICBvdXRbMF0gPSBtYXRbMTJdO1xuICBvdXRbMV0gPSBtYXRbMTNdO1xuICBvdXRbMl0gPSBtYXRbMTRdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXHJcbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZVxyXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXHJcbiAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcclxuICogQHBhcmFtICB7UmVhZG9ubHlNYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxyXG4gKiBAcmV0dXJuIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gIHZhciBtMTEgPSBtYXRbMF07XG4gIHZhciBtMTIgPSBtYXRbMV07XG4gIHZhciBtMTMgPSBtYXRbMl07XG4gIHZhciBtMjEgPSBtYXRbNF07XG4gIHZhciBtMjIgPSBtYXRbNV07XG4gIHZhciBtMjMgPSBtYXRbNl07XG4gIHZhciBtMzEgPSBtYXRbOF07XG4gIHZhciBtMzIgPSBtYXRbOV07XG4gIHZhciBtMzMgPSBtYXRbMTBdO1xuICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICBvdXRbMl0gPSBNYXRoLmh5cG90KG0zMSwgbTMyLCBtMzMpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb25hbCBjb21wb25lbnRcclxuICogIG9mIGEgdHJhbnNmb3JtYXRpb24gbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoXHJcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcclxuICogIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gb3JpZ2luYWxseSBzdXBwbGllZC5cclxuICogQHBhcmFtIHtxdWF0fSBvdXQgUXVhdGVybmlvbiB0byByZWNlaXZlIHRoZSByb3RhdGlvbiBjb21wb25lbnRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdGF0aW9uKG91dCwgbWF0KSB7XG4gIHZhciBzY2FsaW5nID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIGdldFNjYWxpbmcoc2NhbGluZywgbWF0KTtcbiAgdmFyIGlzMSA9IDEgLyBzY2FsaW5nWzBdO1xuICB2YXIgaXMyID0gMSAvIHNjYWxpbmdbMV07XG4gIHZhciBpczMgPSAxIC8gc2NhbGluZ1syXTtcbiAgdmFyIHNtMTEgPSBtYXRbMF0gKiBpczE7XG4gIHZhciBzbTEyID0gbWF0WzFdICogaXMyO1xuICB2YXIgc20xMyA9IG1hdFsyXSAqIGlzMztcbiAgdmFyIHNtMjEgPSBtYXRbNF0gKiBpczE7XG4gIHZhciBzbTIyID0gbWF0WzVdICogaXMyO1xuICB2YXIgc20yMyA9IG1hdFs2XSAqIGlzMztcbiAgdmFyIHNtMzEgPSBtYXRbOF0gKiBpczE7XG4gIHZhciBzbTMyID0gbWF0WzldICogaXMyO1xuICB2YXIgc20zMyA9IG1hdFsxMF0gKiBpczM7XG4gIHZhciB0cmFjZSA9IHNtMTEgKyBzbTIyICsgc20zMztcbiAgdmFyIFMgPSAwO1xuXG4gIGlmICh0cmFjZSA+IDApIHtcbiAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XG4gICAgb3V0WzNdID0gMC4yNSAqIFM7XG4gICAgb3V0WzBdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgb3V0WzFdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgb3V0WzJdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gIH0gZWxzZSBpZiAoc20xMSA+IHNtMjIgJiYgc20xMSA+IHNtMzMpIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMTEgLSBzbTIyIC0gc20zMykgKiAyO1xuICAgIG91dFszXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgIG91dFswXSA9IDAuMjUgKiBTO1xuICAgIG91dFsxXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgIG91dFsyXSA9IChzbTMxICsgc20xMykgLyBTO1xuICB9IGVsc2UgaWYgKHNtMjIgPiBzbTMzKSB7XG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTIyIC0gc20xMSAtIHNtMzMpICogMjtcbiAgICBvdXRbM10gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICBvdXRbMF0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICBvdXRbMV0gPSAwLjI1ICogUztcbiAgICBvdXRbMl0gPSAoc20yMyArIHNtMzIpIC8gUztcbiAgfSBlbHNlIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMzMgLSBzbTExIC0gc20yMikgKiAyO1xuICAgIG91dFszXSA9IChzbTEyIC0gc20yMSkgLyBTO1xuICAgIG91dFswXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgIG91dFsxXSA9IChzbTIzICsgc20zMikgLyBTO1xuICAgIG91dFsyXSA9IDAuMjUgKiBTO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcclxuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcyBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XG4gIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZSwgcm90YXRpbmcgYW5kIHNjYWxpbmcgYXJvdW5kIHRoZSBnaXZlbiBvcmlnaW5cclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XHJcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG5lZ2F0aXZlT3JpZ2luKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBzIFNjYWxpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBvIFRoZSBvcmlnaW4gdmVjdG9yIGFyb3VuZCB3aGljaCB0byBzY2FsZSBhbmQgcm90YXRlXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luKG91dCwgcSwgdiwgcywgbykge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB4eSA9IHggKiB5MjtcbiAgdmFyIHh6ID0geCAqIHoyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB5eiA9IHkgKiB6MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICB2YXIgc3ggPSBzWzBdO1xuICB2YXIgc3kgPSBzWzFdO1xuICB2YXIgc3ogPSBzWzJdO1xuICB2YXIgb3ggPSBvWzBdO1xuICB2YXIgb3kgPSBvWzFdO1xuICB2YXIgb3ogPSBvWzJdO1xuICB2YXIgb3V0MCA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICB2YXIgb3V0MSA9ICh4eSArIHd6KSAqIHN4O1xuICB2YXIgb3V0MiA9ICh4eiAtIHd5KSAqIHN4O1xuICB2YXIgb3V0NCA9ICh4eSAtIHd6KSAqIHN5O1xuICB2YXIgb3V0NSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICB2YXIgb3V0NiA9ICh5eiArIHd4KSAqIHN5O1xuICB2YXIgb3V0OCA9ICh4eiArIHd5KSAqIHN6O1xuICB2YXIgb3V0OSA9ICh5eiAtIHd4KSAqIHN6O1xuICB2YXIgb3V0MTAgPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgb3V0WzBdID0gb3V0MDtcbiAgb3V0WzFdID0gb3V0MTtcbiAgb3V0WzJdID0gb3V0MjtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gb3V0NDtcbiAgb3V0WzVdID0gb3V0NTtcbiAgb3V0WzZdID0gb3V0NjtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gb3V0ODtcbiAgb3V0WzldID0gb3V0OTtcbiAgb3V0WzEwXSA9IG91dDEwO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF0gKyBveCAtIChvdXQwICogb3ggKyBvdXQ0ICogb3kgKyBvdXQ4ICogb3opO1xuICBvdXRbMTNdID0gdlsxXSArIG95IC0gKG91dDEgKiBveCArIG91dDUgKiBveSArIG91dDkgKiBveik7XG4gIG91dFsxNF0gPSB2WzJdICsgb3ogLSAob3V0MiAqIG94ICsgb3V0NiAqIG95ICsgb3V0MTAgKiBveik7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSA0eDQgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeXggPSB5ICogeDI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHp4ID0geiAqIHgyO1xuICB2YXIgenkgPSB6ICogeTI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFsyXSA9IHp4IC0gd3k7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHl4IC0gd3o7XG4gIG91dFs1XSA9IDEgLSB4eCAtIHp6O1xuICBvdXRbNl0gPSB6eSArIHd4O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB6eCArIHd5O1xuICBvdXRbOV0gPSB6eSAtIHd4O1xuICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBmcnVzdHVtIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcnVzdHVtKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIHJsID0gMSAvIChyaWdodCAtIGxlZnQpO1xuICB2YXIgdGIgPSAxIC8gKHRvcCAtIGJvdHRvbSk7XG4gIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IG5lYXIgKiAyICogcmw7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IG5lYXIgKiAyICogdGI7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IChyaWdodCArIGxlZnQpICogcmw7XG4gIG91dFs5XSA9ICh0b3AgKyBib3R0b20pICogdGI7XG4gIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgb3V0WzExXSA9IC0xO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSBmYXIgKiBuZWFyICogMiAqIG5mO1xuICBvdXRbMTVdID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXHJcbiAqIFBhc3NpbmcgbnVsbC91bmRlZmluZWQvbm8gdmFsdWUgZm9yIGZhciB3aWxsIGdlbmVyYXRlIGluZmluaXRlIHByb2plY3Rpb24gbWF0cml4LlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmb3Z5IFZlcnRpY2FsIGZpZWxkIG9mIHZpZXcgaW4gcmFkaWFuc1xyXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtLCBjYW4gYmUgbnVsbCBvciBJbmZpbml0eVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICB9IGVsc2Uge1xuICAgIG91dFsxMF0gPSAtMTtcbiAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBmaWVsZCBvZiB2aWV3LlxyXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXHJcbiAqIHdpdGggdGhlIHN0aWxsIGV4cGVyaWVtZW50YWwgV2ViVlIgQVBJLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3YgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyB2YWx1ZXM6IHVwRGVncmVlcywgZG93bkRlZ3JlZXMsIGxlZnREZWdyZWVzLCByaWdodERlZ3JlZXNcclxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXcob3V0LCBmb3YsIG5lYXIsIGZhcikge1xuICB2YXIgdXBUYW4gPSBNYXRoLnRhbihmb3YudXBEZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIGRvd25UYW4gPSBNYXRoLnRhbihmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgbGVmdFRhbiA9IE1hdGgudGFuKGZvdi5sZWZ0RGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciByaWdodFRhbiA9IE1hdGgudGFuKGZvdi5yaWdodERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgeFNjYWxlID0gMi4wIC8gKGxlZnRUYW4gKyByaWdodFRhbik7XG4gIHZhciB5U2NhbGUgPSAyLjAgLyAodXBUYW4gKyBkb3duVGFuKTtcbiAgb3V0WzBdID0geFNjYWxlO1xuICBvdXRbMV0gPSAwLjA7XG4gIG91dFsyXSA9IDAuMDtcbiAgb3V0WzNdID0gMC4wO1xuICBvdXRbNF0gPSAwLjA7XG4gIG91dFs1XSA9IHlTY2FsZTtcbiAgb3V0WzZdID0gMC4wO1xuICBvdXRbN10gPSAwLjA7XG4gIG91dFs4XSA9IC0oKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjUpO1xuICBvdXRbOV0gPSAodXBUYW4gLSBkb3duVGFuKSAqIHlTY2FsZSAqIDAuNTtcbiAgb3V0WzEwXSA9IGZhciAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzExXSA9IC0xLjA7XG4gIG91dFsxMl0gPSAwLjA7XG4gIG91dFsxM10gPSAwLjA7XG4gIG91dFsxNF0gPSBmYXIgKiBuZWFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTVdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gb3J0aG8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBsb29rLWF0IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBleWUgcG9zaXRpb24sIGZvY2FsIHBvaW50LCBhbmQgdXAgYXhpcy5cclxuICogSWYgeW91IHdhbnQgYSBtYXRyaXggdGhhdCBhY3R1YWxseSBtYWtlcyBhbiBvYmplY3QgbG9vayBhdCBhbm90aGVyIG9iamVjdCwgeW91IHNob3VsZCB1c2UgdGFyZ2V0VG8gaW5zdGVhZC5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGNlbnRlciBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvb2tBdChvdXQsIGV5ZSwgY2VudGVyLCB1cCkge1xuICB2YXIgeDAsIHgxLCB4MiwgeTAsIHkxLCB5MiwgejAsIHoxLCB6MiwgbGVuO1xuICB2YXIgZXlleCA9IGV5ZVswXTtcbiAgdmFyIGV5ZXkgPSBleWVbMV07XG4gIHZhciBleWV6ID0gZXllWzJdO1xuICB2YXIgdXB4ID0gdXBbMF07XG4gIHZhciB1cHkgPSB1cFsxXTtcbiAgdmFyIHVweiA9IHVwWzJdO1xuICB2YXIgY2VudGVyeCA9IGNlbnRlclswXTtcbiAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XG4gIHZhciBjZW50ZXJ6ID0gY2VudGVyWzJdO1xuXG4gIGlmIChNYXRoLmFicyhleWV4IC0gY2VudGVyeCkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXkgLSBjZW50ZXJ5KSA8IGdsTWF0cml4LkVQU0lMT04gJiYgTWF0aC5hYnMoZXlleiAtIGNlbnRlcnopIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBpZGVudGl0eShvdXQpO1xuICB9XG5cbiAgejAgPSBleWV4IC0gY2VudGVyeDtcbiAgejEgPSBleWV5IC0gY2VudGVyeTtcbiAgejIgPSBleWV6IC0gY2VudGVyejtcbiAgbGVuID0gMSAvIE1hdGguaHlwb3QoejAsIHoxLCB6Mik7XG4gIHowICo9IGxlbjtcbiAgejEgKj0gbGVuO1xuICB6MiAqPSBsZW47XG4gIHgwID0gdXB5ICogejIgLSB1cHogKiB6MTtcbiAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xuICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IE1hdGguaHlwb3QoeDAsIHgxLCB4Mik7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICB4MCA9IDA7XG4gICAgeDEgPSAwO1xuICAgIHgyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuICB9XG5cbiAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcbiAgbGVuID0gTWF0aC5oeXBvdCh5MCwgeTEsIHkyKTtcblxuICBpZiAoIWxlbikge1xuICAgIHkwID0gMDtcbiAgICB5MSA9IDA7XG4gICAgeTIgPSAwO1xuICB9IGVsc2Uge1xuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeTAgKj0gbGVuO1xuICAgIHkxICo9IGxlbjtcbiAgICB5MiAqPSBsZW47XG4gIH1cblxuICBvdXRbMF0gPSB4MDtcbiAgb3V0WzFdID0geTA7XG4gIG91dFsyXSA9IHowO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB4MTtcbiAgb3V0WzVdID0geTE7XG4gIG91dFs2XSA9IHoxO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4MjtcbiAgb3V0WzldID0geTI7XG4gIG91dFsxMF0gPSB6MjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAtKHgwICogZXlleCArIHgxICogZXlleSArIHgyICogZXlleik7XG4gIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XG4gIG91dFsxNF0gPSAtKHowICogZXlleCArIHoxICogZXlleSArIHoyICogZXlleik7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG1hdHJpeCB0aGF0IG1ha2VzIHNvbWV0aGluZyBsb29rIGF0IHNvbWV0aGluZyBlbHNlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgdmFyIGV5ZXggPSBleWVbMF0sXG4gICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICB1cHogPSB1cFsyXTtcbiAgdmFyIHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcbiAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB6MCAqPSBsZW47XG4gICAgejEgKj0gbGVuO1xuICAgIHoyICo9IGxlbjtcbiAgfVxuXG4gIHZhciB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXG4gICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB4MTtcbiAgb3V0WzJdID0geDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHowO1xuICBvdXRbOV0gPSB6MTtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IGV5ZXg7XG4gIG91dFsxM10gPSBleWV5O1xuICBvdXRbMTRdID0gZXllejtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcIm1hdDQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIiwgXCIgKyBhWzZdICsgXCIsIFwiICsgYVs3XSArIFwiLCBcIiArIGFbOF0gKyBcIiwgXCIgKyBhWzldICsgXCIsIFwiICsgYVsxMF0gKyBcIiwgXCIgKyBhWzExXSArIFwiLCBcIiArIGFbMTJdICsgXCIsIFwiICsgYVsxM10gKyBcIiwgXCIgKyBhWzE0XSArIFwiLCBcIiArIGFbMTVdICsgXCIpXCI7XG59XG4vKipcclxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcclxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9iKGEpIHtcbiAgcmV0dXJuIE1hdGguaHlwb3QoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSwgYVs2XSwgYVs3XSwgYVs4XSwgYVs5XSwgYVsxMF0sIGFbMTFdLCBhWzEyXSwgYVsxM10sIGFbMTRdLCBhWzE1XSk7XG59XG4vKipcclxuICogQWRkcyB0d28gbWF0NCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgb3V0WzddID0gYVs3XSArIGJbN107XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICBvdXRbOV0gPSBhWzldICsgYls5XTtcbiAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF07XG4gIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM107XG4gIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XG4gIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XG4gIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgb3V0WzldID0gYVs5XSAqIGI7XG4gIG91dFsxMF0gPSBhWzEwXSAqIGI7XG4gIG91dFsxMV0gPSBhWzExXSAqIGI7XG4gIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gIG91dFsxM10gPSBhWzEzXSAqIGI7XG4gIG91dFsxNF0gPSBhWzE0XSAqIGI7XG4gIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gbWF0NCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xuICBvdXRbOV0gPSBhWzldICsgYls5XSAqIHNjYWxlO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXSAqIHNjYWxlO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXSAqIHNjYWxlO1xuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXSAqIHNjYWxlO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXSAqIHNjYWxlO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XSAqIHNjYWxlO1xuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiYgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdLFxuICAgICAgYTYgPSBhWzZdLFxuICAgICAgYTcgPSBhWzddO1xuICB2YXIgYTggPSBhWzhdLFxuICAgICAgYTkgPSBhWzldLFxuICAgICAgYTEwID0gYVsxMF0sXG4gICAgICBhMTEgPSBhWzExXTtcbiAgdmFyIGExMiA9IGFbMTJdLFxuICAgICAgYTEzID0gYVsxM10sXG4gICAgICBhMTQgPSBhWzE0XSxcbiAgICAgIGExNSA9IGFbMTVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICB2YXIgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdLFxuICAgICAgYjYgPSBiWzZdLFxuICAgICAgYjcgPSBiWzddO1xuICB2YXIgYjggPSBiWzhdLFxuICAgICAgYjkgPSBiWzldLFxuICAgICAgYjEwID0gYlsxMF0sXG4gICAgICBiMTEgPSBiWzExXTtcbiAgdmFyIGIxMiA9IGJbMTJdLFxuICAgICAgYjEzID0gYlsxM10sXG4gICAgICBiMTQgPSBiWzE0XSxcbiAgICAgIGIxNSA9IGJbMTVdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiYgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTkpLCBNYXRoLmFicyhiOSkpICYmIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEwKSwgTWF0aC5hYnMoYjEwKSkgJiYgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJiBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMiksIE1hdGguYWJzKGIxMikpICYmIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEzKSwgTWF0aC5hYnMoYjEzKSkgJiYgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJiBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNSksIE1hdGguYWJzKGIxNSkpO1xufVxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0NC5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0NC5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXHJcbiAqIDMgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAqIEBtb2R1bGUgdmVjM1xyXG4gKi9cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzNcclxuICpcclxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeik7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIERpdmlkZXMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjZWlsXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XG4gIG91dFsyXSA9IE1hdGgubWluKGFbMl0sIGJbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcm91bmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzMncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG4vKipcclxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XG4gIG91dFswXSA9IDEuMCAvIGFbMF07XG4gIG91dFsxXSA9IDEuMCAvIGFbMV07XG4gIG91dFsyXSA9IDEuMCAvIGFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IGFbMF0gKiBsZW47XG4gIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIG91dFsyXSA9IGFbMl0gKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG4vKipcclxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdO1xuICB2YXIgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdO1xuICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICB2YXIgYXggPSBhWzBdO1xuICB2YXIgYXkgPSBhWzFdO1xuICB2YXIgYXogPSBhWzJdO1xuICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgaGVybWl0ZSBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYyB0aGUgdGhpcmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGVybWl0ZShvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcbiAgdmFyIGZhY3RvcjIgPSBmYWN0b3JUaW1lczIgKiAodCAtIDIpICsgdDtcbiAgdmFyIGZhY3RvcjMgPSBmYWN0b3JUaW1lczIgKiAodCAtIDEpO1xuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgYmV6aWVyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBiZXppZXIob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gIHZhciBpbnZlcnNlRmFjdG9yID0gMSAtIHQ7XG4gIHZhciBpbnZlcnNlRmFjdG9yVGltZXNUd28gPSBpbnZlcnNlRmFjdG9yICogaW52ZXJzZUZhY3RvcjtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGludmVyc2VGYWN0b3JUaW1lc1R3byAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3IyID0gMyAqIHQgKiBpbnZlcnNlRmFjdG9yVGltZXNUd287XG4gIHZhciBmYWN0b3IzID0gMyAqIGZhY3RvclRpbWVzMiAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogdDtcbiAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XG4gIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVdIExlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHZlY3Rvci4gSWYgb21taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICB2YXIgeiA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wIC0gMS4wO1xuICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMCAtIHogKiB6KSAqIHNjYWxlO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiB6U2NhbGU7XG4gIG91dFsyXSA9IHogKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxyXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIHZhciB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICB3ID0gdyB8fCAxLjA7XG4gIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgLyB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcclxuICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZHVhbCBxdWF0ZXJuaW9ucy4gKE11bHRpcGx5IGl0IHdpdGggdGhlIHJlYWwgcGFydClcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgLy8gYmVuY2htYXJrczogaHR0cHM6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tdHJhbnNmb3JtLXZlYzMtaW1wbGVtZW50YXRpb25zLWZpeGVkXG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM107XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07IC8vIHZhciBxdmVjID0gW3F4LCBxeSwgcXpdO1xuICAvLyB2YXIgdXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCBhKTtcblxuICB2YXIgdXZ4ID0gcXkgKiB6IC0gcXogKiB5LFxuICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LFxuICAgICAgdXZ6ID0gcXggKiB5IC0gcXkgKiB4OyAvLyB2YXIgdXV2ID0gdmVjMy5jcm9zcyhbXSwgcXZlYywgdXYpO1xuXG4gIHZhciB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eSxcbiAgICAgIHV1dnkgPSBxeiAqIHV2eCAtIHF4ICogdXZ6LFxuICAgICAgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7IC8vIHZlYzMuc2NhbGUodXYsIHV2LCAyICogdyk7XG5cbiAgdmFyIHcyID0gcXcgKiAyO1xuICB1dnggKj0gdzI7XG4gIHV2eSAqPSB3MjtcbiAgdXZ6ICo9IHcyOyAvLyB2ZWMzLnNjYWxlKHV1diwgdXV2LCAyKTtcblxuICB1dXZ4ICo9IDI7XG4gIHV1dnkgKj0gMjtcbiAgdXV2eiAqPSAyOyAvLyByZXR1cm4gdmVjMy5hZGQob3V0LCBhLCB2ZWMzLmFkZChvdXQsIHV2LCB1dXYpKTtcblxuICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgb3V0WzFdID0geSArIHV2eSArIHV1dnk7XG4gIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHgtYXhpc1xyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdO1xuICByWzFdID0gcFsxXSAqIE1hdGguY29zKHJhZCkgLSBwWzJdICogTWF0aC5zaW4ocmFkKTtcbiAgclsyXSA9IHBbMV0gKiBNYXRoLnNpbihyYWQpICsgcFsyXSAqIE1hdGguY29zKHJhZCk7IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHktYXhpc1xyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzJdICogTWF0aC5zaW4ocmFkKSArIHBbMF0gKiBNYXRoLmNvcyhyYWQpO1xuICByWzFdID0gcFsxXTtcbiAgclsyXSA9IHBbMl0gKiBNYXRoLmNvcyhyYWQpIC0gcFswXSAqIE1hdGguc2luKHJhZCk7IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdICogTWF0aC5jb3MocmFkKSAtIHBbMV0gKiBNYXRoLnNpbihyYWQpO1xuICByWzFdID0gcFswXSAqIE1hdGguc2luKHJhZCkgKyBwWzFdICogTWF0aC5jb3MocmFkKTtcbiAgclsyXSA9IHBbMl07IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhbmdsZShhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl0sXG4gICAgICBtYWcxID0gTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5ICsgYXogKiBheiksXG4gICAgICBtYWcyID0gTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5ICsgYnogKiBieiksXG4gICAgICBtYWcgPSBtYWcxICogbWFnMixcbiAgICAgIGNvc2luZSA9IG1hZyAmJiBkb3QoYSwgYikgLyBtYWc7XG4gIHJldHVybiBNYXRoLmFjb3MoTWF0aC5taW4oTWF0aC5tYXgoY29zaW5lLCAtMSksIDEpKTtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHplcm9cclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMyhcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWREaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzNzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzMuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlYyA9IGNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgIHZhciBpLCBsO1xuXG4gICAgaWYgKCFzdHJpZGUpIHtcbiAgICAgIHN0cmlkZSA9IDM7XG4gICAgfVxuXG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICB2ZWNbMF0gPSBhW2ldO1xuICAgICAgdmVjWzFdID0gYVtpICsgMV07XG4gICAgICB2ZWNbMl0gPSBhW2kgKyAyXTtcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgYVtpXSA9IHZlY1swXTtcbiAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xuICAgICAgYVtpICsgMl0gPSB2ZWNbMl07XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KCk7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcclxuICogNCBEaW1lbnNpb25hbCBWZWN0b3JcclxuICogQG1vZHVsZSB2ZWM0XHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjNFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6LCB3KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgb3V0WzNdID0gdztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIG91dFszXSA9IGFbM10gKiBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIERpdmlkZXMgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAvIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5jZWlsKGFbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gIG91dFszXSA9IE1hdGguZmxvb3IoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XG4gIG91dFsyXSA9IE1hdGgubWluKGFbMl0sIGJbMl0pO1xuICBvdXRbM10gPSBNYXRoLm1pbihhWzNdLCBiWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWF4KGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byByb3VuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2NhbGVzIGEgdmVjNCBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzQncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICB2YXIgdyA9IGJbM10gLSBhWzNdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6LCB3KTtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgdmFyIHcgPSBiWzNdIC0gYVszXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgdyA9IGFbM107XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHosIHcpO1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIHcgPSBhWzNdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG59XG4vKipcclxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSAtYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICBvdXRbM10gPSAxLjAgLyBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgdyA9IGFbM107XG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IHggKiBsZW47XG4gIG91dFsxXSA9IHkgKiBsZW47XG4gIG91dFsyXSA9IHogKiBsZW47XG4gIG91dFszXSA9IHcgKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl0gKyBhWzNdICogYlszXTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBjcm9zcy1wcm9kdWN0IG9mIHRocmVlIHZlY3RvcnMgaW4gYSA0LWRpbWVuc2lvbmFsIHNwYWNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSByZXN1bHQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IFUgdGhlIGZpcnN0IHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gViB0aGUgc2Vjb25kIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gVyB0aGUgdGhpcmQgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSByZXN1bHRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIHUsIHYsIHcpIHtcbiAgdmFyIEEgPSB2WzBdICogd1sxXSAtIHZbMV0gKiB3WzBdLFxuICAgICAgQiA9IHZbMF0gKiB3WzJdIC0gdlsyXSAqIHdbMF0sXG4gICAgICBDID0gdlswXSAqIHdbM10gLSB2WzNdICogd1swXSxcbiAgICAgIEQgPSB2WzFdICogd1syXSAtIHZbMl0gKiB3WzFdLFxuICAgICAgRSA9IHZbMV0gKiB3WzNdIC0gdlszXSAqIHdbMV0sXG4gICAgICBGID0gdlsyXSAqIHdbM10gLSB2WzNdICogd1syXTtcbiAgdmFyIEcgPSB1WzBdO1xuICB2YXIgSCA9IHVbMV07XG4gIHZhciBJID0gdVsyXTtcbiAgdmFyIEogPSB1WzNdO1xuICBvdXRbMF0gPSBIICogRiAtIEkgKiBFICsgSiAqIEQ7XG4gIG91dFsxXSA9IC0oRyAqIEYpICsgSSAqIEMgLSBKICogQjtcbiAgb3V0WzJdID0gRyAqIEUgLSBIICogQyArIEogKiBBO1xuICBvdXRbM10gPSAtKEcgKiBEKSArIEggKiBCIC0gSSAqIEE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF07XG4gIHZhciBheSA9IGFbMV07XG4gIHZhciBheiA9IGFbMl07XG4gIHZhciBhdyA9IGFbM107XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xuICBzY2FsZSA9IHNjYWxlIHx8IDEuMDsgLy8gTWFyc2FnbGlhLCBHZW9yZ2UuIENob29zaW5nIGEgUG9pbnQgZnJvbSB0aGUgU3VyZmFjZSBvZiBhXG4gIC8vIFNwaGVyZS4gQW5uLiBNYXRoLiBTdGF0aXN0LiA0MyAoMTk3MiksIG5vLiAyLCA2NDUtLTY0Ni5cbiAgLy8gaHR0cDovL3Byb2plY3RldWNsaWQub3JnL2V1Y2xpZC5hb21zLzExNzc2OTI2NDQ7XG5cbiAgdmFyIHYxLCB2MiwgdjMsIHY0O1xuICB2YXIgczEsIHMyO1xuXG4gIGRvIHtcbiAgICB2MSA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgdjIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xuICAgIHMxID0gdjEgKiB2MSArIHYyICogdjI7XG4gIH0gd2hpbGUgKHMxID49IDEpO1xuXG4gIGRvIHtcbiAgICB2MyA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgdjQgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xuICAgIHMyID0gdjMgKiB2MyArIHY0ICogdjQ7XG4gIH0gd2hpbGUgKHMyID49IDEpO1xuXG4gIHZhciBkID0gTWF0aC5zcXJ0KCgxIC0gczEpIC8gczIpO1xuICBvdXRbMF0gPSBzY2FsZSAqIHYxO1xuICBvdXRbMV0gPSBzY2FsZSAqIHYyO1xuICBvdXRbMl0gPSBzY2FsZSAqIHYzICogZDtcbiAgb3V0WzNdID0gc2NhbGUgKiB2NCAqIGQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgbWF0NC5cclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdICogdztcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10gKiB3O1xuICBvdXRbMl0gPSBtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0gKiB3O1xuICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0gKiB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzQgd2l0aCBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXTsgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWNcblxuICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gIHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgdmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6OyAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cbiAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgb3V0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0IHRvIHplcm9cclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIG91dFszXSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJ2ZWM0KFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LmRpdmlkZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnNxdWFyZWREaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzRzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzQuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjNHMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlYyA9IGNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgIHZhciBpLCBsO1xuXG4gICAgaWYgKCFzdHJpZGUpIHtcbiAgICAgIHN0cmlkZSA9IDQ7XG4gICAgfVxuXG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICB2ZWNbMF0gPSBhW2ldO1xuICAgICAgdmVjWzFdID0gYVtpICsgMV07XG4gICAgICB2ZWNbMl0gPSBhW2kgKyAyXTtcbiAgICAgIHZlY1szXSA9IGFbaSArIDNdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgICBhW2kgKyAyXSA9IHZlY1syXTtcbiAgICAgIGFbaSArIDNdID0gdmVjWzNdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuaW1wb3J0ICogYXMgbWF0MyBmcm9tIFwiLi9tYXQzLmpzXCI7XG5pbXBvcnQgKiBhcyB2ZWMzIGZyb20gXCIuL3ZlYzMuanNcIjtcbmltcG9ydCAqIGFzIHZlYzQgZnJvbSBcIi4vdmVjNC5qc1wiO1xuLyoqXHJcbiAqIFF1YXRlcm5pb25cclxuICogQG1vZHVsZSBxdWF0XHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBxdWF0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gIH1cblxuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCBhIHF1YXQgdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXRzIGEgcXVhdCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhbmQgcm90YXRpb24gYXhpcyxcclxuICogdGhlbiByZXR1cm5zIGl0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSBpbiByYWRpYW5zXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XG4gIHJhZCA9IHJhZCAqIDAuNTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICBvdXRbMF0gPSBzICogYXhpc1swXTtcbiAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdldHMgdGhlIHJvdGF0aW9uIGF4aXMgYW5kIGFuZ2xlIGZvciBhIGdpdmVuXHJcbiAqICBxdWF0ZXJuaW9uLiBJZiBhIHF1YXRlcm5pb24gaXMgY3JlYXRlZCB3aXRoXHJcbiAqICBzZXRBeGlzQW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lXHJcbiAqICB2YWx1ZXMgYXMgcHJvdmlkaWVkIGluIHRoZSBvcmlnaW5hbCBwYXJhbWV0ZXIgbGlzdFxyXG4gKiAgT1IgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdmFsdWVzLlxyXG4gKiBFeGFtcGxlOiBUaGUgcXVhdGVybmlvbiBmb3JtZWQgYnkgYXhpcyBbMCwgMCwgMV0gYW5kXHJcbiAqICBhbmdsZSAtOTAgaXMgdGhlIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gZm9ybWVkIGJ5XHJcbiAqICBbMCwgMCwgMV0gYW5kIDI3MC4gVGhpcyBtZXRob2QgZmF2b3JzIHRoZSBsYXR0ZXIuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dF9heGlzICBWZWN0b3IgcmVjZWl2aW5nIHRoZSBheGlzIG9mIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSAge1JlYWRvbmx5UXVhdH0gcSAgICAgUXVhdGVybmlvbiB0byBiZSBkZWNvbXBvc2VkXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgIEFuZ2xlLCBpbiByYWRpYW5zLCBvZiB0aGUgcm90YXRpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBeGlzQW5nbGUob3V0X2F4aXMsIHEpIHtcbiAgdmFyIHJhZCA9IE1hdGguYWNvcyhxWzNdKSAqIDIuMDtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQgLyAyLjApO1xuXG4gIGlmIChzID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIG91dF9heGlzWzBdID0gcVswXSAvIHM7XG4gICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcbiAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxuICAgIG91dF9heGlzWzBdID0gMTtcbiAgICBvdXRfYXhpc1sxXSA9IDA7XG4gICAgb3V0X2F4aXNbMl0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJhZDtcbn1cbi8qKlxyXG4gKiBHZXRzIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGJldHdlZW4gdHdvIHVuaXQgcXVhdGVybmlvbnNcclxuICpcclxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0fSBhICAgICBPcmlnaW4gdW5pdCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSAge1JlYWRvbmx5UXVhdH0gYiAgICAgRGVzdGluYXRpb24gdW5pdCBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgIEFuZ2xlLCBpbiByYWRpYW5zLCBiZXR3ZWVuIHRoZSB0d28gcXVhdGVybmlvbnNcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmdsZShhLCBiKSB7XG4gIHZhciBkb3Rwcm9kdWN0ID0gZG90KGEsIGIpO1xuICByZXR1cm4gTWF0aC5hY29zKDIgKiBkb3Rwcm9kdWN0ICogZG90cHJvZHVjdCAtIDEpO1xufVxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIGJ3ID0gYlszXTtcbiAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnggPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieDtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnkgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBheCAqIGJ3IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXkgKiBieTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFogYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnogPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXkgKiBiejtcbiAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXogKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBXIGNvbXBvbmVudCBvZiBhIHF1YXQgZnJvbSB0aGUgWCwgWSwgYW5kIFogY29tcG9uZW50cy5cclxuICogQXNzdW1lcyB0aGF0IHF1YXRlcm5pb24gaXMgMSB1bml0IGluIGxlbmd0aC5cclxuICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIFcgY29tcG9uZW50IG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVXKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSBNYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBleHBvbmVudGlhbCBvZiBhIHVuaXQgcXVhdGVybmlvbi5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIHRoZSBleHBvbmVudGlhbCBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciBldCA9IE1hdGguZXhwKHcpO1xuICB2YXIgcyA9IHIgPiAwID8gZXQgKiBNYXRoLnNpbihyKSAvIHIgOiAwO1xuICBvdXRbMF0gPSB4ICogcztcbiAgb3V0WzFdID0geSAqIHM7XG4gIG91dFsyXSA9IHogKiBzO1xuICBvdXRbM10gPSBldCAqIE1hdGguY29zKHIpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZSB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgYSB1bml0IHF1YXRlcm5pb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2ZcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxuKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciB0ID0gciA+IDAgPyBNYXRoLmF0YW4yKHIsIHcpIC8gciA6IDA7XG4gIG91dFswXSA9IHggKiB0O1xuICBvdXRbMV0gPSB5ICogdDtcbiAgb3V0WzJdID0geiAqIHQ7XG4gIG91dFszXSA9IDAuNSAqIE1hdGgubG9nKHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGUgdGhlIHNjYWxhciBwb3dlciBvZiBhIHVuaXQgcXVhdGVybmlvbi5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIHRoZSBleHBvbmVudGlhbCBvZlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHF1YXRlcm5pb24gYnlcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBvdyhvdXQsIGEsIGIpIHtcbiAgbG4ob3V0LCBhKTtcbiAgc2NhbGUob3V0LCBvdXQsIGIpO1xuICBleHAob3V0LCBvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgLy8gYmVuY2htYXJrczpcbiAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIGJ3ID0gYlszXTtcbiAgdmFyIG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxOyAvLyBjYWxjIGNvc2luZVxuXG4gIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidzsgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG5cbiAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgY29zb20gPSAtY29zb207XG4gICAgYnggPSAtYng7XG4gICAgYnkgPSAtYnk7XG4gICAgYnogPSAtYno7XG4gICAgYncgPSAtYnc7XG4gIH0gLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuXG5cbiAgaWYgKDEuMCAtIGNvc29tID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gIH0gZWxzZSB7XG4gICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgIHNjYWxlMSA9IHQ7XG4gIH0gLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuXG5cbiAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdW5pdCBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCkge1xuICAvLyBJbXBsZW1lbnRhdGlvbiBvZiBodHRwOi8vcGxhbm5pbmcuY3MudWl1Yy5lZHUvbm9kZTE5OC5odG1sXG4gIC8vIFRPRE86IENhbGxpbmcgcmFuZG9tIDMgdGltZXMgaXMgcHJvYmFibHkgbm90IHRoZSBmYXN0ZXN0IHNvbHV0aW9uXG4gIHZhciB1MSA9IGdsTWF0cml4LlJBTkRPTSgpO1xuICB2YXIgdTIgPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgdmFyIHUzID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gIHZhciBzcXJ0MU1pbnVzVTEgPSBNYXRoLnNxcnQoMSAtIHUxKTtcbiAgdmFyIHNxcnRVMSA9IE1hdGguc3FydCh1MSk7XG4gIG91dFswXSA9IHNxcnQxTWludXNVMSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiB1Mik7XG4gIG91dFsxXSA9IHNxcnQxTWludXNVMSAqIE1hdGguY29zKDIuMCAqIE1hdGguUEkgKiB1Mik7XG4gIG91dFsyXSA9IHNxcnRVMSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiB1Myk7XG4gIG91dFszXSA9IHNxcnRVMSAqIE1hdGguY29zKDIuMCAqIE1hdGguUEkgKiB1Myk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGRvdCA9IGEwICogYTAgKyBhMSAqIGExICsgYTIgKiBhMiArIGEzICogYTM7XG4gIHZhciBpbnZEb3QgPSBkb3QgPyAxLjAgLyBkb3QgOiAwOyAvLyBUT0RPOiBXb3VsZCBiZSBmYXN0ZXIgdG8gcmV0dXJuIFswLDAsMCwwXSBpbW1lZGlhdGVseSBpZiBkb3QgPT0gMFxuXG4gIG91dFswXSA9IC1hMCAqIGludkRvdDtcbiAgb3V0WzFdID0gLWExICogaW52RG90O1xuICBvdXRbMl0gPSAtYTIgKiBpbnZEb3Q7XG4gIG91dFszXSA9IGEzICogaW52RG90O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcclxuICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGNvbmp1Z2F0ZSBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXHJcbiAqXHJcbiAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXHJcbiAqIHRvIHJlbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHlvdXJzZWxmIHdoZXJlIG5lY2Vzc2FyeS5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBtIHJvdGF0aW9uIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQzKG91dCwgbSkge1xuICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cbiAgdmFyIGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTtcbiAgdmFyIGZSb290O1xuXG4gIGlmIChmVHJhY2UgPiAwLjApIHtcbiAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXG4gICAgZlJvb3QgPSBNYXRoLnNxcnQoZlRyYWNlICsgMS4wKTsgLy8gMndcblxuICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xuICAgIGZSb290ID0gMC41IC8gZlJvb3Q7IC8vIDEvKDR3KVxuXG4gICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xuICAgIG91dFsxXSA9IChtWzZdIC0gbVsyXSkgKiBmUm9vdDtcbiAgICBvdXRbMl0gPSAobVsxXSAtIG1bM10pICogZlJvb3Q7XG4gIH0gZWxzZSB7XG4gICAgLy8gfHd8IDw9IDEvMlxuICAgIHZhciBpID0gMDtcbiAgICBpZiAobVs0XSA+IG1bMF0pIGkgPSAxO1xuICAgIGlmIChtWzhdID4gbVtpICogMyArIGldKSBpID0gMjtcbiAgICB2YXIgaiA9IChpICsgMSkgJSAzO1xuICAgIHZhciBrID0gKGkgKyAyKSAlIDM7XG4gICAgZlJvb3QgPSBNYXRoLnNxcnQobVtpICogMyArIGldIC0gbVtqICogMyArIGpdIC0gbVtrICogMyArIGtdICsgMS4wKTtcbiAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICBmUm9vdCA9IDAuNSAvIGZSb290O1xuICAgIG91dFszXSA9IChtW2ogKiAzICsga10gLSBtW2sgKiAzICsgal0pICogZlJvb3Q7XG4gICAgb3V0W2pdID0gKG1baiAqIDMgKyBpXSArIG1baSAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICBvdXRba10gPSAobVtrICogMyArIGldICsgbVtpICogMyArIGtdKSAqIGZSb290O1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBldWxlciBhbmdsZSB4LCB5LCB6LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHt4fSBBbmdsZSB0byByb3RhdGUgYXJvdW5kIFggYXhpcyBpbiBkZWdyZWVzLlxyXG4gKiBAcGFyYW0ge3l9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWSBheGlzIGluIGRlZ3JlZXMuXHJcbiAqIEBwYXJhbSB7en0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBaIGF4aXMgaW4gZGVncmVlcy5cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXVsZXIob3V0LCB4LCB5LCB6KSB7XG4gIHZhciBoYWxmVG9SYWQgPSAwLjUgKiBNYXRoLlBJIC8gMTgwLjA7XG4gIHggKj0gaGFsZlRvUmFkO1xuICB5ICo9IGhhbGZUb1JhZDtcbiAgeiAqPSBoYWxmVG9SYWQ7XG4gIHZhciBzeCA9IE1hdGguc2luKHgpO1xuICB2YXIgY3ggPSBNYXRoLmNvcyh4KTtcbiAgdmFyIHN5ID0gTWF0aC5zaW4oeSk7XG4gIHZhciBjeSA9IE1hdGguY29zKHkpO1xuICB2YXIgc3ogPSBNYXRoLnNpbih6KTtcbiAgdmFyIGN6ID0gTWF0aC5jb3Moeik7XG4gIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcXVhdGVuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJxdWF0KFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdGVybmlvbiB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgY2xvbmUgPSB2ZWM0LmNsb25lO1xuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGZyb21WYWx1ZXMgPSB2ZWM0LmZyb21WYWx1ZXM7XG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGNvcHkgPSB2ZWM0LmNvcHk7XG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzZXQgPSB2ZWM0LnNldDtcbi8qKlxyXG4gKiBBZGRzIHR3byBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBhZGQgPSB2ZWM0LmFkZDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBTY2FsZXMgYSBxdWF0IGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNjYWxlID0gdmVjNC5zY2FsZTtcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBkb3QgPSB2ZWM0LmRvdDtcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbGVycCA9IHZlYzQubGVycDtcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgdmFyIGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5sZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3F1YXJlZExlbmd0aCA9IHZlYzQuc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcclxuICogTm9ybWFsaXplIGEgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbm9ybWFsaXplID0gdmVjNC5ub3JtYWxpemU7XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBUaGUgZmlyc3QgcXVhdGVybmlvbi5cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgVGhlIHNlY29uZCBxdWF0ZXJuaW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCB2YXIgZXhhY3RFcXVhbHMgPSB2ZWM0LmV4YWN0RXF1YWxzO1xuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHF1YXRlcm5pb25zIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IHZhciBlcXVhbHMgPSB2ZWM0LmVxdWFscztcbi8qKlxyXG4gKiBTZXRzIGEgcXVhdGVybmlvbiB0byByZXByZXNlbnQgdGhlIHNob3J0ZXN0IHJvdGF0aW9uIGZyb20gb25lXHJcbiAqIHZlY3RvciB0byBhbm90aGVyLlxyXG4gKlxyXG4gKiBCb3RoIHZlY3RvcnMgYXJlIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGguXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvbi5cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGluaXRpYWwgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBkZXN0aW5hdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IHZhciByb3RhdGlvblRvID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdG1wdmVjMyA9IHZlYzMuY3JlYXRlKCk7XG4gIHZhciB4VW5pdFZlYzMgPSB2ZWMzLmZyb21WYWx1ZXMoMSwgMCwgMCk7XG4gIHZhciB5VW5pdFZlYzMgPSB2ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMCk7XG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiKSB7XG4gICAgdmFyIGRvdCA9IHZlYzMuZG90KGEsIGIpO1xuXG4gICAgaWYgKGRvdCA8IC0wLjk5OTk5OSkge1xuICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCB4VW5pdFZlYzMsIGEpO1xuICAgICAgaWYgKHZlYzMubGVuKHRtcHZlYzMpIDwgMC4wMDAwMDEpIHZlYzMuY3Jvc3ModG1wdmVjMywgeVVuaXRWZWMzLCBhKTtcbiAgICAgIHZlYzMubm9ybWFsaXplKHRtcHZlYzMsIHRtcHZlYzMpO1xuICAgICAgc2V0QXhpc0FuZ2xlKG91dCwgdG1wdmVjMywgTWF0aC5QSSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0gZWxzZSBpZiAoZG90ID4gMC45OTk5OTkpIHtcbiAgICAgIG91dFswXSA9IDA7XG4gICAgICBvdXRbMV0gPSAwO1xuICAgICAgb3V0WzJdID0gMDtcbiAgICAgIG91dFszXSA9IDE7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIGEsIGIpO1xuICAgICAgb3V0WzBdID0gdG1wdmVjM1swXTtcbiAgICAgIG91dFsxXSA9IHRtcHZlYzNbMV07XG4gICAgICBvdXRbMl0gPSB0bXB2ZWMzWzJdO1xuICAgICAgb3V0WzNdID0gMSArIGRvdDtcbiAgICAgIHJldHVybiBub3JtYWxpemUob3V0LCBvdXQpO1xuICAgIH1cbiAgfTtcbn0oKTtcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCB2YXIgc3FsZXJwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGVtcDEgPSBjcmVhdGUoKTtcbiAgdmFyIHRlbXAyID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gICAgc2xlcnAodGVtcDEsIGEsIGQsIHQpO1xuICAgIHNsZXJwKHRlbXAyLCBiLCBjLCB0KTtcbiAgICBzbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTtcbiAgICByZXR1cm4gb3V0O1xuICB9O1xufSgpO1xuLyoqXHJcbiAqIFNldHMgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIHdpdGggdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuXHJcbiAqIGF4ZXMuIEVhY2ggYXhpcyBpcyBhIHZlYzMgYW5kIGlzIGV4cGVjdGVkIHRvIGJlIHVuaXQgbGVuZ3RoIGFuZFxyXG4gKiBwZXJwZW5kaWN1bGFyIHRvIGFsbCBvdGhlciBzcGVjaWZpZWQgYXhlcy5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHZpZXcgIHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSB2aWV3aW5nIGRpcmVjdGlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcmlnaHQgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwicmlnaHRcIiBkaXJlY3Rpb25cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHVwICAgIHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhbCBcInVwXCIgZGlyZWN0aW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCB2YXIgc2V0QXhlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XG4gICAgbWF0clswXSA9IHJpZ2h0WzBdO1xuICAgIG1hdHJbM10gPSByaWdodFsxXTtcbiAgICBtYXRyWzZdID0gcmlnaHRbMl07XG4gICAgbWF0clsxXSA9IHVwWzBdO1xuICAgIG1hdHJbNF0gPSB1cFsxXTtcbiAgICBtYXRyWzddID0gdXBbMl07XG4gICAgbWF0clsyXSA9IC12aWV3WzBdO1xuICAgIG1hdHJbNV0gPSAtdmlld1sxXTtcbiAgICBtYXRyWzhdID0gLXZpZXdbMl07XG4gICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpO1xuICB9O1xufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9xdWF0LmpzXCI7XG5pbXBvcnQgKiBhcyBtYXQ0IGZyb20gXCIuL21hdDQuanNcIjtcbi8qKlxyXG4gKiBEdWFsIFF1YXRlcm5pb248YnI+XHJcbiAqIEZvcm1hdDogW3JlYWwsIGR1YWxdPGJyPlxyXG4gKiBRdWF0ZXJuaW9uIGZvcm1hdDogWFlaVzxicj5cclxuICogTWFrZSBzdXJlIHRvIGhhdmUgbm9ybWFsaXplZCBkdWFsIHF1YXRlcm5pb25zLCBvdGhlcndpc2UgdGhlIGZ1bmN0aW9ucyBtYXkgbm90IHdvcmsgYXMgaW50ZW5kZWQuPGJyPlxyXG4gKiBAbW9kdWxlIHF1YXQyXHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBkdWFsIHF1YXRcclxuICpcclxuICogQHJldHVybnMge3F1YXQyfSBhIG5ldyBkdWFsIHF1YXRlcm5pb24gW3JlYWwgLT4gcm90YXRpb24sIGR1YWwgLT4gdHJhbnNsYXRpb25dXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBkcVswXSA9IDA7XG4gICAgZHFbMV0gPSAwO1xuICAgIGRxWzJdID0gMDtcbiAgICBkcVs0XSA9IDA7XG4gICAgZHFbNV0gPSAwO1xuICAgIGRxWzZdID0gMDtcbiAgICBkcVs3XSA9IDA7XG4gIH1cblxuICBkcVszXSA9IDE7XG4gIHJldHVybiBkcTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gY2xvbmVcclxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIGRxID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOCk7XG4gIGRxWzBdID0gYVswXTtcbiAgZHFbMV0gPSBhWzFdO1xuICBkcVsyXSA9IGFbMl07XG4gIGRxWzNdID0gYVszXTtcbiAgZHFbNF0gPSBhWzRdO1xuICBkcVs1XSA9IGFbNV07XG4gIGRxWzZdID0gYVs2XTtcbiAgZHFbN10gPSBhWzddO1xuICByZXR1cm4gZHE7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xuICBkcVswXSA9IHgxO1xuICBkcVsxXSA9IHkxO1xuICBkcVsyXSA9IHoxO1xuICBkcVszXSA9IHcxO1xuICBkcVs0XSA9IHgyO1xuICBkcVs1XSA9IHkyO1xuICBkcVs2XSA9IHoyO1xuICBkcVs3XSA9IHcyO1xuICByZXR1cm4gZHE7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gdmFsdWVzIChxdWF0IGFuZCB0cmFuc2xhdGlvbilcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gejEgWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBYIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MiBZIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gbmV3IGR1YWwgcXVhdGVybmlvblxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblZhbHVlcyh4MSwgeTEsIHoxLCB3MSwgeDIsIHkyLCB6Mikge1xuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcbiAgZHFbMF0gPSB4MTtcbiAgZHFbMV0gPSB5MTtcbiAgZHFbMl0gPSB6MTtcbiAgZHFbM10gPSB3MTtcbiAgdmFyIGF4ID0geDIgKiAwLjUsXG4gICAgICBheSA9IHkyICogMC41LFxuICAgICAgYXogPSB6MiAqIDAuNTtcbiAgZHFbNF0gPSBheCAqIHcxICsgYXkgKiB6MSAtIGF6ICogeTE7XG4gIGRxWzVdID0gYXkgKiB3MSArIGF6ICogeDEgLSBheCAqIHoxO1xuICBkcVs2XSA9IGF6ICogdzEgKyBheCAqIHkxIC0gYXkgKiB4MTtcbiAgZHFbN10gPSAtYXggKiB4MSAtIGF5ICogeTEgLSBheiAqIHoxO1xuICByZXR1cm4gZHE7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIGR1YWwgcXVhdCBmcm9tIGEgcXVhdGVybmlvbiBhbmQgYSB0cmFuc2xhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBhIG5vcm1hbGl6ZWQgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdCB0cmFubGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHQpIHtcbiAgdmFyIGF4ID0gdFswXSAqIDAuNSxcbiAgICAgIGF5ID0gdFsxXSAqIDAuNSxcbiAgICAgIGF6ID0gdFsyXSAqIDAuNSxcbiAgICAgIGJ4ID0gcVswXSxcbiAgICAgIGJ5ID0gcVsxXSxcbiAgICAgIGJ6ID0gcVsyXSxcbiAgICAgIGJ3ID0gcVszXTtcbiAgb3V0WzBdID0gYng7XG4gIG91dFsxXSA9IGJ5O1xuICBvdXRbMl0gPSBiejtcbiAgb3V0WzNdID0gYnc7XG4gIG91dFs0XSA9IGF4ICogYncgKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzVdID0gYXkgKiBidyArIGF6ICogYnggLSBheCAqIGJ6O1xuICBvdXRbNl0gPSBheiAqIGJ3ICsgYXggKiBieSAtIGF5ICogYng7XG4gIG91dFs3XSA9IC1heCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIGR1YWwgcXVhdCBmcm9tIGEgdHJhbnNsYXRpb25cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHQgdHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHQpIHtcbiAgb3V0WzBdID0gMDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMTtcbiAgb3V0WzRdID0gdFswXSAqIDAuNTtcbiAgb3V0WzVdID0gdFsxXSAqIDAuNTtcbiAgb3V0WzZdID0gdFsyXSAqIDAuNTtcbiAgb3V0WzddID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHRoZSBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHEpIHtcbiAgb3V0WzBdID0gcVswXTtcbiAgb3V0WzFdID0gcVsxXTtcbiAgb3V0WzJdID0gcVsyXTtcbiAgb3V0WzNdID0gcVszXTtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGR1YWwgcXVhdCBmcm9tIGEgbWF0cml4ICg0eDQpXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXhcclxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XG4gIC8vVE9ETyBPcHRpbWl6ZSB0aGlzXG4gIHZhciBvdXRlciA9IHF1YXQuY3JlYXRlKCk7XG4gIG1hdDQuZ2V0Um90YXRpb24ob3V0ZXIsIGEpO1xuICB2YXIgdCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICBtYXQ0LmdldFRyYW5zbGF0aW9uKHQsIGEpO1xuICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIG91dGVyLCB0KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgZHVhbCBxdWF0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgc291cmNlIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCBhIGR1YWwgcXVhdCB0byB0aGUgaWRlbnRpdHkgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMTtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XG4gIG91dFswXSA9IHgxO1xuICBvdXRbMV0gPSB5MTtcbiAgb3V0WzJdID0gejE7XG4gIG91dFszXSA9IHcxO1xuICBvdXRbNF0gPSB4MjtcbiAgb3V0WzVdID0geTI7XG4gIG91dFs2XSA9IHoyO1xuICBvdXRbN10gPSB3MjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBHZXRzIHRoZSByZWFsIHBhcnQgb2YgYSBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7cXVhdH0gb3V0IHJlYWwgcGFydFxyXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJuIHtxdWF0fSByZWFsIHBhcnRcclxuICovXG5cbmV4cG9ydCB2YXIgZ2V0UmVhbCA9IHF1YXQuY29weTtcbi8qKlxyXG4gKiBHZXRzIHRoZSBkdWFsIHBhcnQgb2YgYSBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7cXVhdH0gb3V0IGR1YWwgcGFydFxyXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJuIHtxdWF0fSBkdWFsIHBhcnRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREdWFsKG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzRdO1xuICBvdXRbMV0gPSBhWzVdO1xuICBvdXRbMl0gPSBhWzZdO1xuICBvdXRbM10gPSBhWzddO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgcmVhbCBjb21wb25lbnQgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByZWFsIHBhcnRcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNldFJlYWwgPSBxdWF0LmNvcHk7XG4vKipcclxuICogU2V0IHRoZSBkdWFsIGNvbXBvbmVudCBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIGR1YWwgcGFydFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREdWFsKG91dCwgcSkge1xuICBvdXRbNF0gPSBxWzBdO1xuICBvdXRbNV0gPSBxWzFdO1xuICBvdXRbNl0gPSBxWzJdO1xuICBvdXRbN10gPSBxWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIG9mIGEgbm9ybWFsaXplZCBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7dmVjM30gb3V0IHRyYW5zbGF0aW9uXHJcbiAqIEBwYXJhbSAge1JlYWRvbmx5UXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uIHRvIGJlIGRlY29tcG9zZWRcclxuICogQHJldHVybiB7dmVjM30gdHJhbnNsYXRpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIGEpIHtcbiAgdmFyIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XSxcbiAgICAgIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXTtcbiAgb3V0WzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMjtcbiAgb3V0WzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcbiAgb3V0WzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2xhdGVzIGEgZHVhbCBxdWF0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHRyYW5zbGF0ZVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYXgxID0gYVswXSxcbiAgICAgIGF5MSA9IGFbMV0sXG4gICAgICBhejEgPSBhWzJdLFxuICAgICAgYXcxID0gYVszXSxcbiAgICAgIGJ4MSA9IHZbMF0gKiAwLjUsXG4gICAgICBieTEgPSB2WzFdICogMC41LFxuICAgICAgYnoxID0gdlsyXSAqIDAuNSxcbiAgICAgIGF4MiA9IGFbNF0sXG4gICAgICBheTIgPSBhWzVdLFxuICAgICAgYXoyID0gYVs2XSxcbiAgICAgIGF3MiA9IGFbN107XG4gIG91dFswXSA9IGF4MTtcbiAgb3V0WzFdID0gYXkxO1xuICBvdXRbMl0gPSBhejE7XG4gIG91dFszXSA9IGF3MTtcbiAgb3V0WzRdID0gYXcxICogYngxICsgYXkxICogYnoxIC0gYXoxICogYnkxICsgYXgyO1xuICBvdXRbNV0gPSBhdzEgKiBieTEgKyBhejEgKiBieDEgLSBheDEgKiBiejEgKyBheTI7XG4gIG91dFs2XSA9IGF3MSAqIGJ6MSArIGF4MSAqIGJ5MSAtIGF5MSAqIGJ4MSArIGF6MjtcbiAgb3V0WzddID0gLWF4MSAqIGJ4MSAtIGF5MSAqIGJ5MSAtIGF6MSAqIGJ6MSArIGF3MjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGFyb3VuZCB0aGUgWCBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIHZhciBieCA9IC1hWzBdLFxuICAgICAgYnkgPSAtYVsxXSxcbiAgICAgIGJ6ID0gLWFbMl0sXG4gICAgICBidyA9IGFbM10sXG4gICAgICBheCA9IGFbNF0sXG4gICAgICBheSA9IGFbNV0sXG4gICAgICBheiA9IGFbNl0sXG4gICAgICBhdyA9IGFbN10sXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxuICAgICAgYXkxID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieixcbiAgICAgIGF6MSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngsXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICBxdWF0LnJvdGF0ZVgob3V0LCBhLCByYWQpO1xuICBieCA9IG91dFswXTtcbiAgYnkgPSBvdXRbMV07XG4gIGJ6ID0gb3V0WzJdO1xuICBidyA9IG91dFszXTtcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XG4gIG91dFs1XSA9IGF5MSAqIGJ3ICsgYXcxICogYnkgKyBhejEgKiBieCAtIGF4MSAqIGJ6O1xuICBvdXRbNl0gPSBhejEgKiBidyArIGF3MSAqIGJ6ICsgYXgxICogYnkgLSBheTEgKiBieDtcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgdGhlIFkgYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgaG93IGZhciBzaG91bGQgdGhlIHJvdGF0aW9uIGJlXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICB2YXIgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdLFxuICAgICAgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddLFxuICAgICAgYXgxID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSxcbiAgICAgIGF5MSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnosXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxuICAgICAgYXcxID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcXVhdC5yb3RhdGVZKG91dCwgYSwgcmFkKTtcbiAgYnggPSBvdXRbMF07XG4gIGJ5ID0gb3V0WzFdO1xuICBieiA9IG91dFsyXTtcbiAgYncgPSBvdXRbM107XG4gIG91dFs0XSA9IGF4MSAqIGJ3ICsgYXcxICogYnggKyBheTEgKiBieiAtIGF6MSAqIGJ5O1xuICBvdXRbNV0gPSBheTEgKiBidyArIGF3MSAqIGJ5ICsgYXoxICogYnggLSBheDEgKiBiejtcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XG4gIG91dFs3XSA9IGF3MSAqIGJ3IC0gYXgxICogYnggLSBheTEgKiBieSAtIGF6MSAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBaIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGhvdyBmYXIgc2hvdWxkIHRoZSByb3RhdGlvbiBiZVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XSxcbiAgICAgIGF4MSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnksXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxuICAgICAgYXoxID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcbiAgICAgIGF3MSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHF1YXQucm90YXRlWihvdXQsIGEsIHJhZCk7XG4gIGJ4ID0gb3V0WzBdO1xuICBieSA9IG91dFsxXTtcbiAgYnogPSBvdXRbMl07XG4gIGJ3ID0gb3V0WzNdO1xuICBvdXRbNF0gPSBheDEgKiBidyArIGF3MSAqIGJ4ICsgYXkxICogYnogLSBhejEgKiBieTtcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XG4gIG91dFs2XSA9IGF6MSAqIGJ3ICsgYXcxICogYnogKyBheDEgKiBieSAtIGF5MSAqIGJ4O1xuICBvdXRbN10gPSBhdzEgKiBidyAtIGF4MSAqIGJ4IC0gYXkxICogYnkgLSBhejEgKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGJ5IGEgZ2l2ZW4gcXVhdGVybmlvbiAoYSAqIHEpXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byByb3RhdGUgYnlcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVCeVF1YXRBcHBlbmQob3V0LCBhLCBxKSB7XG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM10sXG4gICAgICBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIG91dFswXSA9IGF4ICogcXcgKyBhdyAqIHF4ICsgYXkgKiBxeiAtIGF6ICogcXk7XG4gIG91dFsxXSA9IGF5ICogcXcgKyBhdyAqIHF5ICsgYXogKiBxeCAtIGF4ICogcXo7XG4gIG91dFsyXSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XG4gIG91dFszXSA9IGF3ICogcXcgLSBheCAqIHF4IC0gYXkgKiBxeSAtIGF6ICogcXo7XG4gIGF4ID0gYVs0XTtcbiAgYXkgPSBhWzVdO1xuICBheiA9IGFbNl07XG4gIGF3ID0gYVs3XTtcbiAgb3V0WzRdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcbiAgb3V0WzVdID0gYXkgKiBxdyArIGF3ICogcXkgKyBheiAqIHF4IC0gYXggKiBxejtcbiAgb3V0WzZdID0gYXogKiBxdyArIGF3ICogcXogKyBheCAqIHF5IC0gYXkgKiBxeDtcbiAgb3V0WzddID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGJ5IGEgZ2l2ZW4gcXVhdGVybmlvbiAocSAqIGEpXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHJvdGF0ZSBieVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVCeVF1YXRQcmVwZW5kKG91dCwgcSwgYSkge1xuICB2YXIgcXggPSBxWzBdLFxuICAgICAgcXkgPSBxWzFdLFxuICAgICAgcXogPSBxWzJdLFxuICAgICAgcXcgPSBxWzNdLFxuICAgICAgYnggPSBhWzBdLFxuICAgICAgYnkgPSBhWzFdLFxuICAgICAgYnogPSBhWzJdLFxuICAgICAgYncgPSBhWzNdO1xuICBvdXRbMF0gPSBxeCAqIGJ3ICsgcXcgKiBieCArIHF5ICogYnogLSBxeiAqIGJ5O1xuICBvdXRbMV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xuICBvdXRbMl0gPSBxeiAqIGJ3ICsgcXcgKiBieiArIHF4ICogYnkgLSBxeSAqIGJ4O1xuICBvdXRbM10gPSBxdyAqIGJ3IC0gcXggKiBieCAtIHF5ICogYnkgLSBxeiAqIGJ6O1xuICBieCA9IGFbNF07XG4gIGJ5ID0gYVs1XTtcbiAgYnogPSBhWzZdO1xuICBidyA9IGFbN107XG4gIG91dFs0XSA9IHF4ICogYncgKyBxdyAqIGJ4ICsgcXkgKiBieiAtIHF6ICogYnk7XG4gIG91dFs1XSA9IHF5ICogYncgKyBxdyAqIGJ5ICsgcXogKiBieCAtIHF4ICogYno7XG4gIG91dFs2XSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XG4gIG91dFs3XSA9IHF3ICogYncgLSBxeCAqIGJ4IC0gcXkgKiBieSAtIHF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgYSBnaXZlbiBheGlzLiBEb2VzIHRoZSBub3JtYWxpc2F0aW9uIGF1dG9tYXRpY2FsbHlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgaG93IGZhciB0aGUgcm90YXRpb24gc2hvdWxkIGJlXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQXJvdW5kQXhpcyhvdXQsIGEsIGF4aXMsIHJhZCkge1xuICAvL1NwZWNpYWwgY2FzZSBmb3IgcmFkID0gMFxuICBpZiAoTWF0aC5hYnMocmFkKSA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gY29weShvdXQsIGEpO1xuICB9XG5cbiAgdmFyIGF4aXNMZW5ndGggPSBNYXRoLmh5cG90KGF4aXNbMF0sIGF4aXNbMV0sIGF4aXNbMl0pO1xuICByYWQgPSByYWQgKiAwLjU7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGJ4ID0gcyAqIGF4aXNbMF0gLyBheGlzTGVuZ3RoO1xuICB2YXIgYnkgPSBzICogYXhpc1sxXSAvIGF4aXNMZW5ndGg7XG4gIHZhciBieiA9IHMgKiBheGlzWzJdIC8gYXhpc0xlbmd0aDtcbiAgdmFyIGJ3ID0gTWF0aC5jb3MocmFkKTtcbiAgdmFyIGF4MSA9IGFbMF0sXG4gICAgICBheTEgPSBhWzFdLFxuICAgICAgYXoxID0gYVsyXSxcbiAgICAgIGF3MSA9IGFbM107XG4gIG91dFswXSA9IGF4MSAqIGJ3ICsgYXcxICogYnggKyBheTEgKiBieiAtIGF6MSAqIGJ5O1xuICBvdXRbMV0gPSBheTEgKiBidyArIGF3MSAqIGJ5ICsgYXoxICogYnggLSBheDEgKiBiejtcbiAgb3V0WzJdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XG4gIG91dFszXSA9IGF3MSAqIGJ3IC0gYXgxICogYnggLSBheTEgKiBieSAtIGF6MSAqIGJ6O1xuICB2YXIgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddO1xuICBvdXRbNF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbNV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xuICBvdXRbNl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICBvdXRbN10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIGR1YWwgcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBkdWFsIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGF4MCA9IGFbMF0sXG4gICAgICBheTAgPSBhWzFdLFxuICAgICAgYXowID0gYVsyXSxcbiAgICAgIGF3MCA9IGFbM10sXG4gICAgICBieDEgPSBiWzRdLFxuICAgICAgYnkxID0gYls1XSxcbiAgICAgIGJ6MSA9IGJbNl0sXG4gICAgICBidzEgPSBiWzddLFxuICAgICAgYXgxID0gYVs0XSxcbiAgICAgIGF5MSA9IGFbNV0sXG4gICAgICBhejEgPSBhWzZdLFxuICAgICAgYXcxID0gYVs3XSxcbiAgICAgIGJ4MCA9IGJbMF0sXG4gICAgICBieTAgPSBiWzFdLFxuICAgICAgYnowID0gYlsyXSxcbiAgICAgIGJ3MCA9IGJbM107XG4gIG91dFswXSA9IGF4MCAqIGJ3MCArIGF3MCAqIGJ4MCArIGF5MCAqIGJ6MCAtIGF6MCAqIGJ5MDtcbiAgb3V0WzFdID0gYXkwICogYncwICsgYXcwICogYnkwICsgYXowICogYngwIC0gYXgwICogYnowO1xuICBvdXRbMl0gPSBhejAgKiBidzAgKyBhdzAgKiBiejAgKyBheDAgKiBieTAgLSBheTAgKiBieDA7XG4gIG91dFszXSA9IGF3MCAqIGJ3MCAtIGF4MCAqIGJ4MCAtIGF5MCAqIGJ5MCAtIGF6MCAqIGJ6MDtcbiAgb3V0WzRdID0gYXgwICogYncxICsgYXcwICogYngxICsgYXkwICogYnoxIC0gYXowICogYnkxICsgYXgxICogYncwICsgYXcxICogYngwICsgYXkxICogYnowIC0gYXoxICogYnkwO1xuICBvdXRbNV0gPSBheTAgKiBidzEgKyBhdzAgKiBieTEgKyBhejAgKiBieDEgLSBheDAgKiBiejEgKyBheTEgKiBidzAgKyBhdzEgKiBieTAgKyBhejEgKiBieDAgLSBheDEgKiBiejA7XG4gIG91dFs2XSA9IGF6MCAqIGJ3MSArIGF3MCAqIGJ6MSArIGF4MCAqIGJ5MSAtIGF5MCAqIGJ4MSArIGF6MSAqIGJ3MCArIGF3MSAqIGJ6MCArIGF4MSAqIGJ5MCAtIGF5MSAqIGJ4MDtcbiAgb3V0WzddID0gYXcwICogYncxIC0gYXgwICogYngxIC0gYXkwICogYnkxIC0gYXowICogYnoxICsgYXcxICogYncwIC0gYXgxICogYngwIC0gYXkxICogYnkwIC0gYXoxICogYnowO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBTY2FsZXMgYSBkdWFsIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIGR1YWwgcXVhdCBieVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBkdWFsIHF1YXQncyAoVGhlIGRvdCBwcm9kdWN0IG9mIHRoZSByZWFsIHBhcnRzKVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBkb3QgPSBxdWF0LmRvdDtcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIGR1YWwgcXVhdHMnc1xyXG4gKiBOT1RFOiBUaGUgcmVzdWx0aW5nIGR1YWwgcXVhdGVybmlvbnMgd29uJ3QgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgKFRoZSBlcnJvciBpcyBtb3N0IG5vdGljZWFibGUgd2hlbiB0ID0gMC41KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBtdCA9IDEgLSB0O1xuICBpZiAoZG90KGEsIGIpIDwgMCkgdCA9IC10O1xuICBvdXRbMF0gPSBhWzBdICogbXQgKyBiWzBdICogdDtcbiAgb3V0WzFdID0gYVsxXSAqIG10ICsgYlsxXSAqIHQ7XG4gIG91dFsyXSA9IGFbMl0gKiBtdCArIGJbMl0gKiB0O1xuICBvdXRbM10gPSBhWzNdICogbXQgKyBiWzNdICogdDtcbiAgb3V0WzRdID0gYVs0XSAqIG10ICsgYls0XSAqIHQ7XG4gIG91dFs1XSA9IGFbNV0gKiBtdCArIGJbNV0gKiB0O1xuICBvdXRbNl0gPSBhWzZdICogbXQgKyBiWzZdICogdDtcbiAgb3V0WzddID0gYVs3XSAqIG10ICsgYls3XSAqIHQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIGR1YWwgcXVhdC4gSWYgdGhleSBhcmUgbm9ybWFsaXplZCwgY29uanVnYXRlIGlzIGNoZWFwZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIHZhciBzcWxlbiA9IHNxdWFyZWRMZW5ndGgoYSk7XG4gIG91dFswXSA9IC1hWzBdIC8gc3FsZW47XG4gIG91dFsxXSA9IC1hWzFdIC8gc3FsZW47XG4gIG91dFsyXSA9IC1hWzJdIC8gc3FsZW47XG4gIG91dFszXSA9IGFbM10gLyBzcWxlbjtcbiAgb3V0WzRdID0gLWFbNF0gLyBzcWxlbjtcbiAgb3V0WzVdID0gLWFbNV0gLyBzcWxlbjtcbiAgb3V0WzZdID0gLWFbNl0gLyBzcWxlbjtcbiAgb3V0WzddID0gYVs3XSAvIHNxbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIGR1YWwgcXVhdFxyXG4gKiBJZiB0aGUgZHVhbCBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdDIuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IC1hWzRdO1xuICBvdXRbNV0gPSAtYVs1XTtcbiAgb3V0WzZdID0gLWFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXQgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbGVuZ3RoID0gcXVhdC5sZW5ndGg7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Mi5sZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBkdWFsIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3F1YXJlZExlbmd0aCA9IHF1YXQuc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQyLnNxdWFyZWRMZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIGR1YWwgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgbWFnbml0dWRlID0gc3F1YXJlZExlbmd0aChhKTtcblxuICBpZiAobWFnbml0dWRlID4gMCkge1xuICAgIG1hZ25pdHVkZSA9IE1hdGguc3FydChtYWduaXR1ZGUpO1xuICAgIHZhciBhMCA9IGFbMF0gLyBtYWduaXR1ZGU7XG4gICAgdmFyIGExID0gYVsxXSAvIG1hZ25pdHVkZTtcbiAgICB2YXIgYTIgPSBhWzJdIC8gbWFnbml0dWRlO1xuICAgIHZhciBhMyA9IGFbM10gLyBtYWduaXR1ZGU7XG4gICAgdmFyIGIwID0gYVs0XTtcbiAgICB2YXIgYjEgPSBhWzVdO1xuICAgIHZhciBiMiA9IGFbNl07XG4gICAgdmFyIGIzID0gYVs3XTtcbiAgICB2YXIgYV9kb3RfYiA9IGEwICogYjAgKyBhMSAqIGIxICsgYTIgKiBiMiArIGEzICogYjM7XG4gICAgb3V0WzBdID0gYTA7XG4gICAgb3V0WzFdID0gYTE7XG4gICAgb3V0WzJdID0gYTI7XG4gICAgb3V0WzNdID0gYTM7XG4gICAgb3V0WzRdID0gKGIwIC0gYTAgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcbiAgICBvdXRbNV0gPSAoYjEgLSBhMSAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xuICAgIG91dFs2XSA9IChiMiAtIGEyICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XG4gICAgb3V0WzddID0gKGIzIC0gYTMgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGR1YWwgcXVhdGVuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZHVhbCBxdWF0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwicXVhdDIoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIiwgXCIgKyBhWzZdICsgXCIsIFwiICsgYVs3XSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGR1YWwgcXVhdGVybmlvbnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IGR1YWwgcXVhdGVybmlvbi5cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN107XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGIgdGhlIHNlY29uZCBkdWFsIHF1YXQuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN107XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN107XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpO1xufSIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXHJcbiAqIDIgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAqIEBtb2R1bGUgdmVjMlxyXG4gKi9cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzJcclxuICpcclxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMiB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSkge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIERpdmlkZXMgdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJvdW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTY2FsZXMgYSB2ZWMyIGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzIncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5KTtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgIHkgPSBiWzFdIC0gYVsxXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5KTtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxyXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IGFbMF0gKiBsZW47XG4gIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xufVxuLyoqXHJcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcclxuICogTm90ZSB0aGF0IHRoZSBjcm9zcyBwcm9kdWN0IG11c3QgYnkgZGVmaW5pdGlvbiBwcm9kdWNlIGEgM0QgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIHZhciB6ID0gYVswXSAqIGJbMV0gLSBhWzFdICogYlswXTtcbiAgb3V0WzBdID0gb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xuICBzY2FsZSA9IHNjYWxlIHx8IDEuMDtcbiAgdmFyIHIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XG4gIG91dFswXSA9IE1hdGguY29zKHIpICogc2NhbGU7XG4gIG91dFsxXSA9IE1hdGguc2luKHIpICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDIob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bMl0gKiB5O1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDJkKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDNcclxuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs0XSAqIHkgKyBtWzddO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcclxuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMCdcclxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bMTJdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVsxM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlIGEgMkQgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IFRoZSByZWNlaXZpbmcgdmVjMlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgdmVjMiBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgcmFkKSB7XG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgdmFyIHAwID0gYVswXSAtIGJbMF0sXG4gICAgICBwMSA9IGFbMV0gLSBiWzFdLFxuICAgICAgc2luQyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjb3NDID0gTWF0aC5jb3MocmFkKTsgLy9wZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHAwICogY29zQyAtIHAxICogc2luQyArIGJbMF07XG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAyRCB2ZWN0b3JzXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgdmFyIHgxID0gYVswXSxcbiAgICAgIHkxID0gYVsxXSxcbiAgICAgIHgyID0gYlswXSxcbiAgICAgIHkyID0gYlsxXSxcbiAgICAgIC8vIG1hZyBpcyB0aGUgcHJvZHVjdCBvZiB0aGUgbWFnbml0dWRlcyBvZiBhIGFuZCBiXG4gIG1hZyA9IE1hdGguc3FydCh4MSAqIHgxICsgeTEgKiB5MSkgKiBNYXRoLnNxcnQoeDIgKiB4MiArIHkyICogeTIpLFxuICAgICAgLy8gbWFnICYmLi4gc2hvcnQgY2lyY3VpdHMgaWYgbWFnID09IDBcbiAgY29zaW5lID0gbWFnICYmICh4MSAqIHgyICsgeTEgKiB5MikgLyBtYWc7IC8vIE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSBjbGFtcHMgdGhlIGNvc2luZSBiZXR3ZWVuIC0xIGFuZCAxXG5cbiAgcmV0dXJuIE1hdGguYWNvcyhNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkpO1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gemVyb1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gemVybyhvdXQpIHtcbiAgb3V0WzBdID0gMC4wO1xuICBvdXRbMV0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIpXCI7XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBleGFjdGx5IGhhdmUgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKTtcbn1cbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXZpZGV9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmRpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkRGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjMnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjMi4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICogQHJldHVybnMge0FycmF5fSBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMjtcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgYVtpXSA9IHZlY1swXTtcbiAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9oZWxwZXJzL3N0SGVscGVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9pbnRlcmZhY2VzL3N0SW50ZXJmYWNlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9pbnRlcmZhY2VzL3N0RGVidWdDb25zb2xlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3V0aWxzL3N0VXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NyYy9leHRlcm5hbC1saWJzL2Jhc2U2NC1iaW5hcnlcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuQ29weXJpZ2h0IChjKSAyMDExLCBEYW5pZWwgR3VlcnJlcm9cbkFsbCByaWdodHMgcmVzZXJ2ZWQuXG5SZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbm1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG5BTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgREFOSUVMIEdVRVJSRVJPIEJFIExJQUJMRSBGT1IgQU5ZXG5ESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG5PTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcblNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2U2NEJpbmFyeSA9IHZvaWQgMDtcbi8qKlxuICogVXNlcyB0aGUgbmV3IGFycmF5IHR5cGVkIGluIGphdmFzY3JpcHQgdG8gYmluYXJ5IGJhc2U2NCBlbmNvZGUvZGVjb2RlXG4gKiBhdCB0aGUgbW9tZW50IGp1c3QgZGVjb2RlcyBhIGJpbmFyeSBiYXNlNjQgZW5jb2RlZFxuICogaW50byBlaXRoZXIgYW4gQXJyYXlCdWZmZXIgKGRlY29kZUFycmF5QnVmZmVyKVxuICogb3IgaW50byBhbiBVaW50OEFycmF5IChkZWNvZGUpXG4gKlxuICogUmVmZXJlbmNlczpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHRfdHlwZWRfYXJyYXlzL0FycmF5QnVmZmVyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0X3R5cGVkX2FycmF5cy9VaW50OEFycmF5XG4gKi9cbmNsYXNzIEJhc2U2NEJpbmFyeSB7XG4gICAgLyogd2lsbCByZXR1cm4gYSAgVWludDhBcnJheSB0eXBlICovXG4gICAgc3RhdGljIGRlY29kZUFycmF5QnVmZmVyKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gKGlucHV0Lmxlbmd0aCAvIDQpICogMztcbiAgICAgICAgY29uc3QgYWIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZXMpO1xuICAgICAgICB0aGlzLmRlY29kZShpbnB1dCwgYWIpO1xuICAgICAgICByZXR1cm4gYWI7XG4gICAgfVxuICAgIHN0YXRpYyByZW1vdmVQYWRkaW5nQ2hhcnMoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgbGtleSA9IEJhc2U2NEJpbmFyeS5fa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGlucHV0Lmxlbmd0aCAtIDEpKTtcbiAgICAgICAgaWYgKGxrZXkgPT0gNjQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcoMCwgaW5wdXQubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBzdGF0aWMgZGVjb2RlKGlucHV0LCBhcnJheUJ1ZmZlcikge1xuICAgICAgICAvL2dldCBsYXN0IGNoYXJzIHRvIHNlZSBpZiBhcmUgdmFsaWRcbiAgICAgICAgaW5wdXQgPSB0aGlzLnJlbW92ZVBhZGRpbmdDaGFycyhpbnB1dCk7XG4gICAgICAgIGlucHV0ID0gdGhpcy5yZW1vdmVQYWRkaW5nQ2hhcnMoaW5wdXQpO1xuICAgICAgICBjb25zdCBieXRlcyA9IHBhcnNlSW50KCgoaW5wdXQubGVuZ3RoIC8gNCkgKiAzKS50b1N0cmluZygpLCAxMCk7XG4gICAgICAgIGxldCB1YXJyYXk7XG4gICAgICAgIGxldCBjaHIxLCBjaHIyLCBjaHIzO1xuICAgICAgICBsZXQgZW5jMSwgZW5jMiwgZW5jMywgZW5jNDtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIGlmIChhcnJheUJ1ZmZlcilcbiAgICAgICAgICAgIHVhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdWFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJ5dGVzOyBpICs9IDMpIHtcbiAgICAgICAgICAgIC8vZ2V0IHRoZSAzIG9jdGVjdHMgaW4gNCBhc2NpaSBjaGFyc1xuICAgICAgICAgICAgZW5jMSA9IEJhc2U2NEJpbmFyeS5fa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGorKykpO1xuICAgICAgICAgICAgZW5jMiA9IEJhc2U2NEJpbmFyeS5fa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGorKykpO1xuICAgICAgICAgICAgZW5jMyA9IEJhc2U2NEJpbmFyeS5fa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGorKykpO1xuICAgICAgICAgICAgZW5jNCA9IEJhc2U2NEJpbmFyeS5fa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGorKykpO1xuICAgICAgICAgICAgY2hyMSA9IChlbmMxIDw8IDIpIHwgKGVuYzIgPj4gNCk7XG4gICAgICAgICAgICBjaHIyID0gKChlbmMyICYgMTUpIDw8IDQpIHwgKGVuYzMgPj4gMik7XG4gICAgICAgICAgICBjaHIzID0gKChlbmMzICYgMykgPDwgNikgfCBlbmM0O1xuICAgICAgICAgICAgdWFycmF5W2ldID0gY2hyMTtcbiAgICAgICAgICAgIGlmIChlbmMzICE9IDY0KVxuICAgICAgICAgICAgICAgIHVhcnJheVtpICsgMV0gPSBjaHIyO1xuICAgICAgICAgICAgaWYgKGVuYzQgIT0gNjQpXG4gICAgICAgICAgICAgICAgdWFycmF5W2kgKyAyXSA9IGNocjM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVhcnJheTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2U2NEJpbmFyeSA9IEJhc2U2NEJpbmFyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC1iaW5hcnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNURW51bUhUVFBFcnJvckNvZGUgPSB2b2lkIDA7XG52YXIgU1RFbnVtSFRUUEVycm9yQ29kZTtcbihmdW5jdGlvbiAoU1RFbnVtSFRUUEVycm9yQ29kZSkge1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIk9rXCJdID0gMjAwXSA9IFwiT2tcIjtcbiAgICBTVEVudW1IVFRQRXJyb3JDb2RlW1NURW51bUhUVFBFcnJvckNvZGVbXCJDcmVhdGVkXCJdID0gMjAxXSA9IFwiQ3JlYXRlZFwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIk11bHRpcGxlQ2hvaWNlc1wiXSA9IDMwMF0gPSBcIk11bHRpcGxlQ2hvaWNlc1wiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIk5vdE1vZGlmaWVkXCJdID0gMzA0XSA9IFwiTm90TW9kaWZpZWRcIjtcbiAgICBTVEVudW1IVFRQRXJyb3JDb2RlW1NURW51bUhUVFBFcnJvckNvZGVbXCJCYWRSZXF1ZXN0XCJdID0gNDAwXSA9IFwiQmFkUmVxdWVzdFwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIlVuYXV0aG9yaXplZFwiXSA9IDQwMV0gPSBcIlVuYXV0aG9yaXplZFwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIkZvcmJpZGRlblwiXSA9IDQwM10gPSBcIkZvcmJpZGRlblwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIk5vdEZvdW5kXCJdID0gNDA0XSA9IFwiTm90Rm91bmRcIjtcbiAgICBTVEVudW1IVFRQRXJyb3JDb2RlW1NURW51bUhUVFBFcnJvckNvZGVbXCJNZXRob2ROb3RBbGxvd2VkXCJdID0gNDA1XSA9IFwiTWV0aG9kTm90QWxsb3dlZFwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIkludGVybmFsU2VydmVyRXJyb3JcIl0gPSA1MDBdID0gXCJJbnRlcm5hbFNlcnZlckVycm9yXCI7XG4gICAgU1RFbnVtSFRUUEVycm9yQ29kZVtTVEVudW1IVFRQRXJyb3JDb2RlW1wiTm90SW1wbGVtZW50ZWRcIl0gPSA1MDFdID0gXCJOb3RJbXBsZW1lbnRlZFwiO1xuICAgIFNURW51bUhUVFBFcnJvckNvZGVbU1RFbnVtSFRUUEVycm9yQ29kZVtcIlNlcnZpY2VVbmF2YWlsYWJsZVwiXSA9IDUwM10gPSBcIlNlcnZpY2VVbmF2YWlsYWJsZVwiO1xufSkoU1RFbnVtSFRUUEVycm9yQ29kZSA9IGV4cG9ydHMuU1RFbnVtSFRUUEVycm9yQ29kZSB8fCAoZXhwb3J0cy5TVEVudW1IVFRQRXJyb3JDb2RlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0RW51bUh0dHBFcnJvckNvZGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNUSGVscGVycyA9IHZvaWQgMDtcbmNvbnN0IHN0VXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9zdFV0aWxzXCIpO1xuY2xhc3MgU1RIZWxwZXJzIHtcbiAgICBzdGF0aWMgY2FsbEluKHRpbWUsIGZ1bmN0aW9uQ2FsbGJhY2ssIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKGlucHV0QXJncykgPT4gZnVuY3Rpb25DYWxsYmFjayhpbnB1dEFyZ3MpLCB0aW1lLCBhcmdzKTtcbiAgICB9XG4gICAgc3RhdGljIGdldERpZ2l0c0J5VmFsdWUodmFsdWUsIG51bURpZ2l0cykge1xuICAgICAgICBsZXQgcyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG51bURpZ2l0cyAtIHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9mZnNldDsgaSsrKSB7XG4gICAgICAgICAgICBzID0gJzAnICsgcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgc3RhdGljIGNsb25lKGZyb20pIHtcbiAgICAgICAgY29uc3Qgd2FzRGF0ZSA9IGZyb20gaW5zdGFuY2VvZiBEYXRlO1xuICAgICAgICBjb25zdCBjbG9uZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGZyb20pKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKCF3YXNEYXRlKSB7XG4gICAgICAgICAgICBTVEhlbHBlcnMuY2xvbmVJdGVyYXRlKGNsb25lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhc0RhdGUgPyBuZXcgRGF0ZShjbG9uZWQpIDogY2xvbmVkO1xuICAgIH1cbiAgICBzdGF0aWMgY2xvbmVJdGVyYXRlKG9iakl0ZXJhdGUpIHtcbiAgICAgICAgaWYgKG9iakl0ZXJhdGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG9iakl0ZXJhdGUpLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqSXRlcmF0ZVtrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBTVEhlbHBlcnMuY2xvbmVJdGVyYXRlKG9iakl0ZXJhdGVba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RVdGlsc18xLlNUVXRpbHMuaXNTdHJpbmdBY3R1YWxseURhdGVSZXByZXNlbnRhdGlvbihvYmpJdGVyYXRlW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpJdGVyYXRlW2tleV0gPSBuZXcgRGF0ZShvYmpJdGVyYXRlW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHJlbW92ZVRyYWlsaW5nQ29tbWEodmFsKSB7XG4gICAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgICAgIGNvbnN0IGhhc0NvbW1hID0gdmFsLmxhc3RJbmRleE9mKCcsJyk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChoYXNDb21tYSAhPT0gLTEgJiYgaGFzQ29tbWEgPT09IHZhbC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnN1YnN0cmluZygwLCBoYXNDb21tYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgc3RhdGljIGZvcm1hdFN0cmluZyhwYXRoLCAuLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MuZm9yRWFjaCgodmFsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdFV0aWxzXzEuU1RVdGlscy5pc051bGxPckVtcHR5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKGB7JHtpbmRleH19YCwgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGggPSBTVEhlbHBlcnMucmVtb3ZlRW1wdHlQYXJhbWV0ZXIocGF0aCwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdmVyaWZ5IHBhdGggaWYgaGF2ZSB0eXBvcyBhdCB0aGUgZW5kXG4gICAgICAgIGlmIChwYXRoLmluZGV4T2YoJz8nKSAhPT0gLTEgJiYgKHBhdGgubGVuZ3RoIC0gMSkgPT09IHBhdGguaW5kZXhPZignPycpKSB7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5pbmRleE9mKCc/JykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBzdGF0aWMgcmVtb3ZlRW1wdHlQYXJhbWV0ZXIocGF0aCwgaW5kZXgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKFNUSGVscGVycy5pc1BhcmFtZXRlclByb3BlcnR5KHBhdGgsIGluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1Qcm9wRGV0YWlscyA9IFNUSGVscGVycy5nZXRQYXJhbWV0ZXJQcm9wZXJ0eURldGFpbHMocGF0aCwgaW5kZXgpO1xuICAgICAgICAgICAgcGF0aCA9IFNUSGVscGVycy5yZW1vdmVQYXJhbWV0ZXJQcm9wT2ZQYXRoKHBhdGgsIHBhcmFtUHJvcERldGFpbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBzdGF0aWMgaXNQYXJhbWV0ZXJQcm9wZXJ0eShwYXRoLCBpbmRleCkge1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJWYWx1ZUluZGV4ID0gcGF0aC5pbmRleE9mKGB7JHtpbmRleH19YCk7XG4gICAgICAgIHJldHVybiBwYXRoW3BhcmFtZXRlclZhbHVlSW5kZXggLSAxXSA9PT0gJz0nO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UGFyYW1ldGVyUHJvcGVydHlEZXRhaWxzKHBhdGgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlclZhbHVlSW5kZXggPSBwYXRoLmluZGV4T2YoYHske2luZGV4fX1gKTtcbiAgICAgICAgbGV0IG5ld0luZGV4ID0gMTtcbiAgICAgICAgbGV0IGNhblN0aWxsSXRlcmF0ZSA9IHRydWU7XG4gICAgICAgIGxldCBpc0ZpcnN0UGFyYW1ldGVyID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChjYW5TdGlsbEl0ZXJhdGUpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAocGF0aFtwYXJhbWV0ZXJWYWx1ZUluZGV4IC0gbmV3SW5kZXhdID09PSAnPycpIHtcbiAgICAgICAgICAgICAgICBjYW5TdGlsbEl0ZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpc0ZpcnN0UGFyYW1ldGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGhbcGFyYW1ldGVyVmFsdWVJbmRleCAtIG5ld0luZGV4XSA9PT0gJyYnKSB7XG4gICAgICAgICAgICAgICAgY2FuU3RpbGxJdGVyYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0ZpcnN0UGFyYW1ldGVyLFxuICAgICAgICAgICAgZmlyc3RJbmRleDogcGFyYW1ldGVyVmFsdWVJbmRleCAtIG5ld0luZGV4ICsgMSxcbiAgICAgICAgICAgIGxhc3RJbmRleDogcGF0aC5pbmRleE9mKCd9JywgcGFyYW1ldGVyVmFsdWVJbmRleCkgKyAxLFxuICAgICAgICAgICAgaGFzTmV4dFBhcmFtZXRlcjogcGF0aC5pbmRleE9mKGB7JHtpbmRleH19YCwgcGFyYW1ldGVyVmFsdWVJbmRleCkgIT09IC0xXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyByZW1vdmVQYXJhbWV0ZXJQcm9wT2ZQYXRoKHBhdGgsIHBwRGV0YWlscykge1xuICAgICAgICByZXR1cm4gcHBEZXRhaWxzLmlzRmlyc3RQYXJhbWV0ZXJcbiAgICAgICAgICAgID8gYCR7cGF0aC5zdWJzdHJpbmcoMCwgcHBEZXRhaWxzLmZpcnN0SW5kZXgpfSR7Jz8nfSR7cGF0aC5zdWJzdHJpbmcocHBEZXRhaWxzLmhhc05leHRQYXJhbWV0ZXIgPyBwcERldGFpbHMubGFzdEluZGV4ICsgMSA6IHBwRGV0YWlscy5sYXN0SW5kZXgpfWBcbiAgICAgICAgICAgIDogcGF0aC5zdWJzdHJpbmcoMCwgcHBEZXRhaWxzLmZpcnN0SW5kZXgpICsgKHBwRGV0YWlscy5oYXNOZXh0UGFyYW1ldGVyID8gJycgOiAnJicpICsgcGF0aC5zdWJzdHJpbmcocHBEZXRhaWxzLmxhc3RJbmRleCk7XG4gICAgfVxuICAgIHN0YXRpYyBlcmFzZUNoYXJzSW5TdHJpbmcoYmFzZVN0cmluZywgYXNjaWlDaGFycykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYXIgb2YgYXNjaWlDaGFycykge1xuICAgICAgICAgICAgYmFzZVN0cmluZyA9IGJhc2VTdHJpbmcucmVwbGFjZShjaGFyLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VTdHJpbmc7XG4gICAgfVxufVxuZXhwb3J0cy5TVEhlbHBlcnMgPSBTVEhlbHBlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdEhlbHBlcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdERlYnVnQ29uc29sZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0SW50ZXJmYWNlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU1RVdGlscyA9IHZvaWQgMDtcbmNvbnN0IHN0RW51bUh0dHBFcnJvckNvZGVfMSA9IHJlcXVpcmUoXCIuLi9lbnVtcy9zdEVudW1IdHRwRXJyb3JDb2RlXCIpO1xuY29uc3QgYmFzZTY0X2JpbmFyeV8xID0gcmVxdWlyZShcIi4uLy4uL2V4dGVybmFsLWxpYnMvYmFzZTY0LWJpbmFyeVwiKTtcbmNsYXNzIFNUVXRpbHMge1xuICAgIHN0YXRpYyBpc051bGxPckVtcHR5KHZhbCkge1xuICAgICAgICB2YWwgPSB2YWwgPyB2YWwudG9TdHJpbmcoKSA6IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbCA/IHZhbC50cmltKCkubGVuZ3RoID09PSAwIDogdHJ1ZTtcbiAgICB9XG4gICAgc3RhdGljIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cbiAgICBzdGF0aWMgaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBzdGF0aWMgdGVybmFyeU5vdE51bGwocGFyYW0sIHRydWVDb25kaXRpb24sIGZhbHNlQ29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiAhIXBhcmFtID8gdHJ1ZUNvbmRpdGlvbiA6IGZhbHNlQ29uZGl0aW9uO1xuICAgIH1cbiAgICBzdGF0aWMgcmVwbGFjZUFsbEluU3RyaW5nKHNvdXJjZVN0cmluZywgc2VhcmNoLCByZXBsYWNlbWVudCkge1xuICAgICAgICByZXR1cm4gc291cmNlU3RyaW5nLnNwbGl0KHNlYXJjaCkuam9pbihyZXBsYWNlbWVudCk7XG4gICAgfVxuICAgIHN0YXRpYyBpc1N0cmluZ0FjdHVhbGx5RGF0ZVJlcHJlc2VudGF0aW9uKHN0cmluZ0RhdGUpIHtcbiAgICAgICAgcmV0dXJuIFNUVXRpbHMuX3JlZ0V4RGF0ZS50ZXN0KHN0cmluZ0RhdGUpO1xuICAgIH1cbiAgICBzdGF0aWMgaW5zdGFuY2VCeUNsYXNzTmFtZShjbGFzc05hbWUsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdhcmcxJywgYHJldHVybiBuZXcgJHtjbGFzc05hbWV9KGFyZzEpYCkocGFyYW1zKTtcbiAgICB9XG4gICAgc3RhdGljIGluc3RhbmNlQnlUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0eXBlKCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YW5jZUJ5VHlwZVdpdGhBcmdzKHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0eXBlKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNQb3dlck9mVHdvKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ICYgKHggLSAxKSkgPT09IDA7XG4gICAgfVxuICAgIHN0YXRpYyBuZXh0SGlnaGVzdFBvd2VyT2ZUd28oeCkge1xuICAgICAgICAtLXg7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMzI7IGkgPDw9IDEpIHtcbiAgICAgICAgICAgIHggPSB4IHwgeCA+PiBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4ICsgMTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUd1aWQoKSB7XG4gICAgICAgIGNvbnN0IGx1dCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBsdXRbaV0gPSAoaSA8IDE2ID8gJzAnIDogJycpICsgKGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkMCA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcbiAgICAgICAgY29uc3QgZDEgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG4gICAgICAgIGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwO1xuICAgICAgICBjb25zdCBkMyA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIGx1dFtkMCAmIDB4ZmZdICsgbHV0W2QwID4+IDggJiAweGZmXSArIGx1dFtkMCA+PiAxNiAmIDB4ZmZdICsgbHV0W2QwID4+IDI0ICYgMHhmZl0gKyAnLScgK1xuICAgICAgICAgICAgbHV0W2QxICYgMHhmZl0gKyBsdXRbZDEgPj4gOCAmIDB4ZmZdICsgJy0nICsgbHV0W2QxID4+IDE2ICYgMHgwZiB8IDB4NDBdICsgbHV0W2QxID4+IDI0ICYgMHhmZl0gKyAnLScgK1xuICAgICAgICAgICAgbHV0W2QyICYgMHgzZiB8IDB4ODBdICsgbHV0W2QyID4+IDggJiAweGZmXSArICctJyArIGx1dFtkMiA+PiAxNiAmIDB4ZmZdICsgbHV0W2QyID4+IDI0ICYgMHhmZl0gK1xuICAgICAgICAgICAgbHV0W2QzICYgMHhmZl0gKyBsdXRbZDMgPj4gOCAmIDB4ZmZdICsgbHV0W2QzID4+IDE2ICYgMHhmZl0gKyBsdXRbZDMgPj4gMjQgJiAweGZmXTtcbiAgICB9XG4gICAgc3RhdGljIGNvdW50UHJvcGVydGllc0luT2JqZWN0KG9iamVjdCkge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMob2JqZWN0KSkge1xuICAgICAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICBzdGF0aWMgYXJyYXlJbnNlcnRBcnJheShhcnJheVRhcmdldCwgaW5kZXgsIGFycmF5TmV3KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhcnJheU5ldy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgYXJyYXlUYXJnZXQuc3BsaWNlKGluZGV4LCAwLCBhcnJheU5ld1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5VGFyZ2V0O1xuICAgIH1cbiAgICBzdGF0aWMgaXNOdWxsT3JVbmRlZmluZWRPcldoaXRlU3BhY2UodGV4dCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGV4dCA9PT0gdW5kZWZpbmVkIHx8IHRleHQgPT09IG51bGw7XG4gICAgICAgIHJlc3VsdCA9ICFyZXN1bHQgPyB0ZXh0Lmxlbmd0aCA9PT0gMCA6IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGdldEZpbGVOYW1lV2l0aG91dEV4dGVuc2lvbihmdWxsUGF0aCkge1xuICAgICAgICByZXR1cm4gZnVsbFBhdGguc3Vic3RyKDAsIGZ1bGxQYXRoLmxhc3RJbmRleE9mKCcuJykpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RmlsZU5hbWVGcm9tUGF0aChmdWxsUGF0aCkge1xuICAgICAgICByZXR1cm4gZnVsbFBhdGgucmVwbGFjZSgvXi4qKFxcXFx8XFwvfFxcOikvLCAnJyk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRFeHRlbnNpb25Gcm9tRmlsZU5hbWUoZnVsbFBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bGxQYXRoLnN1YnN0cihmdWxsUGF0aC5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgfVxuICAgIHN0YXRpYyB2YWxpZGF0ZUZpbGVUeXBlKGZpbGVUeXBlLCBvcHRpb25hbEZpbGVOYW1lKSB7XG4gICAgICAgIGlmIChvcHRpb25hbEZpbGVOYW1lICYmIGZpbGVUeXBlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGZpbGVUeXBlID0gU1RVdGlscy5nZXRFeHRlbnNpb25Gcm9tRmlsZU5hbWUob3B0aW9uYWxGaWxlTmFtZSk7XG4gICAgICAgICAgICBmaWxlVHlwZSA9ICd0ZXh0LycgKyBmaWxlVHlwZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZVR5cGU7XG4gICAgfVxuICAgIHN0YXRpYyBhamF4SnVzdEdldEh0bWwodXJsLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXJTdWNjZXNzLCByZXNvbHZlclJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3VjY2Vzc0NhbGxiYWNrID0gKGh0bWwpID0+IHsgcmVzb2x2ZXJTdWNjZXNzKHsgY29udGVudDogaHRtbCwgYXJncyB9KTsgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlamVjdENhbGxiYWNrID0gKCkgPT4geyByZXNvbHZlclJlamVjdCgpOyB9O1xuICAgICAgICAgICAgY29uc3QganF4aHIgPSAkLmdldCh1cmwsIHN1Y2Nlc3NDYWxsYmFjaywgJ2h0bWwnKTtcbiAgICAgICAgICAgIGpxeGhyLmZhaWwocmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGFqYXhHZXRIdG1sVmFsQW5kRXhlYyh1cmwsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlclN1Y2Nlc3MsIHJlc29sdmVyUmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzQ2FsbGJhY2sgPSAoaHRtbCkgPT4ge1xuICAgICAgICAgICAgICAgIFNUVXRpbHMudmFsaWRhdGVBbmRFeGVjdXRlSHRtbChodG1sKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlclN1Y2Nlc3MoeyBjb250ZW50OiBodG1sLCBhcmdzIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlamVjdENhbGxiYWNrID0gKCkgPT4geyByZXNvbHZlclJlamVjdCgpOyB9O1xuICAgICAgICAgICAgY29uc3QganF4aHIgPSAkLmdldCh1cmwsIHN1Y2Nlc3NDYWxsYmFjaywgJ2h0bWwnKTtcbiAgICAgICAgICAgIGpxeGhyLmZhaWwocmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHZhbGlkYXRlQW5kRXhlY3V0ZUh0bWwoaHRtbCkge1xuICAgICAgICBjb25zdCBzY3JpcHRBdHRhY2hlZCA9IGh0bWwubWF0Y2goLzxzY3JpcHRcXGJbXj5dKj4oW1xcc1xcU10qPyk8XFwvc2NyaXB0Pi9pbSk7XG4gICAgICAgIGlmIChzY3JpcHRBdHRhY2hlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWV2YWxcbiAgICAgICAgICAgICAgICBldmFsKHNjcmlwdEF0dGFjaGVkWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBTVFV0aWxzLnN0YXRpY0RlYnVnQ29uc29sZS5lcnJvcih0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGR5bmFtaWNMb2FkQW5kQXBwZW5kQ3NzKGNzc1BhdGgsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlclN1Y2Nlc3MpID0+IHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgbGluayBFbGVtZW50XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgICAgICAgLy8gc2V0IHRoZSBhdHRyaWJ1dGVzIGZvciBsaW5rIGVsZW1lbnRcbiAgICAgICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgbGluay50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IGNzc1BhdGg7XG4gICAgICAgICAgICAvLyBHZXQgSFRNTCBoZWFkIGVsZW1lbnQgdG8gYXBwZW5kIGxpbmsgZWxlbWVudCB0byBpdFxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0hFQUQnKVswXS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgICAgIHJlc29sdmVyU3VjY2Vzcyh7IGNvbnRlbnQ6IGxpbmssIGFyZ3MgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbWVyZ2VPYmplY3RzKG9iajEsIG9iajIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0T2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgb2YgT2JqZWN0LmtleXMob2JqMSkpIHtcbiAgICAgICAgICAgIHJlc3VsdE9ialthdHRyTmFtZS50b1N0cmluZygpXSA9IG9iajFbYXR0ck5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgb2YgT2JqZWN0LmtleXMob2JqMikpIHtcbiAgICAgICAgICAgIHJlc3VsdE9ialthdHRyTmFtZS50b1N0cmluZygpXSA9IG9iajJbYXR0ck5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRPYmo7XG4gICAgfVxuICAgIHN0YXRpYyBvbkxvc2VGb2N1cyhqcXVlcnlFbGVtZW50LCBwYXJlbnRJZCwgb25DYWxsYmFjaywgZXZlbnROYW1lU3BhY2UpIHtcbiAgICAgICAgY29uc3QgZXZlbnRUeXBlID0gIWV2ZW50TmFtZVNwYWNlID8gJ2NsaWNrJyA6IGBjbGljay4ke2V2ZW50TmFtZVNwYWNlfWA7XG4gICAgICAgIGpxdWVyeUVsZW1lbnQub24oZXZlbnRUeXBlLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudHMgPSBjdXJyZW50VGFyZ2V0LnBhcmVudHMoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEFycmF5SWRzID0gcGFyZW50SWQuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGlmIChTVFV0aWxzLmNvbXBhcmVXaXRoTXVsdGlwbGUoY3VycmVudFRhcmdldC5hdHRyKCdpZCcpLCBwYXJlbnRBcnJheUlkcykpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBwYXJlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChTVFV0aWxzLmNvbXBhcmVXaXRoTXVsdGlwbGUoJChlbGVtZW50KS5hdHRyKCdpZCcpLCBwYXJlbnRBcnJheUlkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIG9uQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBjb21wYXJlV2l0aE11bHRpcGxlKHZhbHVlLCBhcnJheVZhbHVlcykge1xuICAgICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuc29tZSgoeCkgPT4geCA9PT0gdmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgdmVyaWZ5Rml4RmlsZU5hbWVFeHRlbnNpb24oZmlsZU5hbWUsIGZpbGVFeHRlbnNpb24pIHtcbiAgICAgICAgY29uc3QgaW5kZXhFeHRlbnNpb24gPSBmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAvLyBBZGQgZXh0ZW5zaW9uIGlmIGRvZXNuJ3QgaGF2ZSBpdCwgdGhpcyB1c3VhbGx5IGhhcHBlbiB3aGVuIGlzIGEgbmV3IG5vZGUuXG4gICAgICAgIGlmIChpbmRleEV4dGVuc2lvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgIGZpbGVOYW1lID0gYCR7ZmlsZU5hbWV9LiR7ZmlsZUV4dGVuc2lvbn1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBWZXJpZnkgdGhlIGV4dGVuc2lvbiBhbmQgZml4IGl0IGlmIGlzIG5lY2Nlc2FyeVxuICAgICAgICAgICAgY29uc3QgZmlsZU5hbWVFeHQgPSBmaWxlTmFtZS5zdWJzdHJpbmcoaW5kZXhFeHRlbnNpb24gKyAxLCBmaWxlTmFtZS5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGZpbGVOYW1lRXh0ICE9PSBmaWxlRXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWVOb0V4dCA9IGZpbGVOYW1lLnN1YnN0cigwLCBpbmRleEV4dGVuc2lvbik7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBgJHtmaWxlTmFtZU5vRXh0fS4ke2ZpbGVFeHRlbnNpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZU5hbWU7XG4gICAgfVxuICAgIHN0YXRpYyBleGlzdHNDbGFzcyhjbGFzc1N0cmluZywgY2xhc3NOYW1lKSB7XG4gICAgICAgIGxldCByZXN1bHRFeGlzdHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGNsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgICByZXN1bHRFeGlzdHMgPSBjbGFzc1N0cmluZ1xuICAgICAgICAgICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgICAgICAgICAgLnNvbWUoKHgpID0+IHggPT09IGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdEV4aXN0cztcbiAgICB9XG4gICAgc3RhdGljIGNsb25lT2JqZWN0Q29udGFpbmVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhpdGVtKSkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gaXRlbVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgZGVlcENsb25lKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaXRlbSkpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNTZXJ2ZXJIb3N0UmVhY2hhYmxlKCkge1xuICAgICAgICAvLyBIYW5kbGUgSUUgYW5kIG1vcmUgY2FwYWJsZSBicm93c2Vyc1xuICAgICAgICBjb25zdCB4aHIgPSBuZXcgKHdpbmRvdy5BY3RpdmVYT2JqZWN0IHx8IFhNTEh0dHBSZXF1ZXN0KSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICAgICAgLy8gT3BlbiBuZXcgcmVxdWVzdCBhcyBhIEhFQUQgdG8gdGhlIHJvb3QgaG9zdG5hbWUgd2l0aCBhIHJhbmRvbSBwYXJhbSB0byBidXN0IHRoZSBjYWNoZVxuICAgICAgICB4aHIub3BlbignSEVBRCcsIGAvLyR7d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lfS8/cmFuZD0ke01hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApfWAsIGZhbHNlKTtcbiAgICAgICAgLy8gSXNzdWUgcmVxdWVzdCBhbmQgaGFuZGxlIHJlc3BvbnNlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICAgICAgcmV0dXJuICh4aHIuc3RhdHVzID49IHN0RW51bUh0dHBFcnJvckNvZGVfMS5TVEVudW1IVFRQRXJyb3JDb2RlLk9rICYmXG4gICAgICAgICAgICAgICAgKHhoci5zdGF0dXMgPCBzdEVudW1IdHRwRXJyb3JDb2RlXzEuU1RFbnVtSFRUUEVycm9yQ29kZS5NdWx0aXBsZUNob2ljZXMgfHwgeGhyLnN0YXR1cyA9PT0gc3RFbnVtSHR0cEVycm9yQ29kZV8xLlNURW51bUhUVFBFcnJvckNvZGUuTm90TW9kaWZpZWQpIHx8XG4gICAgICAgICAgICAgICAgeGhyLnN0YXR1cyA9PT0gc3RFbnVtSHR0cEVycm9yQ29kZV8xLlNURW51bUhUVFBFcnJvckNvZGUuTm90Rm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBkb3dubG9hZFRvRGVza3RvcChzdHJEYXRhLCBzdHJGaWxlTmFtZSwgc3RyTWltZVR5cGUpIHtcbiAgICAgICAgY29uc3QgRCA9IGRvY3VtZW50LCBhID0gRC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIHN0ck1pbWVUeXBlID0gc3RyTWltZVR5cGUgfHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4gICAgICAgIGlmIChuYXZpZ2F0b3JbJ21zU2F2ZUJsb2InXSkgeyAvLyBJRTEwXG4gICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yWydtc1NhdmVCbG9iJ10obmV3IEJsb2IoW3N0ckRhdGFdLCB7IHR5cGU6IHN0ck1pbWVUeXBlIH0pLCBzdHJGaWxlTmFtZSk7XG4gICAgICAgIH0gLyogZW5kIGlmKG5hdmlnYXRvci5tc1NhdmVCbG9iKSAqL1xuICAgICAgICBpZiAoJ2Rvd25sb2FkJyBpbiBhKSB7IC8vIGh0bWw1IEFbZG93bmxvYWRdXG4gICAgICAgICAgICBhLmhyZWYgPSBgZGF0YToke3N0ck1pbWVUeXBlfSwke2VuY29kZVVSSUNvbXBvbmVudChzdHJEYXRhKX1gO1xuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgc3RyRmlsZU5hbWUpO1xuICAgICAgICAgICAgYS5pbm5lckhUTUwgPSAnZG93bmxvYWRpbmcuLi4nO1xuICAgICAgICAgICAgRC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYS5jbGljaygpO1xuICAgICAgICAgICAgICAgIEQuYm9keS5yZW1vdmVDaGlsZChhKTtcbiAgICAgICAgICAgIH0sIDY2KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8qIGVuZCBpZignZG93bmxvYWQnIGluIGEpICovXG4gICAgICAgIC8vIGRvIGlmcmFtZSBkYXRhVVJMIGRvd25sb2FkIChvbGQgY2grRkYpOlxuICAgICAgICBjb25zdCBmID0gRC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgRC5ib2R5LmFwcGVuZENoaWxkKGYpO1xuICAgICAgICBmLnNyYyA9IGBkYXRhOiR7c3RyTWltZVR5cGV9LCR7ZW5jb2RlVVJJQ29tcG9uZW50KHN0ckRhdGEpfWA7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gRC5ib2R5LnJlbW92ZUNoaWxkKGYpLCAzMzMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3RhdGljIHVpbnQ4QXJyYXlUb0Jhc2U2NCh1aW50OEFycmF5KSB7XG4gICAgICAgIGxldCBiaW5hcnkgPSAnJztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdWludDhBcnJheS5ieXRlTGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1aW50OEFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2luZG93LmJ0b2EoYmluYXJ5KTtcbiAgICB9XG4gICAgc3RhdGljIGFycmF5QnVmZmVyVG9CYXNlNjQoYnVmZmVyKSB7XG4gICAgICAgIGxldCBiaW5hcnkgPSAnJztcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpbmRvdy5idG9hKGJpbmFyeSk7XG4gICAgfVxuICAgIHN0YXRpYyBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NFN0cmluZykge1xuICAgICAgICByZXR1cm4gYmFzZTY0X2JpbmFyeV8xLkJhc2U2NEJpbmFyeS5kZWNvZGVBcnJheUJ1ZmZlcihiYXNlNjRTdHJpbmcpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW5kZXhDb2luY2lkZW5jZU9uKHBocmFzZSwgd29yZCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGNJbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVyYXRlID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgd29yZExlbmd0aCA9IHdvcmQubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmRJbmRleCA9IHBocmFzZS5pbmRleE9mKHdvcmQsIGNJbmRleCk7XG4gICAgICAgICAgICBpdGVyYXRlID0gd29yZEluZGV4ICE9PSAtMTtcbiAgICAgICAgICAgIGlmIChpdGVyYXRlKSB7XG4gICAgICAgICAgICAgICAgY0luZGV4ID0gY0luZGV4ID0gKHdvcmRJbmRleCArIHdvcmRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgd29yZCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHdvcmRJbmRleFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmaW5kUHJldmlvdXNDaGFyKHdvcmQsIGV4Y2x1ZGVDaGFycywgc3RhcnRJbmRleCkge1xuICAgICAgICBsZXQgcmVzdWx0Q2hhciA9ICcnO1xuICAgICAgICBsZXQgaXRlcmF0ZSA9IHRydWU7XG4gICAgICAgIGxldCBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICAgIHdoaWxlIChpdGVyYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdDaGFyID0gd29yZC5jaGFyQXQoaW5kZXgtLSk7XG4gICAgICAgICAgICBpZiAoZXhjbHVkZUNoYXJzLnNvbWUoKHgpID0+IHggPT09IG5ld0NoYXIpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRDaGFyID0gbmV3Q2hhcjtcbiAgICAgICAgICAgIGl0ZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByZXZpb3VzQ2hhcjogcmVzdWx0Q2hhcixcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBmaW5kTmV4dENoYXIod29yZCwgZXhjbHVkZUNoYXJzLCBzdGFydEluZGV4KSB7XG4gICAgICAgIGxldCByZXN1bHRDaGFyID0gJyc7XG4gICAgICAgIGxldCBpdGVyYXRlID0gdHJ1ZTtcbiAgICAgICAgbGV0IGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgICAgY29uc3Qgd29yZExlbmd0aCA9IHdvcmQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaXRlcmF0ZSkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hhciA9IHdvcmQuY2hhckF0KGluZGV4KyspO1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVDaGFycy5zb21lKCh4KSA9PiB4ID09PSBuZXdDaGFyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0Q2hhciA9IG5ld0NoYXI7XG4gICAgICAgICAgICBpdGVyYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gd29yZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dENoYXI6IHJlc3VsdENoYXIsXG4gICAgICAgICAgICBpbmRleDogaW5kZXggLSAxXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBmaW5kQ2xvc2luZ0NoYXIod29yZCwgY2hhclN0YXJ0LCBjaGFyRW5kLCBzdGFydEluZGV4KSB7XG4gICAgICAgIGxldCByZXN1bHRJbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVyYXRlID0gdHJ1ZTtcbiAgICAgICAgbGV0IGNvdW50Q2hhcnMgPSAwO1xuICAgICAgICBsZXQgY291bnRDaGFyU3RhcnQgPSAwO1xuICAgICAgICBsZXQgY291bnRDaGFyRW5kID0gMDtcbiAgICAgICAgY29uc3Qgd29yZExlbmd0aCA9IHdvcmQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaXRlcmF0ZSkge1xuICAgICAgICAgICAgY29uc3QgY2hhciA9IHdvcmQuY2hhckF0KHN0YXJ0SW5kZXggKyBjb3VudENoYXJzKyspO1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09IGNoYXJTdGFydCkge1xuICAgICAgICAgICAgICAgIGNvdW50Q2hhclN0YXJ0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBjaGFyRW5kKSB7XG4gICAgICAgICAgICAgICAgY291bnRDaGFyRW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY291bnRDaGFyU3RhcnQgPT09IGNvdW50Q2hhckVuZCAmJiAoY291bnRDaGFyU3RhcnQgIT09IDAgJiYgY291bnRDaGFyRW5kICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXN1bHRJbmRleCA9IHN0YXJ0SW5kZXggKyAoY291bnRDaGFycyAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZXJhdGUgJiYgKChzdGFydEluZGV4ICsgY291bnRDaGFycykgPj0gd29yZExlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdEluZGV4O1xuICAgIH1cbiAgICBzdGF0aWMgbnVtYmVyMkJpbmFyeShudW0pIHtcbiAgICAgICAgcmV0dXJuIChudW0gPj4+IDApLnRvU3RyaW5nKDIpO1xuICAgIH1cbiAgICBzdGF0aWMgYmluYXJ5Mk51bWJlcihiaW5hcnlTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGJpbmFyeVN0cmluZywgMik7XG4gICAgfVxuICAgIHN0YXRpYyByYW5nZUxpbWl0ZXIodmFsLCBtaW4sIG1heCkge1xuICAgICAgICB2YWwgPSB2YWwgPj0gbWF4ID8gbWF4IDogdmFsO1xuICAgICAgICB2YWwgPSB2YWwgPD0gbWluID8gbWluIDogdmFsO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBzdGF0aWMgZXJhc2VDaGFyc0luU3RyaW5nKGJhc2VTdHJpbmcsIGFzY2lpQ2hhcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc2NpaUNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBiYXNlU3RyaW5nID0gYmFzZVN0cmluZy5yZXBsYWNlKGFzY2lpQ2hhcnNbaV0sICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVN0cmluZztcbiAgICB9XG4gICAgc3RhdGljIGV4aXN0c1Byb3BlcnR5QW5kVmFsdWUob2JqLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhU1RVdGlscy5pc051bGxPckVtcHR5KG9ialtrZXldLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UHJvcGVydHlWYWx1ZU9yRGVmYXVsdChvYmosIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBTVFV0aWxzLmV4aXN0c1Byb3BlcnR5QW5kVmFsdWUob2JqLCBrZXkpXG4gICAgICAgICAgICA/IG9ialtrZXldXG4gICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgc3RhdGljIGRvZXNPYmpJbXBsZW1lbnRzRnVuY3Rpb25Gcm9tSW50ZXJmYWNlKG9iaiwgZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiAhIW9ialtmdW5jdGlvbk5hbWVdO1xuICAgIH1cbiAgICBzdGF0aWMgaXNGdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuICEhKG9iaiAmJiBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNhbGwgJiYgb2JqLmFwcGx5KTtcbiAgICB9XG4gICAgc3RhdGljIGVzY2FwZUh0bWwoaHRtbCkge1xuICAgICAgICBjb25zdCBlbnRpdHlNYXAgPSB7XG4gICAgICAgICAgICAnJic6ICcmYW1wOycsXG4gICAgICAgICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICAgICAgICc+JzogJyZndDsnLFxuICAgICAgICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICAgICAgICBcIidcIjogJyYjMzk7JyxcbiAgICAgICAgICAgICcvJzogJyYjeDJGOycsXG4gICAgICAgICAgICAnYCc6ICcmI3g2MDsnLFxuICAgICAgICAgICAgJz0nOiAnJiN4M0Q7J1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoL1smPD5cIidgPVxcL10vZywgKHMpID0+IGVudGl0eU1hcFtzXSk7XG4gICAgfVxufVxuU1RVdGlscy5fcmVnRXhEYXRlID0gbmV3IFJlZ0V4cCgnXigtPyg/OlsxLTldWzAtOV0qKT9bMC05XXs0fSktKDFbMC0yXXwwWzEtOV0pLSgzWzAxXXwwWzEtOV18WzEyXVswLTldKVQoMlswLTNdfFswMV1bMC05XSk6KFswLTVdWzAtOV0pOihbMC01XVswLTldKSguWzAtOV0rKT8oWik/JCcpO1xuZXhwb3J0cy5TVFV0aWxzID0gU1RVdGlscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0VXRpbHMuanMubWFwIiwiaW1wb3J0IHsgSUNhbGxiYWNrMSB9IGZyb20gXCJzaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GUmVuZGVyTG9vcCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2dhbWVMb29wSW50ZXJ2YWw6IE5vZGVKUy5UaW1lb3V0O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Z1bmN0aW9uTG9vcDogSUNhbGxiYWNrMTxudW1iZXI+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1lcmF0ZTogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIF9sYXN0VGltZTogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKGZ1bmN0aW9uTG9vcDogSUNhbGxiYWNrMTxudW1iZXI+LCBmcmFtZXJhdGU6IG51bWJlcikge1xyXG4gICAgdGhpcy5fZnJhbWVyYXRlID0gZnJhbWVyYXRlO1xyXG4gICAgdGhpcy5fZnVuY3Rpb25Mb29wID0gZnVuY3Rpb25Mb29wO1xyXG4gICAgdGhpcy5fbGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIHRoaXMuX2dhbWVMb29wSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmludGVybmFsTG9vcCgpLCAxMDAwIC8gdGhpcy5fZnJhbWVyYXRlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW50ZXJuYWxMb29wKCk6IHZvaWQge1xyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGRlbHRhVGltZSA9IChjdXJyZW50VGltZSAtIHRoaXMuX2xhc3RUaW1lKSAvIDEwMDA7XHJcbiAgICB0aGlzLl9sYXN0VGltZSA9IGN1cnJlbnRUaW1lO1xyXG5cclxuICAgIHRoaXMuX2Z1bmN0aW9uTG9vcChkZWx0YVRpbWUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZShmdW5jdGlvbkxvb3A6IElDYWxsYmFjazE8bnVtYmVyPiwgZnJhbWVyYXRlOiBudW1iZXIpOiBPRlJlbmRlckxvb3Age1xyXG4gICAgcmV0dXJuIG5ldyBPRlJlbmRlckxvb3AoZnVuY3Rpb25Mb29wLCBmcmFtZXJhdGUpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3Ige1xyXG4gIGlkID0gMDtcclxuICB4ID0gMDtcclxuICB5ID0gMDtcclxuICB3aWR0aCA9IDA7XHJcbiAgaGVpZ2h0ID0gMDtcclxuXHR0ZXh0dXJlVSA9IDA7XHJcbiAgdGV4dHVyZVYgPSAwO1xyXG4gIHhPZmZzZXQgPSAwO1xyXG4gIHlPZmZzZXQgPSAwO1xyXG4gIHhBZHZhbmNlID0gMDtcclxuXHRwYWdlID0gMDtcclxuXHRjaG5sID0gMDtcclxufVxyXG4iLCJpbXBvcnQgeyBPRkJpdG1hcEZvbnRQYWdlIH0gZnJvbSAnLi9vZkJpdG1hcEZvbnRQYWdlJztcclxuaW1wb3J0IHsgT0ZWZWN0b3IyIH0gZnJvbSAnLi4vLi4vLi4vZnJhbWV3b3JrL21hdGgvb2ZWZWN0b3IyJztcclxuaW1wb3J0IHsgT0ZFbnVtS2V5Q29kZSB9IGZyb20gJy4uLy4uLy4uL2ZyYW1ld29yay9lbnVtcy9vZkVudW1LZXlDb2RlJztcclxuaW1wb3J0IHsgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IgfSBmcm9tICcuL29mQml0bWFwRm9udENoYXJEZXNjcmlwdG9yJztcclxuaW1wb3J0IHsgT0ZCaXRtYXBGb250S2VybmluZyB9IGZyb20gJy4vb2ZCaXRtYXBGb250S2VybmluZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZCaXRtYXBGb250Q2hhcnNldCB7XHJcbiAgc3RhdGljIHJlYWRvbmx5IENIQVJfREVTQ1JJUFRPUl9TSVpFID0gMjU2O1xyXG5cclxuICAvLyBpbmZvXHJcbiAgZm9udE5hbWUgPSAnJztcclxuICBzaXplID0gMDtcclxuICBib2xkID0gZmFsc2U7XHJcbiAgaXRhbGljID0gZmFsc2U7XHJcbiAgY2hhcnNldCA9ICcnO1xyXG4gIHVuaWNvZGUgPSBmYWxzZTtcclxuICBzdHJldGNoSCA9IDA7XHJcbiAgc21vb3RoID0gZmFsc2U7XHJcbiAgYWEgPSBmYWxzZTtcclxuICBwYWRkaW5nID0gbnVsbDtcclxuICBzcGFjaW5nID0gbnVsbDtcclxuICBvdXRsaW5lID0gZmFsc2U7XHJcblxyXG4gIC8vIGNvbW1vblxyXG4gIGxpbmVIZWlnaHQgPSAwO1xyXG4gIGJhc2UgPSAwO1xyXG4gIHNjYWxlV2lkdGggPSAwO1xyXG4gIHNjYWxlSGVpZ2h0ID0gMDtcclxuICBwYWdlcyA9IDA7XHJcbiAgcGFja2VkID0gZmFsc2U7XHJcbiAgYWxwaGFDaG5sID0gMDtcclxuICByZWRDaG5sID0gMDtcclxuICBncmVlbkNobmwgPSAwO1xyXG4gIGJsdWVDaG5sID0gMDtcclxuXHJcbiAgLy8gcGFnZXNcclxuICBmb250UGFnZXM6IE9GQml0bWFwRm9udFBhZ2VbXSA9IFtdO1xyXG5cclxuICAvLyBrZXJuaW5nXHJcbiAga2VybmluZ3M6IE9GQml0bWFwRm9udEtlcm5pbmdbXSA9IFtdO1xyXG5cclxuICBnZXRDaGFyRGVzY3JpcHRvcihjaGFyVW5pY29kZTogbnVtYmVyKTogT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3Ige1xyXG4gICAgcmV0dXJuIHRoaXMuZm9udFBhZ2VzWzBdLmNoYXJzW2NoYXJVbmljb2RlXTtcclxuICB9XHJcblxyXG4gIGV4aXN0c0NoYXIoY2hhclVuaWNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGNoYXJVbmljb2RlIC0gMSA8IHRoaXMuZm9udFBhZ2VzWzBdLmNoYXJBcnJheVNpemU7XHJcbiAgfVxyXG5cclxuICBnZXRLZXJuaW5nKHVuaWNvZGVGaXJzdDogbnVtYmVyLCB1bmljb2RlU2Vjb25kOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IGFtb3VudCA9IDA7XHJcblxyXG4gICAgaWYgKCF0aGlzLmtlcm5pbmdzKSB7XHJcbiAgICAgIHJldHVybiBhbW91bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2VybmluZ0NvdW50ID0gdGhpcy5rZXJuaW5ncy5sZW5ndGg7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXJuaW5nQ291bnQ7IGkrKykge1xyXG4gICAgICBjb25zdCBfa2VybmluZyA9IHRoaXMua2VybmluZ3NbaV07XHJcblxyXG4gICAgICBpZiAoX2tlcm5pbmcgJiYgX2tlcm5pbmcuZmlyc3QgPT09IHVuaWNvZGVGaXJzdCAmJiBfa2VybmluZy5zZWNvbmQgPT09IHVuaWNvZGVTZWNvbmQpIHtcclxuICAgICAgICBhbW91bnQgPSBfa2VybmluZy5hbW91bnQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYW1vdW50O1xyXG4gIH1cclxuXHJcbiAgbWVhc3VyZVN0cmluZyh0ZXh0OiBzdHJpbmcpOiBPRlZlY3RvcjIge1xyXG4gICAgY29uc3QgdGV4dFNpemUgPSBPRlZlY3RvcjIuemVybygpO1xyXG4gICAgdGV4dFNpemUueSArPSB0aGlzLmJhc2U7IC8vIHRoaXMgaXMgZG9uZSBmb3IgdGhlIGZpcnN0IGxpbmVcclxuXHJcbiAgICBjb25zdCBwaHJhc2VMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcclxuICAgIGxldCBvbGRJbmRleEFmdGVySnVtcExpbmUgPSAwO1xyXG4gICAgbGV0IG9sZFdpZHRoQWZ0ZXJKdW1wTGluZSA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaHJhc2VMZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCB1bmljb2RlQ2hhckZpcnN0ID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xyXG5cclxuICAgICAgaWYgKHVuaWNvZGVDaGFyRmlyc3QgPT09IE9GRW51bUtleUNvZGUuSnVtcExpbmUpIHtcclxuICAgICAgICBjb25zdCBuZXdUZXh0ID0gdGV4dC5zdWJzdHJpbmcob2xkSW5kZXhBZnRlckp1bXBMaW5lLCBpIC0gb2xkSW5kZXhBZnRlckp1bXBMaW5lKTtcclxuICAgICAgICBvbGRJbmRleEFmdGVySnVtcExpbmUgPSBpICsgMTtcclxuICAgICAgICBjb25zdCBuZXdUZXh0TGVuZ3RoID0gdGhpcy5tZWFzdXJlU3RyaW5nTGluZWFsKG5ld1RleHQpO1xyXG5cclxuICAgICAgICBpZiAobmV3VGV4dExlbmd0aCA+IG9sZFdpZHRoQWZ0ZXJKdW1wTGluZSkge1xyXG4gICAgICAgICAgb2xkV2lkdGhBZnRlckp1bXBMaW5lID0gbmV3VGV4dExlbmd0aDtcclxuICAgICAgICAgIHRleHRTaXplLnggPSBvbGRXaWR0aEFmdGVySnVtcExpbmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0ZXh0U2l6ZS55ICs9IHRoaXMuYmFzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHRoZXJlJ3Mgbm8gSlVNUExJTkVcclxuICAgIGlmICh0ZXh0U2l6ZS54ID09PSAwICYmIHBocmFzZUxlbmd0aCA+IDApIHtcclxuICAgICAgdGV4dFNpemUueCA9IHRoaXMubWVhc3VyZVN0cmluZ0xpbmVhbCh0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dFNpemU7XHJcbiAgfVxyXG5cclxuICBtZWFzdXJlU3RyaW5nTGluZWFsKHRleHQ6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBjb25zdCBwaHJhc2VMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcclxuICAgIGxldCB0ZXh0U2l6ZSA9IDA7XHJcbiAgICBsZXQgb2xkVW5pY29kZUNoYXIgPSAtMTtcclxuICAgIGxldCBjaGFyRGVzY3JpcHRvcjogT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3I7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaHJhc2VMZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQga2VybmluZ0Ftb3VudCA9IDA7XHJcbiAgICAgIGNvbnN0IHVuaWNvZGVDaGFyRmlyc3QgPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XHJcblxyXG4gICAgICBpZiAodGhpcy5leGlzdHNDaGFyKHVuaWNvZGVDaGFyRmlyc3QpKSB7XHJcbiAgICAgICAgLy8gUkVUUklFVkUgS0VSTklOR1xyXG4gICAgICAgIGlmIChvbGRVbmljb2RlQ2hhciAhPT0gLTEpIHtcclxuICAgICAgICAgIGtlcm5pbmdBbW91bnQgPSB0aGlzLmdldEtlcm5pbmcob2xkVW5pY29kZUNoYXIsIHVuaWNvZGVDaGFyRmlyc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUkVUUklFVkUgQ0hBUiBERVNDUklQVE9SXHJcbiAgICAgICAgY2hhckRlc2NyaXB0b3IgPSB0aGlzLmdldENoYXJEZXNjcmlwdG9yKHVuaWNvZGVDaGFyRmlyc3QpO1xyXG4gICAgICAgIC8vdGV4dFNpemUgKz0gKGNoYXJEZXNjcmlwdG9yLnhPZmZzZXQgKyBjaGFyRGVzY3JpcHRvci54QWR2YW5jZSArIGtlcm5pbmdBbW91bnQpO1xyXG4gICAgICAgIHRleHRTaXplICs9IGNoYXJEZXNjcmlwdG9yLnhBZHZhbmNlICsga2VybmluZ0Ftb3VudDtcclxuICAgICAgICAvLyBTVE9SSU5HIE9MRCBWQVJJQUJMRVNcclxuICAgICAgICBvbGRVbmljb2RlQ2hhciA9IHVuaWNvZGVDaGFyRmlyc3Q7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dFNpemU7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBPRkJpdG1hcEZvbnRLZXJuaW5nIHtcclxuICBmaXJzdCA9IDA7XHJcblx0c2Vjb25kID0gMDtcclxuXHRhbW91bnQgPSAwO1xyXG59IiwiaW1wb3J0IHsgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IgfSBmcm9tIFwiLi9vZkJpdG1hcEZvbnRDaGFyRGVzY3JpcHRvclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQml0bWFwRm9udFBhZ2Uge1xyXG4gIGlkID0gMDtcclxuICBjaGFyQ291bnQgPSAwO1xyXG4gIGNoYXJBcnJheVNpemUgPSAwO1xyXG5cdHBhdGggPSAnJztcclxuXHRpc0luaXRpYWxpemVkID0gZmFsc2U7XHJcblx0Y2hhcnM6IE9GQml0bWFwRm9udENoYXJEZXNjcmlwdG9yW10gPSBudWxsO1xyXG59IiwiaW1wb3J0IHsgT0ZCaXRtYXBGb250Q2hhcnNldCB9IGZyb20gJy4vZGF0YS9vZkJpdG1hcEZvbnRDaGFyc2V0JztcclxuaW1wb3J0IHsgT0ZCaXRtYXBGb250UGFnZSB9IGZyb20gJy4vZGF0YS9vZkJpdG1hcEZvbnRQYWdlJztcclxuaW1wb3J0IHsgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IgfSBmcm9tICcuL2RhdGEvb2ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3InO1xyXG5pbXBvcnQgeyBPRkJpdG1hcEZvbnRLZXJuaW5nIH0gZnJvbSAnLi9kYXRhL29mQml0bWFwRm9udEtlcm5pbmcnO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi8uLi9mcmFtZXdvcmsvaGVscGVycy9vZkNvbnNvbGUnO1xyXG5pbXBvcnQgeyBPRkVudW1LZXlDb2RlIH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL2VudW1zL29mRW51bUtleUNvZGUnO1xyXG5pbXBvcnQgeyBTVEhlbHBlcnMgfSBmcm9tICdzaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlscyc7XHJcblxyXG5lbnVtIE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMge1xyXG4gIERFRkFVTFRfTk9ORSA9IDAsXHJcbiAgSU5GTyA9IDEsXHJcbiAgQ09NTU9OID0gMixcclxuICBQQUdFID0gMyxcclxuICBDSEFSUyA9IDQsXHJcbiAgQ0hBUiA9IDUsXHJcbiAgS0VSTklORyA9IDYsXHJcbiAgS0VSTklOR1MgPSA3XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPRkJpdG1hcEZvbnRMb2FkZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIEJpdG1hcEZvbnRQYWdlVGVtcDogT0ZCaXRtYXBGb250UGFnZSA9IG51bGw7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgQml0bWFwRm9udFBhZ2VJbmRleFRlbXAgPSAtMTtcclxuICBwcml2YXRlIHN0YXRpYyBCaXRtYXBGb250Q2hhckluZGV4VGVtcCA9IC0xO1xyXG4gIHByaXZhdGUgc3RhdGljIEJpdG1hcEZvbnRLZXJuaW5nSW5kZXhUZW1wID0gLTE7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgRm9udENoYXJzZXQ6IE9GQml0bWFwRm9udENoYXJzZXQgPSBudWxsO1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgQ09NTUEgPSAnLCc7XHJcbiAgc3RhdGljIHJlYWRvbmx5IERPVCA9ICcuJztcclxuICBzdGF0aWMgcmVhZG9ubHkgV0hJVEVfU1BBQ0UgPSAnICc7XHJcbiAgc3RhdGljIHJlYWRvbmx5IEVRVUFMU19TSUdOID0gJz0nO1xyXG4gIHN0YXRpYyByZWFkb25seSBTTEFTSCA9ICcvJztcclxuICBzdGF0aWMgcmVhZG9ubHkgUVVPVEFUSU9OX01BUksgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKE9GRW51bUtleUNvZGUuUXVvdGF0aW9uTWFyayk7XHJcbiAgc3RhdGljIHJlYWRvbmx5IFNQQUNFID0gU3RyaW5nLmZyb21DaGFyQ29kZShPRkVudW1LZXlDb2RlLlNwYWNlKTtcclxuICBzdGF0aWMgcmVhZG9ubHkgTk9USElORyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoT0ZFbnVtS2V5Q29kZS5Ob3RoaW5nKTtcclxuICBzdGF0aWMgcmVhZG9ubHkgQkFDS1NMQVNIID0gU3RyaW5nLmZyb21DaGFyQ29kZShPRkVudW1LZXlDb2RlLkJhY2tzbGFzaCk7XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBBU0NJSUZpbHRlciA9IFtPRkJpdG1hcEZvbnRMb2FkZXIuTk9USElORywgT0ZCaXRtYXBGb250TG9hZGVyLkJBQ0tTTEFTSCwgT0ZCaXRtYXBGb250TG9hZGVyLlFVT1RBVElPTl9NQVJLLCBPRkJpdG1hcEZvbnRMb2FkZXIuV0hJVEVfU1BBQ0VdO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgc3RhdGljIHBhcnNlKGRhdGE6IHN0cmluZykge1xyXG4gICAgLy8gY2xlYXIgc3RhdGljIHZhcmlhYmxlc1xyXG4gICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRQYWdlVGVtcCA9IG51bGw7XHJcbiAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udFBhZ2VJbmRleFRlbXAgPSAtMTtcclxuICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250Q2hhckluZGV4VGVtcCA9IC0xO1xyXG4gICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRLZXJuaW5nSW5kZXhUZW1wID0gLTE7XHJcbiAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0IGZvbnRSYXdUZXh0TGluZXMgPSBkYXRhLnNwbGl0KCdcXG4nKTtcclxuXHJcbiAgICBsZXQgZmluaXNoID0gZmFsc2U7XHJcbiAgICBsZXQgdG1wU3RyaW5nID0gJyc7XHJcbiAgICBsZXQgcmVhZGVkTGluZSA9ICcnO1xyXG5cclxuICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldCA9IG5ldyBPRkJpdG1hcEZvbnRDaGFyc2V0KCk7XHJcbiAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udFBhZ2VUZW1wID0gbmV3IE9GQml0bWFwRm9udFBhZ2UoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gZm9udFJhd1RleHRMaW5lcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICByZWFkZWRMaW5lID0gZm9udFJhd1RleHRMaW5lc1tpXTtcclxuXHJcbiAgICAgIGxldCBmaW5kZWRRdW90YXRpb24gPSBmYWxzZTtcclxuICAgICAgbGV0IGZpcnN0UmVhZCA9IHRydWU7XHJcbiAgICAgIGxldCBmaW5pc2hJbnRlcm5hbCA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBsaW5lTGVuZ3RoID0gcmVhZGVkTGluZS5sZW5ndGg7XHJcbiAgICAgIGxldCBsaW5lUG9zaXRpb24gPSAwO1xyXG4gICAgICBsZXQgbGluZVR5cGUgPSBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLkRFRkFVTFRfTk9ORTtcclxuXHJcbiAgICAgIHdoaWxlICghZmluaXNoSW50ZXJuYWwpIHtcclxuICAgICAgICBpZiAobGluZVBvc2l0aW9uID49IGxpbmVMZW5ndGgpIHtcclxuICAgICAgICAgIGZpbmlzaEludGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICBpZiAodG1wU3RyaW5nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLnJlYWRpbmdBbmRTZXR0aW5nVmFsdWVzKGxpbmVUeXBlLCB0bXBTdHJpbmcpO1xyXG4gICAgICAgICAgICB0bXBTdHJpbmcgPSAnJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBsZXR0ZXIgPSByZWFkZWRMaW5lW2xpbmVQb3NpdGlvbl07XHJcbiAgICAgICAgICBsZXQgaXNzID0gbGV0dGVyID09PSBPRkJpdG1hcEZvbnRMb2FkZXIuU1BBQ0U7IC8vIGNoYXIuSXNTZXBhcmF0b3IgZXF1aXZhbGVudFxyXG4gICAgICAgICAgY29uc3QgaXNRdW90YXRpb24gPSBsZXR0ZXIgPT09IE9GQml0bWFwRm9udExvYWRlci5RVU9UQVRJT05fTUFSSztcclxuXHJcbiAgICAgICAgICBpZiAoaXNRdW90YXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFmaW5kZWRRdW90YXRpb24pIHtcclxuICAgICAgICAgICAgICBmaW5kZWRRdW90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGZpbmRlZFF1b3RhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaXNzID0gZmluZGVkUXVvdGF0aW9uID8gZmFsc2UgOiBpc3M7XHJcblxyXG4gICAgICAgICAgaWYgKGlzcykge1xyXG4gICAgICAgICAgICBpZiAodG1wU3RyaW5nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICBpZiAoZmlyc3RSZWFkKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdFJlYWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxpbmVUeXBlID0gT0ZCaXRtYXBGb250TG9hZGVyLmdldExpbmVUeXBlKHRtcFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5yZWFkaW5nQW5kU2V0dGluZ1ZhbHVlcyhsaW5lVHlwZSwgdG1wU3RyaW5nKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHRtcFN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0bXBTdHJpbmcgKz0gbGV0dGVyO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGxpbmVQb3NpdGlvbisrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZJTklTSCBUSEUgUkVBRCBPRiBGSUxFXHJcbiAgICBmaW5pc2ggPSB0cnVlO1xyXG5cclxuICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZUluZGV4VGVtcCA9IDA7XHJcbiAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udENoYXJJbmRleFRlbXAgPSAwO1xyXG4gICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRLZXJuaW5nSW5kZXhUZW1wID0gMDtcclxuXHJcbiAgICByZXR1cm4gT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZGluZ0FuZFNldHRpbmdWYWx1ZXMgKGxpbmVUeXBlOiBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLCB0bXBTdHJpbmc6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbGV0IHByb3BlcnR5VHlwZSA9ICcnO1xyXG4gICAgbGV0IHByb3BlcnR5VmFsdWUgPSAnJztcclxuXHJcbiAgICBsZXQgY2hhclBvcyA9IHRtcFN0cmluZy5pbmRleE9mKE9GQml0bWFwRm9udExvYWRlci5FUVVBTFNfU0lHTik7XHJcbiAgICBwcm9wZXJ0eVR5cGUgPSB0bXBTdHJpbmcuc3Vic3RyaW5nKDAsIGNoYXJQb3MpO1xyXG4gICAgcHJvcGVydHlWYWx1ZSA9IHRtcFN0cmluZy5zdWJzdHJpbmcoY2hhclBvcyArIDEpO1xyXG4gICAgcHJvcGVydHlWYWx1ZSA9IHByb3BlcnR5VmFsdWUucmVwbGFjZShPRkJpdG1hcEZvbnRMb2FkZXIuUVVPVEFUSU9OX01BUkssIE9GQml0bWFwRm9udExvYWRlci5OT1RISU5HKTtcclxuICAgIHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0eVZhbHVlLnJlcGxhY2UoT0ZCaXRtYXBGb250TG9hZGVyLkJBQ0tTTEFTSCwgT0ZCaXRtYXBGb250TG9hZGVyLk5PVEhJTkcpO1xyXG5cclxuICAgIC8vIFRFTVAgVkFSSUFCTEVTXHJcbiAgICBsZXQgY2hhckRlc2NUZW1wOiBPRkJpdG1hcEZvbnRDaGFyRGVzY3JpcHRvciA9IG51bGw7XHJcblxyXG4gICAgc3dpdGNoIChsaW5lVHlwZSkge1xyXG4gICAgICBjYXNlIE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuSU5GTzpcclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnZmFjZSc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5mb250TmFtZSA9IFNUSGVscGVycy5lcmFzZUNoYXJzSW5TdHJpbmcocHJvcGVydHlWYWx1ZSwgXHJcbiAgICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkFTQ0lJRmlsdGVyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdzaXplJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnNpemUgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdib2xkJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LmJvbGQgPSBwcm9wZXJ0eVZhbHVlID09PSAnMCcgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnaXRhbGljJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0Lml0YWxpYyA9IHByb3BlcnR5VmFsdWUgPT09ICcwJyA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdjaGFyc2V0JzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LmNoYXJzZXQgPSBTVEhlbHBlcnMuZXJhc2VDaGFyc0luU3RyaW5nKHByb3BlcnR5VmFsdWUsIFxyXG4gICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5BU0NJSUZpbHRlcik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAndW5pY29kZSc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC51bmljb2RlID0gcHJvcGVydHlWYWx1ZSA9PT0gJzAnID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3N0cmV0Y2hIJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnN0cmV0Y2hIID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnc21vb3RoJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnNtb290aCA9IHByb3BlcnR5VmFsdWUgPT09ICcwJyA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdhYSc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5hYSA9IHByb3BlcnR5VmFsdWUgPT09ICcwJyA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdwYWRkaW5nJzpcclxuICAgICAgICAgICAgY29uc3QgcHJvcFBhZGRpbmdzID0gcHJvcGVydHlWYWx1ZS5zcGxpdChPRkJpdG1hcEZvbnRMb2FkZXIuQ09NTUEpO1xyXG5cclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnBhZGRpbmcgPSBbXHJcbiAgICAgICAgICAgICAgcGFyc2VJbnQocHJvcFBhZGRpbmdzWzBdKSxcclxuICAgICAgICAgICAgICBwYXJzZUludChwcm9wUGFkZGluZ3NbMV0pLFxyXG4gICAgICAgICAgICAgIHBhcnNlSW50KHByb3BQYWRkaW5nc1syXSksXHJcbiAgICAgICAgICAgICAgcGFyc2VJbnQocHJvcFBhZGRpbmdzWzNdKSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdzcGFjaW5nJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnNwYWNpbmcgPSBbXHJcbiAgICAgICAgICAgICAgcGFyc2VJbnQoU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChwcm9wZXJ0eVZhbHVlWzBdKSkpLCBcclxuICAgICAgICAgICAgICBwYXJzZUludChTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHByb3BlcnR5VmFsdWVbMl0pKSlcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdvdXRsaW5lJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0Lm91dGxpbmUgPSBwcm9wZXJ0eVZhbHVlID09PSAnMCcgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLkNPTU1PTjpcclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnbGluZUhlaWdodCc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5saW5lSGVpZ2h0ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnYmFzZSc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5iYXNlID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnc2NhbGVXJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LnNjYWxlV2lkdGggPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdzY2FsZUgnOlxyXG4gICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQuc2NhbGVIZWlnaHQgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdwYWdlcyc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5wYWdlcyA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQuZm9udFBhZ2VzID0gbmV3IEFycmF5PE9GQml0bWFwRm9udFBhZ2U+KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIGFycmF5XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQucGFnZXM7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5mb250UGFnZXMucHVzaChuZXcgT0ZCaXRtYXBGb250UGFnZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3BhY2tlZCc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5wYWNrZWQgPSBwcm9wZXJ0eVZhbHVlID09PSAnMCcgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnYWxwaGFDaG5sJzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LmFscGhhQ2hubCA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3JlZENobmwnOlxyXG4gICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQucmVkQ2hubCA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2dyZWVuQ2hubCc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5ncmVlbkNobmwgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdibHVlQ2hubCc6XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5ibHVlQ2hubCA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcy5QQUdFOlxyXG4gICAgICAgIGxldCBOQkZQYWdlOiBPRkJpdG1hcEZvbnRQYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQuZm9udFBhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBOQkZQYWdlID0gT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0LmZvbnRQYWdlc1tpXTtcclxuXHJcbiAgICAgICAgICBpZiAoIU5CRlBhZ2UuaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ2lkJzpcclxuICAgICAgICAgICAgICAgIE5CRlBhZ2UuaWQgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxyXG4gICAgICAgICAgICAgICAgTkJGUGFnZS5wYXRoID0gU1RIZWxwZXJzLmVyYXNlQ2hhcnNJblN0cmluZyhwcm9wZXJ0eVZhbHVlLCBPRkJpdG1hcEZvbnRMb2FkZXIuQVNDSUlGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgTkJGUGFnZS5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUSElTIEFSRSBURU1QT1JBTCBWQVJJQUJMRVMgRk9SIFRIRSBQQUdFU1xyXG4gICAgICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wID0gMDtcclxuICAgICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZUluZGV4VGVtcCA9IGk7XHJcbiAgICAgICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udFBhZ2VUZW1wID0gTkJGUGFnZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQuZm9udFBhZ2VzW2ldID0gTkJGUGFnZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuQ0hBUlM6XHJcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eVR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgJ2NvdW50JzpcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wID0gLTE7XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXAuY2hhckNvdW50ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXAuY2hhcnMgPSBbXTsgLypOQml0bWFwRm9udENoYXJEZXNjcmlwdG9yKi9cclxuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBhcnJheVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9GQml0bWFwRm9udENoYXJzZXQuQ0hBUl9ERVNDUklQVE9SX1NJWkU7IGkrKykge1xyXG4gICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXAuY2hhcnMucHVzaChuZXcgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXAuY2hhckFycmF5U2l6ZSA9IE9GQml0bWFwRm9udENoYXJzZXQuQ0hBUl9ERVNDUklQVE9SX1NJWkU7XHJcbiAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5mb250UGFnZXNbT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRQYWdlSW5kZXhUZW1wXSA9IE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXA7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLkNIQVI6XHJcbiAgICAgICAgaWYgKE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250Q2hhckluZGV4VGVtcCAhPT0gLTEpIHtcclxuICAgICAgICAgIGlmIChPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udENoYXJJbmRleFRlbXAgPCBPRkJpdG1hcEZvbnRDaGFyc2V0LkNIQVJfREVTQ1JJUFRPUl9TSVpFKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eVR5cGUgPT09ICdpZCcpIHtcclxuICAgICAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udENoYXJJbmRleFRlbXAgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgfSAvLyBBZGRlZCBsb2dpYyBiZWNhdXNlIEpTIGRvZXNuJ3QgaGF2ZSBzdHJ1Y3RzXHJcbiAgICAgICAgICAgIGNoYXJEZXNjVGVtcCA9IE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXAuY2hhcnNbT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjaGFyRGVzY1RlbXAgPSBuZXcgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoaXMgaGFwcGVuIG9ubHkgd2hlbiB0aGUgY2hhciBpcyBvZmYgdGhlIGxpbWl0cyBvZjogIENIQVJfREVTQ1JJUFRPUl9TSVpFXHJcbiAgICAgICAgaWYgKCFjaGFyRGVzY1RlbXApIGJyZWFrO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnaWQnOlxyXG4gICAgICAgICAgICBjaGFyRGVzY1RlbXAuaWQgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wID0gY2hhckRlc2NUZW1wLmlkO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgICBjaGFyRGVzY1RlbXAueCA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3knOlxyXG4gICAgICAgICAgICBjaGFyRGVzY1RlbXAueSA9IHBhcnNlSW50KHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3dpZHRoJzpcclxuICAgICAgICAgICAgY2hhckRlc2NUZW1wLndpZHRoID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNoYXJEZXNjVGVtcC50ZXh0dXJlVSA9IGNoYXJEZXNjVGVtcC53aWR0aDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdoZWlnaHQnOlxyXG4gICAgICAgICAgICBjaGFyRGVzY1RlbXAuaGVpZ2h0ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNoYXJEZXNjVGVtcC50ZXh0dXJlViA9IGNoYXJEZXNjVGVtcC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAneG9mZnNldCc6XHJcbiAgICAgICAgICAgIGNoYXJEZXNjVGVtcC54T2Zmc2V0ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAneW9mZnNldCc6XHJcbiAgICAgICAgICAgIGNoYXJEZXNjVGVtcC55T2Zmc2V0ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAneGFkdmFuY2UnOlxyXG4gICAgICAgICAgICBjaGFyRGVzY1RlbXAueEFkdmFuY2UgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdwYWdlJzpcclxuICAgICAgICAgICAgY2hhckRlc2NUZW1wLnBhZ2UgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdjaG5sJzpcclxuICAgICAgICAgICAgY2hhckRlc2NUZW1wLmNobmwgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wIDwgT0ZCaXRtYXBGb250Q2hhcnNldC5DSEFSX0RFU0NSSVBUT1JfU0laRSkge1xyXG4gICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRQYWdlVGVtcC5jaGFyc1tPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udENoYXJJbmRleFRlbXBdID0gY2hhckRlc2NUZW1wO1xyXG5cclxuICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5mb250UGFnZXNbT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRQYWdlSW5kZXhUZW1wXSA9IE9GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250UGFnZVRlbXA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIFRPRE86IFRyYW5zbGF0ZSB0aGlzLCBtYXliZSBpbiBpdHMgb3duIG1vZHVsZT9cclxuICAgICAgICAgIE9GQ29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICBcIk9GQml0bWFwRm9udExvYWRlcj4gcmVhZGluZ0FuZFNldHRpbmdWYWx1ZXM+IEluIHRoZSBGb250OiAnXCIgK1xyXG4gICAgICAgICAgICAgIE9GQml0bWFwRm9udExvYWRlci5Gb250Q2hhcnNldC5mb250TmFtZSArXHJcbiAgICAgICAgICAgICAgXCInIHRoZSBjaGFyIGluZGV4OiBcIiArXHJcbiAgICAgICAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wICtcclxuICAgICAgICAgICAgICAnIGlzIG91dCBvZiB0aGUgcmFuZ2Ugb2YgdGhlIGRlZmF1bHQgc2l6ZSBvZiB0aGUgY2hhciBkZXNjcmlwdGlvbjogJyArXHJcbiAgICAgICAgICAgICAgT0ZCaXRtYXBGb250Q2hhcnNldC5DSEFSX0RFU0NSSVBUT1JfU0laRVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuS0VSTklOR1M6XHJcbiAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRLZXJuaW5nSW5kZXhUZW1wID0gMDtcclxuICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQua2VybmluZ3MgPSBuZXcgQXJyYXk8T0ZCaXRtYXBGb250S2VybmluZz4oKTtcclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBhcnJheVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQua2VybmluZ3MucHVzaChuZXcgT0ZCaXRtYXBGb250S2VybmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcy5LRVJOSU5HOlxyXG4gICAgICAgIGxldCBpbmNyZW1lbnRLZXJuaW5nUmVhZGVyID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3Qga2VybmluZ1RlbXAgPSBPRkJpdG1hcEZvbnRMb2FkZXIuRm9udENoYXJzZXQua2VybmluZ3NbT0ZCaXRtYXBGb250TG9hZGVyLkJpdG1hcEZvbnRLZXJuaW5nSW5kZXhUZW1wXTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eVR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgJ2ZpcnN0JzpcclxuICAgICAgICAgICAga2VybmluZ1RlbXAuZmlyc3QgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdzZWNvbmQnOlxyXG4gICAgICAgICAgICBrZXJuaW5nVGVtcC5zZWNvbmQgPSBwYXJzZUludChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdhbW91bnQnOlxyXG4gICAgICAgICAgICBpbmNyZW1lbnRLZXJuaW5nUmVhZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAga2VybmluZ1RlbXAuYW1vdW50ID0gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT0ZCaXRtYXBGb250TG9hZGVyLkZvbnRDaGFyc2V0Lmtlcm5pbmdzW09GQml0bWFwRm9udExvYWRlci5CaXRtYXBGb250S2VybmluZ0luZGV4VGVtcF0gPSBrZXJuaW5nVGVtcDtcclxuXHJcbiAgICAgICAgaWYgKGluY3JlbWVudEtlcm5pbmdSZWFkZXIpIHtcclxuICAgICAgICAgIC8vIEdPIFRPIE5FWFQgS0VSTklORyBOT0RFXHJcbiAgICAgICAgICBPRkJpdG1hcEZvbnRMb2FkZXIuQml0bWFwRm9udEtlcm5pbmdJbmRleFRlbXArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRMaW5lVHlwZSh2YWx1ZVR5cGUpIHtcclxuICAgIGxldCBsaW5lVHlwZSA9IE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuREVGQVVMVF9OT05FO1xyXG5cclxuICAgIHN3aXRjaCAodmFsdWVUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ2luZm8nOlxyXG4gICAgICAgIGxpbmVUeXBlID0gT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcy5JTkZPO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdjb21tb24nOlxyXG4gICAgICAgIGxpbmVUeXBlID0gT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcy5DT01NT047XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BhZ2UnOlxyXG4gICAgICAgIGxpbmVUeXBlID0gT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcy5QQUdFO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdjaGFycyc6XHJcbiAgICAgICAgbGluZVR5cGUgPSBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLkNIQVJTO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdjaGFyJzpcclxuICAgICAgICBsaW5lVHlwZSA9IE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuQ0hBUjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAna2VybmluZyc6XHJcbiAgICAgICAgbGluZVR5cGUgPSBPRkVudW1CaXRtYXBGb250TGluZVR5cGVzLktFUk5JTkc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2tlcm5pbmdzJzpcclxuICAgICAgICBsaW5lVHlwZSA9IE9GRW51bUJpdG1hcEZvbnRMaW5lVHlwZXMuS0VSTklOR1M7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxpbmVUeXBlO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZW51bSBPRkVudW1TaGFkZXJEYXRhVHlwZXMge1xyXG4gIFVua293biAgICAgICAgICAgPSAwLFxyXG4gIE1hdHJpeDIgICAgICAgICAgPSAxLFxyXG4gIE1hdHJpeDMgICAgICAgICAgPSAyLFxyXG4gIE1hdHJpeDQgICAgICAgICAgPSAzLFxyXG4gIFZlY3RvcjIgICAgICAgICAgPSA0LFxyXG4gIFZlY3RvcjMgICAgICAgICAgPSA1LFxyXG4gIFZlY3RvcjQgICAgICAgICAgPSA2LFxyXG4gIEludFZlY3RvcjIgICAgICAgPSA3LFxyXG4gIEludFZlY3RvcjMgICAgICAgPSA4LFxyXG4gIEludFZlY3RvcjQgICAgICAgPSA5LFxyXG4gIEJvb2xlYW5WZWN0b3IyICAgPSAxMCxcclxuICBCb29sZWFuVmVjdG9yMyAgID0gMTEsXHJcbiAgQm9vbGVhblZlY3RvcjQgICA9IDEyLFxyXG4gIFNhbXBsZXIyRCAgICAgICAgPSAxMyxcclxuICBTYW1wbGVyQ3ViZSAgICAgID0gMTQsXHJcbiAgRmxvYXQgICAgICAgICAgICA9IDE1LFxyXG4gIEludCAgICAgICAgICAgICAgPSAxNixcclxuICBCb29sICAgICAgICAgICAgID0gMTcsXHJcbiAgSUNhbWVyYSAgICAgICAgICA9IDE4LFxyXG4gIElDb2xvciAgICAgICAgICAgPSAxOSxcclxuICBJVGV4dHVyZSAgICAgICAgID0gMjBcclxufVxyXG4iLCJleHBvcnQgZW51bSBPRkVudW1TaGFkZXJMaXRlcmFscyB7XHJcbiAgLy8gSW5wdXQgVmFyaWFibGUgVHlwZXNcclxuICBJTl9NYXRyaXgyICAgICAgICAgICA9IFwiTUFUMlwiLFxyXG4gIElOX01hdHJpeDMgICAgICAgICAgID0gXCJNQVQzXCIsXHJcbiAgSU5fTWF0cml4NCAgICAgICAgICAgPSBcIk1BVDRcIixcclxuICBJTl9WZWN0b3IyICAgICAgICAgICA9IFwiVkVDMlwiLFxyXG4gIElOX1ZlY3RvcjMgICAgICAgICAgID0gXCJWRUMzXCIsXHJcbiAgSU5fVmVjdG9yNCAgICAgICAgICAgPSBcIlZFQzRcIixcclxuICBJTl9JbnRWZWN0b3IyICAgICAgICA9IFwiSVZFQzJcIixcclxuICBJTl9JbnRWZWN0b3IzICAgICAgICA9IFwiSVZFQzNcIixcclxuICBJTl9JbnRWZWN0b3I0ICAgICAgICA9IFwiSVZFQzRcIixcclxuICBJTl9Cb29sZWFuVmVjdG9yMiAgICA9IFwiQlZFQzJcIixcclxuICBJTl9Cb29sZWFuVmVjdG9yMyAgICA9IFwiQlZFQzNcIixcclxuICBJTl9Cb29sZWFuVmVjdG9yNCAgICA9IFwiQlZFQzRcIixcclxuICBJTl9TYW1wbGVyMkQgICAgICAgICA9IFwiU0FNUExFUjJEXCIsXHJcbiAgSU5fU2FtcGxlckN1YmUgICAgICAgPSBcIlNBTVBMRVJDVUJFXCIsXHJcbiAgSU5fRmxvYXQgICAgICAgICAgICAgPSBcIkZMT0FUXCIsXHJcbiAgSU5fSW50ICAgICAgICAgICAgICAgPSBcIklOVFwiLFxyXG4gIElOX0Jvb2wgICAgICAgICAgICAgID0gXCJCT09MXCIsXHJcblxyXG4gIC8vIERlY2xhcmF0aXZlIFR5cGVzXHJcbiAgRFRfVGV4dHVyZSAgID0gXCJURVhUVVJFXCIsXHJcbiAgRFRfQ29sb3IgICAgID0gXCJDT0xPUlwiLFxyXG4gIERUX0NhbWVyYSAgICA9IFwiQ0FNRVJBXCJcclxufSIsImltcG9ydCB7IE9GRW51bVNoYWRlckRhdGFUeXBlcyB9IGZyb20gJy4vb2ZFbnVtU2hhZGVyRGF0YVR5cGVzJztcclxuaW1wb3J0IHsgT0ZFbnVtU2hhZGVyTGl0ZXJhbHMgfSBmcm9tICcuL29mRW51bVNoYWRlckxpdGVyYWxzJztcclxuaW1wb3J0IHsgT0ZJU2hhZGVyQ29kZUluZm8gfSBmcm9tICcuL2RhdGEvb2ZJU2hhZGVyQ29kZUluZm8nO1xyXG5pbXBvcnQgeyBPRklTaGFkZXJDb2RlSW5mb0lucHV0IH0gZnJvbSAnLi9kYXRhL29mSVNoYWRlckNvZGVJbmZvSW5wdXQnO1xyXG5pbXBvcnQgeyBPRklTaGFkZXJDb2RlSW5mb0lucHV0RGF0YSB9IGZyb20gJy4vZGF0YS9vZklTaGFkZXJDb2RlSW5mb0lucHV0RGF0YSc7XHJcbmltcG9ydCB7IElEaWN0aW9uYXJ5IH0gZnJvbSAnc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMnXHJcblxyXG5leHBvcnQgY2xhc3MgT0ZTaGFkZXJBbmFsaXplciB7XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGVudW1BdHRyaWJ1dGUgPSAxO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGVudW1Vbmlmb3JtID0gMjtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYXR0cmlidXRlU3RyaW5nTGVuZ2h0ID0gOTsgLy8gOS1sZXR0ZXJzIGNvbXBvc2UgJ2F0dHJpYnV0ZSdcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSB1bmlmb3JtU3RyaW5nTGVuZ2h0ID0gNzsgLy8gNy1sZXR0ZXJzIGNvbXBvc2UgJ3VuaWZvcm0nXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaW5kZXhMaW1pdCA9IDk5OTk5OTsgLy8gNy1sZXR0ZXJzIGNvbXBvc2UgJ3VuaWZvcm0nXHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBzdGF0aWMgYW5hbGl6ZSAoc2hhZGVyU291cmNlOiBzdHJpbmcsIG91dHB1dE9iamVjdD86IE9GSVNoYWRlckNvZGVJbmZvKTogT0ZJU2hhZGVyQ29kZUluZm8ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gb3V0cHV0T2JqZWN0ID8gb3V0cHV0T2JqZWN0IDoge1xyXG4gICAgICAgIGF0dHJpYnV0ZUNvdW50OiAwLFxyXG4gICAgICAgIHVuaWZvcm1Db3VudDogMCxcclxuICAgICAgICBhdHRyaWJ1dGVzOiBbXSxcclxuICAgICAgICB1bmlmb3JtczogW11cclxuICAgIH0gYXMgT0ZJU2hhZGVyQ29kZUluZm87XHJcblxyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGNvbnN0IGRpY3REVEluZGV4QWNjdW06IElEaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAvLyBmaXJzdCBnZXQgdGhlIGlucHV0IGRhdGEgaW5mb1xyXG4gICAgICBjb25zdCBpbnB1dERhdGFJbmZvID0gT0ZTaGFkZXJBbmFsaXplci5nZXRJbnB1dERhdGFJbmZvKHNoYWRlclNvdXJjZSwgaW5kZXgpO1xyXG4gICAgICAvLyBub3cgZmluZCB0aGUgaW5wdXQgYW5kIGFkZCBpdFxyXG4gICAgICBjb25zdCBvdXRwdXQgPSBPRlNoYWRlckFuYWxpemVyLmdldE5leHRJbnB1dERhdGEoc2hhZGVyU291cmNlLCBpbnB1dERhdGFJbmZvKTtcclxuXHJcbiAgICAgIGlmIChpbnB1dERhdGFJbmZvLmlucHV0SW5kZXggIT09IE9GU2hhZGVyQW5hbGl6ZXIuaW5kZXhMaW1pdCkge1xyXG4gICAgICAgIGlmIChvdXRwdXQuaW5wdXROYW1lKSB7XHJcbiAgICAgICAgICAvLyBzZXQgdGhlIGN1cnJlbnQgaW5kZXhcclxuICAgICAgICAgIGluZGV4ID0gb3V0cHV0Lmxhc3RJbmRleDtcclxuXHJcbiAgICAgICAgICAvLyBub3cgcmVtb3ZlIHRoYXQgcHJvcFxyXG4gICAgICAgICAgZGVsZXRlIG91dHB1dC5sYXN0SW5kZXg7XHJcblxyXG4gICAgICAgICAgLy8gYWRkIGl0IHRvIHRoZSBhcnJheVxyXG4gICAgICAgICAgc3dpdGNoIChpbnB1dERhdGFJbmZvLmlucHV0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE9GU2hhZGVyQW5hbGl6ZXIuZW51bUF0dHJpYnV0ZTpcclxuICAgICAgICAgICAgICByZXN1bHQuYXR0cmlidXRlQ291bnQrKztcclxuICAgICAgICAgICAgICByZXN1bHQuYXR0cmlidXRlcy5wdXNoKG91dHB1dCk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgT0ZTaGFkZXJBbmFsaXplci5lbnVtVW5pZm9ybTpcclxuICAgICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBpbmRleCBvZiBhIGRlY2xhcmF0aXZlIHR5cGVcclxuICAgICAgICAgICAgICBpZiAoIWRpY3REVEluZGV4QWNjdW0uaGFzT3duUHJvcGVydHkoJ3BwXycgKyBvdXRwdXQuaW5wdXRWYXJpYWJsZVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRpY3REVEluZGV4QWNjdW1bJ3BwXycgKyBvdXRwdXQuaW5wdXRWYXJpYWJsZVR5cGVdID0gMDtcclxuICAgICAgICAgICAgICB9IGVsc2UgeyBkaWN0RFRJbmRleEFjY3VtWydwcF8nICsgb3V0cHV0LmlucHV0VmFyaWFibGVUeXBlXSsrOyB9XHJcbiAgICAgICAgICAgICAgLy8gbm93IHNldCB0aGUgaW5kZXggb2YgYSBkZWNsYXJhdGl2ZSB0eXBlXHJcbiAgICAgICAgICAgICAgb3V0cHV0LmlucHV0RGVjbGFyYXRpdmVWYXJpYWJsZUluZGV4ID0gZGljdERUSW5kZXhBY2N1bVsncHBfJyArIG91dHB1dC5pbnB1dFZhcmlhYmxlVHlwZV07XHJcblxyXG4gICAgICAgICAgICAgIHJlc3VsdC51bmlmb3JtQ291bnQrKztcclxuICAgICAgICAgICAgICByZXN1bHQudW5pZm9ybXMucHVzaChvdXRwdXQpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRJbnB1dERhdGFJbmZvIChzaGFkZXJTb3VyY2U6IHN0cmluZywgc3RhcnRJbmRleDogbnVtYmVyKTogT0ZJU2hhZGVyQ29kZUluZm9JbnB1dCB7XHJcbiAgICBjb25zdCByZXN1bHRJbmZvID0ge1xyXG4gICAgICAgIGlucHV0TmFtZTogJycsXHJcbiAgICAgICAgaW5wdXRUeXBlOiAwLFxyXG4gICAgICAgIGlucHV0SW5kZXg6IC0xLFxyXG4gICAgICAgIGlucHV0TmFtZUxlbmd0aDogMFxyXG4gICAgfSBhcyBPRklTaGFkZXJDb2RlSW5mb0lucHV0O1xyXG5cclxuICAgIGxldCBpbnB1dEluZGV4X2F0dHJpYnV0ZSA9IHNoYWRlclNvdXJjZS5pbmRleE9mKCdhdHRyaWJ1dGUnLCBzdGFydEluZGV4KTtcclxuICAgIGxldCBpbnB1dEluZGV4X3VuaWZvcm0gPSBzaGFkZXJTb3VyY2UuaW5kZXhPZigndW5pZm9ybScsIHN0YXJ0SW5kZXgpO1xyXG5cclxuICAgIGlucHV0SW5kZXhfYXR0cmlidXRlID0gaW5wdXRJbmRleF9hdHRyaWJ1dGUgPT09IC0xID8gT0ZTaGFkZXJBbmFsaXplci5pbmRleExpbWl0IDogaW5wdXRJbmRleF9hdHRyaWJ1dGU7XHJcbiAgICBpbnB1dEluZGV4X3VuaWZvcm0gPSBpbnB1dEluZGV4X3VuaWZvcm0gPT09IC0xID8gT0ZTaGFkZXJBbmFsaXplci5pbmRleExpbWl0IDogaW5wdXRJbmRleF91bmlmb3JtO1xyXG5cclxuICAgIGNvbnN0IGlucHV0RGF0YVR5cGUgPSBpbnB1dEluZGV4X2F0dHJpYnV0ZSA8IGlucHV0SW5kZXhfdW5pZm9ybVxyXG4gICAgICA/IE9GU2hhZGVyQW5hbGl6ZXIuZW51bUF0dHJpYnV0ZVxyXG4gICAgICA6IE9GU2hhZGVyQW5hbGl6ZXIuZW51bVVuaWZvcm07XHJcblxyXG4gICAgc3dpdGNoIChpbnB1dERhdGFUeXBlKSB7XHJcbiAgICAgIGNhc2UgT0ZTaGFkZXJBbmFsaXplci5lbnVtQXR0cmlidXRlOlxyXG4gICAgICAgIHJlc3VsdEluZm8uaW5wdXROYW1lID0gJ2F0dHJpYnV0ZSc7XHJcbiAgICAgICAgcmVzdWx0SW5mby5pbnB1dFR5cGUgPSBpbnB1dERhdGFUeXBlO1xyXG4gICAgICAgIHJlc3VsdEluZm8uaW5wdXRJbmRleCA9IGlucHV0SW5kZXhfYXR0cmlidXRlO1xyXG4gICAgICAgIHJlc3VsdEluZm8uaW5wdXROYW1lTGVuZ3RoID0gT0ZTaGFkZXJBbmFsaXplci5hdHRyaWJ1dGVTdHJpbmdMZW5naHQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgT0ZTaGFkZXJBbmFsaXplci5lbnVtVW5pZm9ybTpcclxuICAgICAgICByZXN1bHRJbmZvLmlucHV0TmFtZSA9ICd1bmlmb3JtJztcclxuICAgICAgICByZXN1bHRJbmZvLmlucHV0VHlwZSA9IGlucHV0RGF0YVR5cGU7XHJcbiAgICAgICAgcmVzdWx0SW5mby5pbnB1dEluZGV4ID0gaW5wdXRJbmRleF91bmlmb3JtO1xyXG4gICAgICAgIHJlc3VsdEluZm8uaW5wdXROYW1lTGVuZ3RoID0gT0ZTaGFkZXJBbmFsaXplci51bmlmb3JtU3RyaW5nTGVuZ2h0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHRJbmZvO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0TmV4dElucHV0RGF0YSAoc2hhZGVyU291cmNlOiBzdHJpbmcsIGlucHV0RGF0YUluZm8pOiBPRklTaGFkZXJDb2RlSW5mb0lucHV0RGF0YSB7XHJcbiAgICBjb25zdCBpbnB1dFN0cmluZ0xlbmd0aCA9IGlucHV0RGF0YUluZm8uaW5wdXROYW1lTGVuZ3RoO1xyXG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGlucHV0RGF0YUluZm8uaW5wdXRJbmRleDtcclxuXHJcbiAgICBjb25zdCBpbnB1dEluZGV4ID0gc2hhZGVyU291cmNlLmluZGV4T2YoaW5wdXREYXRhSW5mby5pbnB1dE5hbWUsIHN0YXJ0SW5kZXgpO1xyXG4gICAgbGV0IG91dF9sYXN0SW5kZXggPSBzdGFydEluZGV4O1xyXG4gICAgbGV0IG91dF9pbnB1dFZhcmlhYmxlVHlwZTogc3RyaW5nO1xyXG4gICAgbGV0IG91dF9pbnB1dE5hbWU6IHN0cmluZztcclxuICAgIGxldCBvdXRfaW5wdXREZWNsYXJhdGl2ZVZhcmlhYmxlVHlwZU5hbWU6IHN0cmluZztcclxuICAgIGxldCBvdXRfaW5wdXRQcmVjaXNpb246IHN0cmluZztcclxuXHJcbiAgICBpZiAoaW5wdXRJbmRleCAhPT0gLTEpIHtcclxuICAgICAgY29uc3QgaW5kZXhJbml0VG9UeXBlID0gKGlucHV0SW5kZXggKyBpbnB1dFN0cmluZ0xlbmd0aCkgKyAxO1xyXG4gICAgICBjb25zdCBpbmRleEVuZFRvVHlwZSA9IHNoYWRlclNvdXJjZS5pbmRleE9mKCcgJywgaW5kZXhJbml0VG9UeXBlKTtcclxuICAgICAgY29uc3QgaW5kZXhJbml0VG9OYW1lID0gaW5kZXhFbmRUb1R5cGUgKyAxO1xyXG4gICAgICBsZXQgaW5kZXhFbmRUb05hbWUgPSBzaGFkZXJTb3VyY2UuaW5kZXhPZignOycsIGluZGV4SW5pdFRvTmFtZSk7XHJcblxyXG4gICAgICBvdXRfaW5wdXRWYXJpYWJsZVR5cGUgPSBzaGFkZXJTb3VyY2Uuc3Vic3RyKGluZGV4SW5pdFRvVHlwZSwgKGluZGV4RW5kVG9UeXBlIC0gaW5kZXhJbml0VG9UeXBlKSkudHJpbSgpO1xyXG4gICAgICBvdXRfaW5wdXROYW1lID0gc2hhZGVyU291cmNlLnN1YnN0cihpbmRleEluaXRUb05hbWUsIChpbmRleEVuZFRvTmFtZSAtIGluZGV4SW5pdFRvTmFtZSkpO1xyXG5cclxuICAgICAgaWYgKG91dF9pbnB1dE5hbWUuaW5kZXhPZignOicpICE9PSAtMSkge1xyXG4gICAgICAgIC8vIEhhdmUgZGVjbGFyYXRpdmUgaW50ZXJuYWwgd2ViRW5naW5lIHR5cGVzIGhlbHBlcnMuXHJcbiAgICAgICAgaW5kZXhFbmRUb05hbWUgPSBzaGFkZXJTb3VyY2UuaW5kZXhPZignOicsIGluZGV4SW5pdFRvTmFtZSk7XHJcbiAgICAgICAgLy8gdXBkYXRlIHVuaWZvcm0gbmFtZVxyXG4gICAgICAgIG91dF9pbnB1dE5hbWUgPSBzaGFkZXJTb3VyY2Uuc3Vic3RyKGluZGV4SW5pdFRvTmFtZSwgKGluZGV4RW5kVG9OYW1lIC0gaW5kZXhJbml0VG9OYW1lKSkudHJpbSgpO1xyXG5cclxuICAgICAgICBjb25zdCBpbmRleEluaXREVlQgPSBzaGFkZXJTb3VyY2UuaW5kZXhPZignOicsIGluZGV4RW5kVG9OYW1lKSArIDE7XHJcbiAgICAgICAgY29uc3QgaW5kZXhFbmREVlQgPSBzaGFkZXJTb3VyY2UuaW5kZXhPZignOycsIGluZGV4SW5pdERWVCk7XHJcblxyXG4gICAgICAgIG91dF9pbnB1dERlY2xhcmF0aXZlVmFyaWFibGVUeXBlTmFtZSA9IHNoYWRlclNvdXJjZS5zdWJzdHIoaW5kZXhJbml0RFZULCBcclxuICAgICAgICAgICAgKGluZGV4RW5kRFZUIC0gaW5kZXhJbml0RFZUKSkudHJpbSgpO1xyXG5cclxuICAgICAgICAvLyBzZXQgbGFzdCBzdGFydEluZGV4XHJcbiAgICAgICAgb3V0X2xhc3RJbmRleCA9IGluZGV4RW5kRFZUO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHNldCBsYXN0IHN0YXJ0SW5kZXhcclxuICAgICAgICBvdXRfbGFzdEluZGV4ID0gaW5kZXhFbmRUb05hbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBpZiBoYXZlIHByZWNpc2lvblxyXG4gICAgaWYgKG91dF9pbnB1dE5hbWUpIHtcclxuICAgICAgY29uc3QgaW5kZXhQcmVjaXNpb24gPSBvdXRfaW5wdXROYW1lLmluZGV4T2YoJyAnKTtcclxuXHJcbiAgICAgIGlmIChpbmRleFByZWNpc2lvbiAhPT0gLTEpIHtcclxuICAgICAgICAvLyBpZiBoYXZlIHByZWNpc2lvbiB0aGVuIGZpeCB0aGUgJ291dF9pbnB1dFZhcmlhYmxlVHlwZScgd2l0aCB0aGUgY29ycmVjdCBkYXRhXHJcbiAgICAgICAgb3V0X2lucHV0UHJlY2lzaW9uID0gb3V0X2lucHV0VmFyaWFibGVUeXBlO1xyXG4gICAgICAgIG91dF9pbnB1dFZhcmlhYmxlVHlwZSA9IG91dF9pbnB1dE5hbWUuc3Vic3RyaW5nKDAsIGluZGV4UHJlY2lzaW9uKTtcclxuICAgICAgICBvdXRfaW5wdXROYW1lID0gb3V0X2lucHV0TmFtZS5zdWJzdHJpbmcoaW5kZXhQcmVjaXNpb24gKyAxLCBvdXRfaW5wdXROYW1lLmxlbmd0aCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsYXN0SW5kZXg6IG91dF9sYXN0SW5kZXgsXHJcbiAgICAgIGlucHV0UHJlY2lzaW9uOiBvdXRfaW5wdXRQcmVjaXNpb24sXHJcbiAgICAgIGlucHV0VmFyaWFibGVUeXBlOiBPRlNoYWRlckFuYWxpemVyLmNoYW5nZVZhcmlhYmxlVHlwZVRvRW51bShvdXRfaW5wdXRWYXJpYWJsZVR5cGUsXHJcbiAgICAgICAgb3V0X2lucHV0RGVjbGFyYXRpdmVWYXJpYWJsZVR5cGVOYW1lKSxcclxuICAgICAgaW5wdXROYW1lOiBvdXRfaW5wdXROYW1lID8gb3V0X2lucHV0TmFtZS50cmltKCkgOiBvdXRfaW5wdXROYW1lLFxyXG4gICAgICBpbnB1dERlY2xhcmF0aXZlVmFyaWFibGVJbmRleDogMFxyXG4gICAgfSBhcyBPRklTaGFkZXJDb2RlSW5mb0lucHV0RGF0YTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzYW5pdGl6ZSAoc2hhZGVyU291cmNlOiBzdHJpbmcpIHtcclxuICAgIGxldCBzdGFydEluZGV4ID0gMDtcclxuICAgIGxldCBvdXRwdXRSZXN1bHQgPSBzaGFkZXJTb3VyY2U7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBjb25zdCBkZWNsYXJhdGl2ZVN0YXJ0ID0gb3V0cHV0UmVzdWx0LmluZGV4T2YoJ3VuaWZvcm0nLCBzdGFydEluZGV4KTtcclxuXHJcbiAgICAgICAgaWYgKGRlY2xhcmF0aXZlU3RhcnQgIT09IC0xKSB7XHJcbiAgICAgICAgICBjb25zdCBkZWNsYXJhdGl2ZUVuZCA9IG91dHB1dFJlc3VsdC5pbmRleE9mKCc7JywgZGVjbGFyYXRpdmVTdGFydCk7XHJcbiAgICAgICAgICBjb25zdCBjb2RlTGluZSA9IG91dHB1dFJlc3VsdC5zdWJzdHIoZGVjbGFyYXRpdmVTdGFydCwgKGRlY2xhcmF0aXZlRW5kIC0gZGVjbGFyYXRpdmVTdGFydCkgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2RlTGluZS5pbmRleE9mKCc6JykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbmV3Q29kZUxpbmUgPSBjb2RlTGluZS5zdWJzdHIoMCwgY29kZUxpbmUuaW5kZXhPZignOicpKS50cmltKCkgKyAnOyc7XHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IHBhcnQxID0gb3V0cHV0UmVzdWx0LnN1YnN0cigwLCBkZWNsYXJhdGl2ZVN0YXJ0KTtcclxuICAgICAgICAgICAgICBjb25zdCBwYXJ0MiA9IG91dHB1dFJlc3VsdC5zdWJzdHIoZGVjbGFyYXRpdmVFbmQgKyAxLCAoc2hhZGVyU291cmNlLmxlbmd0aCAtIGRlY2xhcmF0aXZlRW5kKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgb3V0cHV0UmVzdWx0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRSZXN1bHQgKz0gcGFydDE7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRSZXN1bHQgKz0gbmV3Q29kZUxpbmU7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRSZXN1bHQgKz0gcGFydDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBkZWNsYXJhdGl2ZVN0YXJ0ICsgMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dFJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY3ljbG9tYXRpYy1jb21wbGV4aXR5XHJcbiAgcHJpdmF0ZSBzdGF0aWMgY2hhbmdlVmFyaWFibGVUeXBlVG9FbnVtKHZhcmlhYmxlVHlwZTogc3RyaW5nLCBkZWNsYXJhdGl2ZVR5cGU6IHN0cmluZyk6IE9GRW51bVNoYWRlckRhdGFUeXBlcyB7XHJcbiAgICBsZXQgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLlVua293bjtcclxuXHJcbiAgICBpZiAoZGVjbGFyYXRpdmVUeXBlKSB7XHJcbiAgICAgIHN3aXRjaCAoZGVjbGFyYXRpdmVUeXBlLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLkRUX1RleHR1cmU6IHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5JVGV4dHVyZTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5EVF9Db2xvcjogICByZXN1bHQgPSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuSUNvbG9yOyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLkRUX0NhbWVyYTogIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5JQ2FtZXJhOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YXJpYWJsZVR5cGUgJiYgcmVzdWx0ID09PSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuVW5rb3duKSB7XHJcbiAgICAgIHN3aXRjaCAodmFyaWFibGVUeXBlLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX01hdHJpeDI6ICAgICAgICAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLk1hdHJpeDI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgT0ZFbnVtU2hhZGVyTGl0ZXJhbHMuSU5fTWF0cml4MzogICAgICAgICByZXN1bHQgPSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuTWF0cml4MzsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9NYXRyaXg0OiAgICAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5NYXRyaXg0OyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX1ZlY3RvcjI6ICAgICAgICAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLlZlY3RvcjI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgT0ZFbnVtU2hhZGVyTGl0ZXJhbHMuSU5fVmVjdG9yMzogICAgICAgICByZXN1bHQgPSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuVmVjdG9yMzsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9WZWN0b3I0OiAgICAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5WZWN0b3I0OyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX0ludFZlY3RvcjI6ICAgICAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLkludFZlY3RvcjI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgT0ZFbnVtU2hhZGVyTGl0ZXJhbHMuSU5fSW50VmVjdG9yMzogICAgICByZXN1bHQgPSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuSW50VmVjdG9yMzsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9JbnRWZWN0b3I0OiAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5JbnRWZWN0b3I0OyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX0Jvb2xlYW5WZWN0b3IyOiAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLkJvb2xlYW5WZWN0b3IyOyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX0Jvb2xlYW5WZWN0b3IzOiAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLkJvb2xlYW5WZWN0b3IzOyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX0Jvb2xlYW5WZWN0b3I0OiAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLkJvb2xlYW5WZWN0b3I0OyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckxpdGVyYWxzLklOX1NhbXBsZXIyRDogICAgICAgcmVzdWx0ID0gT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLlNhbXBsZXIyRDsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9TYW1wbGVyQ3ViZTogICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5TYW1wbGVyQ3ViZTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9GbG9hdDogICAgICAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5GbG9hdDsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJMaXRlcmFscy5JTl9JbnQ6ICAgICAgICAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5JbnQ7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgT0ZFbnVtU2hhZGVyTGl0ZXJhbHMuSU5fQm9vbDogICAgICAgICAgICByZXN1bHQgPSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuQm9vbDsgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IE9GRW51bVNoYWRlckRhdGFUeXBlcy5Vbmtvd247IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIE9GRGVsdGFUaW1lQ29ycmVjdG9yIHtcclxuXHJcbiAgcHJpdmF0ZSBfZGVsdGFUaW1lQnVmZmVySW5kZXg6IG51bWJlcjtcclxuICBwcml2YXRlIF9kZWx0YVRpbWVCdWZmZXJDb3VudDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2RlbHRhVGltZUJ1ZmZlcjogbnVtYmVyW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZGVsdGFUaW1lQnVmZmVySW5kZXggPSAwO1xyXG4gICAgdGhpcy5fZGVsdGFUaW1lQnVmZmVyQ291bnQgPSAxNTtcclxuICAgIHRoaXMuX2RlbHRhVGltZUJ1ZmZlciA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcmVjb21wdXRlRGVsdGFUaW1lKGR0OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgdGhpcy5fZGVsdGFUaW1lQnVmZmVyW3RoaXMuX2RlbHRhVGltZUJ1ZmZlckluZGV4KytdID0gZHQ7XHJcbiAgICB0aGlzLl9kZWx0YVRpbWVCdWZmZXJJbmRleCA9IHRoaXMuX2RlbHRhVGltZUJ1ZmZlckluZGV4ID49IHRoaXMuX2RlbHRhVGltZUJ1ZmZlckNvdW50ID8gMCA6IHRoaXMuX2RlbHRhVGltZUJ1ZmZlckluZGV4O1xyXG5cclxuICAgIGxldCBuZXdEZWx0YVRpbWUgPSAwO1xyXG5cclxuICAgIGZvciAoY29uc3QgZHRCdWZmZXIgb2YgdGhpcy5fZGVsdGFUaW1lQnVmZmVyKSB7XHJcbiAgICAgIG5ld0RlbHRhVGltZSArPSBkdEJ1ZmZlcjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3RGVsdGFUaW1lIC8gdGhpcy5fZGVsdGFUaW1lQnVmZmVyQ291bnQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gJy4uL2NvcmUvZGV2aWNlL29mR3JhcGhpY0RldmljZSc7XHJcbmltcG9ydCB7IE9GRnJhbWV3b3JrRmFjdG9yeSB9IGZyb20gJy4uL29mRnJhbWV3b3JrRmFjdG9yeSc7XHJcbmltcG9ydCB7IE9GSVBvbHlnb25CYXRjaGVyVW5pZm9ybURhdGEsIE9GUG9seWdvbkJhdGNoZXIgfSBmcm9tICcuLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb3B0aW1pemF0aW9uL29mUG9seWdvbkJhdGNoZXInO1xyXG5pbXBvcnQgeyBPRkJpdG1hcEZvbnRDaGFyc2V0IH0gZnJvbSAnLi4vLi4vY3Jvc3MtY3V0dGluZy9mb250LWxvYWRlci9kYXRhL29mQml0bWFwRm9udENoYXJzZXQnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vY29yZS9yZW5kZXIvZ3JhcGhpY3Mvb2ZDb2xvcic7XHJcbmltcG9ydCB7IE9GUXVhZFN0cnVjdCB9IGZyb20gJy4uL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2RhdGEvb2ZRdWFkJztcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tICcuLi9jb3JlL2NvbnRlbnQvb2ZJbWFnZUNvbnRlbnQnO1xyXG5pbXBvcnQgeyBPRkVudW1UZXh0QWxpZ24gfSBmcm9tICcuLi9lbnVtcy9vZkVudW1UZXh0QWxpZ24nO1xyXG5pbXBvcnQgeyBPRlZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL29mVmVjdG9yMic7XHJcbmltcG9ydCB7IE9GRW51bUtleUNvZGUgfSBmcm9tICcuLi9lbnVtcy9vZkVudW1LZXlDb2RlJztcclxuaW1wb3J0IHsgT0ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3IgfSBmcm9tICcuLi8uLi9jcm9zcy1jdXR0aW5nL2ZvbnQtbG9hZGVyL2RhdGEvb2ZCaXRtYXBGb250Q2hhckRlc2NyaXB0b3InO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzJztcclxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcbmltcG9ydCB7IE9GRW51bVNoYWRlckRhdGFUeXBlcyB9IGZyb20gJy4uLy4uL2Nyb3NzLWN1dHRpbmcvc2hhZGVyLWFuYWxpemVyL29mRW51bVNoYWRlckRhdGFUeXBlcyc7XHJcbmltcG9ydCB7IElEaWN0aW9uYXJ5IH0gZnJvbSAnc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQ0JpdG1hcFRleHRmaWVsZDJEIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9ncmFwaGljRGV2aWNlOiBPRkdyYXBoaWNEZXZpY2U7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfR0w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgcHJpdmF0ZSBfcmVuZGVyVHlwZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3BvbHlnb25CYXRjaGVyOiBPRlBvbHlnb25CYXRjaGVyO1xyXG4gIHByaXZhdGUgX3VuaWZvcm1EYXRhOiBJRGljdGlvbmFyeTxPRklQb2x5Z29uQmF0Y2hlclVuaWZvcm1EYXRhPjtcclxuXHJcbiAgcHJpdmF0ZSBfZm9udENoYXJzZXQ6IE9GQml0bWFwRm9udENoYXJzZXQ7XHJcblxyXG4gIHByaXZhdGUgX2luZGljZXM6IEFycmF5PG51bWJlcj47XHJcbiAgcHJpdmF0ZSBfdmVydGljZXM6IEFycmF5PG51bWJlcj47XHJcbiAgcHJpdmF0ZSBfY29sb3I6IE9GQ29sb3I7XHJcbiAgcHJpdmF0ZSBfY3VzdG9tUXVhZHM6IEFycmF5PE9GUXVhZFN0cnVjdD47XHJcbiAgcHJpdmF0ZSBfaW1hZ2VDb250ZW50OiBPRkltYWdlQ29udGVudDtcclxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3RleHR1cmVXaWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3RleHR1cmVIZWlnaHQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9zY2FsZVdhc01vZGlmaWVkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2RyYXdFbmFibGU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfb2xkTnVtUXVhZHM6IG51bWJlcjtcclxuICBwcml2YXRlIF9pbmRpY2VzQ291bnQ6IG51bWJlcjtcclxuXHJcbiAgcHJpdmF0ZSBfdGV4dFF1YWRDb3VudGVyOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfdGV4dFBvc2l0aW9uUmVuZGVyWDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3RleHRQb3NpdGlvblJlbmRlclk6IG51bWJlcjtcclxuICBwcml2YXRlIF90ZXh0SW50ZXJuYWxPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgLy8gdHJhY2tpbmdcclxuICBwcml2YXRlIF90cmFja2luZ1F1YW50aXR5OiBudW1iZXI7XHJcblxyXG4gIC8vIHRleHRmaWVsZCB2YXJpYWJsZXNcclxuICBwcml2YXRlIF90ZXh0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfdGV4dEFsaWduOiBPRkVudW1UZXh0QWxpZ247XHJcbiAgcHJpdmF0ZSBfdGV4dFNpemU6IE9GVmVjdG9yMjtcclxuXHJcbiAgZ2V0IHRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90ZXh0O1xyXG4gIH1cclxuICBnZXQgdGV4dFNpemUoKTogT0ZWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLl90ZXh0U2l6ZTtcclxuICB9XHJcblxyXG4gIGdldCBjb2xvcigpOiBPRkNvbG9yIHtcclxuICAgIHJldHVybiB0aGlzLl9jb2xvcjtcclxuICB9XHJcbiAgc2V0IGNvbG9yKHZhbDogT0ZDb2xvcikge1xyXG4gICAgdGhpcy5fY29sb3IgPSB2YWw7XHJcbiAgICB0aGlzLl91bmlmb3JtRGF0YVsnVW5pZm9ybUNvbG9yMCddLnZhbHVlID0gdmFsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRyYWNraW5nUXVhbnRpdHkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl90cmFja2luZ1F1YW50aXR5O1xyXG4gIH1cclxuICBzZXQgdHJhY2tpbmdRdWFudGl0eSh2YWw6IG51bWJlcikge1xyXG4gICAgdGhpcy5fdHJhY2tpbmdRdWFudGl0eSA9IHZhbDtcclxuICAgIHRoaXMuc2V0VGV4dCh0aGlzLl90ZXh0LCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZSA9IE9GRnJhbWV3b3JrRmFjdG9yeS5jdXJyZW50RnJhbWV3b2subWFpbkdyYXBoaWNEZXZpY2U7XHJcbiAgICB0aGlzLl9HTCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgdGhpcy5fY29sb3IgPSBPRkNvbG9yLndoaXRlKCk7XHJcbiAgICB0aGlzLl9jdXN0b21RdWFkcyA9IFtdO1xyXG4gICAgdGhpcy5fd2lkdGggPSAwO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gMDtcclxuICAgIHRoaXMuX3RleHR1cmVXaWR0aCA9IDA7XHJcbiAgICB0aGlzLl90ZXh0dXJlSGVpZ2h0ID0gMDtcclxuICAgIHRoaXMuX3NjYWxlV2FzTW9kaWZpZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2RyYXdFbmFibGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX29sZE51bVF1YWRzID0gMDtcclxuICAgIHRoaXMuX2luZGljZXNDb3VudCA9IDA7XHJcbiAgICB0aGlzLl90ZXh0UXVhZENvdW50ZXIgPSAwO1xyXG4gICAgdGhpcy5fdGV4dFBvc2l0aW9uUmVuZGVyWCA9IDA7XHJcbiAgICB0aGlzLl90ZXh0UG9zaXRpb25SZW5kZXJZID0gMDtcclxuICAgIHRoaXMuX3RleHRJbnRlcm5hbE9mZnNldCA9IDA7XHJcbiAgICB0aGlzLl90cmFja2luZ1F1YW50aXR5ID0gMDtcclxuICAgIHRoaXMuX3RleHQgPSAnJztcclxuICAgIHRoaXMuX3RleHRBbGlnbiA9IE9GRW51bVRleHRBbGlnbi5MZWZ0O1xyXG4gICAgdGhpcy5fdGV4dFNpemUgPSBPRlZlY3RvcjIuemVybygpO1xyXG4gICAgdGhpcy5fcmVuZGVyVHlwZSA9IHRoaXMuX0dMLlRSSUFOR0xFX1NUUklQO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSh0ZXh0OiBzdHJpbmcsIGZvbnRDaGFyc2V0OiBPRkJpdG1hcEZvbnRDaGFyc2V0LCBpbWFnZUNvbnRlbnQ6IE9GSW1hZ2VDb250ZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLl9mb250Q2hhcnNldCA9IGZvbnRDaGFyc2V0O1xyXG4gICAgdGhpcy5faW1hZ2VDb250ZW50ID0gaW1hZ2VDb250ZW50O1xyXG4gICAgdGhpcy5fdGV4dHVyZVdpZHRoID0gaW1hZ2VDb250ZW50LmltYWdlV2lkdGg7XHJcbiAgICB0aGlzLl90ZXh0dXJlSGVpZ2h0ID0gaW1hZ2VDb250ZW50LmltYWdlSGVpZ2h0O1xyXG5cclxuICAgIHRoaXMuX3BvbHlnb25CYXRjaGVyID0gbmV3IE9GUG9seWdvbkJhdGNoZXIoKTtcclxuICAgIHRoaXMuX3BvbHlnb25CYXRjaGVyLmNoYW5nZVNoYWRlcignVGV4dFNoYWRlclRleHR1cmUnKTtcclxuXHJcbiAgICB0aGlzLl91bmlmb3JtRGF0YSA9IHt9O1xyXG4gICAgdGhpcy5fdW5pZm9ybURhdGFbJ1VuaWZvcm1Db2xvcjAnXSA9IHtcclxuICAgICAgaW5kZXg6IDAsXHJcbiAgICAgIHR5cGU6IE9GRW51bVNoYWRlckRhdGFUeXBlcy5JQ29sb3IsXHJcbiAgICAgIHZhbHVlOiBPRkNvbG9yLndoaXRlKCksXHJcbiAgICB9IGFzIE9GSVBvbHlnb25CYXRjaGVyVW5pZm9ybURhdGE7XHJcblxyXG4gICAgdGhpcy5zZXRUZXh0KHRleHQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcmVWYWxpZGF0aW9uVGV4dChwaHJhc2UpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBwaHJhc2UgJiYgdGhpcy5fdGV4dCAhPT0gcGhyYXNlO1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjeWNsb21hdGljLWNvbXBsZXhpdHlcclxuICBzZXRUZXh0KHBocmFzZTogc3RyaW5nLCBvdmVycmlkZVRleHRWYWxpZGF0aW9uPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgcGhyYXNlID0gIXBocmFzZSA/ICcnIDogcGhyYXNlO1xyXG5cclxuICAgIGlmICh0aGlzLnByZVZhbGlkYXRpb25UZXh0KHBocmFzZSkgfHwgb3ZlcnJpZGVUZXh0VmFsaWRhdGlvbikge1xyXG4gICAgICAvLyByZXNldFxyXG4gICAgICB0aGlzLl90ZXh0ID0gcGhyYXNlO1xyXG4gICAgICB0aGlzLl90ZXh0UXVhZENvdW50ZXIgPSAwO1xyXG4gICAgICB0aGlzLl90ZXh0UG9zaXRpb25SZW5kZXJYID0gMDtcclxuICAgICAgdGhpcy5fdGV4dFBvc2l0aW9uUmVuZGVyWSA9IDA7XHJcbiAgICAgIHRoaXMuX3RleHRTaXplID0gT0ZWZWN0b3IyLnplcm8oKTtcclxuICAgICAgdGhpcy5fdGV4dFNpemUueSA9IHRoaXMuX2ZvbnRDaGFyc2V0LmJhc2U7XHJcblxyXG4gICAgICBjb25zdCBjdXJyZW50Q2hhckNvdW50ID0gcGhyYXNlLmxlbmd0aDtcclxuICAgICAgY29uc3QgY3RvckFycmF5ID0gIXRoaXMuX2N1c3RvbVF1YWRzIHx8ICh0aGlzLl9jdXN0b21RdWFkcyAmJiBjdXJyZW50Q2hhckNvdW50ID4gdGhpcy5fY3VzdG9tUXVhZHMubGVuZ3RoKTtcclxuXHJcbiAgICAgIGlmIChjdG9yQXJyYXkpIHtcclxuICAgICAgICB0aGlzLl9jdXN0b21RdWFkcyA9IFtdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2xkVW5pY29kZUNoYXIgPSAtMTtcclxuICAgICAgY29uc3QgcGhyYXNlTGVuZ3RoID0gdGhpcy5fdGV4dC5sZW5ndGg7XHJcbiAgICAgIGxldCBvbGRJbmRleEFmdGVySnVtcExpbmUgPSAwO1xyXG4gICAgICBsZXQgb2xkV2lkdGhBZnRlckp1bXBMaW5lID0gMDtcclxuICAgICAgbGV0IGp1bXBMaW5lRm91bmQgPSBmYWxzZTtcclxuICAgICAgbGV0IGNoYXJEZXNjcmlwdG9yOiBPRkJpdG1hcEZvbnRDaGFyRGVzY3JpcHRvcjtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGhyYXNlTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQga2VybmluZ0Ftb3VudCA9IDA7XHJcbiAgICAgICAgY29uc3QgdW5pY29kZUNoYXJGaXJzdCA9IHRoaXMuX3RleHQuY2hhckNvZGVBdChpKTtcclxuXHJcbiAgICAgICAgaWYgKHVuaWNvZGVDaGFyRmlyc3QgPT09IE9GRW51bUtleUNvZGUuSnVtcExpbmUpIHtcclxuICAgICAgICAgIGp1bXBMaW5lRm91bmQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IG5ld1RleHQgPSB0aGlzLl90ZXh0LnN1YnN0cmluZyhvbGRJbmRleEFmdGVySnVtcExpbmUsIGkgLSBvbGRJbmRleEFmdGVySnVtcExpbmUpO1xyXG4gICAgICAgICAgY29uc3QgbmV3VGV4dExlbmd0aCA9IHRoaXMuX2ZvbnRDaGFyc2V0Lm1lYXN1cmVTdHJpbmcobmV3VGV4dCkueDtcclxuXHJcbiAgICAgICAgICBvbGRJbmRleEFmdGVySnVtcExpbmUgPSBpICsgMTtcclxuXHJcbiAgICAgICAgICBpZiAobmV3VGV4dExlbmd0aCA+IG9sZFdpZHRoQWZ0ZXJKdW1wTGluZSkge1xyXG4gICAgICAgICAgICBvbGRXaWR0aEFmdGVySnVtcExpbmUgPSBuZXdUZXh0TGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0U2l6ZS54ID0gb2xkV2lkdGhBZnRlckp1bXBMaW5lO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuX3RleHRTaXplLnkgKz0gdGhpcy5fZm9udENoYXJzZXQuYmFzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gUkVUUklFVkUgS0VSTklOR1xyXG4gICAgICAgICAgaWYgKG9sZFVuaWNvZGVDaGFyICE9PSAtMSkge1xyXG4gICAgICAgICAgICBrZXJuaW5nQW1vdW50ID0gdGhpcy5fZm9udENoYXJzZXQuZ2V0S2VybmluZyhvbGRVbmljb2RlQ2hhciwgdW5pY29kZUNoYXJGaXJzdCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuX2ZvbnRDaGFyc2V0LmV4aXN0c0NoYXIodW5pY29kZUNoYXJGaXJzdCkpIHtcclxuICAgICAgICAgICAgLy8gUkVUUklFVkUgQ0hBUiBERVNDUklQVE9SXHJcbiAgICAgICAgICAgIGNoYXJEZXNjcmlwdG9yID0gdGhpcy5fZm9udENoYXJzZXQuZ2V0Q2hhckRlc2NyaXB0b3IodW5pY29kZUNoYXJGaXJzdCk7XHJcbiAgICAgICAgICAgIC8vIEFERCBDSEFSIFFVQUQgVE8gUkVOREVSXHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGV4dFF1YWQoY2hhckRlc2NyaXB0b3IsIGtlcm5pbmdBbW91bnQsIGp1bXBMaW5lRm91bmQpO1xyXG4gICAgICAgICAgICAvLyBTVE9SSU5HIE9MRCBWQVJJQUJMRVNcclxuICAgICAgICAgICAgb2xkVW5pY29kZUNoYXIgPSB1bmljb2RlQ2hhckZpcnN0O1xyXG5cclxuICAgICAgICAgICAganVtcExpbmVGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSUYgTk8gSlVNUCBMSU5FIElTIE1BREUsIFNFVCBURVhUIFNJWkUgQlkgREVGQVVMVFxyXG4gICAgICBpZiAodGhpcy5fdGV4dFNpemUueCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnN0IHNpemVUZXh0ID0gdGhpcy5fZm9udENoYXJzZXQubWVhc3VyZVN0cmluZyh0aGlzLl90ZXh0KTtcclxuICAgICAgICBzaXplVGV4dC54ICs9IHRoaXMuX3RleHQubGVuZ3RoICogdGhpcy5fdHJhY2tpbmdRdWFudGl0eTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGV4dFNpemUueCA9IHNpemVUZXh0Lng7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gc2l6ZVRleHQueDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl93aWR0aCA9IHRoaXMuX3RleHRTaXplLng7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl90ZXh0U2l6ZS55ID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5fdGV4dFNpemUueSA9IHRoaXMuX2ZvbnRDaGFyc2V0LmJhc2U7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdGhpcy5fZm9udENoYXJzZXQuYmFzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSB0aGlzLl90ZXh0U2l6ZS55O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmFsaWduVGV4dCh0aGlzLl90ZXh0QWxpZ24pO1xyXG4gICAgICAvLyBUUkFOU0ZPUk0gUVVBRCBEQVRBIFRPIFJFTkRFUiBFTkFCTEUgREFUQVxyXG4gICAgICB0aGlzLnRyYW5zZm9ybVRvUmVuZGVyKCk7XHJcblxyXG4gICAgICAvLyBub3cgZG8gdGhlIHNjYWxlIHRoaW5nXHJcbiAgICAgIC8vIGlmIChtU2NhbGVXYXNNb2RpZmllZCkgeyB0aGlzLnNjYWxlID0gbVNjYWxlOyB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhbGlnblRleHQoYWxpZ246IE9GRW51bVRleHRBbGlnbik6IHZvaWQge1xyXG4gICAgdGhpcy5fdGV4dEFsaWduID0gYWxpZ247XHJcblxyXG4gICAgY29uc3QgdGV4dFNpemVUZW1wWCA9IC10aGlzLl90ZXh0U2l6ZS54OyAvLyBzaG91bGQgbXVsdGlwbHkgYnkgc2NhbGVYXHJcbiAgICBjb25zdCB0ZXh0U2l6ZVRlbXBZID0gLXRoaXMuX3RleHRTaXplLnk7IC8vIHNob3VsZCBtdWx0aXBseSBieSBzY2FsZVlcclxuXHJcbiAgICBzd2l0Y2ggKGFsaWduKSB7XHJcbiAgICAgIGNhc2UgT0ZFbnVtVGV4dEFsaWduLkxlZnQ6XHJcbiAgICAgICAgdGhpcy5fdGV4dEludGVybmFsT2Zmc2V0ID0gMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBPRkVudW1UZXh0QWxpZ24uUmlnaHQ6XHJcbiAgICAgICAgdGhpcy5fdGV4dEludGVybmFsT2Zmc2V0ID0gdGV4dFNpemVUZW1wWDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBPRkVudW1UZXh0QWxpZ24uQ2VudGVyOlxyXG4gICAgICAgIHRoaXMuX3RleHRJbnRlcm5hbE9mZnNldCA9IHRleHRTaXplVGVtcFggLyAyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1Jc1RyYW5zZm9ybWVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkVGV4dFF1YWQoY2hhckRlc2M6IE9GQml0bWFwRm9udENoYXJEZXNjcmlwdG9yLCBrZXJuaW5nQW1vdW50OiBudW1iZXIsIGNhbkp1bXBMaW5lOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBjb25zdCB0aWxlWCA9IGNoYXJEZXNjLng7XHJcbiAgICBjb25zdCB0aWxlWSA9IGNoYXJEZXNjLnk7XHJcbiAgICBjb25zdCB0aWxlV2lkdGggPSBjaGFyRGVzYy50ZXh0dXJlVTtcclxuICAgIGNvbnN0IHRpbGVIZWlnaHQgPSBjaGFyRGVzYy50ZXh0dXJlVjtcclxuXHJcbiAgICBjb25zdCBxdWFkRGF0YSA9IE9GUXVhZFN0cnVjdC5jcmVhdGVBc1ZlcnRleFBvc2l0aW9uQ29sb3JUZXh0dXJlKCk7XHJcbiAgICBxdWFkRGF0YS5jcmVhdGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuX2N1c3RvbVF1YWRzLnB1c2gocXVhZERhdGEpO1xyXG5cclxuICAgIGlmIChjYW5KdW1wTGluZSkge1xyXG4gICAgICB0aGlzLl90ZXh0UG9zaXRpb25SZW5kZXJYID0gMDtcclxuICAgICAgdGhpcy5fdGV4dFBvc2l0aW9uUmVuZGVyWSArPSB0aGlzLl9mb250Q2hhcnNldC5iYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHB4ID0gdGhpcy5fdGV4dFBvc2l0aW9uUmVuZGVyWCArIGNoYXJEZXNjLnhPZmZzZXQgKyBrZXJuaW5nQW1vdW50ICsgKHRoaXMuX3RyYWNraW5nUXVhbnRpdHkgKiB0aGlzLl90ZXh0UXVhZENvdW50ZXIpO1xyXG4gICAgY29uc3QgcHkgPSB0aGlzLl90ZXh0UG9zaXRpb25SZW5kZXJZICsgY2hhckRlc2MueU9mZnNldDtcclxuXHJcbiAgICB0aGlzLl90ZXh0UG9zaXRpb25SZW5kZXJYICs9IGNoYXJEZXNjLnhBZHZhbmNlICsga2VybmluZ0Ftb3VudDtcclxuXHJcbiAgICAvLyBWRVJURVhcclxuICAgIHF1YWREYXRhLlZQVFRvcExlZnQueCA9IHB4O1xyXG4gICAgcXVhZERhdGEuVlBUVG9wTGVmdC55ID0gcHk7XHJcblxyXG4gICAgcXVhZERhdGEuVlBUVG9wUmlnaHQueCA9IHB4ICsgY2hhckRlc2Mud2lkdGg7XHJcbiAgICBxdWFkRGF0YS5WUFRUb3BSaWdodC55ID0gcHk7XHJcblxyXG4gICAgcXVhZERhdGEuVlBUQm90dG9tTGVmdC54ID0gcHg7XHJcbiAgICBxdWFkRGF0YS5WUFRCb3R0b21MZWZ0LnkgPSBweSArIGNoYXJEZXNjLmhlaWdodDtcclxuXHJcbiAgICBxdWFkRGF0YS5WUFRCb3R0b21SaWdodC54ID0gcHggKyBjaGFyRGVzYy53aWR0aDtcclxuICAgIHF1YWREYXRhLlZQVEJvdHRvbVJpZ2h0LnkgPSBweSArIGNoYXJEZXNjLmhlaWdodDtcclxuXHJcbiAgICAvLyBOT1JNQUxcclxuICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IE9GQ29sb3Iud2hpdGUoKTtcclxuXHJcbiAgICBxdWFkRGF0YS5WUFRUb3BMZWZ0LmNvbG9yID0gZGVmYXVsdENvbG9yO1xyXG4gICAgcXVhZERhdGEuVlBUVG9wUmlnaHQuY29sb3IgPSBkZWZhdWx0Q29sb3I7XHJcbiAgICBxdWFkRGF0YS5WUFRCb3R0b21MZWZ0LmNvbG9yID0gZGVmYXVsdENvbG9yO1xyXG4gICAgcXVhZERhdGEuVlBUQm90dG9tUmlnaHQuY29sb3IgPSBkZWZhdWx0Q29sb3I7XHJcblxyXG4gICAgLy8gVEVYVFVSRSBDT09SRElOQVRFU1xyXG4gICAgcXVhZERhdGEuVlBUVG9wTGVmdC51ID0gdGlsZVggLyB0aGlzLl90ZXh0dXJlV2lkdGg7XHJcbiAgICBxdWFkRGF0YS5WUFRUb3BMZWZ0LnYgPSB0aWxlWSAvIHRoaXMuX3RleHR1cmVIZWlnaHQ7XHJcbiAgICBxdWFkRGF0YS5WUFRUb3BSaWdodC51ID0gKHRpbGVYICsgdGlsZVdpZHRoKSAvIHRoaXMuX3RleHR1cmVXaWR0aDtcclxuICAgIHF1YWREYXRhLlZQVFRvcFJpZ2h0LnYgPSB0aWxlWSAvIHRoaXMuX3RleHR1cmVIZWlnaHQ7XHJcbiAgICBxdWFkRGF0YS5WUFRCb3R0b21MZWZ0LnUgPSB0aWxlWCAvIHRoaXMuX3RleHR1cmVXaWR0aDtcclxuICAgIHF1YWREYXRhLlZQVEJvdHRvbUxlZnQudiA9ICh0aWxlWSArIHRpbGVIZWlnaHQpIC8gdGhpcy5fdGV4dHVyZUhlaWdodDtcclxuICAgIHF1YWREYXRhLlZQVEJvdHRvbVJpZ2h0LnUgPSAodGlsZVggKyB0aWxlV2lkdGgpIC8gdGhpcy5fdGV4dHVyZVdpZHRoO1xyXG4gICAgcXVhZERhdGEuVlBUQm90dG9tUmlnaHQudiA9ICh0aWxlWSArIHRpbGVIZWlnaHQpIC8gdGhpcy5fdGV4dHVyZUhlaWdodDtcclxuXHJcbiAgICAvLyBhZGRpbmcgdG8gYnVmZmVyXHJcbiAgICB0aGlzLl9jdXN0b21RdWFkc1t0aGlzLl90ZXh0UXVhZENvdW50ZXJdID0gcXVhZERhdGE7XHJcbiAgICB0aGlzLl90ZXh0UXVhZENvdW50ZXIrKztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcHJlQ2FsY3VsYXRlSW5kaWNlcyhudW1RdWFkczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fb2xkTnVtUXVhZHMgIT09IG51bVF1YWRzKSB7XHJcbiAgICAgIGxldCBpbmRpY2VzQ291bnQgPSAwO1xyXG5cclxuICAgICAgLy8gbGV0IGN0b3JfYXJyYXkgPSBmYWxzZTtcclxuICAgICAgLy8gbGV0IG9mZnNldFNpemVQbHVzID0gMDtcclxuICAgICAgLy8gY29uc3QgY3VycmVudEluZGljZXNDb3VudCA9IG51bVF1YWRzICogNjtcclxuXHJcbiAgICAgIC8vIGlmIChtSW5kaWNlcykge1xyXG4gICAgICAvLyAgICAgaWYgKGN1cnJlbnRJbmRpY2VzQ291bnQgPiBtSW5kaWNlcy5sZW5ndGgpIHtcclxuICAgICAgLy8gICAgICAgICBjdG9yX2FycmF5ID0gdHJ1ZTtcclxuICAgICAgLy8gICAgIH1cclxuICAgICAgLy8gfVxyXG4gICAgICAvLyBlbHNlIHsgY3Rvcl9hcnJheSA9IHRydWU7IH1cclxuXHJcbiAgICAgIC8vIGlmIChjdG9yX2FycmF5KSB7XHJcbiAgICAgIC8vIFx0bUluZGljZXMgPSBbXTsgLy8gbGVuZ3RoOiBjdXJyZW50SW5kaWNlc0NvdW50ICsgb2Zmc2V0U2l6ZVBsdXNcclxuICAgICAgLy8gfVxyXG4gICAgICB0aGlzLl9pbmRpY2VzID0gW107XHJcblxyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3JlbmRlclR5cGUpIHtcclxuICAgICAgICBjYXNlIHRoaXMuX0dMLlRSSUFOR0xFX1NUUklQOlxyXG4gICAgICAgICAgLy8gVVNJTkcgVFJJQU5HTEUgREVHRU5FUkFUSU9OXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVF1YWRzOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5kaWNlcy5wdXNoKGluZGljZXNDb3VudCArIDMpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VzLnB1c2goaW5kaWNlc0NvdW50ICsgMik7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMucHVzaChpbmRpY2VzQ291bnQgKyAxKTtcclxuICAgICAgICAgICAgdGhpcy5faW5kaWNlcy5wdXNoKGluZGljZXNDb3VudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMucHVzaChpbmRpY2VzQ291bnQpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VzLnB1c2goaW5kaWNlc0NvdW50ICsgNyk7XHJcblxyXG4gICAgICAgICAgICBpbmRpY2VzQ291bnQgKz0gNDtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9pbmRpY2VzW3RoaXMuX2luZGljZXMubGVuZ3RoIC0gMV0gPSAwO1xyXG4gICAgICB0aGlzLl9vbGROdW1RdWFkcyA9IG51bVF1YWRzO1xyXG4gICAgICB0aGlzLl9pbmRpY2VzQ291bnQgPSBudW1RdWFkcyAqIDY7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHRyYW5zZm9ybVRvUmVuZGVyKCk6IHZvaWQge1xyXG4gICAgbGV0IG51bVRpbGVzVG9EcmF3ID0gMDtcclxuICAgIGxldCB0ZW1wRFNUUTogT0ZRdWFkU3RydWN0ID0gbnVsbDtcclxuICAgIGNvbnN0IHRleHRMZW5naHQgPSB0aGlzLl90ZXh0UXVhZENvdW50ZXI7XHJcblxyXG4gICAgZm9yIChsZXQgdyA9IDA7IHcgPCB0ZXh0TGVuZ2h0OyB3KyspIHtcclxuICAgICAgaWYgKHRoaXMuX2N1c3RvbVF1YWRzW3ddLmNyZWF0ZWQpIHtcclxuICAgICAgICBudW1UaWxlc1RvRHJhdysrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcmVDYWxjdWxhdGVJbmRpY2VzKHRoaXMuX3RleHRRdWFkQ291bnRlcik7XHJcblxyXG4gICAgLy8gY3JlYXRlIG8gcmUtY3JlYXRlIHRoZSBtVmVydGljZXMgYXJyYXlcclxuICAgIHRoaXMuX3ZlcnRpY2VzID0gW107XHJcbiAgICAvLyBpZiAobVZlcnRpY2VzKSB7XHJcbiAgICAvLyAgICAgaWYgKChtVmVydGV4Q291bnQgKiA4KSA+IG1WZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgIC8vICAgICAgICAgbVZlcnRpY2VzID0gW10vKm1WZXJ0ZXhDb3VudCAqIDgqLztcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbiAgICAvLyBlbHNlIHsgbVZlcnRpY2VzID0gW10vKm1WZXJ0ZXhDb3VudCAqIDgqLzsgfVxyXG5cclxuICAgIGZvciAobGV0IHcgPSAwOyB3IDwgdGV4dExlbmdodDsgdysrKSB7XHJcbiAgICAgIHRlbXBEU1RRID0gdGhpcy5fY3VzdG9tUXVhZHNbd107XHJcblxyXG4gICAgICBpZiAodGVtcERTVFEuY3JlYXRlZCkge1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wUmlnaHQueCk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRUb3BSaWdodC55KTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVFRvcFJpZ2h0LmNvbG9yLnIpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wUmlnaHQuY29sb3IuZyk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRUb3BSaWdodC5jb2xvci5iKTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVFRvcFJpZ2h0LmNvbG9yLmEpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wUmlnaHQudSk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRUb3BSaWdodC52KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRUb3BMZWZ0LngpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wTGVmdC55KTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVFRvcFJpZ2h0LmNvbG9yLnIpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wUmlnaHQuY29sb3IuZyk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRUb3BSaWdodC5jb2xvci5iKTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVFRvcFJpZ2h0LmNvbG9yLmEpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUVG9wTGVmdC51KTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVFRvcExlZnQudik7XHJcblxyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tUmlnaHQueCk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21SaWdodC55KTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVEJvdHRvbVJpZ2h0LmNvbG9yLnIpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tUmlnaHQuY29sb3IuZyk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21SaWdodC5jb2xvci5iKTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVEJvdHRvbVJpZ2h0LmNvbG9yLmEpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tUmlnaHQudSk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21SaWdodC52KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21MZWZ0LngpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tTGVmdC55KTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVEJvdHRvbUxlZnQuY29sb3Iucik7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21MZWZ0LmNvbG9yLmcpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tTGVmdC5jb2xvci5iKTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHRlbXBEU1RRLlZQVEJvdHRvbUxlZnQuY29sb3IuYSk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMucHVzaCh0ZW1wRFNUUS5WUFRCb3R0b21MZWZ0LnUpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2godGVtcERTVFEuVlBUQm90dG9tTGVmdC52KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChudW1UaWxlc1RvRHJhdyA+IDApIHtcclxuICAgICAgdGhpcy5fZHJhd0VuYWJsZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9kcmF3RW5hYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fcG9seWdvbkJhdGNoZXIuaW1hZ2VDb250ZW50ID0gdGhpcy5faW1hZ2VDb250ZW50O1xyXG4gICAgdGhpcy5fcG9seWdvbkJhdGNoZXIuYmVnaW5EcmF3KCk7XHJcbiAgICB0aGlzLl9wb2x5Z29uQmF0Y2hlci5wdXNoUG9seWdvbih0aGlzLl92ZXJ0aWNlcywgdGhpcy5faW5kaWNlcyk7XHJcbiAgICB0aGlzLl9wb2x5Z29uQmF0Y2hlci5lbmREcmF3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRMZXR0ZXJDb2xvcihjaGFySW5kZXg6IG51bWJlciwgY29sb3I6IE9GQ29sb3IpOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4QXJyYXkgPSBjaGFySW5kZXggKiAzMjtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgMl0gPSBjb2xvci5yO1xyXG4gICAgdGhpcy5fdmVydGljZXNbaW5kZXhBcnJheSArIDNdID0gY29sb3IuZztcclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyA0XSA9IGNvbG9yLmI7XHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgNV0gPSBjb2xvci5hO1xyXG5cclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyA4ICsgMl0gPSBjb2xvci5yO1xyXG4gICAgdGhpcy5fdmVydGljZXNbaW5kZXhBcnJheSArIDggKyAzXSA9IGNvbG9yLmc7XHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgOCArIDRdID0gY29sb3IuYjtcclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyA4ICsgNV0gPSBjb2xvci5hO1xyXG5cclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyAxNiArIDJdID0gY29sb3IucjtcclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyAxNiArIDNdID0gY29sb3IuZztcclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyAxNiArIDRdID0gY29sb3IuYjtcclxuICAgIHRoaXMuX3ZlcnRpY2VzW2luZGV4QXJyYXkgKyAxNiArIDVdID0gY29sb3IuYTtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgMjQgKyAyXSA9IGNvbG9yLnI7XHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgMjQgKyAzXSA9IGNvbG9yLmI7XHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgMjQgKyA0XSA9IGNvbG9yLmI7XHJcbiAgICB0aGlzLl92ZXJ0aWNlc1tpbmRleEFycmF5ICsgMjQgKyA1XSA9IGNvbG9yLmE7XHJcblxyXG4gICAgdGhpcy5fcG9seWdvbkJhdGNoZXIuaW1hZ2VDb250ZW50ID0gdGhpcy5faW1hZ2VDb250ZW50O1xyXG4gICAgdGhpcy5fcG9seWdvbkJhdGNoZXIuYmVnaW5EcmF3KCk7XHJcbiAgICB0aGlzLl9wb2x5Z29uQmF0Y2hlci5wdXNoUG9seWdvbih0aGlzLl92ZXJ0aWNlcywgdGhpcy5faW5kaWNlcyk7XHJcbiAgICB0aGlzLl9wb2x5Z29uQmF0Y2hlci5lbmREcmF3KCk7XHJcbiAgfVxyXG5cclxuICBkcmF3KGFyZ3M6IElPRlJlbmRlckFyZ3MsIHRyYW5zZm9ybWF0aW9uTWF0cml4PzogbWF0NCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2RyYXdFbmFibGUpIHtcclxuICAgICAgdGhpcy5fcG9seWdvbkJhdGNoZXIuZHJhdyhhcmdzLCB0cmFuc2Zvcm1hdGlvbk1hdHJpeCwgdGhpcy5fR0wuVFJJQU5HTEVfU1RSSVAsIHRoaXMuX3VuaWZvcm1EYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAodGhpcyBhcyBhbnkpWydfZ3JhcGhpY0RldmljZSddID0gbnVsbDtcclxuICAgICh0aGlzIGFzIGFueSlbJ19HTCddID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLl9wb2x5Z29uQmF0Y2hlcj8uZGVzdHJveSgpO1xyXG4gICAgdGhpcy5fcG9seWdvbkJhdGNoZXIgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuX3VuaWZvcm1EYXRhID0gbnVsbDtcclxuICAgIHRoaXMuX2ZvbnRDaGFyc2V0ID0gbnVsbDtcclxuICAgIHRoaXMuX2luZGljZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fdmVydGljZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fY29sb3IgPSBudWxsO1xyXG4gICAgdGhpcy5fY3VzdG9tUXVhZHMgPSBudWxsO1xyXG4gICAgdGhpcy5faW1hZ2VDb250ZW50ID0gbnVsbDtcclxuICAgIHRoaXMuX3RleHQgPSBudWxsO1xyXG4gICAgdGhpcy5fdGV4dEFsaWduID0gbnVsbDtcclxuICAgIHRoaXMuX3RleHRTaXplID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZDb250ZW50TWFuYWdlciB9IGZyb20gJy4vb2ZDb250ZW50TWFuYWdlcic7XHJcbmltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vb2ZGcmFtZXdvcmsnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQmFzZUNvbnRlbnQge1xyXG5cclxuICBwcm90ZWN0ZWQgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcbiAgcHJvdGVjdGVkIF9ncmFwaGljQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gIHByb3RlY3RlZCBfcGF0aDogc3RyaW5nO1xyXG4gIHByb3RlY3RlZCBfaXNMb2FkZWQ6IGJvb2xlYW47XHJcblxyXG4gIGdldCBwYXRoKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9wYXRoOyB9XHJcbiAgZ2V0IGlzTG9hZGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNMb2FkZWQ7IH1cclxuXHJcbiAgZ2V0IGZyYW1ld29yaygpOiBPRkZyYW1ld29yayB7IHJldHVybiB0aGlzLl9mcmFtZXdvcms7IH1cclxuICBnZXQgZ3JhcGhpY0NvbnRleHQoKSB7IHJldHVybiB0aGlzLl9ncmFwaGljQ29udGV4dDsgfVxyXG5cclxuICBjb25zdHJ1Y3RvciAocmVhZG9ubHkgY29udGVudE1hbmFnZXI6IE9GQ29udGVudE1hbmFnZXIpIHtcclxuICAgIHRoaXMuX2lzTG9hZGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9mcmFtZXdvcmsgPSBjb250ZW50TWFuYWdlci5mcmFtZXdvcms7XHJcbiAgICB0aGlzLl9ncmFwaGljQ29udGV4dCA9IHRoaXMuX2ZyYW1ld29yay5tYWluR3JhcGhpY0RldmljZS5ncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUgKCk6IHZvaWQgeyAvKiBOT1RISU5HICovIH1cclxuXHJcbiAgY2hhbmdlUHJvcGVydGllcyhwYXJhbXM6IHt9KTogdm9pZCB7IC8qIE5PVEhJTkcgKi8gfVxyXG5cclxuICBsb2FkKHBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5fcGF0aCA9IHBhdGg7XHJcbiAgfVxyXG5cclxuICB1bmxvYWQoKTogdm9pZCB7IC8qIE5PVEhJTkcgKi8gfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vb2ZGcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBPRkJhc2VDb250ZW50IH0gZnJvbSAnLi9vZkJhc2VDb250ZW50JztcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tICcuL29mSW1hZ2VDb250ZW50JztcclxuaW1wb3J0IHsgT0ZTb3VuZENvbnRlbnQsIE9GU0NFeHRlcm5hbFNvdXJjZSB9IGZyb20gJy4vb2ZTb3VuZENvbnRlbnQnO1xyXG5pbXBvcnQgeyBPRk1hdGVyaWFsQ29udGVudCB9IGZyb20gJy4vb2ZNYXRlcmlhbENvbnRlbnQnO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcbmltcG9ydCB7IE9GVHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vLi4vc2V0dGluZ3Mvb2ZUcmFuc2xhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQ29udGVudE1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIF9jb250ZW50UmVwb3NpdG9yeTogT0ZCYXNlQ29udGVudFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBmcmFtZXdvcms6IE9GRnJhbWV3b3JrKSB7XHJcbiAgICB0aGlzLl9jb250ZW50UmVwb3NpdG9yeSA9IFtdO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHsgLyogTk9USElORyAqLyB9XHJcblxyXG4gIGxvYWREZWZhdWx0KCk6IHZvaWQge1xyXG4gICAgLy8gTG9hZCBtYXRlcmlhbCByZWxhdGVkIHRvIHRoZSBTaGFkZXJzXHJcbiAgICAvLyB0aGlzLmxvYWRNYXRlcmlhbEZyb21KU09OKERlZmF1bHRNYXRlcmlhbFNvdXJjZXMuRGVmYXVsdE1hdGVyaWFsX1ByaW1pdGl2ZSk7XHJcbiAgICAvLyB0aGlzLmxvYWRNYXRlcmlhbEZyb21KU09OKERlZmF1bHRNYXRlcmlhbFNvdXJjZXMuRGVmYXVsdE1hdGVyaWFsX1Nwcml0ZSk7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VQcm9wZXJ0aWVzSW5Db250ZW50IChwYXRoOiBzdHJpbmcsIG90aGVyUGFyYW1zKSB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KHBhdGgpO1xyXG5cclxuICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgIGNvbnRlbnQuY2hhbmdlUHJvcGVydGllcyhvdGhlclBhcmFtcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBPRkNvbnNvbGUud2FybihPRlRyYW5zbGF0aW9ucy5GcmFtZXdvcmsuQ29udGVudE1hbmFnZW1lbnQuY2hhbmdlUHJvcGVydGllc0luQ29udGVudE5vdEZvdW5kLFxyXG4gICAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRDb250ZW50PFQgZXh0ZW5kcyBPRkJhc2VDb250ZW50PihwYXRoOiBzdHJpbmcpOiBUIHtcclxuICAgIGxldCByZXN1bHRPYmplY3Q6IFQ7XHJcbiAgICBjb25zdCBjb250ZW50Q291bnQgPSB0aGlzLl9jb250ZW50UmVwb3NpdG9yeS5sZW5ndGg7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Q291bnQ7IGkrKykge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fY29udGVudFJlcG9zaXRvcnlbaV07XHJcblxyXG4gICAgICBpZiAoY29udGVudCAmJiBjb250ZW50LnBhdGggPT09IHBhdGgpIHtcclxuICAgICAgICByZXN1bHRPYmplY3QgPSBjb250ZW50IGFzIFQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0T2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgbG9hZE1hdGVyaWFsRnJvbUpTT04gKGpzb246IHN0cmluZywgcGF0aDogc3RyaW5nKTogT0ZNYXRlcmlhbENvbnRlbnQge1xyXG4gICAgLy8gY29uc3QgaW1hZ2VDb250ZW50ID0gdGhpcy5nZXRDb250ZW50KHBhdGgpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIk5Db250ZW50TWFuYWdtZW50OjpMb2FkSW1hZ2VGcm9tSlNPTk9iamVjdD4gc3RpbGwgbmVlZHMgd29yay5cIiwganNvbik7XHJcbiAgICAgIC8vIGlmIChpbWFnZUNvbnRlbnQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxDb250ZW50ID0gbmV3IE9GTWF0ZXJpYWxDb250ZW50KHRoaXMpO1xyXG4gICAgICAgIG1hdGVyaWFsQ29udGVudC5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgbWF0ZXJpYWxDb250ZW50LmxvYWRGcm9tSlNPTihqc29uLCBwYXRoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udGVudFJlcG9zaXRvcnkucHVzaChtYXRlcmlhbENvbnRlbnQpO1xyXG5cclxuICAgICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5Db250ZW50TWFuYWdlbWVudC5sb2FkTWF0ZXJpYWxGcm9tSlNPTixcclxuICAgICAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiTkNvbnRlbnRNYW5hZ21lbnQoRnJrLWlkOlwiICsgQ3VycmVudEZyYW1ld29yayArIFwiKTo6TG9hZEltYWdlRnJvbUpTT05PYmplY3Q+IFwiICsgcGF0aCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcmV0dXJuIG1hdGVyaWFsQ29udGVudDtcclxuICB9XHJcblxyXG4gIGxvYWRNYXRlcmlhbCAocGF0aDogc3RyaW5nKTogT0ZNYXRlcmlhbENvbnRlbnQge1xyXG4gICAgY29uc3QgbWF0ZXJpYWxDb250ZW50ID0gbmV3IE9GTWF0ZXJpYWxDb250ZW50KHRoaXMpO1xyXG4gICAgbWF0ZXJpYWxDb250ZW50LmluaXRpYWxpemUoKTtcclxuICAgIG1hdGVyaWFsQ29udGVudC5sb2FkKHBhdGgpO1xyXG5cclxuICAgIHRoaXMuX2NvbnRlbnRSZXBvc2l0b3J5LnB1c2gobWF0ZXJpYWxDb250ZW50KTtcclxuXHJcbiAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5Db250ZW50TWFuYWdlbWVudC5sb2FkTWF0ZXJpYWwsXHJcbiAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcblxyXG4gICAgcmV0dXJuIG1hdGVyaWFsQ29udGVudDtcclxuICB9XHJcblxyXG4gIGxvYWRJbWFnZSAocGF0aDogc3RyaW5nKTogT0ZJbWFnZUNvbnRlbnQge1xyXG4gICAgY29uc3QgaW1hZ2VDb250ZW50ID0gbmV3IE9GSW1hZ2VDb250ZW50KHRoaXMpO1xyXG4gICAgaW1hZ2VDb250ZW50LmluaXRpYWxpemUoKTtcclxuICAgIGltYWdlQ29udGVudC5sb2FkKHBhdGgpO1xyXG5cclxuICAgIHRoaXMuX2NvbnRlbnRSZXBvc2l0b3J5LnB1c2goaW1hZ2VDb250ZW50KTtcclxuXHJcbiAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5Db250ZW50TWFuYWdlbWVudC5sb2FkSW1hZ2UsXHJcbiAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcblxyXG4gICAgcmV0dXJuIGltYWdlQ29udGVudDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGFzeW5jTG9hZFNvdW5kRnJvbUFycmF5QnVmZmVyPFQgZXh0ZW5kcyBPRlNDRXh0ZXJuYWxTb3VyY2U+IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIHBhdGg6IHN0cmluZywgcGFyYW1zOiBUKTogUHJvbWlzZTxPRlNvdW5kQ29udGVudD4ge1xyXG4gICAgY29uc3Qgc291bmRDb250ZW50ID0gbmV3IE9GU291bmRDb250ZW50KHRoaXMpO1xyXG4gICAgc291bmRDb250ZW50LmluaXRpYWxpemUoKTtcclxuICAgIGF3YWl0IHNvdW5kQ29udGVudC5sb2FkRnJvbUFycmF5QnVmZmVyPFQ+KGFycmF5QnVmZmVyLCBwYXRoLCBwYXJhbXMpO1xyXG5cclxuICAgIHRoaXMuX2NvbnRlbnRSZXBvc2l0b3J5LnB1c2goc291bmRDb250ZW50KTtcclxuXHJcbiAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5Db250ZW50TWFuYWdlbWVudC5sb2FkU291bmRGcm9tQXJyYXlBQnVmZmVyLFxyXG4gICAgICB0aGlzLmZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIHBhdGgpO1xyXG5cclxuICAgIHJldHVybiBzb3VuZENvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBsb2FkSW1hZ2VGcm9tSFRNTEltYWdlIChpbWFnZTogSFRNTEltYWdlRWxlbWVudCwgcGF0aDogc3RyaW5nLCBwYXJhbXM6IHt9KTogT0ZJbWFnZUNvbnRlbnQge1xyXG4gICAgbGV0IGltYWdlQ29udGVudCA9IHRoaXMuZ2V0Q29udGVudDxPRkltYWdlQ29udGVudD4ocGF0aCk7XHJcblxyXG4gICAgaWYgKCFpbWFnZUNvbnRlbnQpIHtcclxuICAgICAgaW1hZ2VDb250ZW50ID0gbmV3IE9GSW1hZ2VDb250ZW50KHRoaXMpO1xyXG4gICAgICBpbWFnZUNvbnRlbnQuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICBpbWFnZUNvbnRlbnQubG9hZEZyb21JbWFnZUhUTUwoaW1hZ2UsIHBhdGgsIHBhcmFtcyk7XHJcblxyXG4gICAgICB0aGlzLl9jb250ZW50UmVwb3NpdG9yeS5wdXNoKGltYWdlQ29udGVudCk7XHJcblxyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5Db250ZW50TWFuYWdlbWVudC5sb2FkSW1hZ2VGcm9tSFRNTEltYWdlLFxyXG4gICAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGltYWdlQ29udGVudDtcclxuICB9XHJcblxyXG4gIHVubG9hZEltYWdlIChwYXRoOiBzdHJpbmcpIHtcclxuICAgIE9GQ29uc29sZS5lcnJvcihPRlRyYW5zbGF0aW9ucy5GcmFtZXdvcmsuQ29udGVudE1hbmFnZW1lbnQubm90SW1wbGVtZW50ZWRFeGNlcHRpb24sXHJcbiAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgcGF0aCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQmFzZUNvbnRlbnQgfSBmcm9tICcuL29mQmFzZUNvbnRlbnQnO1xyXG5pbXBvcnQgeyBPRkNvbnRlbnRNYW5hZ2VyIH0gZnJvbSAnLi9vZkNvbnRlbnRNYW5hZ2VyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPRkltYWdlQ29udGVudCBleHRlbmRzIE9GQmFzZUNvbnRlbnQge1xyXG5cclxuICBwcml2YXRlIF9pbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICBwcml2YXRlIF9pbWFnZVRleHR1cmU6IFdlYkdMVGV4dHVyZTtcclxuXHJcbiAgZ2V0IGltYWdlSFRNTCAoKTogSFRNTEltYWdlRWxlbWVudCB7IHJldHVybiB0aGlzLl9pbWFnZTsgfVxyXG4gIGdldCBpbWFnZVdpZHRoICgpIHsgcmV0dXJuIHRoaXMuX2ltYWdlLndpZHRoOyB9XHJcbiAgZ2V0IGltYWdlSGVpZ2h0ICgpIHsgcmV0dXJuIHRoaXMuX2ltYWdlLmhlaWdodDsgfVxyXG4gIGdldCBpbWFnZVRleHR1cmUgKCk6IFdlYkdMVGV4dHVyZSB7IHJldHVybiB0aGlzLl9pbWFnZVRleHR1cmU7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoY29udGVudE1hbmFnZXI6IE9GQ29udGVudE1hbmFnZXIpIHtcclxuICAgIHN1cGVyKGNvbnRlbnRNYW5hZ2VyKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkIChwYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHN1cGVyLmxvYWQocGF0aCk7XHJcblxyXG4gICAgdGhpcy5faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuXHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLmdyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIC8vIGNyZWF0ZSBpbWFnZSB0ZXh0dXJlIG9uIFdlYkdMXHJcbiAgICB0aGlzLl9pbWFnZVRleHR1cmUgPSBfR0wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cclxuICAgIC8vIEV4dGVuZHMgdGhlIE9uTG9hZCBpbWFnZSBldmVudCBmb3IgV2ViR0wgc3VwcG9ydFxyXG4gICAgdGhpcy5faW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICBfR0wuYmluZFRleHR1cmUoX0dMLlRFWFRVUkVfMkQsIHRoaXMuX2ltYWdlVGV4dHVyZSk7XHJcbiAgICAgIF9HTC50ZXhJbWFnZTJEKF9HTC5URVhUVVJFXzJELCAwLCBfR0wuUkdCQSwgX0dMLlJHQkEsIF9HTC5VTlNJR05FRF9CWVRFLCB0aGlzLl9pbWFnZSk7XHJcbiAgICAgIF9HTC50ZXhQYXJhbWV0ZXJpKF9HTC5URVhUVVJFXzJELCBfR0wuVEVYVFVSRV9NQUdfRklMVEVSLCBfR0wuTElORUFSKTtcclxuICAgICAgX0dMLnRleFBhcmFtZXRlcmkoX0dMLlRFWFRVUkVfMkQsIF9HTC5URVhUVVJFX01JTl9GSUxURVIsIF9HTC5MSU5FQVIpO1xyXG4gICAgICBfR0wudGV4UGFyYW1ldGVyaShfR0wuVEVYVFVSRV8yRCwgX0dMLlRFWFRVUkVfV1JBUF9TLCBfR0wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICAgIF9HTC50ZXhQYXJhbWV0ZXJpKF9HTC5URVhUVVJFXzJELCBfR0wuVEVYVFVSRV9XUkFQX1QsIF9HTC5DTEFNUF9UT19FREdFKTtcclxuXHJcbiAgICAgIC8vIEZvciBtaXBtYXBwaW5nIChCRVRURVIgUEVSRk9STUFOQ0UgSU4gM0QgRU5WSU9SRU1FTlQpXHJcbiAgICAgIC8vIEdMLnRleFBhcmFtZXRlcmkoR0wuVEVYVFVSRV8yRCwgR0wuVEVYVFVSRV9NSU5fRklMVEVSLCBHTC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xyXG4gICAgICAvLyBHTC5nZW5lcmF0ZU1pcG1hcChHTC5URVhUVVJFXzJEKTtcclxuXHJcbiAgICAgIF9HTC5iaW5kVGV4dHVyZShfR0wuVEVYVFVSRV8yRCwgbnVsbCk7XHJcblxyXG4gICAgICB0aGlzLl9pc0xvYWRlZCA9IHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEZpbmFsbHkgdGhlbiBzZXQgaXQncyBwYXRoIHRvIHRoZSBJbWFnZSB0byBsb2FkXHJcbiAgICB0aGlzLl9pbWFnZS5zcmMgPSBwYXRoO1xyXG4gIH1cclxuXHJcbiAgbG9hZEZyb21JbWFnZUhUTUwgKGltYWdlSFRNTDogSFRNTEltYWdlRWxlbWVudCwgcGF0aDogc3RyaW5nLCBwYXJhbXM/OiB7fSkge1xyXG4gICAgcGFyYW1zID0gIXBhcmFtcyA/IHt9IDogcGFyYW1zO1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICBpZiAocGF0aCkgeyB0aGlzLmxvYWQocGF0aCk7IH1cclxuXHJcbiAgICB0aGlzLl9pbWFnZSA9IGltYWdlSFRNTDtcclxuXHJcbiAgICBjb25zdCBtYWdGaWx0ZXIgPSAhcGFyYW1zWydXZWJHTF9NaW5GaWx0ZXInXSA/IF9HTC5MSU5FQVIgOiBwYXJhbXNbJ1dlYkdMX01pbkZpbHRlciddO1xyXG4gICAgY29uc3QgbWluRmlsdGVyID0gIXBhcmFtc1snV2ViR0xfTWFnRmlsdGVyJ10gPyBfR0wuTElORUFSIDogcGFyYW1zWydXZWJHTF9NYWdGaWx0ZXInXTtcclxuICAgIGNvbnN0IHdyYXBTID0gIXBhcmFtc1snV2ViR0xfV3JhcFMnXSA/IF9HTC5DTEFNUF9UT19FREdFIDogcGFyYW1zWydXZWJHTF9XcmFwUyddO1xyXG4gICAgY29uc3Qgd3JhcFQgPSAhcGFyYW1zWydXZWJHTF9XcmFwVCddID8gX0dMLkNMQU1QX1RPX0VER0UgOiBwYXJhbXNbJ1dlYkdMX1dyYXBUJ107XHJcbiAgICBjb25zdCBnZW5lcmF0ZU1pcE1hcHMgPSAhcGFyYW1zWydHZW5lcmF0ZU1pcE1hcCddID8gZmFsc2UgOiBwYXJhbXNbJ0dlbmVyYXRlTWlwTWFwJ107XHJcblxyXG4gICAgLy8gY3JlYXRlIGltYWdlIHRleHR1cmUgb24gV2ViR0xcclxuICAgIHRoaXMuX2ltYWdlVGV4dHVyZSA9IF9HTC5jcmVhdGVUZXh0dXJlKCk7XHJcblxyXG4gICAgX0dMLmJpbmRUZXh0dXJlKF9HTC5URVhUVVJFXzJELCB0aGlzLl9pbWFnZVRleHR1cmUpO1xyXG4gICAgX0dMLnRleEltYWdlMkQoX0dMLlRFWFRVUkVfMkQsIDAsIF9HTC5SR0JBLCBfR0wuUkdCQSwgX0dMLlVOU0lHTkVEX0JZVEUsIHRoaXMuX2ltYWdlKTtcclxuICAgIF9HTC50ZXhQYXJhbWV0ZXJpKF9HTC5URVhUVVJFXzJELCBfR0wuVEVYVFVSRV9NQUdfRklMVEVSLCBtYWdGaWx0ZXIpO1xyXG4gICAgX0dMLnRleFBhcmFtZXRlcmkoX0dMLlRFWFRVUkVfMkQsIF9HTC5URVhUVVJFX01JTl9GSUxURVIsIG1pbkZpbHRlcik7XHJcbiAgICBfR0wudGV4UGFyYW1ldGVyaShfR0wuVEVYVFVSRV8yRCwgX0dMLlRFWFRVUkVfV1JBUF9TLCB3cmFwUyk7XHJcbiAgICBfR0wudGV4UGFyYW1ldGVyaShfR0wuVEVYVFVSRV8yRCwgX0dMLlRFWFRVUkVfV1JBUF9ULCB3cmFwVCk7XHJcblxyXG4gICAgLy8gRm9yIG1pcG1hcHBpbmcgKEJFVFRFUiBQRVJGT1JNQU5DRSBJTiAzRCBFTlZJT1JFTUVOVClcclxuICAgIGlmIChnZW5lcmF0ZU1pcE1hcHMpIHtcclxuICAgICAgX0dMLnRleFBhcmFtZXRlcmkoX0dMLlRFWFRVUkVfMkQsIF9HTC5URVhUVVJFX01JTl9GSUxURVIsIF9HTC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xyXG4gICAgICBfR0wuZ2VuZXJhdGVNaXBtYXAoX0dMLlRFWFRVUkVfMkQpO1xyXG4gICAgfVxyXG4gICAgLy8gdW5iaW5kXHJcbiAgICBfR0wuYmluZFRleHR1cmUoX0dMLlRFWFRVUkVfMkQsIG51bGwpO1xyXG5cclxuICAgIHRoaXMuX2lzTG9hZGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNoYW5nZVByb3BlcnRpZXMgKHBhcmFtcz86IHt9KSB7XHJcbiAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xyXG4gICAgICBwYXJhbXMgPSAhcGFyYW1zID8ge30gOiBwYXJhbXM7XHJcbiAgICAgIGNvbnN0IF9HTCA9IHRoaXMuZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgICBjb25zdCBtaW5GaWx0ZXIgPSAhcGFyYW1zWydXZWJHTF9NaW5GaWx0ZXInXSA/IF9HTC5MSU5FQVIgOiBwYXJhbXNbJ1dlYkdMX01pbkZpbHRlciddO1xyXG4gICAgICBjb25zdCBtYWdGaWx0ZXIgPSAhcGFyYW1zWydXZWJHTF9NYWdGaWx0ZXInXSA/IF9HTC5MSU5FQVIgOiBwYXJhbXNbJ1dlYkdMX01hZ0ZpbHRlciddO1xyXG4gICAgICBjb25zdCB3cmFwUyA9ICFwYXJhbXNbJ1dlYkdMX1dyYXBTJ10gPyBfR0wuQ0xBTVBfVE9fRURHRSA6IHBhcmFtc1snV2ViR0xfV3JhcFMnXTtcclxuICAgICAgY29uc3Qgd3JhcFQgPSAhcGFyYW1zWydXZWJHTF9XcmFwVCddID8gX0dMLkNMQU1QX1RPX0VER0UgOiBwYXJhbXNbJ1dlYkdMX1dyYXBUJ107XHJcbiAgICAgIGNvbnN0IGdlbmVyYXRlTWlwTWFwcyA9ICFwYXJhbXNbJ0dlbmVyYXRlTWlwTWFwJ10gPyBmYWxzZSA6IHBhcmFtc1snR2VuZXJhdGVNaXBNYXAnXTtcclxuXHJcbiAgICAgIC8vIHVuYmluZCBmaXJzdFxyXG4gICAgICBfR0wuYmluZFRleHR1cmUoX0dMLlRFWFRVUkVfMkQsIG51bGwpO1xyXG5cclxuICAgICAgX0dMLmJpbmRUZXh0dXJlKF9HTC5URVhUVVJFXzJELCB0aGlzLl9pbWFnZVRleHR1cmUpO1xyXG4gICAgICBfR0wudGV4SW1hZ2UyRChfR0wuVEVYVFVSRV8yRCwgMCwgX0dMLlJHQkEsIF9HTC5SR0JBLCBfR0wuVU5TSUdORURfQllURSwgdGhpcy5faW1hZ2UpO1xyXG4gICAgICBfR0wudGV4UGFyYW1ldGVyaShfR0wuVEVYVFVSRV8yRCwgX0dMLlRFWFRVUkVfTUFHX0ZJTFRFUiwgbWFnRmlsdGVyKTtcclxuICAgICAgX0dMLnRleFBhcmFtZXRlcmkoX0dMLlRFWFRVUkVfMkQsIF9HTC5URVhUVVJFX01JTl9GSUxURVIsIG1pbkZpbHRlcik7XHJcbiAgICAgIF9HTC50ZXhQYXJhbWV0ZXJpKF9HTC5URVhUVVJFXzJELCBfR0wuVEVYVFVSRV9XUkFQX1MsIHdyYXBTKTtcclxuICAgICAgX0dMLnRleFBhcmFtZXRlcmkoX0dMLlRFWFRVUkVfMkQsIF9HTC5URVhUVVJFX1dSQVBfVCwgd3JhcFQpO1xyXG5cclxuICAgICAgLy8gRm9yIG1pcG1hcHBpbmcgKEJFVFRFUiBQRVJGT1JNQU5DRSBJTiAzRCBFTlZJT1JFTUVOVClcclxuICAgICAgaWYgKGdlbmVyYXRlTWlwTWFwcykge1xyXG4gICAgICAgIF9HTC50ZXhQYXJhbWV0ZXJpKF9HTC5URVhUVVJFXzJELCBfR0wuVEVYVFVSRV9NSU5fRklMVEVSLCBfR0wuTElORUFSX01JUE1BUF9ORUFSRVNUKTtcclxuICAgICAgICBfR0wuZ2VuZXJhdGVNaXBtYXAoX0dMLlRFWFRVUkVfMkQpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHVuYmluZFxyXG4gICAgICBfR0wuYmluZFRleHR1cmUoX0dMLlRFWFRVUkVfMkQsIG51bGwpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkJhc2VDb250ZW50IH0gZnJvbSAnLi9vZkJhc2VDb250ZW50JztcclxuaW1wb3J0IHsgT0ZDb250ZW50TWFuYWdlciB9IGZyb20gJy4vb2ZDb250ZW50TWFuYWdlcic7XHJcbmltcG9ydCB7IE9GVHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vLi4vc2V0dGluZ3Mvb2ZUcmFuc2xhdGlvbnMnO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZNYXRlcmlhbENvbnRlbnQgZXh0ZW5kcyBPRkJhc2VDb250ZW50IHtcclxuXHJcbiAgcHJpdmF0ZSBfbWF0ZXJpYWxOYW1lOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfbWF0ZXJpYWxUZWNoVmVyc2lvbjogc3RyaW5nO1xyXG4gIHByaXZhdGUgX3NoYWRlck5hbWU6IHN0cmluZztcclxuXHJcbiAgcHJpdmF0ZSBfdW5pZm9ybXMgPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGVudE1hbmFnZXI6IE9GQ29udGVudE1hbmFnZXIpIHtcclxuICAgIHN1cGVyKGNvbnRlbnRNYW5hZ2VyKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XHJcbiAgfVxyXG5cclxuICBsb2FkIChwYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHN1cGVyLmxvYWQocGF0aCk7XHJcbiAgfVxyXG5cclxuICBsb2FkRnJvbUpTT04gKGpzb246IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XHJcbiAgICBpZiAocGF0aCkgeyB0aGlzLmxvYWQocGF0aCk7IH1cclxuXHJcbiAgICBjb25zdCBqc29uT2JqID0gSlNPTi5wYXJzZShqc29uKTtcclxuXHJcbiAgICB0aGlzLl9tYXRlcmlhbE5hbWUgPSBqc29uT2JqLm1hdGVyaWFsTmFtZTtcclxuICAgIHRoaXMuX21hdGVyaWFsVGVjaFZlcnNpb24gPSBqc29uT2JqLm1hdGVyaWFsVGVjaFZlcnNpb247XHJcbiAgICB0aGlzLl9zaGFkZXJOYW1lID0ganNvbk9iai5zaGFkZXJOYW1lO1xyXG5cclxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBqc29uT2JqLnB1YmxpY1Byb3BlcnRpZXMpIHtcclxuICAgICAgY29uc3QgdW5pZm9tTmFtZSA9IHByb3Auc2hhZGVyVW5pZm9ybTtcclxuICAgICAgY29uc3QgdW5pZm9tVHlwZSA9IHByb3AudHlwZTtcclxuXHJcbiAgICAgIHRoaXMuX3VuaWZvcm1zLnB1c2goeyBuYW1lOiB1bmlmb21OYW1lLCBkYXRhVHlwZTogdW5pZm9tVHlwZSB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNoYW5nZVByb3BlcnRpZXMgKHBhcmFtczoge30pIHtcclxuICAgIE9GQ29uc29sZS5lcnJvcihPRlRyYW5zbGF0aW9ucy5GcmFtZXdvcmsuQ29udGVudE1hbmFnZW1lbnQuTWF0ZXJpYWxDb250ZW50Lm5vdEltcGxlbWVudGVkRXhjZXB0aW9uLFxyXG4gICAgICB0aGlzLmZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIHBhcmFtcy50b1N0cmluZygpKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZCYXNlQ29udGVudCB9IGZyb20gJy4vb2ZCYXNlQ29udGVudCc7XHJcbmltcG9ydCB7IE9GQ29udGVudE1hbmFnZXIgfSBmcm9tICcuL29mQ29udGVudE1hbmFnZXInO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcbmltcG9ydCB7IE9GVHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vLi4vc2V0dGluZ3Mvb2ZUcmFuc2xhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPRlNDRXh0ZXJuYWxTb3VyY2Uge1xyXG4gIHNldEludGVybmFsX1NvdW5kQ29udGVudCh2YWw6IE9GU291bmRDb250ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9GU291bmRDb250ZW50IGV4dGVuZHMgT0ZCYXNlQ29udGVudCB7XHJcblxyXG4gIHByaXZhdGUgX2F1ZGlvQnVmZmVyOiBBdWRpb0J1ZmZlcjtcclxuICBwcml2YXRlIF9hdWRpb0J1ZmZlckVycm9yOiBET01FeGNlcHRpb247XHJcbiAgcHJpdmF0ZSBfcGFyYW1zOiBPRlNDRXh0ZXJuYWxTb3VyY2U7XHJcblxyXG4gIGdldCBhdWRpb0J1ZmZlciAoKTogQXVkaW9CdWZmZXIgeyByZXR1cm4gdGhpcy5fYXVkaW9CdWZmZXI7IH1cclxuICBnZXQgYXVkaW9CdWZmZXJfRXJyb3IgKCkgeyByZXR1cm4gdGhpcy5fYXVkaW9CdWZmZXJFcnJvcjsgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZW50TWFuYWdlcjogT0ZDb250ZW50TWFuYWdlcikge1xyXG4gICAgc3VwZXIoY29udGVudE1hbmFnZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcclxuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIGxvYWQgKHBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgc3VwZXIubG9hZChwYXRoKTtcclxuICB9XHJcblxyXG4gIGxvYWRGcm9tQXJyYXlCdWZmZXI8VCBleHRlbmRzIE9GU0NFeHRlcm5hbFNvdXJjZT4gKGF1ZGlvQXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBwYXRoOiBzdHJpbmcsIHBhcmFtczogVCk6IFByb21pc2U8QXVkaW9CdWZmZXI+IHtcclxuICAgIGlmIChwYXRoKSB7IHN1cGVyLmxvYWQocGF0aCk7IH1cclxuXHJcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XHJcblxyXG4gICAgY29uc3QgYXVkaW9EZXZpY2UgPSB0aGlzLmZyYW1ld29yay5hdWRpb0RldmljZTtcclxuICAgIGNvbnN0IGF1ZGlvQ29udGV4dCA9IGF1ZGlvRGV2aWNlLmF1ZGlvQ29udGV4dDtcclxuXHJcbiAgICByZXR1cm4gYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShcclxuICAgICAgYXVkaW9BcnJheUJ1ZmZlcixcclxuICAgICAgKGJ1ZmZlcikgPT4gdGhpcy5pbnRlcm5hbF9PbkRlY29kZUF1ZGlvRGF0YShidWZmZXIpLFxyXG4gICAgICAoZXJyb3IpID0+IHRoaXMuaW50ZXJuYWxfT25FcnJvckRlY29kZUF1ZGlvRGF0YShlcnJvcilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBpbnRlcm5hbF9PbkRlY29kZUF1ZGlvRGF0YSAoYnVmZmVyOiBBdWRpb0J1ZmZlcik6IHZvaWQge1xyXG4gICAgdGhpcy5faXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5fYXVkaW9CdWZmZXIgPSBidWZmZXI7XHJcblxyXG4gICAgaWYgKHRoaXMuX3BhcmFtcykge1xyXG4gICAgICAvLyBOb3cgc2V0IHRoZSByZWNlbnRseSBhZGRlZCBzb3VuZCBjb250ZW50IHRvIHRoZSBleHRlcm5hbCByZXNvdXJjZVxyXG4gICAgICB0aGlzLl9wYXJhbXMuc2V0SW50ZXJuYWxfU291bmRDb250ZW50KHRoaXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW50ZXJuYWxfT25FcnJvckRlY29kZUF1ZGlvRGF0YSAoZXJyb3I6IERPTUV4Y2VwdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy5fYXVkaW9CdWZmZXJFcnJvciA9IGVycm9yO1xyXG5cclxuICAgIE9GQ29uc29sZS5sb2coT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLkNvbnRlbnRNYW5hZ2VtZW50LlNvdW5kQ29udGVudC5pbnRlcm5hbF9PbkVycm9yRGVjb2RlQXVkaW9EYXRhLFxyXG4gICAgICB0aGlzLl9mcmFtZXdvcmsuZnJhbWV3b3JrSWRlbnRpZmllci50b1N0cmluZygpLCBlcnJvci5tZXNzYWdlKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tICcuLi8uLi9vZkZyYW1ld29yayc7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkF1ZGlvRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciB9IGZyb20gJy4vb3B0aW1pemF0aW9uL2F1ZGlvL29mQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyJztcclxuaW1wb3J0IHsgT0ZBdWRpb05vZGVQb29sZXIgfSBmcm9tICcuL29wdGltaXphdGlvbi9hdWRpby9vZkF1ZGlvTm9kZVBvb2xlcic7XHJcbmltcG9ydCB7IE9GQ29uc29sZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvb2ZDb25zb2xlJztcclxuaW1wb3J0IHsgT0ZUcmFuc2xhdGlvbnMgfSBmcm9tICcuLi8uLi9zZXR0aW5ncy9vZlRyYW5zbGF0aW9ucyc7XHJcbmltcG9ydCB7IE9GQXVkaW9Ob2RlT2JqZWN0IH0gZnJvbSAnLi9vcHRpbWl6YXRpb24vYXVkaW8vb2ZBdWRpb05vZGVPYmplY3QnO1xyXG5pbXBvcnQgeyBPRkVudW1BdWRpb05vZGVUeXBlIH0gZnJvbSAnLi9vcHRpbWl6YXRpb24vYXVkaW8vb2ZFbnVtQXVkaW9Ob2RlVHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZBdWRpb0RldmljZSB7XHJcbiAgcHJpdmF0ZSBfYXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQ7XHJcbiAgcHJpdmF0ZSBfaW5pdGlhbFRpbWU6IG51bWJlcjtcclxuICBwcml2YXRlIF9tYXN0ZXJWb2x1bWU6IG51bWJlcjtcclxuXHJcbiAgcHJpdmF0ZSBfaXNBdWRpb1N1cHBvcnRlZDogYm9vbGVhbjtcclxuICBwcml2YXRlIF9hdWRpb0RldmljZU9wdGltaXphdGlvbk1hbmFnZXI6IE9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyO1xyXG4gIHByaXZhdGUgX2F1ZGlvTm9kZVBvb2xlcjogT0ZBdWRpb05vZGVQb29sZXI7XHJcblxyXG4gIGdldCBpbml0aWFsVGltZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxUaW1lO1xyXG4gIH1cclxuICBnZXQgbWFzdGVyVm9sdW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbWFzdGVyVm9sdW1lO1xyXG4gIH1cclxuICBnZXQgaXNBdWRpb1N1cHBvcnRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0F1ZGlvU3VwcG9ydGVkO1xyXG4gIH1cclxuICBnZXQgYXVkaW9Db250ZXh0KCk6IEF1ZGlvQ29udGV4dCB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXVkaW9Db250ZXh0O1xyXG4gIH1cclxuICBnZXQgYXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyKCk6IE9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIHtcclxuICAgIHJldHVybiB0aGlzLl9hdWRpb0RldmljZU9wdGltaXphdGlvbk1hbmFnZXI7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9mcmFtZXdvcms6IE9GRnJhbWV3b3JrKSB7XHJcbiAgICB0aGlzLl9pc0F1ZGlvU3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9tYXN0ZXJWb2x1bWUgPSAwLjE7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gRml4IHVwIGZvciBwcmVmaXhpbmdcclxuICAgICAgd2luZG93LkF1ZGlvQ29udGV4dCA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93Wyd3ZWJBdWRpb0NvbnRleHQnXSB8fCB3aW5kb3dbJ3dlYmtpdEF1ZGlvQ29udGV4dCddO1xyXG4gICAgICB0aGlzLl9hdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbiAgICAgIHRoaXMuX2luaXRpYWxUaW1lID0gdGhpcy5fYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGRldmljZSBvcHRpbWl6YXRpb24gbWFuYWdtZW50XHJcbiAgICAgIHRoaXMuX2F1ZGlvRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciA9IG5ldyBPRkF1ZGlvRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcih0aGlzKTtcclxuICAgICAgdGhpcy5fYXVkaW9Ob2RlUG9vbGVyID0gdGhpcy5fYXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyLmF1ZGlvTm9kZVBvb2xlcjtcclxuXHJcbiAgICAgIHRoaXMuX2lzQXVkaW9TdXBwb3J0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgT0ZDb25zb2xlLmxvZyhPRlRyYW5zbGF0aW9ucy5GcmFtZXdvcmsuQXVkaW9EZXZpY2UuaW5pdGlhbGl6ZSwgdGhpcy5fZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHRoaXMuX2lzQXVkaW9TdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgT0ZDb25zb2xlLmVycm9yKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5BdWRpb0RldmljZS5ub3RTdXBwb3J0ZWQsIHRoaXMuX2ZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVxdWVzdEdhaW5Ob2RlKCk6IE9GQXVkaW9Ob2RlT2JqZWN0PEdhaW5Ob2RlPiB7XHJcbiAgICBjb25zdCBhdWRpb05vZGVPYmogPSB0aGlzLl9hdWRpb05vZGVQb29sZXIuZ2V0QXZhaWxhYmxlQXVkaW9Ob2RlKE9GRW51bUF1ZGlvTm9kZVR5cGUuR2Fpbk5vZGUpO1xyXG5cclxuICAgIGlmIChhdWRpb05vZGVPYmouYnVmZmVyVHlwZSA9PT0gT0ZFbnVtQXVkaW9Ob2RlVHlwZS5VbnNpZ25lZCkge1xyXG4gICAgICBjb25zdCBnYWluTm9kZSA9IHRoaXMuX2F1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XHJcbiAgICAgIGF1ZGlvTm9kZU9iai5zZXRXZWJBdWRpb05vZGUoZ2Fpbk5vZGUsIE9GRW51bUF1ZGlvTm9kZVR5cGUuR2Fpbk5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhdWRpb05vZGVPYmogYXMgT0ZBdWRpb05vZGVPYmplY3Q8R2Fpbk5vZGU+O1xyXG4gIH1cclxuXHJcbiAgcmVxdWVzdFN0ZXJlb1Bhbm5lck5vZGUoKTogT0ZBdWRpb05vZGVPYmplY3Q8U3RlcmVvUGFubmVyTm9kZT4ge1xyXG4gICAgY29uc3QgYXVkaW9Ob2RlT2JqID0gdGhpcy5fYXVkaW9Ob2RlUG9vbGVyLmdldEF2YWlsYWJsZUF1ZGlvTm9kZShPRkVudW1BdWRpb05vZGVUeXBlLlN0ZXJlb1Bhbm5lck5vZGUpO1xyXG5cclxuICAgIGlmIChhdWRpb05vZGVPYmouYnVmZmVyVHlwZSA9PT0gT0ZFbnVtQXVkaW9Ob2RlVHlwZS5VbnNpZ25lZCkge1xyXG4gICAgICBpZiAodGhpcy5fYXVkaW9Db250ZXh0LmNyZWF0ZVN0ZXJlb1Bhbm5lcikge1xyXG4gICAgICAgIGNvbnN0IHN0ZXJlb1Bhbm5lck5vZGUgPSB0aGlzLl9hdWRpb0NvbnRleHQuY3JlYXRlU3RlcmVvUGFubmVyKCk7XHJcbiAgICAgICAgYXVkaW9Ob2RlT2JqLnNldFdlYkF1ZGlvTm9kZShzdGVyZW9QYW5uZXJOb2RlLCBPRkVudW1BdWRpb05vZGVUeXBlLlN0ZXJlb1Bhbm5lck5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGF1ZGlvTm9kZU9iaiBhcyBPRkF1ZGlvTm9kZU9iamVjdDxTdGVyZW9QYW5uZXJOb2RlPjtcclxuICB9XHJcblxyXG4gIHJlbGVhc2VOb2RlKG5vZGU6IE9GQXVkaW9Ob2RlT2JqZWN0PEF1ZGlvTm9kZT4pOiB2b2lkIHtcclxuICAgIGlmIChub2RlKSB7XHJcbiAgICAgIG5vZGUud2ViQXVkaW9Ob2RlLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgbm9kZS5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgdGhpcy5fYXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyLnVwZGF0ZShhcmdzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb25uZWN0Tm9kZXMoYXVkaW9EZXZpY2U6IE9GQXVkaW9EZXZpY2UsIHNvdXJjZTogQXVkaW9Ob2RlLCAuLi5hcmdzOiBBcnJheTxPRkF1ZGlvTm9kZU9iamVjdDxBdWRpb05vZGU+Pik6IHZvaWQge1xyXG4gICAgY29uc3QgYXJnQ291bnQgPSBhcmdzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBDb25uZWN0IFNvdXJjZSB3aXRoIHRoZSBmaXJzdCBOb2RlLlxyXG4gICAgaWYgKGFyZ0NvdW50ID4gMSkge1xyXG4gICAgICBzb3VyY2UuY29ubmVjdChhcmdzWzBdLndlYkF1ZGlvTm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29ubmVjdCB0aGUgTm9kZXNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpICsgMSA8IGFyZ0NvdW50OyBpKyspIHtcclxuICAgICAgYXJnc1tpXS53ZWJBdWRpb05vZGUuY29ubmVjdChhcmdzW2kgKyAxXS53ZWJBdWRpb05vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbm5lY3QgbGFzdCBub2RlIHdpdGggdGhlIEF1ZGlvQ29udGV4dCBEZXN0aW5hdGlvblxyXG4gICAgaWYgKGFyZ0NvdW50ID4gMikge1xyXG4gICAgICBjb25zdCBnYWluTm9kZSA9IGF1ZGlvRGV2aWNlLnJlcXVlc3RHYWluTm9kZSgpO1xyXG4gICAgICBnYWluTm9kZS5hY3RpdmF0ZSgpO1xyXG4gICAgICBnYWluTm9kZS53ZWJBdWRpb05vZGUuZ2Fpbi52YWx1ZSA9IGF1ZGlvRGV2aWNlLm1hc3RlclZvbHVtZTtcclxuXHJcbiAgICAgIGFyZ3NbYXJnQ291bnQgLSAxXS53ZWJBdWRpb05vZGUuY29ubmVjdChnYWluTm9kZS53ZWJBdWRpb05vZGUpO1xyXG4gICAgICBnYWluTm9kZS53ZWJBdWRpb05vZGUuY29ubmVjdChhdWRpb0RldmljZS5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbm5lY3ROb2Rlc05vTWFzdGVyKGF1ZGlvRGV2aWNlOiBPRkF1ZGlvRGV2aWNlLCBzb3VyY2U6IEF1ZGlvTm9kZSwgLi4uYXJnczogQXJyYXk8T0ZBdWRpb05vZGVPYmplY3Q8QXVkaW9Ob2RlPj4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGFyZ0NvdW50ID0gYXJncy5sZW5ndGg7XHJcblxyXG4gICAgLy8gQ29ubmVjdCBTb3VyY2Ugd2l0aCB0aGUgZmlyc3QgTm9kZS5cclxuICAgIGlmIChhcmdDb3VudCA+IDEpIHtcclxuICAgICAgc291cmNlLmNvbm5lY3QoYXJnc1swXS53ZWJBdWRpb05vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbm5lY3QgdGhlIE5vZGVzXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSArIDEgPCBhcmdDb3VudDsgaSsrKSB7XHJcbiAgICAgIGFyZ3NbaV0ud2ViQXVkaW9Ob2RlLmNvbm5lY3QoYXJnc1tpICsgMV0ud2ViQXVkaW9Ob2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb25uZWN0IGxhc3Qgbm9kZSB3aXRoIHRoZSBBdWRpb0NvbnRleHQgRGVzdGluYXRpb25cclxuICAgIGlmIChhcmdDb3VudCA+IDEpIHtcclxuICAgICAgYXJnc1thcmdDb3VudCAtIDFdLndlYkF1ZGlvTm9kZS5jb25uZWN0KGF1ZGlvRGV2aWNlLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vb2ZGcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBPRkVudW1SZW5kZXJFbmdpbmVUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb2ZFbnVtUmVuZGVyRW5naW5lJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPRkRldmljZUNhcGFiaWxpdGllcyB7XHJcblxyXG4gIHByaXZhdGUgX3JlbmRlckVuZ2luZVR5cGU6IE9GRW51bVJlbmRlckVuZ2luZVR5cGU7XHJcbiAgcHJpdmF0ZSBfZ3JhcGhpQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgZ2V0IHJlbmRlckVuZ2luZVR5cGUoKTogT0ZFbnVtUmVuZGVyRW5naW5lVHlwZSB7IHJldHVybiB0aGlzLl9yZW5kZXJFbmdpbmVUeXBlOyB9XHJcbiAgZ2V0IGdyYXBoaUNvbnRleHQoKTogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHwgUmVuZGVyaW5nQ29udGV4dCB7IHJldHVybiB0aGlzLl9ncmFwaGlDb250ZXh0OyB9XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfZnJhbWV3b3JrOiBPRkZyYW1ld29yaywgZm9yY2VDYW52YXM6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGNhbnZhc0VsZW1lbnQgPSB0aGlzLl9mcmFtZXdvcmsuY2FudmFzRWxlbWVudDtcclxuXHJcbiAgICBpZiAoIWZvcmNlQ2FudmFzKSB7XHJcbiAgICAgIHRoaXMuX2dyYXBoaUNvbnRleHQgPSB0aGlzLl9mcmFtZXdvcmsuY2FudmFzQ29udGV4dE1hbmFnZXIuY29uc3RydWNXZWJHTENhbnZhcyhjYW52YXNFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuX2dyYXBoaUNvbnRleHQpIHtcclxuICAgICAgdGhpcy5fZ3JhcGhpQ29udGV4dCA9IHRoaXMuX2ZyYW1ld29yay5jYW52YXNDb250ZXh0TWFuYWdlci5jb25zdHJ1Y3RDYW52YXMoY2FudmFzRWxlbWVudCk7XHJcbiAgICAgIHRoaXMuX3JlbmRlckVuZ2luZVR5cGUgPSBPRkVudW1SZW5kZXJFbmdpbmVUeXBlLkNhbnZhc0NvbnRleHQyRDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3JlbmRlckVuZ2luZVR5cGUgPSBPRkVudW1SZW5kZXJFbmdpbmVUeXBlLldlYkdMO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZShmcmFtZXdvcms6IE9GRnJhbWV3b3JrLCBmb3JjZUNhbnZhczogYm9vbGVhbik6IE9GRGV2aWNlQ2FwYWJpbGl0aWVzIHtcclxuICAgIHJldHVybiBuZXcgT0ZEZXZpY2VDYXBhYmlsaXRpZXMoZnJhbWV3b3JrLCBmb3JjZUNhbnZhcyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vb2ZGcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBPRlJlbmRlckNhbWVyYSB9IGZyb20gJy4uL3JlbmRlci9jYW1lcmEvb2ZSZW5kZXJDYW1lcmEnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vcmVuZGVyL2dyYXBoaWNzL29mQ29sb3InO1xyXG5pbXBvcnQgeyBPRlNoYWRlckZhY3RvcnkgfSBmcm9tICcuLi9yZW5kZXIvc2hhZGVyL29mU2hhZGVyRmFjdG9yeSc7XHJcbmltcG9ydCB7IE9GRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciB9IGZyb20gJy4vb3B0aW1pemF0aW9uL2dwdS9vZkRldmljZU9wdGltaXphdGlvbk1hbmFnZXInO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzJztcclxuaW1wb3J0IHsgSU9GQ2FudmFzRWxlbWVudCB9IGZyb20gJy4uL29mQ2FudmFzQ29udGV4dE1hbmFnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GR3JhcGhpY0RldmljZSB7XHJcblxyXG4gIHByaXZhdGUgX2NhbnZhc09iamVjdDogSU9GQ2FudmFzRWxlbWVudDtcclxuICBwcml2YXRlIF9ncmFwaGljQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gIHByaXZhdGUgX3JlbmRlckNhbWVyYTogT0ZSZW5kZXJDYW1lcmE7XHJcbiAgcHJpdmF0ZSBfc2hhZGVyRmFjdG9yeTogT0ZTaGFkZXJGYWN0b3J5O1xyXG4gIHByaXZhdGUgX2RldmljZU9wdGltaXphdGlvbk1hbmFnZXI6IE9GRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcjtcclxuXHJcbiAgcHJpdmF0ZSBfaGFzQ3VzdG9tQ2FtZXJhOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2N1cnJlbnRTaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07XHJcblxyXG4gIGNsZWFyQ29sb3I6IE9GQ29sb3I7XHJcblxyXG4gIGdldCBjdXJyZW50U2hhZGVyUHJvZ3JhbSgpOiBXZWJHTFByb2dyYW0geyByZXR1cm4gdGhpcy5fY3VycmVudFNoYWRlclByb2dyYW07IH1cclxuICBnZXQgaGFzQ3VzdG9tQ2FtZXJhKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faGFzQ3VzdG9tQ2FtZXJhOyB9XHJcbiAgZ2V0IGdyYXBoaWNDb250ZXh0KCk6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB7IHJldHVybiB0aGlzLl9ncmFwaGljQ29udGV4dDsgfVxyXG4gIGdldCBjYW52YXNFbGVtZW50KCk6IEhUTUxDYW52YXNFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NhbnZhc09iamVjdC5jYW52YXNFbGVtZW50OyB9XHJcbiAgZ2V0IHJlbmRlckNhbWVyYSgpOiBPRlJlbmRlckNhbWVyYSB7IHJldHVybiB0aGlzLl9yZW5kZXJDYW1lcmE7IH1cclxuICBnZXQgc2hhZGVyRmFjdG9yeSgpOiBPRlNoYWRlckZhY3RvcnkgeyByZXR1cm4gdGhpcy5fc2hhZGVyRmFjdG9yeTsgfVxyXG4gIGdldCBkZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyKCk6IE9GRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciB7IHJldHVybiB0aGlzLl9kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGZyYW1ld29yazogT0ZGcmFtZXdvcmspIHtcclxuICAgIHRoaXMuX2hhc0N1c3RvbUNhbWVyYSA9IGZhbHNlO1xyXG4gICAgdGhpcy5jbGVhckNvbG9yID0gdGhpcy5mcmFtZXdvcmsuc2V0dGluZ3MucmVuZGVyQ2xlYXJDb2xvcjtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoY2FudmFzT2JqZWN0OiBJT0ZDYW52YXNFbGVtZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLl9jYW52YXNPYmplY3QgPSBjYW52YXNPYmplY3Q7XHJcbiAgICB0aGlzLl9ncmFwaGljQ29udGV4dCA9IGNhbnZhc09iamVjdC5jb250ZXh0O1xyXG5cclxuICAgIC8vIENyZWF0ZSBSZW5kZXJDYW1lcmEgYW5kIGluaXRpYWxpemUgaXRcclxuICAgIHRoaXMuX3JlbmRlckNhbWVyYSA9IG5ldyBPRlJlbmRlckNhbWVyYSh0aGlzLmZyYW1ld29yayk7XHJcbiAgICB0aGlzLl9yZW5kZXJDYW1lcmEuaW5pdGlhbGl6ZSh0aGlzKTtcclxuXHJcbiAgICAvLyBjb25maWd1cmVcclxuICAgIHRoaXMuX2N1cnJlbnRTaGFkZXJQcm9ncmFtID0gMDtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBTaGFkZXIgRmFjdG9yeSBhbmQgTG9hZCBhbGwgdGhlIFNoYWRlcnMgaW4gdGhlIGFwcGxpY2F0aW9uXHJcbiAgICB0aGlzLl9zaGFkZXJGYWN0b3J5ID0gbmV3IE9GU2hhZGVyRmFjdG9yeSh0aGlzKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgZGV2aWNlIG9wdGltaXphdGlvbiBtYW5hZ21lbnRcclxuICAgIHRoaXMuX2RldmljZU9wdGltaXphdGlvbk1hbmFnZXIgPSBuZXcgT0ZEZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgaW52YWxpZGF0ZUNvbmZpZ3VyYXRpb24oKTogdm9pZCB7XHJcbiAgICAvLyByZXNpemUgY2FtZXJhXHJcbiAgICB0aGlzLl9yZW5kZXJDYW1lcmEuaW52YWxpZGF0ZUNvbmZpZ3VyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb2xkV2lkdGg6IG51bWJlciwgb2xkSGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIFJlc2l6ZSBjYW52YXMgZWxlbWVudFxyXG4gICAgY29uc3QgY2FudmFzRWxlbWVudCA9IHRoaXMuX2NhbnZhc09iamVjdC5jYW52YXNFbGVtZW50O1xyXG4gICAgY2FudmFzRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgudG9TdHJpbmcoKSk7XHJcbiAgICBjYW52YXNFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaGVpZ2h0LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgIC8vIHJlc2l6ZSBjYW1lcmFcclxuICAgIGlmICghdGhpcy5faGFzQ3VzdG9tQ2FtZXJhKSB7XHJcbiAgICAgIHRoaXMuX3JlbmRlckNhbWVyYS5yZXNpemUod2lkdGgsIGhlaWdodCwgb2xkV2lkdGgsIG9sZEhlaWdodCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1c2VDdXN0b21SZW5kZXJDYW1lcmEoaGFzQ3VzdG9tQ2FtZXJhOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLl9oYXNDdXN0b21DYW1lcmEgPSBoYXNDdXN0b21DYW1lcmE7XHJcbiAgfVxyXG5cclxuICB1c2VTaGFkZXJQcm9ncmFtKHNoYWRlclByb2dyYW06IFdlYkdMUHJvZ3JhbSk6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAvLyBpZiAodGhpcy5fY3VycmVudFNoYWRlclByb2dyYW0gIT09IHNoYWRlclByb2dyYW0pIHtcclxuICAgICAgdGhpcy5fY3VycmVudFNoYWRlclByb2dyYW0gPSBzaGFkZXJQcm9ncmFtO1xyXG4gICAgICBfR0wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcclxuICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jbGVhckNvbG9yO1xyXG5cclxuICAgIF9HTC5jbGVhckNvbG9yKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGNvbG9yLmEpO1xyXG4gICAgX0dMLmNsZWFyKF9HTC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAvLyBfR0wuZW5hYmxlKF9HTC5ERVBUSF9URVNUKTtcclxuICAgIC8vIF9HTC5kZXB0aEZ1bmMoX0dMLkxFUVVBTCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIHRoaXMuX3JlbmRlckNhbWVyYS51cGRhdGUoYXJncyk7XHJcbiAgICB0aGlzLl9kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyLnVwZGF0ZShhcmdzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tICcuLi8uLi9vZkZyYW1ld29yayc7XHJcbmltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gJy4vb2ZHcmFwaGljRGV2aWNlJztcclxuaW1wb3J0IHsgT0ZDb25zb2xlIH0gZnJvbSAnLi4vLi4vaGVscGVycy9vZkNvbnNvbGUnO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gJy4uLy4uL3NldHRpbmdzL29mVHJhbnNsYXRpb25zJztcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJncyc7XHJcbmltcG9ydCB7IElPRkNhbnZhc0VsZW1lbnQgfSBmcm9tICcuLi9vZkNhbnZhc0NvbnRleHRNYW5hZ2VyJztcclxuaW1wb3J0IHsgT0ZTaGFkZXJGYWN0b3J5IH0gZnJvbSAnLi4vcmVuZGVyL3NoYWRlci9vZlNoYWRlckZhY3RvcnknO1xyXG5pbXBvcnQgeyBJRGljdGlvbmFyeSB9IGZyb20gJ3NodXRlLXRlY2hub2xvZ2llcy5jb21tb24tYW5kLXV0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyAgT0ZHcmFwaGljRGV2aWNlTWFuYWdlciB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2dyYXBoaWNEZXZpY2VzOiBJRGljdGlvbmFyeTxPRkdyYXBoaWNEZXZpY2U+O1xyXG5cclxuICBnZXQgc2hhZGVyRmFjdG9yaWVzKCk6IEFycmF5PE9GU2hhZGVyRmFjdG9yeT4ge1xyXG4gICAgY29uc3QgcmVzdWx0OiBBcnJheTxPRlNoYWRlckZhY3Rvcnk+ID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5fZ3JhcGhpY0RldmljZXMpKSB7XHJcbiAgICAgIGNvbnN0IHNoYWRlckZhY3RvcnkgPSB0aGlzLl9ncmFwaGljRGV2aWNlc1trZXldLnNoYWRlckZhY3Rvcnk7XHJcblxyXG4gICAgICBpZiAoc2hhZGVyRmFjdG9yeSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHNoYWRlckZhY3RvcnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcmspIHtcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2VzID0ge307XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKCk6IHZvaWQgeyAvKiBOT1RISU5HICovIH1cclxuXHJcbiAgY3JlYXRlR3JhcGhpY0RldmljZSAoaWQ6IHN0cmluZywgY2FudmFzT2JqZWN0OiBJT0ZDYW52YXNFbGVtZW50KTogT0ZHcmFwaGljRGV2aWNlIHtcclxuICAgIGNvbnN0IGdyYXBoaWNEZXZpY2UgPSBuZXcgT0ZHcmFwaGljRGV2aWNlKHRoaXMuX2ZyYW1ld29yayk7XHJcbiAgICBncmFwaGljRGV2aWNlLmluaXRpYWxpemUoY2FudmFzT2JqZWN0KTtcclxuXHJcbiAgICB0aGlzLl9ncmFwaGljRGV2aWNlc1tpZF0gPSBncmFwaGljRGV2aWNlO1xyXG5cclxuICAgIE9GQ29uc29sZS5sb2coT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLkdyYXBoaWNEZXZpY2VNYW5hZ2VyLmNyZWF0ZUdyYXBoaWNEZXZpY2UsXHJcbiAgICAgIHRoaXMuX2ZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIGlkKTtcclxuXHJcbiAgICByZXR1cm4gZ3JhcGhpY0RldmljZTtcclxuICB9XHJcblxyXG4gIGxvYWREZWZhdWx0KCk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5fZ3JhcGhpY0RldmljZXMpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9ncmFwaGljRGV2aWNlc1trZXldLnNoYWRlckZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLl9ncmFwaGljRGV2aWNlc1trZXldLnNoYWRlckZhY3RvcnkubG9hZERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzaXplICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb2xkV2lkdGg6IG51bWJlciwgb2xkSGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX2dyYXBoaWNEZXZpY2VzKSkge1xyXG4gICAgICB0aGlzLl9ncmFwaGljRGV2aWNlc1trZXldLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0LCBvbGRXaWR0aCwgb2xkSGVpZ2h0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSAoYXJnczogSU9GUmVuZGVyQXJncykge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5fZ3JhcGhpY0RldmljZXMpKSB7XHJcbiAgICAgIHRoaXMuX2dyYXBoaWNEZXZpY2VzW2tleV0udXBkYXRlKGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkF1ZGlvRGV2aWNlIH0gZnJvbSBcIi4uLy4uL29mQXVkaW9EZXZpY2VcIjtcclxuaW1wb3J0IHsgT0ZBdWRpb05vZGVQb29sZXIgfSBmcm9tIFwiLi9vZkF1ZGlvTm9kZVBvb2xlclwiO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJnc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIHtcclxuXHJcbiAgcHJpdmF0ZSBfYXVkaW9Ob2RlUG9vbGVyOiBPRkF1ZGlvTm9kZVBvb2xlcjtcclxuXHJcbiAgZ2V0IGF1ZGlvTm9kZVBvb2xlcigpOiBPRkF1ZGlvTm9kZVBvb2xlciB7IHJldHVybiB0aGlzLl9hdWRpb05vZGVQb29sZXI7IH1cclxuXHJcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYXVkaW9EZXZpY2U6IE9GQXVkaW9EZXZpY2UpIHtcclxuICAgIHRoaXMuX2F1ZGlvTm9kZVBvb2xlciA9IG5ldyBPRkF1ZGlvTm9kZVBvb2xlcih0aGlzKTtcclxuICAgIHRoaXMuX2F1ZGlvTm9kZVBvb2xlci5pbml0aWFsaXplKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgdGhpcy5fYXVkaW9Ob2RlUG9vbGVyLnVwZGF0ZShhcmdzKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBPRkF1ZGlvTm9kZVBvb2xlciB9IGZyb20gXCIuL29mQXVkaW9Ob2RlUG9vbGVyXCI7XHJcbmltcG9ydCB7IE9GRW51bUF1ZGlvTm9kZVR5cGUgfSBmcm9tIFwiLi9vZkVudW1BdWRpb05vZGVUeXBlXCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZBdWRpb05vZGVPYmplY3Q8VCBleHRlbmRzIEF1ZGlvTm9kZT4ge1xyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0Tm9kZUxpZmVUaW1lID0gMTAwMDAgLyAxMDAwLjA7XHJcblxyXG4gIHByaXZhdGUgX29iamVjdElkOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfaXNBdmFpbGFibGU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfbGlmZVRpbWU6IG51bWJlcjsgXHJcblxyXG4gIHdlYkF1ZGlvTm9kZTogVDtcclxuICBidWZmZXJUeXBlOiBPRkVudW1BdWRpb05vZGVUeXBlO1xyXG4gIGlzV2FpdGluZ0ZvckRlbGV0ZTogYm9vbGVhbjtcclxuXHJcbiAgZ2V0IGlkKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9vYmplY3RJZDsgfVxyXG4gIGdldCBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2lzQXZhaWxhYmxlOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIHJlYWRvbmx5IF9hdWRpb05vZGVQb29sZXI6IE9GQXVkaW9Ob2RlUG9vbGVyKSB7XHJcbiAgICB0aGlzLl9saWZlVGltZSA9IE9GQXVkaW9Ob2RlT2JqZWN0LmRlZmF1bHROb2RlTGlmZVRpbWU7XHJcbiAgICB0aGlzLmJ1ZmZlclR5cGUgPSBPRkVudW1BdWRpb05vZGVUeXBlLlVuc2lnbmVkO1xyXG4gICAgdGhpcy5pc1dhaXRpbmdGb3JEZWxldGUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoaWQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fb2JqZWN0SWQgPSBpZDtcclxuICAgIHRoaXMuX2lzQXZhaWxhYmxlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldFdlYkF1ZGlvTm9kZSAod2ViQXVkaW9Ob2RlOiBULCBidWZmZXJUeXBlOiBPRkVudW1BdWRpb05vZGVUeXBlKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5idWZmZXJUeXBlID09PSBPRkVudW1BdWRpb05vZGVUeXBlLlVuc2lnbmVkIHx8ICF0aGlzLmJ1ZmZlclR5cGUpIHtcclxuICAgICAgdGhpcy5idWZmZXJUeXBlID0gYnVmZmVyVHlwZTtcclxuICAgICAgdGhpcy53ZWJBdWRpb05vZGUgPSB3ZWJBdWRpb05vZGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2lzQXZhaWxhYmxlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBkZWFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5faXNBdmFpbGFibGUgPSB0cnVlO1xyXG4gICAgLy8gUmVzZXQgTGlmZXRpbWVcclxuICAgIHRoaXMuX2xpZmVUaW1lID0gT0ZBdWRpb05vZGVPYmplY3QuZGVmYXVsdE5vZGVMaWZlVGltZTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faXNBdmFpbGFibGUpIHtcclxuICAgICAgdGhpcy5fbGlmZVRpbWUgLT0gYXJncy5kdDtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9saWZlVGltZSA8PSAwKSB7XHJcbiAgICAgICAgdGhpcy5pc1dhaXRpbmdGb3JEZWxldGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMud2ViQXVkaW9Ob2RlKSB7XHJcbiAgICAgIHRoaXMud2ViQXVkaW9Ob2RlLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLndlYkF1ZGlvTm9kZSA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIH0gZnJvbSBcIi4vb2ZBdWRpb0RldmljZU9wdGltaXphdGlvbk1hbmFnZXJcIjtcclxuaW1wb3J0IHsgT0ZBdWRpb05vZGVPYmplY3QgfSBmcm9tIFwiLi9vZkF1ZGlvTm9kZU9iamVjdFwiO1xyXG5pbXBvcnQgeyBPRkVudW1BdWRpb05vZGVUeXBlIH0gZnJvbSBcIi4vb2ZFbnVtQXVkaW9Ob2RlVHlwZVwiO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJnc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQXVkaW9Ob2RlUG9vbGVyIHtcclxuXHJcbiAgc3RhdGljIHJlYWRvbmx5IE9GRW51bXNJbnRlcm5hbCA9IHtcclxuICAgIGluaXRpYWxBdWRpb05vZGVDb3VudDogMTYsXHJcbiAgICByZXNpemVBZGRBdWRpb05vZGVDb3VudDogOFxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgX2lkT2JqZWN0Q291bnRlcjogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2F1ZGlvTm9kZVJlcG9zaXRvcnk6IE9GQXVkaW9Ob2RlT2JqZWN0PEF1ZGlvTm9kZT5bXTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYXVkaW9EZXZpY2VPcHRNYW5hZ21lbnQ6IE9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyKSB7XHJcbiAgICB0aGlzLl9pZE9iamVjdENvdW50ZXIgPSAwO1xyXG4gICAgdGhpcy5fYXVkaW9Ob2RlUmVwb3NpdG9yeSA9IFtdO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXRlQXVkaW9Ob2RlcyhPRkF1ZGlvTm9kZVBvb2xlci5PRkVudW1zSW50ZXJuYWwuaW5pdGlhbEF1ZGlvTm9kZUNvdW50KTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUF1ZGlvTm9kZXMoY291bnQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGF1ZGlvTm9kZU9iamVjdCA9IG5ldyBPRkF1ZGlvTm9kZU9iamVjdCh0aGlzKTtcclxuICAgICAgYXVkaW9Ob2RlT2JqZWN0LmluaXRpYWxpemUodGhpcy5faWRPYmplY3RDb3VudGVyKyspO1xyXG4gICAgICAgICAgXHJcbiAgICAgIHRoaXMuX2F1ZGlvTm9kZVJlcG9zaXRvcnkucHVzaChhdWRpb05vZGVPYmplY3QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QXZhaWxhYmxlQXVkaW9Ob2RlPFQgZXh0ZW5kcyBBdWRpb05vZGU+IChkZXNpcmVkTm9kZVR5cGU6IE9GRW51bUF1ZGlvTm9kZVR5cGUpOiBPRkF1ZGlvTm9kZU9iamVjdDxUPiB7XHJcbiAgICBsZXQgcmVzdWx0T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgY291bnQgPSB0aGlzLl9hdWRpb05vZGVSZXBvc2l0b3J5Lmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgY29uc3QgYXVkaW9Ob2RlT2JqZWN0ID0gdGhpcy5fYXVkaW9Ob2RlUmVwb3NpdG9yeVtpXTtcclxuXHJcbiAgICAgIGlmIChhdWRpb05vZGVPYmplY3QuaXNBdmFpbGFibGUpIHtcclxuICAgICAgICBjb25zdCBhdWRpb05vZGVUeXBlID0gYXVkaW9Ob2RlT2JqZWN0LmJ1ZmZlclR5cGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGF1ZGlvTm9kZVR5cGUgPT09IE9GRW51bUF1ZGlvTm9kZVR5cGUuVW5zaWduZWQgfHwgIWF1ZGlvTm9kZVR5cGUpIHtcclxuICAgICAgICAgIHJlc3VsdE9iamVjdCA9IGF1ZGlvTm9kZU9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXVkaW9Ob2RlVHlwZSA9PT0gZGVzaXJlZE5vZGVUeXBlKSB7XHJcbiAgICAgICAgICByZXN1bHRPYmplY3QgPSBhdWRpb05vZGVPYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChyZXN1bHRPYmplY3QpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIG5vIEF1ZGlvTm9kZSBhdmFpbGFibGUgaXMgZm91bmQgdGhlbiBjcmVhdGUgbW9yZS4uLlxyXG4gICAgaWYgKCFyZXN1bHRPYmplY3QpIHtcclxuICAgICAgdGhpcy5jcmVhdGVBdWRpb05vZGVzKE9GQXVkaW9Ob2RlUG9vbGVyLk9GRW51bXNJbnRlcm5hbC5yZXNpemVBZGRBdWRpb05vZGVDb3VudCk7XHJcbiAgICAgIC8vIE5vdyBjYWxsIHJlY3Vyc2l2ZWx5IHRoZSBmdW5jdGlvbiB1bnRpbCBmb3VuZCBhbiBhdmFpbGFibGUgQXVkaW9Ob2RlXHJcbiAgICAgIHJlc3VsdE9iamVjdCA9IHRoaXMuZ2V0QXZhaWxhYmxlQXVkaW9Ob2RlKGRlc2lyZWROb2RlVHlwZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiByZXN1bHRPYmplY3Q7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgKGFyZ3M6IElPRlJlbmRlckFyZ3MpIHtcclxuICAgIGxldCBjb3VudCA9IHRoaXMuX2F1ZGlvTm9kZVJlcG9zaXRvcnkubGVuZ3RoO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICBjb25zdCBhdWRpb05vZGVPYmplY3QgPSB0aGlzLl9hdWRpb05vZGVSZXBvc2l0b3J5W2ldO1xyXG5cclxuICAgICAgaWYgKGF1ZGlvTm9kZU9iamVjdC5pc1dhaXRpbmdGb3JEZWxldGUpIHtcclxuICAgICAgICBhdWRpb05vZGVPYmplY3QuZGVzdHJveSgpO1xyXG4gICAgICAgIC8vIHJlbW92ZSBpdCBmcm9tIHRoZSBhcnJheVxyXG4gICAgICAgIHRoaXMuX2F1ZGlvTm9kZVJlcG9zaXRvcnkuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIGktLTtcclxuICAgICAgICBjb3VudC0tO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGF1ZGlvTm9kZU9iamVjdC51cGRhdGUoYXJncyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3kgKCk6IHZvaWQge1xyXG5cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gT0ZFbnVtQXVkaW9Ob2RlVHlwZSB7XHJcbiAgVW5zaWduZWQgPSAwLFxyXG4gIEdhaW5Ob2RlID0gMSxcclxuICBTdGVyZW9QYW5uZXJOb2RlID0gMlxyXG59XHJcbiIsImltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gXCIuLi8uLi9vZkdyYXBoaWNEZXZpY2VcIjtcclxuaW1wb3J0IHsgT0ZWQk9Qb29sZXIgfSBmcm9tIFwiLi9vZlZCT1Bvb2xlclwiO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJnc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciB7XHJcblxyXG4gIHByaXZhdGUgX3Zib1Bvb2xlcjogT0ZWQk9Qb29sZXI7XHJcblxyXG4gIGdldCB2Ym9Qb29sZXIoKTogT0ZWQk9Qb29sZXIgeyByZXR1cm4gdGhpcy5fdmJvUG9vbGVyOyB9XHJcbiAgZ2V0IGdyYXBoaWNEZXZpY2UoKTogT0ZHcmFwaGljRGV2aWNlIHsgcmV0dXJuIHRoaXMuX2dyYXBoaWNEZXZpY2U7IH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfZ3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlKSB7XHJcbiAgICB0aGlzLl92Ym9Qb29sZXIgPSBuZXcgT0ZWQk9Qb29sZXIodGhpcyk7XHJcbiAgICB0aGlzLl92Ym9Qb29sZXIuaW5pdGlhbGl6ZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Zib1Bvb2xlci51cGRhdGUoYXJncyk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIE9GRW51bVZCT09iamVjdFR5cGUge1xyXG4gIFVuc2lnbmVkID0gMCxcclxuICBWZXJ0ZXhCdWZmZXIgPSAxLFxyXG4gIEluZGV4QnVmZmVyID0gMlxyXG59XHJcbiIsImltcG9ydCB7IE9GVkJPUG9vbGVyIH0gZnJvbSBcIi4vb2ZWQk9Qb29sZXJcIjtcclxuaW1wb3J0IHsgT0ZFbnVtVkJPT2JqZWN0VHlwZSB9IGZyb20gXCIuL29mRW51bVZCT09iamVjdFR5cGVcIjtcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gXCIuLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPRlZCT09iamVjdCB7XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0Tm9kZUxpZmVUaW1lID0gNDUwMC4wIC8gMTAwMC4wO1xyXG5cclxuICBwcml2YXRlIF9vYmplY3RJZDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2lzQXZhaWxhYmxlOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2xpZmVUaW1lOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfR0w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgdmJvOiBXZWJHTEJ1ZmZlcjtcclxuICBidWZmZXJUeXBlOiBPRkVudW1WQk9PYmplY3RUeXBlO1xyXG4gIGlzV2FpdGluZ0ZvckRlbGV0ZTogYm9vbGVhbjtcclxuICBcclxuICBnZXQgaWQgKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9vYmplY3RJZDsgfSAgICAgXHJcbiAgZ2V0IGlzQXZhaWxhYmxlICgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2lzQXZhaWxhYmxlOyB9IFxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF92Ym9Qb29sZXI6IE9GVkJPUG9vbGVyKSB7XHJcbiAgICB0aGlzLl9saWZlVGltZSA9IE9GVkJPT2JqZWN0LmRlZmF1bHROb2RlTGlmZVRpbWU7XHJcbiAgICB0aGlzLmJ1ZmZlclR5cGUgPSBPRkVudW1WQk9PYmplY3RUeXBlLlVuc2lnbmVkO1xyXG4gICAgdGhpcy5fR0wgPSBfdmJvUG9vbGVyLmdyYXBoaWNEZXZpY2VPcHRNYW5hZ2VyLmdyYXBoaWNEZXZpY2UuZ3JhcGhpY0NvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKGlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX29iamVjdElkID0gaWQ7XHJcbiAgICB0aGlzLl9pc0F2YWlsYWJsZSA9IHRydWU7XHJcbiAgICB0aGlzLnZibyA9IHRoaXMuX0dMLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGUgKGJ1ZmZlclR5cGU6IE9GRW51bVZCT09iamVjdFR5cGUpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmJ1ZmZlclR5cGUgPT09IE9GRW51bVZCT09iamVjdFR5cGUuVW5zaWduZWQgfHwgIXRoaXMuYnVmZmVyVHlwZSkge1xyXG4gICAgICB0aGlzLmJ1ZmZlclR5cGUgPSBidWZmZXJUeXBlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLl9pc0F2YWlsYWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZGVhY3RpdmF0ZSAoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9pc0F2YWlsYWJsZSA9IHRydWU7XHJcbiAgICAvLyBSZXNldCBMaWZldGltZVxyXG4gICAgdGhpcy5fbGlmZVRpbWUgPSBPRlZCT09iamVjdC5kZWZhdWx0Tm9kZUxpZmVUaW1lO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlIChhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faXNBdmFpbGFibGUpIHtcclxuICAgICAgdGhpcy5fbGlmZVRpbWUgLT0gYXJncy5kdDtcclxuICAgICAgICBcclxuICAgICAgaWYgKHRoaXMuX2xpZmVUaW1lIDw9IDApIHtcclxuICAgICAgICB0aGlzLmlzV2FpdGluZ0ZvckRlbGV0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3kgKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fR0wuZGVsZXRlQnVmZmVyKHRoaXMudmJvKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZEZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIH0gZnJvbSBcIi4vb2ZEZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcbmltcG9ydCB7IE9GVkJPT2JqZWN0IH0gZnJvbSBcIi4vb2ZWQk9PYmplY3RcIlxyXG5pbXBvcnQgeyBPRkVudW1WQk9PYmplY3RUeXBlIH0gZnJvbSBcIi4vb2ZFbnVtVkJPT2JqZWN0VHlwZVwiO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gXCIuLi8uLi8uLi8uLi9vZkZyYW1ld29ya1wiO1xyXG5pbXBvcnQgeyBPRkludGVydmFsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hlbHBlcnMvb2ZJbnRlcnZhbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GVkJPUG9vbGVyIHtcclxuXHJcbiAgc3RhdGljIHJlYWRvbmx5IE9GRW51bXNJbnRlcm5hbCA9IHtcclxuICAgIGluaXRpYWxWQk9Db3VudDogMTYsXHJcbiAgICByZXNpemVBZGRWQk9Db3VudDogOFxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgX2lkT2JqZWN0Q291bnRlcjogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3Zib1JlcG9zaXRvcnk6IE9GVkJPT2JqZWN0W107XHJcbiAgcHJpdmF0ZSBfZnJhbWV3b3JrOiBPRkZyYW1ld29yaztcclxuXHJcbiAgZ2V0IGdyYXBoaWNEZXZpY2VPcHRNYW5hZ2VyICgpOiBPRkRldmljZU9wdGltaXphdGlvbk1hbmFnZXIgeyByZXR1cm4gdGhpcy5fZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcjsgfSAgICBcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcjogT0ZEZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyKSB7XHJcbiAgICB0aGlzLl9mcmFtZXdvcmsgPSBfZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlci5ncmFwaGljRGV2aWNlLmZyYW1ld29yaztcclxuICAgIHRoaXMuX2lkT2JqZWN0Q291bnRlciA9IDA7XHJcbiAgICB0aGlzLl92Ym9SZXBvc2l0b3J5ID0gW107XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jcmVhdGVWQk9zKE9GVkJPUG9vbGVyLk9GRW51bXNJbnRlcm5hbC5pbml0aWFsVkJPQ291bnQpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlVkJPcyAoY291bnQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHZib09iamVjdCA9IG5ldyBPRlZCT09iamVjdCh0aGlzKTtcclxuICAgICAgdmJvT2JqZWN0LmluaXRpYWxpemUodGhpcy5faWRPYmplY3RDb3VudGVyKyspO1xyXG4gICAgICAgICAgXHJcbiAgICAgIHRoaXMuX3Zib1JlcG9zaXRvcnkucHVzaCh2Ym9PYmplY3QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QXZhaWxhYmxlVkJPIChkZXNpcmVkQnVmZmVyVHlwZTogT0ZFbnVtVkJPT2JqZWN0VHlwZSk6IE9GVkJPT2JqZWN0IHtcclxuICAgIGxldCByZXN1bHRPYmplY3Q6IE9GVkJPT2JqZWN0O1xyXG4gICAgY29uc3QgY291bnQgPSB0aGlzLl92Ym9SZXBvc2l0b3J5Lmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgY29uc3QgdmJvT2JqZWN0ID0gdGhpcy5fdmJvUmVwb3NpdG9yeVtpXTtcclxuXHJcbiAgICAgIGlmICh2Ym9PYmplY3QuaXNBdmFpbGFibGUpIHtcclxuICAgICAgICBjb25zdCB2Ym9UeXBlID0gdmJvT2JqZWN0LmJ1ZmZlclR5cGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHZib1R5cGUgPT09IE9GRW51bVZCT09iamVjdFR5cGUuVW5zaWduZWQgfHwgIXZib1R5cGUpIHtcclxuICAgICAgICAgIHJlc3VsdE9iamVjdCA9IHZib09iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZiAodmJvVHlwZSA9PT0gT0ZFbnVtVkJPT2JqZWN0VHlwZS5WZXJ0ZXhCdWZmZXIgJiYgXHJcbiAgICAgICAgICAgIGRlc2lyZWRCdWZmZXJUeXBlID09PSBPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcikge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmVzdWx0T2JqZWN0ID0gdmJvT2JqZWN0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZiAodmJvVHlwZSA9PT0gT0ZFbnVtVkJPT2JqZWN0VHlwZS5JbmRleEJ1ZmZlciAmJiBcclxuICAgICAgICAgICAgZGVzaXJlZEJ1ZmZlclR5cGUgPT09IE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJlc3VsdE9iamVjdCA9IHZib09iamVjdDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHJlc3VsdE9iamVjdCkgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICAgXHJcbiAgICAvLyBJZiBubyBWQk8gYXZhaWxhYmxlIGlzIGZvdW5kIHRoZW4gY3JlYXRlIG1vcmUuLi5cclxuICAgIGlmICghcmVzdWx0T2JqZWN0KSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlVkJPcyhPRlZCT1Bvb2xlci5PRkVudW1zSW50ZXJuYWwucmVzaXplQWRkVkJPQ291bnQpO1xyXG4gICAgICAvLyBOb3cgY2FsbCByZWN1cnNpdmVseSB0aGUgZnVuY3Rpb24gdW50aWwgZm91bmQgYW4gYXZhaWxhYmxlIFZCT1xyXG4gICAgICByZXN1bHRPYmplY3QgPSB0aGlzLmdldEF2YWlsYWJsZVZCTyhkZXNpcmVkQnVmZmVyVHlwZSk7XHJcbiAgICB9XHJcbiAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdE9iamVjdDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fZnJhbWV3b3JrLnNldHRpbmdzLmVuYWJsZWRWQk9JbnN0YW5jZXNMaWZlKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdmJvUmVwb3NpdG9yeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHZib09iamVjdCA9IHRoaXMuX3Zib1JlcG9zaXRvcnlbaV07XHJcblxyXG4gICAgICAgIGlmICh2Ym9PYmplY3QuaXNXYWl0aW5nRm9yRGVsZXRlKSB7XHJcbiAgICAgICAgICB2Ym9PYmplY3QuZGVzdHJveSgpO1xyXG4gICAgICAgICAgLy8gcmVtb3ZlIGl0IGZyb20gdGhlIGFycmF5XHJcbiAgICAgICAgICB0aGlzLl92Ym9SZXBvc2l0b3J5LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgIGktLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2Ym9PYmplY3QudXBkYXRlKGFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vb2ZGcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcbmltcG9ydCB7IE9GVHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vc2V0dGluZ3Mvb2ZUcmFuc2xhdGlvbnMnO1xyXG5pbXBvcnQgeyBPRkhUTUxIZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycy9vZkhUTUxIZWxwZXJzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU9GQ2FudmFzRWxlbWVudCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjYW52YXNFbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPRkNhbnZhc0NvbnRleHRNYW5hZ2VyIHtcclxuXHJcbiAgcHJpdmF0ZSBfY2FudmFzQ29udGV4dHM6IEFycmF5PElPRkNhbnZhc0VsZW1lbnQ+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9mcmFtZXdvcms6IE9GRnJhbWV3b3JrKSB7XHJcbiAgICB0aGlzLl9jYW52YXNDb250ZXh0cyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZmluZENhbnZhc09iamVjdCAoaWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhbnZhc0NvbnRleHRzW2lkXTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNhbnZhc0VsZW1lbnQgKGlkOiBzdHJpbmcsIHN0eWxlWkluZGV4Pzogc3RyaW5nKTogSU9GQ2FudmFzRWxlbWVudCB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gT0ZIVE1MSGVscGVycy5jcmVhdGVDYW52YXModGhpcy5fZnJhbWV3b3JrLnNldHRpbmdzLm1lc3NhZ2VfQ2FudmFzSFRNTDVXYXJuaW5nLFxyXG4gICAgICB0aGlzLl9mcmFtZXdvcmsucGFyZW50RGl2LCBpZCk7XHJcblxyXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSAnY2FudmFzJztcclxuICAgIGVsZW1lbnQuc3R5bGVbJ3otaW5kZXgnXSA9IHN0eWxlWkluZGV4ID09PSBudWxsID8gJzAnIDogc3R5bGVaSW5kZXg7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0geyBpZCwgY2FudmFzRWxlbWVudDogZWxlbWVudCwgY29udGV4dDogbnVsbCB9IGFzIElPRkNhbnZhc0VsZW1lbnQ7XHJcbiAgICB0aGlzLl9jYW52YXNDb250ZXh0cy5wdXNoKHJlc3VsdCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNhbnZhc0VsZW1lbnRBbmRDb250ZXh0IChpZDogc3RyaW5nLCBzdHlsZVpJbmRleD86IG51bWJlcik6IElPRkNhbnZhc0VsZW1lbnQge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IE9GSFRNTEhlbHBlcnMuY3JlYXRlQ2FudmFzKHRoaXMuX2ZyYW1ld29yay5zZXR0aW5ncy5tZXNzYWdlX0NhbnZhc0hUTUw1V2FybmluZyxcclxuICAgICAgdGhpcy5fZnJhbWV3b3JrLnBhcmVudERpdiwgaWQpO1xyXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSAnY2FudmFzIGNhbnZhcy1jaGlsZCc7XHJcbiAgICBlbGVtZW50LnN0eWxlWyd6LWluZGV4J10gPSBzdHlsZVpJbmRleCA9PT0gbnVsbCA/ICcwJyA6IHN0eWxlWkluZGV4O1xyXG5cclxuICAgIGNvbnN0IGdyYXBoaWNDb250ZXh0ID0gdGhpcy5jb25zdHJ1Y1dlYkdMQ2FudmFzKGVsZW1lbnQpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IHsgaWQsIGNhbnZhc0VsZW1lbnQ6IGVsZW1lbnQsIGNvbnRleHQ6IGdyYXBoaWNDb250ZXh0IH0gYXMgSU9GQ2FudmFzRWxlbWVudDtcclxuICAgIHRoaXMuX2NhbnZhc0NvbnRleHRzLnB1c2gocmVzdWx0KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWNXZWJHTENhbnZhcyAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgdXNlQWxwaGEgPSBmYWxzZSkge1xyXG4gICAgbGV0IGdyYXBoaWNDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBjb25zdCBjb250ZXh0UHJlZmVyZW5jZXMgPSB7XHJcbiAgICAgIGFscGhhOiB1c2VBbHBoYSxcclxuICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlLFxyXG4gICAgICBkZXN5bmNocm9uaXplZDogdHJ1ZSxcclxuICAgICAgcG93ZXJQcmVmZXJlbmNlOiAnZGVmYXVsdCdcclxuICAgIH0gYXMgV2ViR0xDb250ZXh0QXR0cmlidXRlcztcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBncmFwaGljQ29udGV4dCA9IChjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBjb250ZXh0UHJlZmVyZW5jZXMpIHx8XHJcbiAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGNvbnRleHRQcmVmZXJlbmNlcykpIGFzIFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgT0ZDb25zb2xlLmVycm9yKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5DYW52YXNDb250ZXh0TWFuYWdlci5pc3N1ZVJlbmRlcmluZ0NvbnRleHQsIGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdENhbnZhcyAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KHRoaXMuX2ZyYW1ld29yay5zZXR0aW5ncy5jYW52YXNDb250ZXh0VHlwZSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vLi4vb2ZGcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBPRkdyYXBoaWNEZXZpY2UgfSBmcm9tICcuLi8uLi9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlJztcclxuaW1wb3J0IHsgT0ZWaWV3cG9ydCB9IGZyb20gJy4uL3ZpZXdwb3J0L29mVmlld3BvcnQnO1xyXG5pbXBvcnQgeyBPRkVudW1DYW52YXNDb250ZXh0VHlwZSB9IGZyb20gJy4uLy4uLy4uL2VudW1zL29mRW51bUNhbnZhc0NvbnRleHRUeXBlJztcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJncyc7XHJcbmltcG9ydCB7IG1hdDQsIHZlYzMgfSBmcm9tICdnbC1tYXRyaXgnO1xyXG5pbXBvcnQgeyBPRk1hdGggfSBmcm9tICcuLi8uLi8uLi9tYXRoL29mTWF0aCc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZSZW5kZXJDYW1lcmEge1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdERlcHRoID0gMTA7XHJcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRaTmVhciA9IDAuMDE7XHJcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRaRmFyID0gMTAwO1xyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0Rm92ID0gNDU7XHJcblxyXG4gIHByaXZhdGUgX2dyYXBoaWNEZXZpY2U6IE9GR3JhcGhpY0RldmljZTtcclxuICBwcml2YXRlIF9ncmFwaGljQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG5cclxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3pOZWFyOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfekZhcjogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2RlcHRoOiBudW1iZXI7XHJcblxyXG4gIHByaXZhdGUgX3dvcmxkTWF0cml4OiBtYXQ0O1xyXG4gIHByaXZhdGUgX3ZpZXdNYXRyaXg6IG1hdDQ7XHJcbiAgcHJpdmF0ZSBfcHJvamVjdGlvbk1hdHJpeDogbWF0NDtcclxuICBwcml2YXRlIF90cmFuc2Zvcm1lZE1hdHJpeDogbWF0NDtcclxuXHJcbiAgcHJpdmF0ZSBfdmlld3BvcnQ6IE9GVmlld3BvcnQ7XHJcblxyXG4gIGlzRnJlZUFzcGVjdDogYm9vbGVhbjtcclxuXHJcbiAgZ2V0IHdvcmxkTWF0cml4KCk6IG1hdDQgeyByZXR1cm4gdGhpcy5fd29ybGRNYXRyaXg7IH1cclxuICBnZXQgdmlld01hdHJpeCgpOiBtYXQ0IHsgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXg7IH1cclxuICBnZXQgcHJvamVjdGlvbk1hdHJpeCgpOiBtYXQ0IHsgcmV0dXJuIHRoaXMuX3Byb2plY3Rpb25NYXRyaXg7IH1cclxuICBnZXQgdHJhbnNmb3JtZWRNYXRyaXgoKTogbWF0NCB7IHJldHVybiBtYXQ0LmNsb25lKHRoaXMuX3RyYW5zZm9ybWVkTWF0cml4KTsgfVxyXG5cclxuICBnZXQgdmlld3BvcnQoKTogT0ZWaWV3cG9ydCB7IHJldHVybiB0aGlzLl92aWV3cG9ydDsgfVxyXG4gIGdldCBpc0NoaWxkQ2FtZXJhKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNDaGlsZENhbWVyYTsgfVxyXG4gIGdldCB3aWR0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fd2lkdGg7IH1cclxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9oZWlnaHQ7IH1cclxuICBnZXQgek5lYXIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3pOZWFyOyB9XHJcbiAgZ2V0IHpGYXIoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3pGYXI7IH1cclxuXHJcbiAgZ2V0IGRlcHRoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9kZXB0aDsgfVxyXG4gIHNldCBkZXB0aCh2YWw6IG51bWJlcikge1xyXG4gICAgdGhpcy5fZGVwdGggPSB2YWw7XHJcbiAgICB0aGlzLl93b3JsZE1hdHJpeCA9IE9GTWF0aC5tYXQ0WFZlYzQobWF0NC5jcmVhdGUoKSwgWzAsIDAsIHRoaXMuX2RlcHRoLCAxXSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcmssXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pc0NoaWxkQ2FtZXJhID0gZmFsc2UpIHtcclxuXHJcbiAgICB0aGlzLl92aWV3cG9ydCA9IE9GVmlld3BvcnQuZW1wdHkoKTtcclxuICAgIHRoaXMuX2RlcHRoID0gT0ZSZW5kZXJDYW1lcmEuZGVmYXVsdERlcHRoO1xyXG4gICAgdGhpcy5pc0ZyZWVBc3BlY3QgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuX3RyYW5zZm9ybWVkTWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXggPSAgbWF0NC5jcmVhdGUoKTtcclxuICAgIHRoaXMuX3ZpZXdNYXRyaXggPSAgbWF0NC5jcmVhdGUoKTtcclxuICAgIHRoaXMuX3dvcmxkTWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICBtYXQ0Lmxvb2tBdCh0aGlzLl92aWV3TWF0cml4LCB2ZWMzLmZyb21WYWx1ZXMoMC4wLCAwLjAsIHRoaXMuX2RlcHRoKSwgdmVjMy5jcmVhdGUoKSwgdmVjMy5mcm9tVmFsdWVzKDAuMCwgMS4wLCAwLjApKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoZ3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ncmFwaGljRGV2aWNlID0gZ3JhcGhpY0RldmljZTtcclxuICAgIHRoaXMuX2dyYXBoaWNDb250ZXh0ID0gZ3JhcGhpY0RldmljZS5ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICAvLyBzZXQgdmlld3BvcnRcclxuICAgIGNvbnN0IGFwcFdpZHRoID0gdGhpcy5fZnJhbWV3b3JrLmFwcFdpZHRoO1xyXG4gICAgY29uc3QgYXBwSGVpZ2h0ID0gdGhpcy5fZnJhbWV3b3JrLmFwcEhlaWdodDtcclxuXHJcbiAgICB0aGlzLnNldFZpZXdwb3J0KDAsIDAsIGFwcFdpZHRoLCBhcHBIZWlnaHQpO1xyXG5cclxuICAgIHN3aXRjaCAodGhpcy5fZnJhbWV3b3JrLnNldHRpbmdzLmNhbnZhc0NvbnRleHRUeXBlKSB7XHJcbiAgICAgIGNhc2UgT0ZFbnVtQ2FudmFzQ29udGV4dFR5cGUuRDJEOlxyXG4gICAgICAgIHRoaXMuY3JlYXRlT3J0aG9ncmFwaGljKGFwcFdpZHRoLCBhcHBIZWlnaHQsIE9GUmVuZGVyQ2FtZXJhLmRlZmF1bHRaTmVhciwgT0ZSZW5kZXJDYW1lcmEuZGVmYXVsdFpGYXIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIE9GRW51bUNhbnZhc0NvbnRleHRUeXBlLkQzRDpcclxuICAgICAgICB0aGlzLmNyZWF0ZVBlcnNwZWN0aXZlKE9GUmVuZGVyQ2FtZXJhLmRlZmF1bHRGb3YsIGFwcFdpZHRoLCBhcHBIZWlnaHQsIE9GUmVuZGVyQ2FtZXJhLmRlZmF1bHRaTmVhcixcclxuICAgICAgICAgIE9GUmVuZGVyQ2FtZXJhLmRlZmF1bHRaRmFyKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFZpZXdwb3J0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl9pc0NoaWxkQ2FtZXJhKSB7XHJcbiAgICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UuY2FudmFzRWxlbWVudC53aWR0aCA9IHdpZHRoO1xyXG4gICAgICB0aGlzLl9ncmFwaGljRGV2aWNlLmNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3ZpZXdwb3J0LnggPSB4O1xyXG4gICAgdGhpcy5fdmlld3BvcnQueSA9IHk7XHJcbiAgICB0aGlzLl92aWV3cG9ydC53aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5fdmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgIHRoaXMuX2dyYXBoaWNDb250ZXh0LnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUGVyc3BlY3RpdmUgKGZvdjogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgek5lYXI6IG51bWJlciwgekZhcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgdGhpcy5fek5lYXIgPSB6TmVhcjtcclxuICAgIHRoaXMuX3pGYXIgPSB6RmFyO1xyXG5cclxuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQ7XHJcblxyXG4gICAgbWF0NC5wZXJzcGVjdGl2ZSh0aGlzLl9wcm9qZWN0aW9uTWF0cml4LCBmb3YsIGFzcGVjdFJhdGlvLCB6TmVhciwgekZhcik7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVPcnRob2dyYXBoaWMgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB6TmVhcjogbnVtYmVyLCB6RmFyOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLl96TmVhciA9IHpOZWFyO1xyXG4gICAgdGhpcy5fekZhciA9IHpGYXI7XHJcblxyXG4gICAgbWF0NC5vcnRobyh0aGlzLl9wcm9qZWN0aW9uTWF0cml4LCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCB6TmVhciwgekZhcik7XHJcbiAgfVxyXG5cclxuICByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9sZFdpZHRoPzogbnVtYmVyLCBvbGRIZWlnaHQ/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlzRnJlZUFzcGVjdCkge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuX2ZyYW1ld29yay5zZXR0aW5ncy5jYW52YXNDb250ZXh0VHlwZSkge1xyXG4gICAgICAgIGNhc2UgT0ZFbnVtQ2FudmFzQ29udGV4dFR5cGUuRDJEOlxyXG4gICAgICAgICAgdGhpcy5jcmVhdGVPcnRob2dyYXBoaWMod2lkdGgsIGhlaWdodCwgT0ZSZW5kZXJDYW1lcmEuZGVmYXVsdFpOZWFyLCBPRlJlbmRlckNhbWVyYS5kZWZhdWx0WkZhcik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bUNhbnZhc0NvbnRleHRUeXBlLkQzRDpcclxuICAgICAgICAgIHRoaXMuY3JlYXRlUGVyc3BlY3RpdmUoT0ZSZW5kZXJDYW1lcmEuZGVmYXVsdEZvdiwgd2lkdGgsIGhlaWdodCwgT0ZSZW5kZXJDYW1lcmEuZGVmYXVsdFpOZWFyLFxyXG4gICAgICAgICAgICBPRlJlbmRlckNhbWVyYS5kZWZhdWx0WkZhcik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hhbmdlIFZpZXdwb3J0XHJcbiAgICAgIHRoaXMuX3ZpZXdwb3J0LndpZHRoID0gd2lkdGg7XHJcbiAgICAgIHRoaXMuX3ZpZXdwb3J0LmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgIHRoaXMuX2dyYXBoaWNDb250ZXh0LnZpZXdwb3J0KHRoaXMuX3ZpZXdwb3J0LngsIHRoaXMuX3ZpZXdwb3J0LnksIHRoaXMuX3ZpZXdwb3J0LndpZHRoLCB0aGlzLl92aWV3cG9ydC5oZWlnaHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW52YWxpZGF0ZUNvbmZpZ3VyYXRpb24oKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICAvLyBWaWV3cG9ydFxyXG4gICAgdGhpcy5fZ3JhcGhpY0NvbnRleHQudmlld3BvcnQodGhpcy5fdmlld3BvcnQueCwgdGhpcy5fdmlld3BvcnQueSwgdGhpcy5fdmlld3BvcnQud2lkdGgsIHRoaXMuX3ZpZXdwb3J0LmhlaWdodCk7XHJcblxyXG4gICAgLy8gU2V0IHRoZSBzY2lzc29yIHJlY3RhbmdsZS5cclxuICAgIF9HTC5zY2lzc29yKFxyXG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0LngsXHJcbiAgICAgICAgdGhpcy5fdmlld3BvcnQueSxcclxuICAgICAgICB0aGlzLl92aWV3cG9ydC53aWR0aCAqIHRoaXMuX3dpZHRoLFxyXG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0LmhlaWdodCAqIHRoaXMuX2hlaWdodCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgbWF0NC5tdWx0aXBseSh0aGlzLl90cmFuc2Zvcm1lZE1hdHJpeCwgdGhpcy5fdmlld01hdHJpeCwgdGhpcy5fd29ybGRNYXRyaXgpO1xyXG4gICAgbWF0NC5tdWx0aXBseSh0aGlzLl90cmFuc2Zvcm1lZE1hdHJpeCwgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCwgdGhpcy5fdHJhbnNmb3JtZWRNYXRyaXgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRlF1YWRUZXh0Q29vcmRzIH0gZnJvbSAnLi4vZGF0YS9vZlF1YWRUZXh0Q29vcmRzJztcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi9jb250ZW50L29mSW1hZ2VDb250ZW50JztcclxuaW1wb3J0IHsgT0ZTaGFkZXJUZXh0dXJlIH0gZnJvbSAnLi4vLi4vc2hhZGVyL29mU2hhZGVyVGV4dHVyZSc7XHJcbmltcG9ydCB7IE9GU3ByaXRlIH0gZnJvbSAnLi9vZlNwcml0ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZBbmltYXRpb24gZXh0ZW5kcyBPRlNwcml0ZSB7XHJcblxyXG4gIHByaXZhdGUgX2N1cnJlbnRGcmFtZUhvcml6b250YWw6IG51bWJlcjtcclxuICBwcml2YXRlIF9jdXJyZW50RnJhbWVWZXJ0aWNhbDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3RvdGFsRnJhbWVzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfaGFzQW5pbWF0aW9uRW5kZWQ6IGJvb2xlYW47XHJcblxyXG4gIGdldCBoYXNBbmltYXRpb25FbmRlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2hhc0FuaW1hdGlvbkVuZGVkOyB9XHJcblxyXG4gIGdldCB3aWR0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fcXVhZFRleHRDb29yZHMud2lkdGggLyB0aGlzLl9ob3Jpem9udGFsVGlsZXM7IH1cclxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9xdWFkVGV4dENvb3Jkcy5oZWlnaHQgLyB0aGlzLl92ZXJ0aWNhbFRpbGVzOyB9XHJcblxyXG4gIGdldCBjb2xvcigpOiBPRkNvbG9yIHsgcmV0dXJuIHRoaXMuX2NvbG9yOyB9XHJcbiAgc2V0IGNvbG9yKHZhbDogT0ZDb2xvcikgeyB0aGlzLl9jb2xvciA9IHZhbDsgfVxyXG5cclxuICBzZXQgaW1hZ2VDb250ZW50KHZhbDogT0ZJbWFnZUNvbnRlbnQpIHtcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIHRoaXMuX2ltYWdlQ29udGVudCA9IHZhbDtcclxuICAgIHRoaXMuX2ltYWdlSFRNTCA9IHRoaXMuX2ltYWdlQ29udGVudC5pbWFnZUhUTUw7XHJcbiAgICB0aGlzLl9pbWFnZUdMVGV4dHVyZSA9IHRoaXMuX2ltYWdlQ29udGVudC5pbWFnZVRleHR1cmU7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9xdWFkVGV4dENvb3Jkcykge1xyXG4gICAgICB0aGlzLl9pbWFnZVJlY3Qud2lkdGggPSB0aGlzLl9pbWFnZUhUTUwud2lkdGg7XHJcbiAgICAgIHRoaXMuX2ltYWdlUmVjdC5oZWlnaHQgPSB0aGlzLl9pbWFnZUhUTUwuaGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5fcXVhZFRleHRDb29yZHMgPSBuZXcgT0ZRdWFkVGV4dENvb3JkcygwLCAwLCAwLCAwLFxyXG4gICAgICAgICh0aGlzLl9pbWFnZVJlY3Qud2lkdGggLyB0aGlzLl9ob3Jpem9udGFsVGlsZXMpICogMC41LFxyXG4gICAgICAgICh0aGlzLl9pbWFnZVJlY3QuaGVpZ2h0IC8gdGhpcy5fdmVydGljYWxUaWxlcykgKiAwLjUpO1xyXG5cclxuICAgICAgLy8gdmVyaWZ5IHRoYXQgdGhlIFZCTyBvYmplY3QgZXhpc3RzIGJlY2F1c2UgY291bGQgYmUgZXJhc2UgaWYgdXNpbmcgdGhlIHNwcml0ZSBiYXRjaFxyXG4gICAgICBpZiAodGhpcy5fdmJvT2JqZWN0KSB7XHJcbiAgICAgICAgLy8gQWZ0ZXIgZmluaXNoZWQgbG9hZGluZyBjcmVhdGVkIHRoZSB2ZXJ0aWNlc1xyXG4gICAgICAgIGNvbnN0IGh3ID0gdGhpcy5fcXVhZFRleHRDb29yZHMud2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGggPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyMCk7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXNbMF0gPSBodzsgdGhpcy5fdmVydGljZXNbMV0gPSBoaDsgdGhpcy5fdmVydGljZXNbMl0gPSAwOyB0aGlzLl92ZXJ0aWNlc1szXSA9IDE7IHRoaXMuX3ZlcnRpY2VzWzRdID0gMTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1s1XSA9IC1odzsgdGhpcy5fdmVydGljZXNbNl0gPSBoaDsgdGhpcy5fdmVydGljZXNbN10gPSAwOyB0aGlzLl92ZXJ0aWNlc1s4XSA9IDA7IHRoaXMuX3ZlcnRpY2VzWzldID0gMTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1sxMF0gPSBodzsgdGhpcy5fdmVydGljZXNbMTFdID0gLWhoOyB0aGlzLl92ZXJ0aWNlc1sxMl0gPSAwOyB0aGlzLl92ZXJ0aWNlc1sxM10gPSAxOyB0aGlzLl92ZXJ0aWNlc1sxNF0gPSAwO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzWzE1XSA9IC1odzsgdGhpcy5fdmVydGljZXNbMTZdID0gLWhoOyB0aGlzLl92ZXJ0aWNlc1sxN10gPSAwOyB0aGlzLl92ZXJ0aWNlc1sxOF0gPSAwOyB0aGlzLl92ZXJ0aWNlc1sxOV0gPSAwO1xyXG5cclxuICAgICAgICAvLyBOb3cgd2Ugc2V0IHRoZSB2ZXJ0aWNlcyBpbnRlcmxlYXZlZCBhcnJheSB0byB0aGUgVmVydGV4QnVmZmVyXHJcbiAgICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvT2JqZWN0LnZibyk7XHJcbiAgICAgICAgLy8gVGhpcyB0aW1lIHRoZSBCdWZmZXJEYXRhIGlzIHNldCBhcyBEWU5BTUlDX0RSQVcsIHRoaXMgaXNcclxuICAgICAgICAvLyBiZWNhdXNlIG91ciB2ZXJ0ZXggYXJyYXkgd2lsbCBjaGFuZ2Ugb2Z0ZW4uXHJcbiAgICAgICAgX0dMLmJ1ZmZlckRhdGEoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmVydGljZXMsIF9HTC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ob3Jpem9udGFsVGlsZXM6IG51bWJlcixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3ZlcnRpY2FsVGlsZXM6IG51bWJlcikge1xyXG5cclxuICAgIHN1cGVyKHgsIHkpO1xyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZUhvcml6b250YWwgPSAwO1xyXG4gICAgdGhpcy5fY3VycmVudEZyYW1lVmVydGljYWwgPSAwO1xyXG4gICAgdGhpcy5faGFzQW5pbWF0aW9uRW5kZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3RvdGFsRnJhbWVzID0gdGhpcy5faG9yaXpvbnRhbFRpbGVzICogdGhpcy5fdmVydGljYWxUaWxlcztcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHNldEFkdmFuY2VBbmltYXRpb25UaWxlQ29uZmlnIChpbWFnZVJlY3RYOiBudW1iZXIsIGltYWdlUmVjdFk6IG51bWJlciwgaW1hZ2VSZWN0V2lkdGg6IG51bWJlciwgaW1hZ2VSZWN0SGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2ltYWdlUmVjdC54ID0gaW1hZ2VSZWN0WDtcclxuICAgIHRoaXMuX2ltYWdlUmVjdC55ID0gaW1hZ2VSZWN0WTtcclxuICAgIHRoaXMuX2ltYWdlUmVjdC53aWR0aCA9IGltYWdlUmVjdFdpZHRoO1xyXG4gICAgdGhpcy5faW1hZ2VSZWN0LmhlaWdodCA9IGltYWdlUmVjdEhlaWdodDtcclxuXHJcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVIb3Jpem9udGFsID0gMDtcclxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZVZlcnRpY2FsID0gMDtcclxuICAgIHRoaXMuX3RvdGFsRnJhbWVzID0gdGhpcy5faG9yaXpvbnRhbFRpbGVzICogdGhpcy5fdmVydGljYWxUaWxlcztcclxuXHJcbiAgICAvLyBBZnRlciBmaW5pc2hlZCBsb2FkaW5nIGNyZWF0ZWQgdGhlIHZlcnRpY2VzXHJcbiAgICBjb25zdCBodyA9ICh0aGlzLl9pbWFnZVJlY3Qud2lkdGggLyB0aGlzLl9ob3Jpem9udGFsVGlsZXMpICogMC41O1xyXG4gICAgY29uc3QgaGggPSAodGhpcy5faW1hZ2VSZWN0LmhlaWdodCAvIHRoaXMuX3ZlcnRpY2FsVGlsZXMpICogMC41O1xyXG5cclxuICAgIC8vIFVwZGF0ZSBxdWFkIGRhdGFcclxuICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLndpZHRoID0gKHRoaXMuX2ltYWdlUmVjdC53aWR0aCAvIHRoaXMuX2hvcml6b250YWxUaWxlcyk7XHJcbiAgICB0aGlzLl9xdWFkVGV4dENvb3Jkcy5oZWlnaHQgPSAodGhpcy5faW1hZ2VSZWN0LmhlaWdodCAvIHRoaXMuX3ZlcnRpY2FsVGlsZXMpO1xyXG5cclxuICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBWQk8gb2JqZWN0IGV4aXN0cyBiZWNhdXNlIGNvdWxkIGJlIGVyYXNlIGlmIHVzaW5nIHRoZSBzcHJpdGUgYmF0Y2hcclxuICAgIGlmICh0aGlzLl92Ym9PYmplY3QpIHtcclxuICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgdmVydGV4IGFycmF5IHRleHQgY29vcmRzXHJcbiAgICAgIHRoaXMuX3ZlcnRpY2VzWzBdID0gaHc7IHRoaXMuX3ZlcnRpY2VzWzFdID0gaGg7XHJcbiAgICAgIHRoaXMuX3ZlcnRpY2VzWzVdID0gLWh3OyB0aGlzLl92ZXJ0aWNlc1s2XSA9IGhoO1xyXG4gICAgICB0aGlzLl92ZXJ0aWNlc1sxMF0gPSBodzsgdGhpcy5fdmVydGljZXNbMTFdID0gLWhoO1xyXG4gICAgICB0aGlzLl92ZXJ0aWNlc1sxNV0gPSAtaHc7IHRoaXMuX3ZlcnRpY2VzWzE2XSA9IC1oaDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICB0aGlzLl9oYXNBbmltYXRpb25FbmRlZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh0aGlzLl9pbWFnZUNvbnRlbnQgJiYgdGhpcy5faW1hZ2VDb250ZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgICAgY29uc3QgY2xpcFdpZHRoID0gKHRoaXMuX2ltYWdlUmVjdC53aWR0aCAvIHRoaXMuX2hvcml6b250YWxUaWxlcykgLyB0aGlzLl9pbWFnZUhUTUwud2lkdGg7XHJcbiAgICAgIGNvbnN0IGNsaXBIZWlnaHQgPSAodGhpcy5faW1hZ2VSZWN0LmhlaWdodCAvIHRoaXMuX3ZlcnRpY2FsVGlsZXMpIC8gdGhpcy5faW1hZ2VIVE1MLmhlaWdodDtcclxuICAgICAgY29uc3QgY2xpcFggPSAodGhpcy5faW1hZ2VSZWN0LnggLyB0aGlzLl9pbWFnZUhUTUwud2lkdGgpICsgKE1hdGguZmxvb3IodGhpcy5fY3VycmVudEZyYW1lSG9yaXpvbnRhbCkgKiBjbGlwV2lkdGgpO1xyXG4gICAgICBjb25zdCBjbGlwWSA9ICh0aGlzLl9pbWFnZVJlY3QueSAvIHRoaXMuX2ltYWdlSFRNTC5oZWlnaHQpICsgKE1hdGguZmxvb3IodGhpcy5fY3VycmVudEZyYW1lVmVydGljYWwpICogY2xpcEhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLl9xdWFkVGV4dENvb3Jkcy5sZWZ0ID0gY2xpcFg7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnJpZ2h0ID0gY2xpcFggKyBjbGlwV2lkdGg7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnVwID0gY2xpcFk7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLmRvd24gPSBjbGlwWSArIGNsaXBIZWlnaHQ7XHJcblxyXG4gICAgICBpZiAodGhpcy5fc3ByaXRlQmF0Y2hJbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuX3Nwcml0ZUJhdGNoSW5zdGFuY2UuZHJhd0dyYXBoaWModGhpcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgdmVydGV4IGFycmF5IHRleHQgY29vcmRzXHJcbiAgICAgICAgdGhpcy5fdmVydGljZXNbM10gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5yaWdodDsgdGhpcy5fdmVydGljZXNbNF0gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5kb3duO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzWzhdID0gdGhpcy5fcXVhZFRleHRDb29yZHMubGVmdDsgdGhpcy5fdmVydGljZXNbOV0gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5kb3duO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzWzEzXSA9IHRoaXMuX3F1YWRUZXh0Q29vcmRzLnJpZ2h0OyB0aGlzLl92ZXJ0aWNlc1sxNF0gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy51cDtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1sxOF0gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5sZWZ0OyB0aGlzLl92ZXJ0aWNlc1sxOV0gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy51cDtcclxuXHJcbiAgICAgICAgLy8gTm93IHdlIHNldCB0aGUgdmVydGljZXMgaW50ZXJsZWF2ZWQgYXJyYXkgdG8gdGhlIFZlcnRleEJ1ZmZlclxyXG4gICAgICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5BUlJBWV9CVUZGRVIsIHRoaXMudmJvT2JqZWN0LnZibyk7XHJcbiAgICAgICAgX0dMLmJ1ZmZlclN1YkRhdGEoX0dMLkFSUkFZX0JVRkZFUiwgMCwgdGhpcy5fdmVydGljZXMgYXMgQnVmZmVyU291cmNlKTtcclxuXHJcbiAgICAgICAgKHRoaXMuX3NoYWRlciBhcyBPRlNoYWRlclRleHR1cmUpLmNvbG9yID0gdGhpcy5fY29sb3I7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyLnNldFRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcclxuICAgICAgICB0aGlzLl9zaGFkZXIucm90YXRpb25aID0gdGhpcy5yb3RhdGlvbjtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuc2V0U2NhbGUodGhpcy5zY2FsZVgsIHRoaXMuc2NhbGVZLCAxLjApO1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHRoaXMuX2ltYWdlR0xUZXh0dXJlLCB0aGlzLl92Ym9PYmplY3QudmJvKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9kZWJ1Z0NvbGxpc2lvblF1YWQpIHtcclxuICAgICAgdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkLnggPSB0aGlzLng7XHJcbiAgICAgIHRoaXMuX2RlYnVnQ29sbGlzaW9uUXVhZC55ID0gdGhpcy55O1xyXG4gICAgICB0aGlzLl9kZWJ1Z0NvbGxpc2lvblF1YWQudXBkYXRlKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvdW50aW5nIGZyYW1lcyBwZXIgdXBkYXRlIGFuZCBieSB0aGUgZnJhbWVyYXRlIG9mIHRoZSBhcHAgYW5kIHRoZSBhbmltYXRpb25cclxuICAgIGNvbnN0IGFuaW1hdGlvbkZyYW1lcmF0ZSA9IHRoaXMuX2ZyYW1ld29yay5zZXR0aW5ncy5hbmltYXRpb25GcmFtZXJhdGU7XHJcbiAgICBjb25zdCB0YXJnZXRGcmFtZXJhdGUgPSB0aGlzLl9mcmFtZXdvcmsuc2V0dGluZ3MudGFyZ2V0RnJhbWVyYXRlO1xyXG4gICAgLy8gTm93IGFkZCB0aGUgZGl2aXNpb24gb2YgdGhlIGZyYW1lcmF0ZXMgdG8gdGhlIGN1cnJlbnRGcmFtZUhvcml6b250YWxcclxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZUhvcml6b250YWwgKz0gYW5pbWF0aW9uRnJhbWVyYXRlIC8gdGFyZ2V0RnJhbWVyYXRlO1xyXG5cclxuICAgIGlmICh0aGlzLl9jdXJyZW50RnJhbWVIb3Jpem9udGFsID49IHRoaXMuX2hvcml6b250YWxUaWxlcykge1xyXG4gICAgICB0aGlzLl9jdXJyZW50RnJhbWVIb3Jpem9udGFsID0gMDtcclxuICAgICAgdGhpcy5fY3VycmVudEZyYW1lVmVydGljYWwrKztcclxuXHJcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50RnJhbWVWZXJ0aWNhbCA+PSB0aGlzLl92ZXJ0aWNhbFRpbGVzKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudEZyYW1lVmVydGljYWwgPSAwO1xyXG4gICAgICAgIHRoaXMuX2hhc0FuaW1hdGlvbkVuZGVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkRyYXdhYmxlMkQgfSBmcm9tICcuLi9vZkRyYXdhYmxlMkQnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkVudW1WQk9PYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGV2aWNlL29wdGltaXphdGlvbi9ncHUvb2ZFbnVtVkJPT2JqZWN0VHlwZSc7XHJcbmltcG9ydCB7IE9GU2hhZGVyUHJpbWl0aXZlIH0gZnJvbSAnLi4vLi4vc2hhZGVyL29mU2hhZGVyUHJpbWl0aXZlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPRlByaW1pdGl2ZUNpcmNsZSBleHRlbmRzIE9GRHJhd2FibGUyRCB7XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSB2ZXJ0ZXhRdWFsaXR5ID0gNjQ7XHJcblxyXG4gIHByb3RlY3RlZCBfcmFkaXVzOiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF92ZXJ0ZXhRdWFsaXR5OiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF90cmlhbmdsZVJlbmRlclR5cGU6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX2RyYXdpbmdDb3VudDogbnVtYmVyO1xyXG5cclxuICBvZmZzZXRYOiBudW1iZXI7XHJcbiAgb2Zmc2V0WTogbnVtYmVyO1xyXG5cclxuICBnZXQgcmFkaXVzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9yYWRpdXM7IH1cclxuICBzZXQgcmFkaXVzKHZhbDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9yYWRpdXMgPSB2YWw7XHJcblxyXG4gICAgY29uc3QgdmVydGV4UGFydCA9ICgyLjAgKiBNYXRoLlBJKSAvIE9GUHJpbWl0aXZlQ2lyY2xlLnZlcnRleFF1YWxpdHk7XHJcblxyXG4gICAgdGhpcy5fdmVydGljZXMgPSBbXTtcclxuICAgIC8vIGNlbnRlcjogb25seSBpZiBjYXNlIGlmIGlzIHdpcmVmcmFtZSBUUklBTkdMRV9TVFJJUFxyXG4gICAgdGhpcy5fdmVydGljZXMucHVzaCgwLCAwLCAwKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3ZlcnRleFF1YWxpdHk7IGkrKykge1xyXG4gICAgICBjb25zdCB2eCA9IE1hdGguY29zKHZlcnRleFBhcnQgKiBpKSAqIHRoaXMuX3JhZGl1cyAqIDAuNTtcclxuICAgICAgY29uc3QgdnkgPSBNYXRoLnNpbih2ZXJ0ZXhQYXJ0ICogaSkgKiB0aGlzLl9yYWRpdXMgKiAwLjU7XHJcblxyXG4gICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKHZ4LCB2eSwgMCk7XHJcblxyXG4gICAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvT2JqZWN0LnZibyk7XHJcbiAgICAgIF9HTC5idWZmZXJEYXRhKF9HTC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fdmVydGljZXMpLCBfR0wuU1RBVElDX0RSQVcpO1xyXG5cclxuICAgICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pYm9PYmplY3QudmJvKTtcclxuICAgICAgX0dMLmJ1ZmZlckRhdGEoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkodGhpcy5faW5kaWNlcyksIF9HTC5TVEFUSUNfRFJBVyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgY29sb3IoKTogT0ZDb2xvciB7IHJldHVybiB0aGlzLl9jb2xvcjsgfVxyXG4gIHNldCBjb2xvcih2YWw6IE9GQ29sb3IpIHsgdGhpcy5fY29sb3IgPSB2YWw7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBjb2xvcjogT0ZDb2xvcikge1xyXG4gICAgc3VwZXIoeCwgeSk7XHJcblxyXG4gICAgdGhpcy5fcmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5fY29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuX3ZlcnRleFF1YWxpdHkgPSBPRlByaW1pdGl2ZUNpcmNsZS52ZXJ0ZXhRdWFsaXR5O1xyXG5cclxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICB0aGlzLm9mZnNldFggPSAwO1xyXG4gICAgdGhpcy5vZmZzZXRZID0gMDtcclxuICAgIHRoaXMuX2luZGljZXMgPSBbXTtcclxuICAgIHRoaXMuX2RyYXdpbmdDb3VudCA9IDA7XHJcbiAgICB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUgPSBfR0wuVFJJQU5HTEVfU1RSSVA7XHJcblxyXG4gICAgLy8gR2V0IFNoYWRlclxyXG4gICAgdGhpcy5fc2hhZGVyID0gdGhpcy5fZ3JhcGhpY0RldmljZS5zaGFkZXJGYWN0b3J5LnJldHJpZXZlU2hhZGVyPE9GU2hhZGVyUHJpbWl0aXZlPignU2hhZGVyUHJpbWl0aXZlJyk7XHJcbiAgICAvLyBjcmVhdGUgVkJPJ3NcclxuICAgIHRoaXMuY3JlYXRlVkJPcygpO1xyXG5cclxuICAgIC8vIHRyaWdnZXIgdGhlIHJhZGl1cyBsb2dpY1xyXG4gICAgdGhpcy5yYWRpdXMgPSB0aGlzLl9yYWRpdXM7XHJcblxyXG4gICAgdGhpcy5zZXRXaXJlZnJhbWVWaXNpYmlsaXR5KGZhbHNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjcmVhdGVWQk9zKCk6IHZvaWQge1xyXG4gICAgLy8gR2V0IGEgVkJPIGZvciB0aGlzIG9iamVjdFxyXG4gICAgdGhpcy5fdmJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIHRoaXMuX3Zib09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcik7XHJcblxyXG4gICAgLy8gR2V0IGEgSUJPIGZvciB0aGlzIG9iamVjdFxyXG4gICAgdGhpcy5faWJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpO1xyXG4gICAgdGhpcy5faWJvT2JqZWN0LmFjdGl2YXRlKE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpO1xyXG4gIH1cclxuXHJcbiAgc2V0V2lyZWZyYW1lVmlzaWJpbGl0eSAoaXNWaXNpYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICBpZiAoaXNWaXNpYmxlKSB7XHJcbiAgICAgIHRoaXMuX2RyYXdpbmdDb3VudCA9IHRoaXMuX3ZlcnRleFF1YWxpdHkgKiAyO1xyXG4gICAgICB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUgPSBfR0wuTElORVM7XHJcbiAgICAgIHRoaXMuX2luZGljZXMgPSBbXTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5fdmVydGV4UXVhbGl0eTsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5faW5kaWNlcy5wdXNoKGksIGkgKyAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5faW5kaWNlcy5wdXNoKHRoaXMuX3ZlcnRleFF1YWxpdHksIDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9kcmF3aW5nQ291bnQgPSB0aGlzLl92ZXJ0ZXhRdWFsaXR5ICogMjtcclxuICAgICAgICB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUgPSBfR0wuVFJJQU5HTEVfU1RSSVA7XHJcbiAgICAgICAgdGhpcy5faW5kaWNlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2luZGljZXMucHVzaCgwLCAxLCAyKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCB0aGlzLl92ZXJ0ZXhRdWFsaXR5OyBpKyspIHtcclxuICAgICAgICAgIHRoaXMuX2luZGljZXMucHVzaChpICsgMSwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pbmRpY2VzLnB1c2goMSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbmRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICB9XHJcblxyXG4gIGhpdFRlc3QgKG90aGVyOiBPRkRyYXdhYmxlMkQpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHRoaXNYID0gdGhpcy54ICsgdGhpcy5vZmZzZXRYO1xyXG4gICAgY29uc3QgdGhpc1kgPSB0aGlzLnkgKyB0aGlzLm9mZnNldFk7XHJcbiAgICBjb25zdCBvdGhlclggPSBvdGhlci54ICsgKG90aGVyIGFzIE9GUHJpbWl0aXZlQ2lyY2xlKS5vZmZzZXRYO1xyXG4gICAgY29uc3Qgb3RoZXJZID0gb3RoZXIueSArIChvdGhlciBhcyBPRlByaW1pdGl2ZUNpcmNsZSkub2Zmc2V0WTtcclxuXHJcbiAgICByZXR1cm4gdGhpc1ggPCBvdGhlclggKyAob3RoZXIgYXMgT0ZQcmltaXRpdmVDaXJjbGUpLnJhZGl1cyAmJiB0aGlzWCArIHRoaXMucmFkaXVzID4gb3RoZXJYICYmXHJcbiAgICAgICAgdGhpc1kgPCBvdGhlclkgKyAob3RoZXIgYXMgT0ZQcmltaXRpdmVDaXJjbGUpLnJhZGl1cyAmJiB0aGlzLnJhZGl1cyArIHRoaXNZID4gb3RoZXJZO1xyXG4gIH1cclxuXHJcbiAgaGl0VGVzdEJ5UG9pbnQgKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBoV2lkdGggPSB0aGlzLnJhZGl1cyAqIDAuNTtcclxuICAgIGNvbnN0IGhIZWlnaHQgPSB0aGlzLnJhZGl1cyAqIDAuNTtcclxuICAgIGNvbnN0IHRoaXNYID0gdGhpcy54ICsgdGhpcy5vZmZzZXRYO1xyXG4gICAgY29uc3QgdGhpc1kgPSB0aGlzLnkgKyB0aGlzLm9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuICh0aGlzWCAtIGhXaWR0aCkgPCB4ICYmICh0aGlzWCArIGhXaWR0aCkgPiB4ICYmICh0aGlzWSAtIGhIZWlnaHQpIDwgeSAmJiAodGhpc1kgKyBoSGVpZ2h0KSA+IHk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl9zaGFkZXIuaXNTaGFkZXJBYnN0cmFjdCAmJiB0aGlzLl9jb2xvci5hICE9PSAwKSB7XHJcbiAgICAgIGlmICghdGhpcy5fdHJhbnNmb3JtYXRpb24pIHtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuc2V0VHJhbnNsYXRlKHRoaXMueCArIHRoaXMub2Zmc2V0WCwgdGhpcy55ICsgdGhpcy5vZmZzZXRZLCB0aGlzLnopO1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5yb3RhdGlvblogPSB0aGlzLnJvdGF0aW9uO1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5zZXRTY2FsZSh0aGlzLnNjYWxlWCwgdGhpcy5zY2FsZVksIDEuMCk7XHJcbiAgICAgICAgKHRoaXMuX3NoYWRlciBhcyBPRlNoYWRlclByaW1pdGl2ZSkuY29sb3IgPSB0aGlzLl9jb2xvcjtcclxuXHJcbiAgICAgICAgdGhpcy5fc2hhZGVyLmRyYXcoYXJncywgdGhpcy5fdmJvT2JqZWN0LnZibywgdGhpcy5faWJvT2JqZWN0LnZibywgdGhpcy5fdHJpYW5nbGVSZW5kZXJUeXBlLFxyXG4gICAgICAgICAgdGhpcy5fZHJhd2luZ0NvdW50KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuZHJhdyhhcmdzLCB0aGlzLl92Ym9PYmplY3QudmJvLCB0aGlzLl9pYm9PYmplY3QudmJvLCB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUsXHJcbiAgICAgICAgICB0aGlzLl9kcmF3aW5nQ291bnQsIHRoaXMuX3RyYW5zZm9ybWF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkRyYXdhYmxlMkQgfSBmcm9tICcuLi9vZkRyYXdhYmxlMkQnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkVudW1WQk9PYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGV2aWNlL29wdGltaXphdGlvbi9ncHUvb2ZFbnVtVkJPT2JqZWN0VHlwZSc7XHJcbmltcG9ydCB7IE9GU2hhZGVyUHJpbWl0aXZlIH0gZnJvbSAnLi4vLi4vc2hhZGVyL29mU2hhZGVyUHJpbWl0aXZlJztcclxuaW1wb3J0IHsgbWF0NCwgdmVjMyB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZQcmltaXRpdmVHcmlkIGV4dGVuZHMgT0ZEcmF3YWJsZTJEIHtcclxuXHJcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRUaWxlU2l6ZSA9IDMyO1xyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0V2lkdGggPSAxO1xyXG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0SGVpZ2h0ID0gMjtcclxuXHJcbiAgcHJvdGVjdGVkIF93aWR0aDogbnVtYmVyO1xyXG4gIHByb3RlY3RlZCBfaGVpZ2h0OiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF90aWxlU2l6ZVg6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3RpbGVTaXplWTogbnVtYmVyO1xyXG5cclxuICBvZmZzZXRYOiBudW1iZXI7XHJcbiAgb2Zmc2V0WTogbnVtYmVyO1xyXG5cclxuICBwcm90ZWN0ZWQgX3RyaWFuZ2xlUmVuZGVyVHlwZTogbnVtYmVyO1xyXG4gIHByb3RlY3RlZCBfZHJhd2luZ0NvdW50OiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF9vdGhlclRyYW5zZm9ybWF0aW9uOiBtYXQ0O1xyXG5cclxuICBnZXQgd2lkdGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3dpZHRoOyB9XHJcbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5faGVpZ2h0OyB9XHJcbiAgZ2V0IHRpbGVTaXplWCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fdGlsZVNpemVYOyB9XHJcbiAgZ2V0IHRpbGVTaXplWSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fdGlsZVNpemVZOyB9XHJcblxyXG4gIGdldCBjb2xvcigpOiBPRkNvbG9yIHsgcmV0dXJuIHRoaXMuX2NvbG9yOyB9XHJcbiAgc2V0IGNvbG9yKHZhbDogT0ZDb2xvcikgeyB0aGlzLl9jb2xvciA9IHZhbDsgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgY29sb3I6IE9GQ29sb3IpIHtcclxuICAgIHN1cGVyKHgsIHkpO1xyXG5cclxuICAgIHRoaXMub2Zmc2V0WCA9IDA7XHJcbiAgICB0aGlzLm9mZnNldFkgPSAwO1xyXG4gICAgdGhpcy5fd2lkdGggPSBPRlByaW1pdGl2ZUdyaWQuZGVmYXVsdFdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gT0ZQcmltaXRpdmVHcmlkLmRlZmF1bHRIZWlnaHQ7XHJcbiAgICB0aGlzLl90aWxlU2l6ZVggPSBPRlByaW1pdGl2ZUdyaWQuZGVmYXVsdFRpbGVTaXplO1xyXG4gICAgdGhpcy5fdGlsZVNpemVZID0gT0ZQcmltaXRpdmVHcmlkLmRlZmF1bHRUaWxlU2l6ZTtcclxuICAgIHRoaXMuX2NvbG9yID0gY29sb3I7XHJcbiAgICB0aGlzLl9vdGhlclRyYW5zZm9ybWF0aW9uID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgdGhpcy5fdHJpYW5nbGVSZW5kZXJUeXBlID0gX0dMLkxJTkVTO1xyXG4gICAgdGhpcy5fZHJhd2luZ0NvdW50ID0gODtcclxuICAgIHRoaXMuX2luZGljZXMgPSBbMCwgMSwgMSwgMywgMywgMiwgMiwgMF07XHJcblxyXG4gICAgLy8gR2V0IFNoYWRlclxyXG4gICAgdGhpcy5fc2hhZGVyID0gdGhpcy5fZ3JhcGhpY0RldmljZS5zaGFkZXJGYWN0b3J5LnJldHJpZXZlU2hhZGVyPE9GU2hhZGVyUHJpbWl0aXZlPignU2hhZGVyUHJpbWl0aXZlJyk7XHJcbiAgICAvLyBjcmVhdGUgVkJPJ3NcclxuICAgIHRoaXMuY3JlYXRlVkJPcygpO1xyXG5cclxuICAgIGNvbnN0IGh3ID0gdGhpcy5fd2lkdGggLyAyLjA7XHJcbiAgICBjb25zdCBoaCA9IHRoaXMuX2hlaWdodCAvIDIuMDtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlcyA9IFtcclxuICAgICAgaHcsIGhoLCAwLjAsXHJcbiAgICAgIC1odywgaGgsIDAuMCxcclxuICAgICAgaHcsIC1oaCwgMC4wLFxyXG4gICAgICAtaHcsIC1oaCwgMC4wXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Zib09iamVjdC52Ym8pO1xyXG4gICAgX0dMLmJ1ZmZlckRhdGEoX0dMLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLl92ZXJ0aWNlcyksIF9HTC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbmRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICBcclxuICAgIC8vIEdldCB1bmlmb3JtIGNvbG9yXHJcbiAgICB0aGlzLl9zaGFkZXIuc2V0Q29sb3IoJ3VDb2xvcicsIHRoaXMuX2NvbG9yKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjcmVhdGVWQk9zKCk6IHZvaWQge1xyXG4gICAgLy8gR2V0IGEgVkJPIGZvciB0aGlzIG9iamVjdFxyXG4gICAgdGhpcy5fdmJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIHRoaXMuX3Zib09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcik7XHJcblxyXG4gICAgLy8gR2V0IGEgSUJPIGZvciB0aGlzIG9iamVjdFxyXG4gICAgdGhpcy5faWJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpO1xyXG4gICAgdGhpcy5faWJvT2JqZWN0LmFjdGl2YXRlKE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpO1xyXG4gIH1cclxuXHJcbiAgaGl0VGVzdChvdGhlcjogT0ZEcmF3YWJsZTJEKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBoaXRUZXN0QnlQb2ludCAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGhXaWR0aCA9IHRoaXMuX3dpZHRoICogMC41O1xyXG4gICAgY29uc3QgaEhlaWdodCA9IHRoaXMuX2hlaWdodCAqIDAuNTtcclxuICAgIGNvbnN0IHRoaXNYID0gdGhpcy54ICsgdGhpcy5vZmZzZXRYO1xyXG4gICAgY29uc3QgdGhpc1kgPSB0aGlzLnkgKyB0aGlzLm9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuICh0aGlzWCAtIGhXaWR0aCkgPCB4ICYmICh0aGlzWCArIGhXaWR0aCkgPiB4ICYmICh0aGlzWSAtIGhIZWlnaHQpIDwgeSAmJiAodGhpc1kgKyBoSGVpZ2h0KSA+IHk7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VHcmlkICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgdGlsZVNpemVYOiBudW1iZXIsIHRpbGVTaXplWTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgdGhpcy5fdGlsZVNpemVYID0gdGlsZVNpemVYO1xyXG4gICAgdGhpcy5fdGlsZVNpemVZID0gdGlsZVNpemVZO1xyXG5cclxuICAgIHRoaXMuX3ZlcnRpY2VzID0gW107XHJcbiAgICB0aGlzLl9pbmRpY2VzID0gW107XHJcblxyXG4gICAgbGV0IGluZGljZXNDb3VudCA9IDA7XHJcbiAgICBjb25zdCBsaW1pdFggPSB0aGlzLl90aWxlU2l6ZVggKiB0aGlzLl93aWR0aDtcclxuICAgIGNvbnN0IGxpbWl0WSA9IHRoaXMuX3RpbGVTaXplWSAqIHRoaXMuX2hlaWdodDtcclxuXHJcbiAgICBmb3IgKGxldCBpeCA9IDA7IGl4IDw9IHRoaXMuX3dpZHRoOyBpeCsrKSB7XHJcbiAgICAgIGNvbnN0IHBvc1ggPSBpeCAqIHRoaXMuX3RpbGVTaXplWDtcclxuXHJcbiAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2gocG9zWCwgMCwgMCk7XHJcbiAgICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2gocG9zWCwgbGltaXRZLCAwKTtcclxuXHJcbiAgICAgIHRoaXMuX2luZGljZXMucHVzaChpbmRpY2VzQ291bnQsIGluZGljZXNDb3VudCArIDEpO1xyXG4gICAgICBpbmRpY2VzQ291bnQgKz0gMjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDw9IHRoaXMuX2hlaWdodDsgaXkrKykge1xyXG4gICAgICBjb25zdCBwb3NZID0gaXkgKiB0aGlzLl90aWxlU2l6ZVk7XHJcblxyXG4gICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKDAsIHBvc1ksIDApO1xyXG4gICAgICB0aGlzLl92ZXJ0aWNlcy5wdXNoKGxpbWl0WCwgcG9zWSwgMCk7XHJcblxyXG4gICAgICB0aGlzLl9pbmRpY2VzLnB1c2goaW5kaWNlc0NvdW50LCBpbmRpY2VzQ291bnQgKyAxKTtcclxuICAgICAgaW5kaWNlc0NvdW50ICs9IDI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZHJhd2luZ0NvdW50ID0gdGhpcy5faW5kaWNlcy5sZW5ndGg7XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgdmVydGljZXMgYXJyYXkgdG8gdGhlIFZlcnRleEJ1ZmZlclxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICAvLyBOb3cgd2Ugc2V0IHRoZSBpbmRpY2VzIGFycmF5IHRvIHRoZSBJbmRleEJ1ZmZlclxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pYm9PYmplY3QudmJvKTtcclxuICAgIF9HTC5idWZmZXJEYXRhKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHRoaXMuX2luZGljZXMpLCBfR0wuU1RBVElDX0RSQVcpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fc2hhZGVyLmlzU2hhZGVyQWJzdHJhY3QgJiYgdGhpcy5fY29sb3IuYSAhPT0gMCkge1xyXG4gICAgICBpZiAoIXRoaXMuX3RyYW5zZm9ybWF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyLnNldFRyYW5zbGF0ZSh0aGlzLnggKyB0aGlzLm9mZnNldFgsIHRoaXMueSArIHRoaXMub2Zmc2V0WSwgdGhpcy56KTtcclxuICAgICAgICB0aGlzLl9zaGFkZXIucm90YXRpb25aID0gdGhpcy5yb3RhdGlvbjtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuc2V0U2NhbGUodGhpcy5zY2FsZVgsIHRoaXMuc2NhbGVZLCAxLjApO1xyXG4gICAgICAgICh0aGlzLl9zaGFkZXIgYXMgT0ZTaGFkZXJQcmltaXRpdmUpLmNvbG9yID0gdGhpcy5fY29sb3I7XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHRoaXMuX3Zib09iamVjdC52Ym8sIHRoaXMuX2lib09iamVjdC52Ym8sIHRoaXMuX3RyaWFuZ2xlUmVuZGVyVHlwZSxcclxuICAgICAgICAgIHRoaXMuX2RyYXdpbmdDb3VudCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWF0NC5mcm9tVHJhbnNsYXRpb24odGhpcy5fb3RoZXJUcmFuc2Zvcm1hdGlvbiwgdmVjMy5mcm9tVmFsdWVzKHRoaXMub2Zmc2V0WCwgdGhpcy5vZmZzZXRZLCAwKSk7XHJcbiAgICAgICAgbWF0NC5tdWx0aXBseSh0aGlzLl9vdGhlclRyYW5zZm9ybWF0aW9uLCB0aGlzLl90cmFuc2Zvcm1hdGlvbiwgdGhpcy5fb3RoZXJUcmFuc2Zvcm1hdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHRoaXMuX3Zib09iamVjdC52Ym8sIHRoaXMuX2lib09iamVjdC52Ym8sIHRoaXMuX3RyaWFuZ2xlUmVuZGVyVHlwZSwgXHJcbiAgICAgICAgICB0aGlzLl9kcmF3aW5nQ291bnQsIHRoaXMuX290aGVyVHJhbnNmb3JtYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fb3RoZXJUcmFuc2Zvcm1hdGlvbiA9IG51bGw7XHJcblxyXG4gICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkRyYXdhYmxlMkQgfSBmcm9tICcuLi9vZkRyYXdhYmxlMkQnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkVudW1WQk9PYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGV2aWNlL29wdGltaXphdGlvbi9ncHUvb2ZFbnVtVkJPT2JqZWN0VHlwZSc7XHJcbmltcG9ydCB7IE9GU2hhZGVyUHJpbWl0aXZlIH0gZnJvbSAnLi4vLi4vc2hhZGVyL29mU2hhZGVyUHJpbWl0aXZlJztcclxuaW1wb3J0IHsgT0ZDb2xsaXNpb25IZWxwZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL29mQ29sbGlzaW9uSGVscGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPRlByaW1pdGl2ZVF1YWQgZXh0ZW5kcyBPRkRyYXdhYmxlMkQge1xyXG5cclxuICBwcm90ZWN0ZWQgX3dpZHRoOiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF9oZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgb2Zmc2V0WDogbnVtYmVyO1xyXG4gIG9mZnNldFk6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIF90cmlhbmdsZVJlbmRlclR5cGU6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX2RyYXdpbmdDb3VudDogbnVtYmVyO1xyXG5cclxuICBnZXQgd2lkdGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3dpZHRoOyB9XHJcbiAgc2V0IHdpZHRoKHZhbDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl93aWR0aCA9IHZhbDtcclxuXHJcbiAgICBjb25zdCBodyA9IHRoaXMuX3dpZHRoIC8gMjtcclxuICAgIGNvbnN0IGhoID0gdGhpcy5faGVpZ2h0IC8gMjtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlcyA9IFtcclxuICAgICAgaHcsIGhoLCAwLjAsXHJcbiAgICAgIC1odywgaGgsIDAuMCxcclxuICAgICAgaHcsIC1oaCwgMC4wLFxyXG4gICAgICAtaHcsIC1oaCwgMC4wXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICB9XHJcblxyXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxyXG4gIHNldCBoZWlnaHQodmFsOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX2hlaWdodCA9IHZhbDtcclxuXHJcbiAgICBjb25zdCBodyA9IHRoaXMuX3dpZHRoIC8gMjtcclxuICAgIGNvbnN0IGhoID0gdGhpcy5faGVpZ2h0IC8gMjtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlcyA9IFtcclxuICAgICAgaHcsIGhoLCAwLjAsXHJcbiAgICAgIC1odywgaGgsIDAuMCxcclxuICAgICAgaHcsIC1oaCwgMC4wLFxyXG4gICAgICAtaHcsIC1oaCwgMC4wXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICB9XHJcblxyXG4gIGdldCBjb2xvcigpOiBPRkNvbG9yIHsgcmV0dXJuIHRoaXMuX2NvbG9yOyB9XHJcbiAgc2V0IGNvbG9yKHZhbDogT0ZDb2xvcikgeyBcclxuICAgIHRoaXMuX2NvbG9yID0gdmFsO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjb2xvcjogT0ZDb2xvcikge1xyXG4gICAgc3VwZXIoeCwgeSk7XHJcblxyXG4gICAgdGhpcy5vZmZzZXRYID0gMDtcclxuICAgIHRoaXMub2Zmc2V0WSA9IDA7XHJcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgdGhpcy5fY29sb3IgPSBjb2xvcjtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgdGhpcy5fdHJpYW5nbGVSZW5kZXJUeXBlID0gX0dMLlRSSUFOR0xFX1NUUklQO1xyXG4gICAgdGhpcy5fZHJhd2luZ0NvdW50ID0gNDtcclxuICAgIHRoaXMuX2luZGljZXMgPSBbMCwgMSwgMiwgM107XHJcblxyXG4gICAgLy8gR2V0IFNoYWRlclxyXG4gICAgdGhpcy5fc2hhZGVyID0gdGhpcy5fZ3JhcGhpY0RldmljZS5zaGFkZXJGYWN0b3J5LnJldHJpZXZlU2hhZGVyPE9GU2hhZGVyUHJpbWl0aXZlPignU2hhZGVyUHJpbWl0aXZlJyk7XHJcbiAgICAvLyBjcmVhdGUgVkJPJ3NcclxuICAgIHRoaXMuY3JlYXRlVkJPcygpO1xyXG5cclxuICAgIGNvbnN0IGh3ID0gdGhpcy5fd2lkdGggLyAyLjA7XHJcbiAgICBjb25zdCBoaCA9IHRoaXMuX2hlaWdodCAvIDIuMDtcclxuXHJcbiAgICB0aGlzLl92ZXJ0aWNlcyA9IFtcclxuICAgICAgaHcsIGhoLCAwLjAsXHJcbiAgICAgIC1odywgaGgsIDAuMCxcclxuICAgICAgaHcsIC1oaCwgMC4wLFxyXG4gICAgICAtaHcsIC1oaCwgMC4wXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Zib09iamVjdC52Ym8pO1xyXG4gICAgX0dMLmJ1ZmZlckRhdGEoX0dMLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLl92ZXJ0aWNlcyksIF9HTC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbmRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICAvLyBHZXQgdW5pZm9ybSBjb2xvclxyXG4gICAgdGhpcy5fc2hhZGVyLnNldENvbG9yKCd1Q29sb3InLCB0aGlzLl9jb2xvcik7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY3JlYXRlVkJPcygpOiB2b2lkIHtcclxuICAgIC8vIEdldCBhIFZCTyBmb3IgdGhpcyBvYmplY3RcclxuICAgIHRoaXMuX3Zib09iamVjdCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlclxyXG4gICAgICAudmJvUG9vbGVyLmdldEF2YWlsYWJsZVZCTyhPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcik7XHJcbiAgICB0aGlzLl92Ym9PYmplY3QuYWN0aXZhdGUoT0ZFbnVtVkJPT2JqZWN0VHlwZS5WZXJ0ZXhCdWZmZXIpO1xyXG5cclxuICAgIC8vIEdldCBhIElCTyBmb3IgdGhpcyBvYmplY3RcclxuICAgIHRoaXMuX2lib09iamVjdCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlclxyXG4gICAgICAudmJvUG9vbGVyLmdldEF2YWlsYWJsZVZCTyhPRkVudW1WQk9PYmplY3RUeXBlLkluZGV4QnVmZmVyKTtcclxuICAgIHRoaXMuX2lib09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLkluZGV4QnVmZmVyKTtcclxuICB9XHJcblxyXG4gIHNldFdpcmVmcmFtZVZpc2liaWxpdHkgKGlzVmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgaWYgKGlzVmlzaWJsZSkge1xyXG4gICAgICB0aGlzLl9kcmF3aW5nQ291bnQgPSA4O1xyXG4gICAgICB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUgPSBfR0wuTElORVM7XHJcbiAgICAgIHRoaXMuX2luZGljZXMgPSBbMCwgMSwgMSwgMywgMywgMiwgMiwgMF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9kcmF3aW5nQ291bnQgPSA0O1xyXG4gICAgICB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUgPSBfR0wuVFJJQU5HTEVfU1RSSVA7XHJcbiAgICAgIHRoaXMuX2luZGljZXMgPSBbMCwgMSwgMiwgM107XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbmRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICB9XHJcblxyXG4gIGhpdFRlc3Qob3RoZXI6IE9GRHJhd2FibGUyRCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIE9GQ29sbGlzaW9uSGVscGVyLmhpdFRlc3RRdWFkKHRoaXMsIG90aGVyIGFzIE9GUHJpbWl0aXZlUXVhZCk7XHJcbiAgfVxyXG5cclxuICBoaXRUZXN0QnlQb2ludCh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIE9GQ29sbGlzaW9uSGVscGVyLmhpdFRlc3RCeVBvaW50UXVhZCh0aGlzLCB4LCB5KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX3NoYWRlci5pc1NoYWRlckFic3RyYWN0ICYmIHRoaXMuX2NvbG9yLmEgIT09IDApIHtcclxuICAgICAgaWYgKCF0aGlzLl90cmFuc2Zvcm1hdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5zZXRUcmFuc2xhdGUodGhpcy54ICsgdGhpcy5vZmZzZXRYLCB0aGlzLnkgKyB0aGlzLm9mZnNldFksIHRoaXMueik7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyLnJvdGF0aW9uWiA9IHRoaXMucm90YXRpb247XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyLnNldFNjYWxlKHRoaXMuc2NhbGVYLCB0aGlzLnNjYWxlWSwgMS4wKTtcclxuICAgICAgICAodGhpcy5fc2hhZGVyIGFzIE9GU2hhZGVyUHJpbWl0aXZlKS5jb2xvciA9IHRoaXMuX2NvbG9yO1xyXG5cclxuICAgICAgICB0aGlzLl9zaGFkZXIuZHJhdyhhcmdzLCB0aGlzLl92Ym9PYmplY3QudmJvLCB0aGlzLl9pYm9PYmplY3QudmJvLCB0aGlzLl90cmlhbmdsZVJlbmRlclR5cGUsXHJcbiAgICAgICAgICB0aGlzLl9kcmF3aW5nQ291bnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHRoaXMuX3Zib09iamVjdC52Ym8sIHRoaXMuX2lib09iamVjdC52Ym8sIHRoaXMuX3RyaWFuZ2xlUmVuZGVyVHlwZSxcclxuICAgICAgICAgIHRoaXMuX2RyYXdpbmdDb3VudCwgdGhpcy5fdHJhbnNmb3JtYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GSW1hZ2VDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vY29udGVudC9vZkltYWdlQ29udGVudCc7XHJcbmltcG9ydCB7IE9GUXVhZFRleHRDb29yZHMgfSBmcm9tICcuLi9kYXRhL29mUXVhZFRleHRDb29yZHMnO1xyXG5pbXBvcnQgeyBPRkRyYXdhYmxlMkQgfSBmcm9tICcuLi9vZkRyYXdhYmxlMkQnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcbmltcG9ydCB7IElPRlNSZWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZTUmVjdCc7XHJcbmltcG9ydCB7IE9GRW51bVZCT09iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkVudW1WQk9PYmplY3RUeXBlJztcclxuaW1wb3J0IHsgT0ZQcmltaXRpdmVRdWFkIH0gZnJvbSAnLi9vZlByaW1pdGl2ZVF1YWQnO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzJztcclxuaW1wb3J0IHsgT0ZTaGFkZXJUZXh0dXJlIH0gZnJvbSAnLi4vLi4vc2hhZGVyL29mU2hhZGVyVGV4dHVyZSc7XHJcbmltcG9ydCB7IE9GU3ByaXRlQmF0Y2hlciB9IGZyb20gJy4vb3B0aW1pemF0aW9uL29mU3ByaXRlQmF0Y2hlcic7XHJcbmltcG9ydCB7IE9GQ29sbGlzaW9uSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9vZkNvbGxpc2lvbkhlbHBlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZTcHJpdGUgZXh0ZW5kcyBPRkRyYXdhYmxlMkQge1xyXG5cclxuICBwcm90ZWN0ZWQgX2ltYWdlQ29udGVudDogT0ZJbWFnZUNvbnRlbnQ7XHJcbiAgcHJvdGVjdGVkIF9pbWFnZUhUTUw6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgcHJvdGVjdGVkIF9pbWFnZUdMVGV4dHVyZTogV2ViR0xUZXh0dXJlO1xyXG5cclxuICBwcm90ZWN0ZWQgX2ltYWdlUmVjdDogSU9GU1JlY3Q7XHJcbiAgcHJvdGVjdGVkIF9xdWFkVGV4dENvb3JkczogT0ZRdWFkVGV4dENvb3JkcztcclxuICBwcm90ZWN0ZWQgX2RlYnVnQ29sbGlzaW9uUXVhZDogT0ZQcmltaXRpdmVRdWFkO1xyXG4gIHByb3RlY3RlZCBfY29sbGlzaW9uUmVjdDogSU9GU1JlY3Q7XHJcblxyXG4gIGVuYWJsZWRTaGFkZXJQcm9wczogYm9vbGVhbjtcclxuXHJcbiAgZ2V0IHF1YWRUZXh0Q29vcmRzKCk6IE9GUXVhZFRleHRDb29yZHMgeyByZXR1cm4gdGhpcy5fcXVhZFRleHRDb29yZHM7IH1cclxuICBnZXQgY29sbGlzaW9uUmVjdCgpOiBJT0ZTUmVjdCB7IHJldHVybiB0aGlzLl9jb2xsaXNpb25SZWN0OyB9XHJcbiAgZ2V0IGRlYnVnQ29sbGlzaW9uUXVhZCgpOiBPRlByaW1pdGl2ZVF1YWQgeyByZXR1cm4gdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkOyB9XHJcblxyXG4gIGdldCBjb2xvcigpOiBPRkNvbG9yIHsgcmV0dXJuIHRoaXMuX2NvbG9yOyB9XHJcbiAgc2V0IGNvbG9yKHZhbDogT0ZDb2xvcikgeyB0aGlzLl9jb2xvciA9IHZhbDsgfVxyXG5cclxuICBnZXQgd2lkdGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2ltYWdlUmVjdC53aWR0aDsgfVxyXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2ltYWdlUmVjdC5oZWlnaHQ7IH1cclxuXHJcbiAgZ2V0IGltYWdlQ29udGVudCgpOiBPRkltYWdlQ29udGVudCB7IHJldHVybiB0aGlzLl9pbWFnZUNvbnRlbnQ7IH1cclxuICBzZXQgaW1hZ2VDb250ZW50KHZhbDogT0ZJbWFnZUNvbnRlbnQpIHtcclxuICAgIHRoaXMuX2ltYWdlQ29udGVudCA9IHZhbDtcclxuICAgIHRoaXMuX2ltYWdlSFRNTCA9IHRoaXMuX2ltYWdlQ29udGVudC5pbWFnZUhUTUw7XHJcbiAgICB0aGlzLl9pbWFnZUdMVGV4dHVyZSA9IHRoaXMuX2ltYWdlQ29udGVudC5pbWFnZVRleHR1cmU7XHJcblxyXG4gICAgdGhpcy51cGRhdGVHTEJ1ZmZlckRhdGEoKTtcclxuICB9XHJcblxyXG4gIHNldCBkZWJ1Z01vZGUodmFsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9kZWJ1Z01vZGUgPSB2YWw7XHJcblxyXG4gICAgaWYgKHRoaXMuX2RlYnVnTW9kZSAmJiAhdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkKSB7XHJcbiAgICAgIHRoaXMuX2RlYnVnQ29sbGlzaW9uUXVhZCA9IG5ldyBPRlByaW1pdGl2ZVF1YWQodGhpcy5fY29sbGlzaW9uUmVjdC54LCB0aGlzLl9jb2xsaXNpb25SZWN0LnksXHJcbiAgICAgICAgdGhpcy5fY29sbGlzaW9uUmVjdC53aWR0aCwgdGhpcy5fY29sbGlzaW9uUmVjdC5oZWlnaHQsIE9GQ29sb3Iud2hpdGUoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDApIHtcclxuICAgIHN1cGVyKHgsIHkpO1xyXG5cclxuICAgIHRoaXMuZW5hYmxlZFNoYWRlclByb3BzID0gdHJ1ZTtcclxuICAgIHRoaXMuX2ltYWdlUmVjdCA9IHsgeDogMCwgeTogMCwgd2lkdGg6IDAsIGhlaWdodDogMCwgb2Zmc2V0WDogMCwgb2Zmc2V0WTogMCB9IGFzIElPRlNSZWN0O1xyXG4gICAgdGhpcy5fc2hhZGVyID0gdGhpcy5fZ3JhcGhpY0RldmljZS5zaGFkZXJGYWN0b3J5LnJldHJpZXZlU2hhZGVyPE9GU2hhZGVyVGV4dHVyZT4oJ1NoYWRlclRleHR1cmUnKTtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgLy8gaWYgdGhlcmUncyBubyBzcHJpdGUgYmF0Y2ggYXZhaWxhYmxlIHRoZW4gaXMgbmVjY2VzYXJ5IHRvIHByb2Nlc3MgVkJPJ3NcclxuICAgIHRoaXMuY3JlYXRlVkJPcygpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNyZWF0ZVZCT3MoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaGFzU3ByaXRlQmF0Y2ggJiYgIXRoaXMuX3Zib09iamVjdCkge1xyXG4gICAgICAvLyBHZXQgYSBWQk8gZm9yIHRoaXMgb2JqZWN0XHJcbiAgICAgIHRoaXMuX3Zib09iamVjdCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlclxyXG4gICAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgICAgdGhpcy5fdmJvT2JqZWN0LmFjdGl2YXRlKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFNwcml0ZUJhdGNoKHNwcml0ZUJhdGNoOiBPRlNwcml0ZUJhdGNoZXIpOiB2b2lkIHtcclxuICAgIHN1cGVyLnNldFNwcml0ZUJhdGNoKHNwcml0ZUJhdGNoKTtcclxuICAgIHRoaXMuY3JlYXRlVkJPcygpO1xyXG4gIH1cclxuXHJcbiAgc2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWcgKGltYWdlUmVjdFg6IG51bWJlciwgaW1hZ2VSZWN0WTogbnVtYmVyLCBpbWFnZVJlY3RXaWR0aDogbnVtYmVyLCBpbWFnZVJlY3RIZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5faW1hZ2VSZWN0LnggPSBpbWFnZVJlY3RYO1xyXG4gICAgdGhpcy5faW1hZ2VSZWN0LnkgPSBpbWFnZVJlY3RZO1xyXG4gICAgdGhpcy5faW1hZ2VSZWN0LndpZHRoID0gaW1hZ2VSZWN0V2lkdGg7XHJcbiAgICB0aGlzLl9pbWFnZVJlY3QuaGVpZ2h0ID0gaW1hZ2VSZWN0SGVpZ2h0O1xyXG5cclxuICAgIGlmICh0aGlzLl9xdWFkVGV4dENvb3Jkcykge1xyXG4gICAgICAvLyBBZnRlciBmaW5pc2hlZCBsb2FkaW5nIGNyZWF0ZWQgdGhlIHZlcnRpY2VzXHJcbiAgICAgIGNvbnN0IGh3ID0gdGhpcy5faW1hZ2VSZWN0LndpZHRoICogMC41O1xyXG4gICAgICBjb25zdCBoaCA9IHRoaXMuX2ltYWdlUmVjdC5oZWlnaHQgKiAwLjU7XHJcbiAgICAgIGNvbnN0IGNsaXBXaWR0aCA9IHRoaXMuX2ltYWdlUmVjdC53aWR0aCAvIHRoaXMuX2ltYWdlSFRNTC53aWR0aDtcclxuICAgICAgY29uc3QgY2xpcEhlaWdodCA9IHRoaXMuX2ltYWdlUmVjdC5oZWlnaHQgLyB0aGlzLl9pbWFnZUhUTUwuaGVpZ2h0O1xyXG4gICAgICBjb25zdCBjbGlwWCA9IHRoaXMuX2ltYWdlUmVjdC54IC8gdGhpcy5faW1hZ2VIVE1MLndpZHRoO1xyXG4gICAgICBjb25zdCBjbGlwWSA9IHRoaXMuX2ltYWdlUmVjdC55IC8gdGhpcy5faW1hZ2VIVE1MLmhlaWdodDtcclxuXHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLndpZHRoID0gdGhpcy5faW1hZ2VSZWN0LndpZHRoO1xyXG4gICAgICB0aGlzLl9xdWFkVGV4dENvb3Jkcy5oZWlnaHQgPSB0aGlzLl9pbWFnZVJlY3QuaGVpZ2h0O1xyXG4gICAgICB0aGlzLl9xdWFkVGV4dENvb3Jkcy5sZWZ0ID0gY2xpcFg7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnJpZ2h0ID0gY2xpcFggKyBjbGlwV2lkdGg7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnVwID0gY2xpcFk7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLmRvd24gPSBjbGlwWSArIGNsaXBIZWlnaHQ7XHJcblxyXG4gICAgICAvLyBpZiB0aGVyZSdzIG5vIHNwcml0ZSBiYXRjaCBhdmFpbGFibGUgdGhlbiBpcyBuZWNjZXNhcnkgdG8gcHJvY2VzcyBWQk8nc1xyXG4gICAgICBpZiAoIXRoaXMuaGFzU3ByaXRlQmF0Y2gpIHtcclxuICAgICAgICAvLyBVcGRhdGUgY3VycmVudCB2ZXJ0ZXggYXJyYXkgdmVydGV4XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXNbMF0gPSBodzsgdGhpcy5fdmVydGljZXNbMV0gPSBoaDtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1s1XSA9IC1odzsgdGhpcy5fdmVydGljZXNbNl0gPSBoaDtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1sxMF0gPSBodzsgdGhpcy5fdmVydGljZXNbMTFdID0gLWhoO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzWzE1XSA9IC1odzsgdGhpcy5fdmVydGljZXNbMTZdID0gLWhoO1xyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IHZlcnRleCBhcnJheSB0ZXh0IGNvb3Jkc1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2VzWzNdID0gdGhpcy5fcXVhZFRleHRDb29yZHMucmlnaHQ7IHRoaXMuX3ZlcnRpY2VzWzRdID0gdGhpcy5fcXVhZFRleHRDb29yZHMuZG93bjtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1s4XSA9IHRoaXMuX3F1YWRUZXh0Q29vcmRzLmxlZnQ7IHRoaXMuX3ZlcnRpY2VzWzldID0gdGhpcy5fcXVhZFRleHRDb29yZHMuZG93bjtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNlc1sxM10gPSB0aGlzLl9xdWFkVGV4dENvb3Jkcy5yaWdodDsgdGhpcy5fdmVydGljZXNbMTRdID0gdGhpcy5fcXVhZFRleHRDb29yZHMudXA7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXNbMThdID0gdGhpcy5fcXVhZFRleHRDb29yZHMubGVmdDsgdGhpcy5fdmVydGljZXNbMTldID0gdGhpcy5fcXVhZFRleHRDb29yZHMudXA7XHJcblxyXG4gICAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGludGVybGVhdmVkIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgICAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgICAgICBfR0wuYmluZEJ1ZmZlcihfR0wuQVJSQVlfQlVGRkVSLCB0aGlzLl92Ym9PYmplY3QudmJvKTtcclxuICAgICAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ29sbGlzaW9uICh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9mZnNldFggPSAwLCBvZmZzZXRZID0gMCk6IElPRlNSZWN0IHtcclxuICAgIHRoaXMuX2NvbGxpc2lvblJlY3QgPSB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHdpZHRoLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIG9mZnNldFgsXHJcbiAgICAgIG9mZnNldFlcclxuICAgIH0gYXMgSU9GU1JlY3Q7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NvbGxpc2lvblJlY3Q7XHJcbiAgfVxyXG5cclxuICBoaXRUZXN0IChvdGhlcjogT0ZEcmF3YWJsZTJEKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBvdGhlclNwcml0ZSA9IG90aGVyIGFzIE9GU3ByaXRlO1xyXG5cclxuICAgIGlmICghb3RoZXJTcHJpdGUuY29sbGlzaW9uUmVjdCB8fCAhdGhpcy5jb2xsaXNpb25SZWN0KSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT0ZDb2xsaXNpb25IZWxwZXIuaGl0VGVzdFNwcml0ZSh0aGlzLCBvdGhlclNwcml0ZSk7XHJcbiAgfVxyXG5cclxuICBoaXRUZXN0QnlQb2ludCAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBPRkNvbGxpc2lvbkhlbHBlci5oaXRUZXN0QnlQb2ludFNwcml0ZSh0aGlzLCB4LCB5KTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCB1cGRhdGVHTEJ1ZmZlckRhdGEoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faW1hZ2VDb250ZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzID0gbmV3IE9GUXVhZFRleHRDb29yZHMoMCwgMSwgMCwgMSxcclxuICAgICAgICB0aGlzLl9pbWFnZUhUTUwud2lkdGggKiAwLjUsIHRoaXMuX2ltYWdlSFRNTC5oZWlnaHQgKiAwLjUpO1xyXG5cclxuICAgICAgLy8gaWYgdGhlcmUncyBubyBzcHJpdGUgYmF0Y2ggYXZhaWxhYmxlIHRoZW4gaXMgbmVjY2VzYXJ5IHRvIHByb2Nlc3MgVkJPJ3NcclxuICAgICAgaWYgKCF0aGlzLmhhc1Nwcml0ZUJhdGNoKSB7XHJcbiAgICAgICAgdGhpcy5fdmVydGljZXMgPSBbXHJcbiAgICAgICAgICB0aGlzLl9xdWFkVGV4dENvb3Jkcy53aWR0aCwgdGhpcy5fcXVhZFRleHRDb29yZHMuaGVpZ2h0LCAwLjAsIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnJpZ2h0LCB0aGlzLl9xdWFkVGV4dENvb3Jkcy5kb3duLFxyXG4gICAgICAgICAgLXRoaXMuX3F1YWRUZXh0Q29vcmRzLndpZHRoLCB0aGlzLl9xdWFkVGV4dENvb3Jkcy5oZWlnaHQsIDAuMCwgdGhpcy5fcXVhZFRleHRDb29yZHMubGVmdCwgdGhpcy5fcXVhZFRleHRDb29yZHMuZG93bixcclxuICAgICAgICAgIHRoaXMuX3F1YWRUZXh0Q29vcmRzLndpZHRoLCAtdGhpcy5fcXVhZFRleHRDb29yZHMuaGVpZ2h0LCAwLjAsIHRoaXMuX3F1YWRUZXh0Q29vcmRzLnJpZ2h0LCB0aGlzLl9xdWFkVGV4dENvb3Jkcy51cCxcclxuICAgICAgICAgIC10aGlzLl9xdWFkVGV4dENvb3Jkcy53aWR0aCwgLXRoaXMuX3F1YWRUZXh0Q29vcmRzLmhlaWdodCwgMC4wLCB0aGlzLl9xdWFkVGV4dENvb3Jkcy5sZWZ0LCB0aGlzLl9xdWFkVGV4dENvb3Jkcy51cFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGludGVybGVhdmVkIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgICAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgICAgICBfR0wuYmluZEJ1ZmZlcihfR0wuQVJSQVlfQlVGRkVSLCB0aGlzLl92Ym9PYmplY3QudmJvKTtcclxuICAgICAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgX0dMLlNUQVRJQ19EUkFXKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9pbWFnZUNvbnRlbnQgJiYgdGhpcy5faW1hZ2VDb250ZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGRhdGEgaWYgdGhlIHF1YWQgdGV4dCBjb29yZHMgYXJlIHN0aWxsIG51bGxcclxuICAgICAgaWYgKCF0aGlzLl9xdWFkVGV4dENvb3Jkcykge1xyXG4gICAgICAgIHRoaXMudXBkYXRlR0xCdWZmZXJEYXRhKCk7XHJcbiAgICAgICAgdGhpcy5zZXRBZHZhbmNlQW5pbWF0aW9uVGlsZUNvbmZpZyh0aGlzLl9pbWFnZVJlY3QueCwgdGhpcy5faW1hZ2VSZWN0LnksXHJcbiAgICAgICAgICB0aGlzLl9pbWFnZVJlY3Qud2lkdGgsIHRoaXMuX2ltYWdlUmVjdC5oZWlnaHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5oYXNTcHJpdGVCYXRjaCkge1xyXG4gICAgICAgIHRoaXMuX3Nwcml0ZUJhdGNoSW5zdGFuY2UuZHJhd0dyYXBoaWModGhpcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZFNoYWRlclByb3BzKSB7XHJcbiAgICAgICAgICB0aGlzLl9zaGFkZXIuc2V0Q29sb3JCeUluZGV4KDAsIHRoaXMuX2NvbG9yKTtcclxuICAgICAgICAgIHRoaXMuX3NoYWRlci5zZXRUZXh0dXJlQnlJbmRleCgwLCB0aGlzLl9pbWFnZUdMVGV4dHVyZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICh0aGlzLl9zaGFkZXIgYXMgT0ZTaGFkZXJUZXh0dXJlKS5jb2xvciA9IHRoaXMuX2NvbG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc2Zvcm1hdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5fc2hhZGVyLnNldFRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcclxuICAgICAgICAgIHRoaXMuX3NoYWRlci5yb3RhdGlvblogPSB0aGlzLnJvdGF0aW9uO1xyXG4gICAgICAgICAgdGhpcy5fc2hhZGVyLnNldFNjYWxlKHRoaXMuc2NhbGVYLCB0aGlzLnNjYWxlWSwgMS4wKTtcclxuICAgICAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHRoaXMuX2ltYWdlR0xUZXh0dXJlLCB0aGlzLl92Ym9PYmplY3QudmJvKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5fc2hhZGVyLmRyYXcoYXJncywgdGhpcy5fdmJvT2JqZWN0LnZibywgdGhpcy5fdHJhbnNmb3JtYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9kZWJ1Z0NvbGxpc2lvblF1YWQpIHtcclxuICAgICAgdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkLnggPSB0aGlzLng7XHJcbiAgICAgIHRoaXMuX2RlYnVnQ29sbGlzaW9uUXVhZC55ID0gdGhpcy55O1xyXG4gICAgICB0aGlzLl9kZWJ1Z0NvbGxpc2lvblF1YWQudXBkYXRlKGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Nwcml0ZUJhdGNoSW5zdGFuY2UgPSBudWxsO1xyXG4gICAgdGhpcy5fcXVhZFRleHRDb29yZHMgPSBudWxsO1xyXG4gICAgdGhpcy5faW1hZ2VDb250ZW50ID0gbnVsbDtcclxuICAgIHRoaXMuX2ltYWdlSFRNTCA9IG51bGw7XHJcbiAgICB0aGlzLl9pbWFnZUdMVGV4dHVyZSA9IG51bGw7XHJcbiAgICB0aGlzLl9pbWFnZVJlY3QgPSBudWxsO1xyXG5cclxuICAgIGlmICh0aGlzLl9kZWJ1Z0NvbGxpc2lvblF1YWQpIHtcclxuICAgICAgdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5fZGVidWdDb2xsaXNpb25RdWFkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQ29sb3IgfSBmcm9tICcuLi8uLi9vZkNvbG9yJztcclxuaW1wb3J0IHsgT0ZPcHRTcHJpdGVRdWFkU3RydWN0LCBPRk9wdFNwcml0ZVF1YWRVVlN0cnVjdCB9IGZyb20gJy4uLy4uL2RhdGEvb2ZTcHJpdGVRdWFkJztcclxuaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9vZkZyYW1ld29yayc7XHJcbmltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL2RldmljZS9vZkdyYXBoaWNEZXZpY2UnO1xyXG5pbXBvcnQgeyBPRkJhc2VTaGFkZXIgfSBmcm9tICcuLi8uLi8uLi9zaGFkZXIvb2ZCYXNlU2hhZGVyJztcclxuaW1wb3J0IHsgT0ZGcmFtZXdvcmtGYWN0b3J5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vb2ZGcmFtZXdvcmtGYWN0b3J5JztcclxuaW1wb3J0IHsgT0ZTaGFkZXJUZXh0dXJlIH0gZnJvbSAnLi4vLi4vLi4vc2hhZGVyL29mU2hhZGVyVGV4dHVyZSc7XHJcbmltcG9ydCB7IE9GSW1hZ2VDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vY29udGVudC9vZkltYWdlQ29udGVudCc7XHJcbmltcG9ydCB7IE9GRW51bVZCT09iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkVudW1WQk9PYmplY3RUeXBlJztcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJncyc7XHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xyXG5pbXBvcnQgeyBPRk9wdFNwcml0ZUJhdGNoZXJSZW5kZXJEYXRhIH0gZnJvbSAnLi4vLi4vZGF0YS9vZk9wdFNwcml0ZUJhdGNoZXJSZW5kZXJEYXRhJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPRk9wdFNwcml0ZUJhdGNoZXIge1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9ncmFwaGljRGV2aWNlOiBPRkdyYXBoaWNEZXZpY2U7XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9ncmFwaGljQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG5cclxuICBwcm90ZWN0ZWQgX3NoYWRlcjogT0ZCYXNlU2hhZGVyO1xyXG4gIHByb3RlY3RlZCBfc3ByaXRlUXVhZERhdGE6IEFycmF5PE9GT3B0U3ByaXRlUXVhZFN0cnVjdD47XHJcbiAgcHJvdGVjdGVkIF9zcHJpdGVCYXRjaFJlbmRlckRhdGE6IEFycmF5PE9GT3B0U3ByaXRlQmF0Y2hlclJlbmRlckRhdGE+O1xyXG4gIHByb3RlY3RlZCBfYWxyZWFkeVRyYW5zZm9ybWVkRm9yUmVuZGVyOiBib29sZWFuO1xyXG5cclxuICBjb2xvcjogT0ZDb2xvcjtcclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZSA9IE9GRnJhbWV3b3JrRmFjdG9yeS5jdXJyZW50RnJhbWV3b2subWFpbkdyYXBoaWNEZXZpY2U7XHJcbiAgICB0aGlzLl9ncmFwaGljQ29udGV4dCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICB0aGlzLl9mcmFtZXdvcmsgPSB0aGlzLl9ncmFwaGljRGV2aWNlLmZyYW1ld29yaztcclxuXHJcbiAgICB0aGlzLl9zaGFkZXIgPSB0aGlzLl9ncmFwaGljRGV2aWNlLnNoYWRlckZhY3RvcnkucmV0cmlldmVTaGFkZXI8T0ZTaGFkZXJUZXh0dXJlPignU2hhZGVyVGV4dHVyZScpO1xyXG4gICAgdGhpcy5jb2xvciA9IE9GQ29sb3Iud2hpdGUoKTtcclxuICAgIHRoaXMuX3Nwcml0ZVF1YWREYXRhID0gW107XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaFJlbmRlckRhdGEgPSBbXTtcclxuICAgIHRoaXMuX2FscmVhZHlUcmFuc2Zvcm1lZEZvclJlbmRlciA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgYmVnaW4oKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fc3ByaXRlQmF0Y2hSZW5kZXJEYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGhpcy5fc3ByaXRlQmF0Y2hSZW5kZXJEYXRhLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgeC52Ym9PYmplY3QuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIHguaWJvT2JqZWN0LmRlYWN0aXZhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc3ByaXRlUXVhZERhdGEgPSBbXTtcclxuICAgIHRoaXMuX3Nwcml0ZUJhdGNoUmVuZGVyRGF0YSA9IFtdO1xyXG4gICAgdGhpcy5fYWxyZWFkeVRyYW5zZm9ybWVkRm9yUmVuZGVyID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdXNoU3ByaXRlKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgdXZzOiBPRk9wdFNwcml0ZVF1YWRVVlN0cnVjdCwgaW1hZ2VDb250ZW50OiBPRkltYWdlQ29udGVudCwgc29ydElkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IHF1YWREYXRhID0ge1xyXG4gICAgICB4LFxyXG4gICAgICB5LFxyXG4gICAgICB3aWR0aCxcclxuICAgICAgaGVpZ2h0LFxyXG4gICAgICBpbWFnZUNvbnRlbnQsXHJcbiAgICAgIHV2MDBfeDogMCwgdXYwMF95OiAwLFxyXG4gICAgICB1djEwX3g6IDAsIHV2MTBfeTogMCxcclxuICAgICAgdXYxMV94OiAwLCB1djExX3k6IDAsXHJcbiAgICAgIHV2MDFfeDogMCwgdXYwMV95OiAwLFxyXG4gICAgICBzb3J0SWRcclxuICAgIH0gYXMgT0ZPcHRTcHJpdGVRdWFkU3RydWN0O1xyXG5cclxuICAgIGlmICghdXZzKSB7XHJcbiAgICAgIHF1YWREYXRhLnV2MDBfeCA9IDA7IHF1YWREYXRhLnV2MDBfeSA9IDA7XHJcbiAgICAgIHF1YWREYXRhLnV2MTBfeCA9IDA7IHF1YWREYXRhLnV2MTBfeSA9IDA7XHJcbiAgICAgIHF1YWREYXRhLnV2MTFfeCA9IDA7IHF1YWREYXRhLnV2MTFfeSA9IDA7XHJcbiAgICAgIHF1YWREYXRhLnV2MDFfeCA9IDA7IHF1YWREYXRhLnV2MDFfeSA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBxdWFkRGF0YS51djAwX3ggPSB1dnMudXYwMF94OyBxdWFkRGF0YS51djAwX3kgPSB1dnMudXYwMF95O1xyXG4gICAgICBxdWFkRGF0YS51djEwX3ggPSB1dnMudXYxMF94OyBxdWFkRGF0YS51djEwX3kgPSB1dnMudXYxMF95O1xyXG4gICAgICBxdWFkRGF0YS51djExX3ggPSB1dnMudXYxMV94OyBxdWFkRGF0YS51djExX3kgPSB1dnMudXYxMV95O1xyXG4gICAgICBxdWFkRGF0YS51djAxX3ggPSB1dnMudXYwMV94OyBxdWFkRGF0YS51djAxX3kgPSB1dnMudXYwMV95O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3Nwcml0ZVF1YWREYXRhLnB1c2gocXVhZERhdGEpO1xyXG4gIH1cclxuXHJcbiAgZW5kKCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl9hbHJlYWR5VHJhbnNmb3JtZWRGb3JSZW5kZXIpIHtcclxuICAgICAgdGhpcy5fYWxyZWFkeVRyYW5zZm9ybWVkRm9yUmVuZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9zcHJpdGVRdWFkRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgLy8gU29ydCBmaXJzdDogRG9lc24ndCBtYXR0ZXIgdGhlIG9yZGVyLCBvbmx5IHRoZSBncm91cGluZ1xyXG4gICAgICAgIHRoaXMuX3Nwcml0ZVF1YWREYXRhID0gdGhpcy5fc3ByaXRlUXVhZERhdGEuc29ydCgoYSwgYikgPT4gYS5zb3J0SWQubG9jYWxlQ29tcGFyZShiLnNvcnRJZCkpO1xyXG5cclxuICAgICAgICBjb25zdCBzb3J0SWQgPSB0aGlzLl9zcHJpdGVRdWFkRGF0YVswXS5zb3J0SWQ7XHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gW107XHJcbiAgICAgICAgbGV0IGluZGljZXMgPSBbXTtcclxuICAgICAgICBsZXQgaW1hZ2VDb250ZW50ID0gbnVsbDtcclxuICAgICAgICBsZXQgaW5kaWNlc0NvdW50ID0gMDtcclxuICAgICAgICBsZXQgdmVydGV4Q291bnQgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLl9zcHJpdGVRdWFkRGF0YS5mb3JFYWNoKHNxRGF0YSA9PiB7XHJcbiAgICAgICAgICBpZiAoc29ydElkICE9PSBzcURhdGEuc29ydElkKSB7XHJcbiAgICAgICAgICAgIC8vIFBoYXNlIDE6IEZsdXNoIGl0IVxyXG4gICAgICAgICAgICB0aGlzLmZsdXNoKGltYWdlQ29udGVudCwgdmVydGljZXMsIGluZGljZXMsIHZlcnRleENvdW50LCBpbmRpY2VzQ291bnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gUGhhc2UgMjogQ2xlYXIgYW5kIHN0YXJ0IGFnYWluXHJcbiAgICAgICAgICAgIHZlcnRpY2VzID0gW107XHJcbiAgICAgICAgICAgIGluZGljZXMgPSBbXTtcclxuICAgICAgICAgICAgdmVydGV4Q291bnQgPSAwO1xyXG4gICAgICAgICAgICBpbmRpY2VzQ291bnQgPSAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHZ4ID0gc3FEYXRhLng7XHJcbiAgICAgICAgICBjb25zdCB2eSA9IHNxRGF0YS55O1xyXG4gICAgICAgICAgY29uc3QgdncgPSBzcURhdGEud2lkdGg7XHJcbiAgICAgICAgICBjb25zdCB2aCA9IHNxRGF0YS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgaW1hZ2VDb250ZW50ID0gc3FEYXRhLmltYWdlQ29udGVudDtcclxuXHJcbiAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKFxyXG4gICAgICAgICAgICB2eCArIDAsIHZ5ICsgMCwgMC4wLCAgICBzcURhdGEudXYwMF94LCBzcURhdGEudXYwMF95LFxyXG4gICAgICAgICAgICB2eCArIHZ3LCB2eSArIDAsIDAuMCwgICBzcURhdGEudXYxMF94LCBzcURhdGEudXYxMF95LFxyXG4gICAgICAgICAgICB2eCArIHZ3LCB2eSArIHZoLCAwLjAsICBzcURhdGEudXYxMV94LCBzcURhdGEudXYxMV95LFxyXG4gICAgICAgICAgICB2eCArIDAsIHZ5ICsgdmgsIDAuMCwgICBzcURhdGEudXYwMV94LCBzcURhdGEudXYwMV95XHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGluZGljZXMucHVzaChcclxuICAgICAgICAgICAgdmVydGV4Q291bnQgKyAwLCB2ZXJ0ZXhDb3VudCArIDEsIHZlcnRleENvdW50ICsgMixcclxuICAgICAgICAgICAgdmVydGV4Q291bnQgKyAyLCB2ZXJ0ZXhDb3VudCArIDMsIHZlcnRleENvdW50ICsgMFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICB2ZXJ0ZXhDb3VudCArPSA0O1xyXG4gICAgICAgICAgaW5kaWNlc0NvdW50ICs9IDY7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIExhc3QgZmx1c2hcclxuICAgICAgICBpZiAodmVydGV4Q291bnQgPiAwICYmIGluZGljZXNDb3VudCA+IDApIHtcclxuICAgICAgICAgIHRoaXMuZmx1c2goaW1hZ2VDb250ZW50LCB2ZXJ0aWNlcywgaW5kaWNlcywgdmVydGV4Q291bnQsIGluZGljZXNDb3VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9zcHJpdGVRdWFkRGF0YSA9IFtdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmbHVzaCAoaW1hZ2VDb250ZW50OiBPRkltYWdlQ29udGVudCwgdmVydGljZXM6IEFycmF5PG51bWJlcj4sIGluZGljZXM6IEFycmF5PG51bWJlcj4sIFxyXG4gICAgdmVydGV4Q291bnQ6IG51bWJlciwgaW5kaWNlc0NvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIGxldCBhcnJheUJ1ZmZlckdQVVZlcnRleCA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMpO1xyXG4gICAgbGV0IGFycmF5QnVmZmVyR1BVSW5kZXggPSBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyk7XHJcblxyXG4gICAgLy8gR2V0IGEgVkJPIGZvciB0aGlzIG9iamVjdFxyXG4gICAgY29uc3QgdmJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyLnZib1Bvb2xlclxyXG4gICAgICAuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIHZib09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcik7XHJcbiAgICAvLyBHZXQgYSBJQk8gZm9yIHRoaXMgb2JqZWN0XHJcbiAgICBjb25zdCBpYm9PYmplY3QgPSB0aGlzLl9ncmFwaGljRGV2aWNlLmRldmljZU9wdGltaXphdGlvbk1hbmFnZXIudmJvUG9vbGVyXHJcbiAgICAgIC5nZXRBdmFpbGFibGVWQk8oT0ZFbnVtVkJPT2JqZWN0VHlwZS5JbmRleEJ1ZmZlcik7XHJcbiAgICBpYm9PYmplY3QuYWN0aXZhdGUoT0ZFbnVtVkJPT2JqZWN0VHlwZS5JbmRleEJ1ZmZlcik7XHJcblxyXG4gICAgLy8gTm93IHdlIHNldCB0aGUgdmVydGljZXMgaW50ZXJsZWF2ZWQgYXJyYXkgdG8gdGhlIFZlcnRleEJ1ZmZlclxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdmJvT2JqZWN0LnZibyk7XHJcbiAgICBfR0wuYnVmZmVyRGF0YShfR0wuQVJSQVlfQlVGRkVSLCBhcnJheUJ1ZmZlckdQVVZlcnRleCwgX0dMLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAvLyBOb3cgd2Ugc2V0IHRoZSBpbmRpY2VzIGFycmF5IHRvIHRoZSBJbmRleEJ1ZmZlclxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpYm9PYmplY3QudmJvKTtcclxuICAgIF9HTC5idWZmZXJEYXRhKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYXJyYXlCdWZmZXJHUFVJbmRleCwgX0dMLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAvLyBDbGVhciBpdFxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICBfR0wuYmluZEJ1ZmZlcihfR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG5cclxuICAgIGFycmF5QnVmZmVyR1BVVmVydGV4ID0gbnVsbDtcclxuICAgIGFycmF5QnVmZmVyR1BVSW5kZXggPSBudWxsO1xyXG5cclxuICAgIC8vIE5vdyBzdG9yZSBpdCBhcyBhIGJhdGNoIHJlbmRlciBkYXRhXHJcbiAgICBjb25zdCByZW5kZXJEYXRhID0ge30gYXMgT0ZPcHRTcHJpdGVCYXRjaGVyUmVuZGVyRGF0YTtcclxuICAgIHJlbmRlckRhdGEudmJvT2JqZWN0ID0gdmJvT2JqZWN0O1xyXG4gICAgcmVuZGVyRGF0YS5pYm9PYmplY3QgPSBpYm9PYmplY3Q7XHJcbiAgICByZW5kZXJEYXRhLnZlcnRleENvdW50ID0gdmVydGV4Q291bnQ7XHJcbiAgICByZW5kZXJEYXRhLmluZGljZXNDb3VudCA9IGluZGljZXNDb3VudDtcclxuICAgIHJlbmRlckRhdGEuaW1hZ2VUZXh0dXJlID0gaW1hZ2VDb250ZW50LmltYWdlVGV4dHVyZTtcclxuXHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaFJlbmRlckRhdGEucHVzaChyZW5kZXJEYXRhKTtcclxuICB9XHJcblxyXG4gIGRyYXcgKGFyZ3M6IElPRlJlbmRlckFyZ3MsIHRyYW5zZm9ybWF0aW9uTWF0cml4OiBtYXQ0KTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHJlbmRlckRhdGEgb2YgdGhpcy5fc3ByaXRlQmF0Y2hSZW5kZXJEYXRhKSB7XHJcbiAgICAgIGlmICghdHJhbnNmb3JtYXRpb25NYXRyaXgpIHtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuc2V0VHJhbnNsYXRlKDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuX3NoYWRlci5zZXRSb3RhdGlvbigwLCAwLCAwKTtcclxuICAgICAgICB0aGlzLl9zaGFkZXIuc2V0U2NhbGUoMSwgMSwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3NoYWRlci5zZXRDb2xvckJ5SW5kZXgoMCwgdGhpcy5jb2xvcik7XHJcbiAgICAgIHRoaXMuX3NoYWRlci5zZXRUZXh0dXJlQnlJbmRleCgwLCByZW5kZXJEYXRhLmltYWdlVGV4dHVyZSk7XHJcbiAgICAgIHRoaXMuX3NoYWRlci5kcmF3KGFyZ3MsIHJlbmRlckRhdGEudmJvT2JqZWN0LnZibywgdHJhbnNmb3JtYXRpb25NYXRyaXgsXHJcbiAgICAgICAgX0dMLlRSSUFOR0xFUywgcmVuZGVyRGF0YS5pYm9PYmplY3QudmJvLCByZW5kZXJEYXRhLmluZGljZXNDb3VudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgKHRoaXMgYXMgYW55KVsnX2ZyYW1ld29yayddID0gbnVsbDtcclxuICAgICh0aGlzIGFzIGFueSlbJ19ncmFwaGljRGV2aWNlJ10gPSBudWxsO1xyXG4gICAgKHRoaXMgYXMgYW55KVsnX2dyYXBoaWNDb250ZXh0J10gPSBudWxsO1xyXG5cclxuICAgIHRoaXMuY29sb3IgPSBudWxsO1xyXG4gICAgdGhpcy5fc3ByaXRlUXVhZERhdGEgPSBudWxsO1xyXG4gICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaFJlbmRlckRhdGE/LmZvckVhY2goeCA9PiB7XHJcbiAgICAgIHgudmJvT2JqZWN0Py5kZWFjdGl2YXRlKCk7XHJcbiAgICAgIHguaWJvT2JqZWN0Py5kZWFjdGl2YXRlKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3Nwcml0ZUJhdGNoUmVuZGVyRGF0YSA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQ29sb3IgfSBmcm9tICcuLi8uLi9vZkNvbG9yJztcclxuaW1wb3J0IHsgT0ZHcmFwaGljRGV2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZGV2aWNlL29mR3JhcGhpY0RldmljZSc7XHJcbmltcG9ydCB7IE9GSW1hZ2VDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vY29udGVudC9vZkltYWdlQ29udGVudCc7XHJcbmltcG9ydCB7IE9GQmFzZVNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3NoYWRlci9vZkJhc2VTaGFkZXInO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29ya0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9vZkZyYW1ld29ya0ZhY3RvcnknO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NldHRpbmdzL29mVHJhbnNsYXRpb25zJztcclxuaW1wb3J0IHsgT0ZFbnVtVkJPT2JqZWN0VHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2RldmljZS9vcHRpbWl6YXRpb24vZ3B1L29mRW51bVZCT09iamVjdFR5cGUnO1xyXG5pbXBvcnQgeyBPRlZCT09iamVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL2RldmljZS9vcHRpbWl6YXRpb24vZ3B1L29mVkJPT2JqZWN0JztcclxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcbmltcG9ydCB7IE9GRW51bVNoYWRlckRhdGFUeXBlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2Nyb3NzLWN1dHRpbmcvc2hhZGVyLWFuYWxpemVyL29mRW51bVNoYWRlckRhdGFUeXBlcyc7XHJcbmltcG9ydCB7IElEaWN0aW9uYXJ5IH0gZnJvbSAnc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPRklQb2x5Z29uQmF0Y2hlclVuaWZvcm1EYXRhIHtcclxuICBpbmRleDogbnVtYmVyO1xyXG4gIHR5cGU6IE9GRW51bVNoYWRlckRhdGFUeXBlcztcclxuICB2YWx1ZTogT0ZDb2xvciB8IFdlYkdMVGV4dHVyZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9GUG9seWdvbkJhdGNoZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9WRVJUSUNFUyA9IDEwOTIwO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENVUlJFTlRfREVGQVVMVF9TSEFERVIgPSAnU3BpbmVTaGFkZXJUZXh0dXJlJztcclxuXHJcbiAgcHJpdmF0ZSBfdmVydGV4Q291bnQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9pbmRleENvdW50OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfaW1hZ2VDb250ZW50OiBPRkltYWdlQ29udGVudDtcclxuICBwcml2YXRlIF9ncmFwaGljRGV2aWNlOiBPRkdyYXBoaWNEZXZpY2U7XHJcbiAgcHJpdmF0ZSBfR0w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgcHJpdmF0ZSBfYXJyYXlCdWZmZXJHUFVWZXJ0ZXg6IEZsb2F0MzJBcnJheTtcclxuICBwcml2YXRlIF9hcnJheUJ1ZmZlckdQVUluZGV4OiBVaW50MTZBcnJheTtcclxuXHJcbiAgcHJpdmF0ZSBfc2hhZGVyOiBPRkJhc2VTaGFkZXI7XHJcblxyXG4gIC8vIEdldCBhIFZCTyBmb3IgdGhpcyBvYmplY3RcclxuICBwcml2YXRlIF92Qk9PYmplY3Q6IE9GVkJPT2JqZWN0O1xyXG4gIC8vIEdldCBhIElCTyBmb3IgdGhpcyBvYmplY3RcclxuICBwcml2YXRlIF9pQk9PYmplY3Q6IE9GVkJPT2JqZWN0O1xyXG5cclxuICBwcml2YXRlIF92ZXJ0aWNlczogQXJyYXk8eyBhcnJheTogQXJyYXk8bnVtYmVyPjsgY291bnQ6IG51bWJlciB9PjtcclxuICBwcml2YXRlIF9pbmRpY2VzOiBBcnJheTxudW1iZXI+O1xyXG5cclxuICBzZXQgaW1hZ2VDb250ZW50KHZhbDogT0ZJbWFnZUNvbnRlbnQpIHtcclxuICAgIHRoaXMuX2ltYWdlQ29udGVudCA9IHZhbDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fdmVydGV4Q291bnQgPSAwO1xyXG4gICAgdGhpcy5faW5kZXhDb3VudCA9IDA7XHJcbiAgICB0aGlzLl9pbWFnZUNvbnRlbnQgPSBudWxsO1xyXG4gICAgdGhpcy5fdmVydGljZXMgPSBbXTtcclxuICAgIHRoaXMuX2luZGljZXMgPSBbXTtcclxuXHJcbiAgICB0aGlzLl9ncmFwaGljRGV2aWNlID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmN1cnJlbnRGcmFtZXdvay5tYWluR3JhcGhpY0RldmljZTtcclxuICAgIHRoaXMuX3NoYWRlciA9IHRoaXMuX2dyYXBoaWNEZXZpY2Uuc2hhZGVyRmFjdG9yeS5yZXRyaWV2ZVNoYWRlcihPRlBvbHlnb25CYXRjaGVyLkNVUlJFTlRfREVGQVVMVF9TSEFERVIpO1xyXG4gICAgdGhpcy5fR0wgPSB0aGlzLl9ncmFwaGljRGV2aWNlLmdyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIC8vIEdldCBhIFZCTyBmb3IgdGhpcyBvYmplY3RcclxuICAgIHRoaXMuX3ZCT09iamVjdCA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlci52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIHRoaXMuX3ZCT09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLlZlcnRleEJ1ZmZlcik7XHJcbiAgICAvLyBHZXQgYSBJQk8gZm9yIHRoaXMgb2JqZWN0XHJcbiAgICB0aGlzLl9pQk9PYmplY3QgPSB0aGlzLl9ncmFwaGljRGV2aWNlLmRldmljZU9wdGltaXphdGlvbk1hbmFnZXIudmJvUG9vbGVyLmdldEF2YWlsYWJsZVZCTyhPRkVudW1WQk9PYmplY3RUeXBlLkluZGV4QnVmZmVyKTtcclxuICAgIHRoaXMuX2lCT09iamVjdC5hY3RpdmF0ZShPRkVudW1WQk9PYmplY3RUeXBlLkluZGV4QnVmZmVyKTtcclxuICB9XHJcblxyXG4gIGNoYW5nZVNoYWRlcihuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHNoYWRlciA9IHRoaXMuX2dyYXBoaWNEZXZpY2Uuc2hhZGVyRmFjdG9yeS5yZXRyaWV2ZVNoYWRlcihuYW1lKTtcclxuXHJcbiAgICAgIGlmIChzaGFkZXIpIHtcclxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9zaGFkZXIgPSBzaGFkZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyID0gdGhpcy5fZ3JhcGhpY0RldmljZS5zaGFkZXJGYWN0b3J5LnJldHJpZXZlU2hhZGVyKE9GUG9seWdvbkJhdGNoZXIuQ1VSUkVOVF9ERUZBVUxUX1NIQURFUik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWNoYW5nZWQpIHtcclxuICAgICAgT0ZDb25zb2xlLndhcm4oT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLkdyYXBoaWNzT3B0aW1pemF0aW9uLlBvbHlnb25CYXRjaGVyLmNoYW5nZVNoYWRlciwgbmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGFkZXIoc2hhZGVyOiBPRkJhc2VTaGFkZXIpOiB2b2lkIHtcclxuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNoYWRlciAmJiB0aGlzLl9zaGFkZXIgJiYgdGhpcy5fc2hhZGVyLm5hbWUgIT09IHNoYWRlci5uYW1lKSB7XHJcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLl9zaGFkZXIgPSBzaGFkZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXNoYWRlcikge1xyXG4gICAgICAgIHRoaXMuX3NoYWRlciA9IHRoaXMuX2dyYXBoaWNEZXZpY2Uuc2hhZGVyRmFjdG9yeS5yZXRyaWV2ZVNoYWRlcihPRlBvbHlnb25CYXRjaGVyLkNVUlJFTlRfREVGQVVMVF9TSEFERVIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjaGFuZ2VkKSB7XHJcbiAgICAgIE9GQ29uc29sZS53YXJuKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5HcmFwaGljc09wdGltaXphdGlvbi5Qb2x5Z29uQmF0Y2hlci5jaGFuZ2VTaGFkZXIsIHRoaXMuX3NoYWRlci5uYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGJlZ2luRHJhdygpOiB2b2lkIHtcclxuICAgIHRoaXMuX3ZlcnRpY2VzID0gW107XHJcbiAgICB0aGlzLl9pbmRpY2VzID0gW107XHJcbiAgICB0aGlzLl92ZXJ0ZXhDb3VudCA9IDA7XHJcbiAgICB0aGlzLl9pbmRleENvdW50ID0gMDtcclxuICB9XHJcblxyXG4gIHB1c2hQb2x5Z29uKHZlcnRpY2VzOiBBcnJheTxudW1iZXI+LCBpbmRpY2VzOiBBcnJheTxudW1iZXI+KTogdm9pZCB7XHJcbiAgICBpZiAoIXZlcnRpY2VzIHx8ICFpbmRpY2VzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IFNob3VsZCBncm91cCB0aGVtIGluIGRyYXdHcm91cHMsIGFuZCBpbiB0aGUgZW5kIGRyYXcgZXZlcnl0aGluZ1xyXG5cclxuICAgIGNvbnN0IGluZGV4U3RhcnQgPSB0aGlzLl92ZXJ0ZXhDb3VudCAvIDg7XHJcblxyXG4gICAgZm9yIChjb25zdCBpbmRleCBvZiB0aGlzLl9pbmRpY2VzKSB7XHJcbiAgICAgIHRoaXMuX2luZGljZXMucHVzaChpbmRleCArIGluZGV4U3RhcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3ZlcnRpY2VzLnB1c2goeyBhcnJheTogdmVydGljZXMsIGNvdW50OiB0aGlzLl92ZXJ0ZXhDb3VudCB9KTtcclxuXHJcbiAgICB0aGlzLl9pbmRleENvdW50ICs9IGluZGljZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5fdmVydGV4Q291bnQgKz0gdmVydGljZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIGlmICh0ZXh0dXJlICE9IHRoaXMubGFzdFRleHR1cmUpIHtcclxuICAgIC8vIHRoaXMuZmx1c2goKTtcclxuICAgIC8vIHRoaXMubGFzdFRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gICAgLy8gdGV4dHVyZS5iaW5kKCk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBlbHNlIGlmICh0aGlzLnZlcnRpY2VzTGVuZ3RoICsgdmVydGljZXMubGVuZ3RoID4gdGhpcy5tZXNoLmdldFZlcnRpY2VzKCkubGVuZ3RoIHx8XHJcbiAgICAvLyAgICB0aGlzLmluZGljZXNMZW5ndGggKyBpbmRpY2VzLmxlbmd0aCA+IHRoaXMubWVzaC5nZXRJbmRpY2VzKCkubGVuZ3RoKSB7XHJcblxyXG4gICAgLy8gdGhpcy5mbHVzaCgpO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgZW5kRHJhdygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl92ZXJ0ZXhDb3VudCAhPT0gMCkge1xyXG4gICAgICBpZiAodGhpcy5fYXJyYXlCdWZmZXJHUFVWZXJ0ZXgpIHt0aGlzLl9hcnJheUJ1ZmZlckdQVVZlcnRleCA9IG51bGw7IH1cclxuICAgICAgaWYgKHRoaXMuX2FycmF5QnVmZmVyR1BVSW5kZXgpIHsgdGhpcy5fYXJyYXlCdWZmZXJHUFVJbmRleCA9IG51bGw7IH1cclxuXHJcbiAgICAgIHRoaXMuX2FycmF5QnVmZmVyR1BVVmVydGV4ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLl92ZXJ0ZXhDb3VudCk7XHJcbiAgICAgIHRoaXMuX2FycmF5QnVmZmVyR1BVSW5kZXggPSBuZXcgVWludDE2QXJyYXkodGhpcy5faW5kaWNlcyk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoQXJyYXkgPSB0aGlzLl92ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsZW5ndGhBcnJheTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5fdmVydGljZXNbaV07XHJcbiAgICAgICAgdGhpcy5fYXJyYXlCdWZmZXJHUFVWZXJ0ZXguc2V0KG9iai5hcnJheSwgb2JqLmNvdW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTm93IHdlIHNldCB0aGUgdmVydGljZXMgaW50ZXJsZWF2ZWQgYXJyYXkgdG8gdGhlIFZlcnRleEJ1ZmZlclxyXG4gICAgICB0aGlzLl9HTC5iaW5kQnVmZmVyKHRoaXMuX0dMLkFSUkFZX0JVRkZFUiwgdGhpcy5fdkJPT2JqZWN0LnZibyk7XHJcbiAgICAgIHRoaXMuX0dMLmJ1ZmZlckRhdGEodGhpcy5fR0wuQVJSQVlfQlVGRkVSLCB0aGlzLl9hcnJheUJ1ZmZlckdQVVZlcnRleCwgdGhpcy5fR0wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgLy8gTm93IHdlIHNldCB0aGUgaW5kaWNlcyBhcnJheSB0byB0aGUgSW5kZXhCdWZmZXJcclxuICAgICAgdGhpcy5fR0wuYmluZEJ1ZmZlcih0aGlzLl9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faUJPT2JqZWN0LnZibyk7XHJcbiAgICAgIHRoaXMuX0dMLmJ1ZmZlckRhdGEodGhpcy5fR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2FycmF5QnVmZmVyR1BVSW5kZXgsIHRoaXMuX0dMLlNUQVRJQ19EUkFXKTtcclxuXHJcbiAgICAgIHRoaXMuX0dMLmJpbmRCdWZmZXIodGhpcy5fR0wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgdGhpcy5fR0wuYmluZEJ1ZmZlcih0aGlzLl9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3KGFyZ3M6IElPRlJlbmRlckFyZ3MsIHRyYW5zZm9ybWF0aW9uTWF0cml4PzogbWF0NCwgcmVuZGVyTW9kZT86IG51bWJlciwgdW5pZm9ybURhdGE/OiBJRGljdGlvbmFyeTxPRklQb2x5Z29uQmF0Y2hlclVuaWZvcm1EYXRhPik6IHZvaWQge1xyXG4gICAgY29uc3QgX3JlbmRlck1vZGUgPSAhcmVuZGVyTW9kZSA/IHRoaXMuX0dMLlRSSUFOR0xFUyA6IHJlbmRlck1vZGU7XHJcblxyXG4gICAgaWYgKCF0cmFuc2Zvcm1hdGlvbk1hdHJpeCkge1xyXG4gICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzIGluIGEgc2luZ2xlIGlkZW50aXR5IGZ1bmN0aW9uXHJcbiAgICAgIHRoaXMuX3NoYWRlci5zZXRUcmFuc2xhdGUoMCwgMCwgMCk7XHJcbiAgICAgIHRoaXMuX3NoYWRlci5zZXRSb3RhdGlvbigwLCAwLCAwKTtcclxuICAgICAgdGhpcy5fc2hhZGVyLnNldFNjYWxlKDEsIDEsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh1bmlmb3JtRGF0YSkge1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh1bmlmb3JtRGF0YSkpIHtcclxuICAgICAgICBjb25zdCB1RGF0YSA9IHVuaWZvcm1EYXRhW2tleV07XHJcblxyXG4gICAgICAgIHN3aXRjaCAodURhdGEudHlwZSkge1xyXG4gICAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuSUNvbG9yOlxyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXIuc2V0Q29sb3JCeUluZGV4KHVEYXRhLmluZGV4LCB1RGF0YS52YWx1ZSBhcyBPRkNvbG9yKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5JVGV4dHVyZTpcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyLnNldFRleHR1cmVCeUluZGV4KHVEYXRhLmluZGV4LCB1RGF0YS52YWx1ZSBhcyBXZWJHTFRleHR1cmUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5faW1hZ2VDb250ZW50KSB7XHJcbiAgICAgIHRoaXMuX3NoYWRlci5zZXRUZXh0dXJlQnlJbmRleCgwLCB0aGlzLl9pbWFnZUNvbnRlbnQuaW1hZ2VUZXh0dXJlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zaGFkZXIuZHJhdyhhcmdzLCB0aGlzLl92Qk9PYmplY3QudmJvLCB0cmFuc2Zvcm1hdGlvbk1hdHJpeCwgX3JlbmRlck1vZGUsIHRoaXMuX2lCT09iamVjdC52Ym8sIHRoaXMuX2luZGV4Q291bnQpO1xyXG5cclxuICAgIHRoaXMuX0dMLmJpbmRCdWZmZXIodGhpcy5fR0wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgIHRoaXMuX0dMLmJpbmRCdWZmZXIodGhpcy5fR0wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX0dMID0gbnVsbDtcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UgPSBudWxsO1xyXG4gICAgdGhpcy5faW1hZ2VDb250ZW50ID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLl9hcnJheUJ1ZmZlckdQVVZlcnRleCA9IG51bGw7XHJcbiAgICB0aGlzLl9hcnJheUJ1ZmZlckdQVUluZGV4ID0gbnVsbDtcclxuICAgIHRoaXMuX3ZlcnRpY2VzID0gbnVsbDtcclxuICAgIHRoaXMuX2luZGljZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcclxuXHJcbiAgICBpZiAodGhpcy5fdkJPT2JqZWN0KSB7XHJcbiAgICAgIHRoaXMuX3ZCT09iamVjdC5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5faUJPT2JqZWN0KSB7XHJcbiAgICAgIHRoaXMuX2lCT09iamVjdC5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fdkJPT2JqZWN0ID0gbnVsbDtcclxuICAgIHRoaXMuX2lCT09iamVjdCA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL29mRnJhbWV3b3JrJztcclxuaW1wb3J0IHsgT0ZGcmFtZXdvcmtGYWN0b3J5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vb2ZGcmFtZXdvcmtGYWN0b3J5JztcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZW50L29mSW1hZ2VDb250ZW50JztcclxuaW1wb3J0IHsgT0ZHcmFwaGljRGV2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZGV2aWNlL29mR3JhcGhpY0RldmljZSc7XHJcbmltcG9ydCB7IE9GRW51bVZCT09iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkVudW1WQk9PYmplY3RUeXBlJztcclxuaW1wb3J0IHsgT0ZWQk9PYmplY3QgfSBmcm9tICcuLi8uLi8uLi8uLi9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZlZCT09iamVjdCc7XHJcbmltcG9ydCB7IE9GQmFzZVNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3NoYWRlci9vZkJhc2VTaGFkZXInO1xyXG5pbXBvcnQgeyBPRlNoYWRlclRleHR1cmUgfSBmcm9tICcuLi8uLi8uLi9zaGFkZXIvb2ZTaGFkZXJUZXh0dXJlJztcclxuaW1wb3J0IHsgT0ZTcHJpdGUgfSBmcm9tICcuLi9vZlNwcml0ZSc7XHJcblxyXG5jbGFzcyBPRlNCQmF0Y2hHcm91cCB7XHJcbiAgdmJvT2JqZWN0OiBPRlZCT09iamVjdDtcclxuICBpYm9PYmplY3Q6IE9GVkJPT2JqZWN0O1xyXG4gIHZlcnRpY2VzOiBudW1iZXJbXTtcclxuICBpbmRpY2VzOiBudW1iZXJbXTtcclxuICB2ZXJ0ZXhDb3VudDogbnVtYmVyO1xyXG4gIGluZGV4Q291bnQ6IG51bWJlcjtcclxuICBlbmFibGVkOiBib29sZWFuO1xyXG4gIGlzV2FpdGluZ0ZvckRlbGV0ZTogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZWFkb25seSBpbmRleDogbnVtYmVyLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZ3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc1dhaXRpbmdGb3JEZWxldGUgPSBmYWxzZTtcclxuICAgIHRoaXMudmVydGV4Q291bnQgPSAwO1xyXG4gICAgdGhpcy5pbmRleENvdW50ID0gMDtcclxuICAgIHRoaXMudmVydGljZXMgPSBbXTtcclxuICAgIHRoaXMuaW5kaWNlcyA9IFtdO1xyXG5cclxuICAgIC8vIEdldCBhIFZCTyBmb3IgdGhpcyBvYmplY3RcclxuICAgIHRoaXMudmJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIHRoaXMudmJvT2JqZWN0LmFjdGl2YXRlKE9GRW51bVZCT09iamVjdFR5cGUuVmVydGV4QnVmZmVyKTtcclxuICAgIC8vIEdldCBhIElCTyBmb3IgdGhpcyBvYmplY3RcclxuICAgIHRoaXMuaWJvT2JqZWN0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyXHJcbiAgICAgIC52Ym9Qb29sZXIuZ2V0QXZhaWxhYmxlVkJPKE9GRW51bVZCT09iamVjdFR5cGUuSW5kZXhCdWZmZXIpO1xyXG4gICAgdGhpcy5pYm9PYmplY3QuYWN0aXZhdGUoT0ZFbnVtVkJPT2JqZWN0VHlwZS5JbmRleEJ1ZmZlcik7XHJcbiAgfVxyXG5cclxuICByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy52ZXJ0ZXhDb3VudCA9IDA7XHJcbiAgICB0aGlzLmluZGV4Q291bnQgPSAwO1xyXG4gICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgdGhpcy5pbmRpY2VzID0gW107XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc1dhaXRpbmdGb3JEZWxldGUgPSB0cnVlO1xyXG4gICAgdGhpcy52Ym9PYmplY3Q/LmRlYWN0aXZhdGUoKTtcclxuICAgIHRoaXMuaWJvT2JqZWN0Py5kZWFjdGl2YXRlKCk7XHJcbiAgICB0aGlzLnZib09iamVjdCA9IG51bGw7XHJcbiAgICB0aGlzLmlib09iamVjdCA9IG51bGw7XHJcbiAgICB0aGlzLnZlcnRpY2VzID0gbnVsbDtcclxuICAgIHRoaXMuaW5kaWNlcyA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZTcHJpdGVCYXRjaGVyIHtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX1ZFUlRJQ0VTID0gMjA5MjA7XHJcblxyXG4gIHByb3RlY3RlZCByZWFkb25seSBfZnJhbWV3b3JrOiBPRkZyYW1ld29yaztcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2dyYXBoaWNEZXZpY2U6IE9GR3JhcGhpY0RldmljZTtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2dyYXBoaWNDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcblxyXG4gIHByb3RlY3RlZCBfYmF0Y2hHcm91cHM6IEFycmF5PE9GU0JCYXRjaEdyb3VwPjtcclxuICBwcm90ZWN0ZWQgX2N1cnJlbnRCYXRjaEdyb3VwOiBPRlNCQmF0Y2hHcm91cDtcclxuICBwcm90ZWN0ZWQgX3NoYWRlcjogT0ZCYXNlU2hhZGVyO1xyXG5cclxuICBwcml2YXRlIF9pbWFnZUNvbnRlbnQ6IE9GSW1hZ2VDb250ZW50O1xyXG4gIHByaXZhdGUgX2ltYWdlR0xUZXh0dXJlOiBXZWJHTFRleHR1cmU7XHJcblxyXG4gIGdldCB0b3RhbFF1YWRzKCk6IG51bWJlciB7XHJcbiAgICBsZXQgY291bnRUb3RhbFF1YWRzID0gMDtcclxuICAgIHRoaXMuX2JhdGNoR3JvdXBzLmZvckVhY2goeCA9PiBjb3VudFRvdGFsUXVhZHMgKz0gKHgudmVydGV4Q291bnQgLyA0KSk7XHJcbiAgICByZXR1cm4gY291bnRUb3RhbFF1YWRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRvdGFsRHJhd0NhbGxzKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fYmF0Y2hHcm91cHMuZmlsdGVyKHggPT4geC5lbmFibGVkKS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvciAoc3ByaXRlUGF0aDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9ncmFwaGljRGV2aWNlID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmN1cnJlbnRGcmFtZXdvay5tYWluR3JhcGhpY0RldmljZTtcclxuICAgIHRoaXMuX2dyYXBoaWNDb250ZXh0ID0gdGhpcy5fZ3JhcGhpY0RldmljZS5ncmFwaGljQ29udGV4dDtcclxuICAgIHRoaXMuX2ZyYW1ld29yayA9IHRoaXMuX2dyYXBoaWNEZXZpY2UuZnJhbWV3b3JrO1xyXG5cclxuICAgIHRoaXMuX2ltYWdlQ29udGVudCA9IHRoaXMuX2ZyYW1ld29yay5jb250ZW50TWFuYWdlci5nZXRDb250ZW50PE9GSW1hZ2VDb250ZW50PihzcHJpdGVQYXRoKTtcclxuICAgIHRoaXMuX2ltYWdlR0xUZXh0dXJlID0gdGhpcy5faW1hZ2VDb250ZW50LmltYWdlVGV4dHVyZTtcclxuXHJcbiAgICB0aGlzLl9zaGFkZXIgPSB0aGlzLl9ncmFwaGljRGV2aWNlLnNoYWRlckZhY3RvcnkucmV0cmlldmVTaGFkZXI8T0ZTaGFkZXJUZXh0dXJlPignU2hhZGVyVGV4dHVyZScpO1xyXG4gICAgdGhpcy5fYmF0Y2hHcm91cHMgPSBbbmV3IE9GU0JCYXRjaEdyb3VwKDAsIHRoaXMuX2dyYXBoaWNEZXZpY2UpXTtcclxuICB9XHJcblxyXG4gIGJlZ2luRHJhdygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2JhdGNoR3JvdXBzLmZvckVhY2goeCA9PiB4LnJlc2V0KCkpO1xyXG5cclxuICAgIGlmICh0aGlzLl9iYXRjaEdyb3Vwcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5fYmF0Y2hHcm91cHMgPSBbbmV3IE9GU0JCYXRjaEdyb3VwKDAsIHRoaXMuX2dyYXBoaWNEZXZpY2UpXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cCA9IHRoaXMuX2JhdGNoR3JvdXBzWzBdO1xyXG4gIH1cclxuXHJcbiAgZHJhd0dyYXBoaWMoZ3JhcGhpYzogT0ZTcHJpdGUpOiB2b2lkIHtcclxuICAgIGNvbnN0IHFUQyA9IGdyYXBoaWMucXVhZFRleHRDb29yZHM7XHJcbiAgICBjb25zdCB2eCA9IGdyYXBoaWMueDtcclxuICAgIGNvbnN0IHZ5ID0gZ3JhcGhpYy55O1xyXG4gICAgY29uc3QgaHcgPSAocVRDLndpZHRoIC8gMikgKiBncmFwaGljLnNjYWxlWDtcclxuICAgIGNvbnN0IGhoID0gKHFUQy5oZWlnaHQgLyAyKSAqIGdyYXBoaWMuc2NhbGVZO1xyXG5cclxuICAgIGlmIChncmFwaGljLnJvdGF0aW9uICE9PSAwKSB7XHJcbiAgICAgIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoZ3JhcGhpYy5yb3RhdGlvbik7XHJcbiAgICAgIGNvbnN0IHNpbkFuZ2xlID0gTWF0aC5zaW4oZ3JhcGhpYy5yb3RhdGlvbik7XHJcblxyXG4gICAgICBsZXQgeF8wID0gdnggKyBodztcclxuICAgICAgbGV0IHhfMSA9IHZ4IC0gaHc7XHJcbiAgICAgIGxldCB4XzIgPSB2eCArIGh3O1xyXG4gICAgICBsZXQgeF8zID0gdnggLSBodztcclxuXHJcbiAgICAgIGxldCB5XzAgPSB2eSArIGhoO1xyXG4gICAgICBsZXQgeV8xID0gdnkgKyBoaDtcclxuICAgICAgbGV0IHlfMiA9IHZ5IC0gaGg7XHJcbiAgICAgIGxldCB5XzMgPSB2eSAtIGhoO1xyXG5cclxuICAgICAgY29uc3QgY2VudGVyWCA9ICh4XzAgKyB4XzEgKyB4XzIgKyB4XzMpICogMC4yNTtcclxuICAgICAgY29uc3QgY2VudGVyWSA9ICh5XzAgKyB5XzEgKyB5XzIgKyB5XzMpICogMC4yNTtcclxuXHJcbiAgICAgIHhfMCAtPSBjZW50ZXJYO1xyXG4gICAgICB4XzEgLT0gY2VudGVyWDtcclxuICAgICAgeF8yIC09IGNlbnRlclg7XHJcbiAgICAgIHhfMyAtPSBjZW50ZXJYO1xyXG5cclxuICAgICAgeV8wIC09IGNlbnRlclk7XHJcbiAgICAgIHlfMSAtPSBjZW50ZXJZO1xyXG4gICAgICB5XzIgLT0gY2VudGVyWTtcclxuICAgICAgeV8zIC09IGNlbnRlclk7XHJcblxyXG4gICAgICBsZXQgX3hfMCA9IHhfMDtcclxuICAgICAgbGV0IF94XzEgPSB4XzE7XHJcbiAgICAgIGxldCBfeF8yID0geF8yO1xyXG4gICAgICBsZXQgX3hfMyA9IHhfMztcclxuXHJcbiAgICAgIGxldCBfeV8wID0geV8wO1xyXG4gICAgICBsZXQgX3lfMSA9IHlfMTtcclxuICAgICAgbGV0IF95XzIgPSB5XzI7XHJcbiAgICAgIGxldCBfeV8zID0geV8zO1xyXG5cclxuICAgICAgeF8wID0gKGNvc0FuZ2xlICogX3hfMCAtIHNpbkFuZ2xlICogX3lfMCk7XHJcbiAgICAgIHlfMCA9IChzaW5BbmdsZSAqIF94XzAgKyBjb3NBbmdsZSAqIF95XzApO1xyXG5cclxuICAgICAgeF8xID0gKGNvc0FuZ2xlICogX3hfMSAtIHNpbkFuZ2xlICogX3lfMSk7XHJcbiAgICAgIHlfMSA9IChzaW5BbmdsZSAqIF94XzEgKyBjb3NBbmdsZSAqIF95XzEpO1xyXG5cclxuICAgICAgeF8yID0gKGNvc0FuZ2xlICogX3hfMiAtIHNpbkFuZ2xlICogX3lfMik7XHJcbiAgICAgIHlfMiA9IChzaW5BbmdsZSAqIF94XzIgKyBjb3NBbmdsZSAqIF95XzIpO1xyXG5cclxuICAgICAgeF8zID0gKGNvc0FuZ2xlICogX3hfMyAtIHNpbkFuZ2xlICogX3lfMyk7XHJcbiAgICAgIHlfMyA9IChzaW5BbmdsZSAqIF94XzMgKyBjb3NBbmdsZSAqIF95XzMpO1xyXG5cclxuICAgICAgeF8wICs9IGNlbnRlclg7XHJcbiAgICAgIHhfMSArPSBjZW50ZXJYO1xyXG4gICAgICB4XzIgKz0gY2VudGVyWDtcclxuICAgICAgeF8zICs9IGNlbnRlclg7XHJcblxyXG4gICAgICB5XzAgKz0gY2VudGVyWTtcclxuICAgICAgeV8xICs9IGNlbnRlclk7XHJcbiAgICAgIHlfMiArPSBjZW50ZXJZO1xyXG4gICAgICB5XzMgKz0gY2VudGVyWTtcclxuXHJcbiAgICAgIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRpY2VzLnB1c2goXHJcbiAgICAgICAgeF8wLCB5XzAsIDAuMCwgcVRDLnJpZ2h0LCBxVEMuZG93bixcclxuICAgICAgICB4XzEsIHlfMSwgMC4wLCBxVEMubGVmdCwgcVRDLmRvd24sXHJcbiAgICAgICAgeF8yLCB5XzIsIDAuMCwgcVRDLnJpZ2h0LCBxVEMudXAsXHJcbiAgICAgICAgeF8zLCB5XzMsIDAuMCwgcVRDLmxlZnQsIHFUQy51cCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC52ZXJ0aWNlcy5wdXNoKFxyXG4gICAgICAgIHZ4ICsgaHcsIHZ5ICsgaGgsIDAuMCwgcVRDLnJpZ2h0LCBxVEMuZG93bixcclxuICAgICAgICB2eCAtIGh3LCB2eSArIGhoLCAwLjAsIHFUQy5sZWZ0LCBxVEMuZG93bixcclxuICAgICAgICB2eCArIGh3LCB2eSAtIGhoLCAwLjAsIHFUQy5yaWdodCwgcVRDLnVwLFxyXG4gICAgICAgIHZ4IC0gaHcsIHZ5IC0gaGgsIDAuMCwgcVRDLmxlZnQsIHFUQy51cCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVnZW5lcmF0ZSBpbmRpY2VzXHJcbiAgICBpZiAodGhpcy5fY3VycmVudEJhdGNoR3JvdXAudmVydGV4Q291bnQgIT09IDApIHtcclxuICAgICAgdGhpcy5fY3VycmVudEJhdGNoR3JvdXAuaW5kaWNlcy5wdXNoKHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50IC0gMSwgdGhpcy5fY3VycmVudEJhdGNoR3JvdXAudmVydGV4Q291bnQsIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50LFxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50ICsgMSwgdGhpcy5fY3VycmVudEJhdGNoR3JvdXAudmVydGV4Q291bnQgKyAyLCB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC52ZXJ0ZXhDb3VudCArIDMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fY3VycmVudEJhdGNoR3JvdXAuaW5kaWNlcy5wdXNoKHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50LCB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC52ZXJ0ZXhDb3VudCArIDEsIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50ICsgMixcclxuICAgICAgICB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC52ZXJ0ZXhDb3VudCArIDMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50ICs9IDQ7XHJcbiAgICB0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC5pbmRleENvdW50ID0gdGhpcy5fY3VycmVudEJhdGNoR3JvdXAuaW5kaWNlcy5sZW5ndGg7XHJcblxyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwLnZlcnRleENvdW50ID49IE9GU3ByaXRlQmF0Y2hlci5NQVhfVkVSVElDRVMpIHtcclxuICAgICAgLy8gdXNlIG5leHQgYmF0Y2ggZ3JvdXAsIGFuZCBjcmVhdGUgb25lIGlmIG5lZWRzIGl0XHJcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50QmF0Y2hHcm91cC5pbmRleCA+PSAodGhpcy5fYmF0Y2hHcm91cHMubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICB0aGlzLl9iYXRjaEdyb3Vwcy5wdXNoKG5ldyBPRlNCQmF0Y2hHcm91cCh0aGlzLl9iYXRjaEdyb3Vwcy5sZW5ndGgsIHRoaXMuX2dyYXBoaWNEZXZpY2UpKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBtb3ZlIHRvIHRoZSBuZXh0IEJhdGNoIEdyb3VwXHJcbiAgICAgIHRoaXMuX2N1cnJlbnRCYXRjaEdyb3VwID0gdGhpcy5fYmF0Y2hHcm91cHNbdGhpcy5fY3VycmVudEJhdGNoR3JvdXAuaW5kZXggKyAxXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVuZERyYXcoKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICB0aGlzLl9iYXRjaEdyb3Vwcy5mb3JFYWNoKHggPT4ge1xyXG4gICAgICBpZiAoeC52ZXJ0ZXhDb3VudCAhPT0gMCkge1xyXG4gICAgICAgIHguZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHZlcnRpY2VzIGludGVybGVhdmVkIGFycmF5IHRvIHRoZSBWZXJ0ZXhCdWZmZXJcclxuICAgICAgICBfR0wuYmluZEJ1ZmZlcihfR0wuQVJSQVlfQlVGRkVSLCB4LnZib09iamVjdC52Ym8pO1xyXG4gICAgICAgIF9HTC5idWZmZXJEYXRhKF9HTC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoeC52ZXJ0aWNlcyksIF9HTC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIGluZGljZXMgYXJyYXkgdG8gdGhlIEluZGV4QnVmZmVyXHJcbiAgICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB4Lmlib09iamVjdC52Ym8pO1xyXG4gICAgICAgIF9HTC5idWZmZXJEYXRhKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHguaW5kaWNlcyksIF9HTC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeC5kZXN0cm95KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHJlbW92ZSBkZXN0cm95IGJhdGNoIGdyb3Vwc1xyXG4gICAgdGhpcy5fYmF0Y2hHcm91cHMgPSB0aGlzLl9iYXRjaEdyb3Vwcy5maWx0ZXIoeCA9PiAheC5pc1dhaXRpbmdGb3JEZWxldGUpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9pbWFnZUNvbnRlbnQuaXNMb2FkZWQpIHtcclxuICAgICAgdGhpcy5fYmF0Y2hHcm91cHMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICBpZiAoeC5lbmFibGVkKSB7XHJcbiAgICAgICAgICBjb25zdCBzaGFkZXIgPSB0aGlzLl9zaGFkZXIgYXMgT0ZTaGFkZXJUZXh0dXJlO1xyXG5cclxuICAgICAgICAgIHNoYWRlci5zZXRUcmFuc2xhdGUoMCwgMCwgMCk7XHJcbiAgICAgICAgICBzaGFkZXIucm90YXRpb25aID0gMDtcclxuICAgICAgICAgIHNoYWRlci5zZXRTY2FsZSgxLCAxLCAxKTtcclxuICAgICAgICAgIHNoYWRlci5kcmF3RWxlbWVudHMoYXJncywgdGhpcy5faW1hZ2VHTFRleHR1cmUsIHguaWJvT2JqZWN0LnZibywgeC52Ym9PYmplY3QudmJvLCB4LmluZGV4Q291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fYmF0Y2hHcm91cHMuZm9yRWFjaCh4ID0+IHguZGVzdHJveSgpKTtcclxuICAgIHRoaXMuX2JhdGNoR3JvdXBzID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZSB9IGZyb20gJy4vb2ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZSdcclxuXHJcbmV4cG9ydCBjbGFzcyBPRlF1YWRTdHJ1Y3Qge1xyXG4gIGNyZWF0ZWQ6IGJvb2xlYW47XHJcbiAgaW5pdFg6IG51bWJlcjtcclxuICBpbml0WTogbnVtYmVyO1xyXG4gIFZQVFRvcExlZnQ6IE9GVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmU7XHJcbiAgVlBUVG9wUmlnaHQ6IE9GVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmU7XHJcbiAgVlBUQm90dG9tTGVmdDogT0ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZTtcclxuICBWUFRCb3R0b21SaWdodDogT0ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZTtcclxuXHJcbiAgc3RhdGljIGNyZWF0ZUFzVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmUgKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IE9GUXVhZFN0cnVjdCgpO1xyXG4gICAgcmVzdWx0LmNyZWF0ZWQgPSBmYWxzZTtcclxuICAgIHJlc3VsdC5pbml0WCA9IDA7XHJcbiAgICByZXN1bHQuaW5pdFkgPSAwO1xyXG4gICAgcmVzdWx0LlZQVFRvcExlZnQgPSBuZXcgT0ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZSgpO1xyXG4gICAgcmVzdWx0LlZQVFRvcFJpZ2h0ID0gbmV3IE9GVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmUoKTtcclxuICAgIHJlc3VsdC5WUFRCb3R0b21MZWZ0ID0gbmV3IE9GVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmUoKTtcclxuICAgIHJlc3VsdC5WUFRCb3R0b21SaWdodCA9IG5ldyBPRlZlcnRleFBvc2l0aW9uQ29sb3JUZXh0dXJlKCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIE9GUXVhZFRleHRDb29yZHMge1xyXG4gIGNvbnN0cnVjdG9yIChcclxuICAgIHB1YmxpYyBsZWZ0OiBudW1iZXIsXHJcbiAgICBwdWJsaWMgcmlnaHQ6IG51bWJlcixcclxuICAgIHB1YmxpYyB1cDogbnVtYmVyLFxyXG4gICAgcHVibGljIGRvd246IG51bWJlcixcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyLFxyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyXHJcbiAgKSB7IH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vb2ZDb2xvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZWZXJ0ZXhQb3NpdGlvbkNvbG9yVGV4dHVyZSB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuICBjb2xvcjogT0ZDb2xvcjtcclxuICB1OiBudW1iZXI7XHJcbiAgdjogbnVtYmVyO1xyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBPRkNvbG9yIHtcclxuXHJcbiAgcjogbnVtYmVyO1xyXG4gIGc6IG51bWJlcjtcclxuICBiOiBudW1iZXI7XHJcbiAgYTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIpIHtcclxuICAgIHRoaXMuciA9IHI7XHJcbiAgICB0aGlzLmcgPSBnO1xyXG4gICAgdGhpcy5iID0gYjtcclxuICAgIHRoaXMuYSA9IGE7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbVN0cmluZyhyYXdSR0JTdHJpbmc6IHN0cmluZyk6IE9GQ29sb3Ige1xyXG4gICAgY29uc3QgcmF3Q29sb3IgPSByYXdSR0JTdHJpbmcuc3BsaXQoJywnKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IE9GQ29sb3Iud2hpdGUoKTtcclxuICAgIHJlc3VsdC5yID0gcGFyc2VGbG9hdChyYXdDb2xvclswXSk7XHJcbiAgICByZXN1bHQuZyA9IHBhcnNlRmxvYXQocmF3Q29sb3JbMV0pO1xyXG4gICAgcmVzdWx0LmIgPSBwYXJzZUZsb2F0KHJhd0NvbG9yWzJdKTtcclxuICAgIHJlc3VsdC5hID0gcGFyc2VGbG9hdChyYXdDb2xvclszXSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iajoge3IsIGcsIGIsIGF9KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByOiBwYXJzZUludChTdHJpbmcob2JqLnIpLCAxMCksXHJcbiAgICAgIGc6IHBhcnNlSW50KFN0cmluZyhvYmouZyksIDEwKSxcclxuICAgICAgYjogcGFyc2VJbnQoU3RyaW5nKG9iai5iKSwgMTApLFxyXG4gICAgICBhOiBwYXJzZUludChTdHJpbmcob2JqLmEpLCAxMCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZyb21Ob3JtYWxpemVkKGNvbG9yOiBPRkNvbG9yKTogT0ZDb2xvciB7XHJcbiAgICByZXR1cm4gbmV3IE9GQ29sb3IoXHJcbiAgICAgIE1hdGgucm91bmQoY29sb3IuciAqIDI1NS4wKSxcclxuICAgICAgTWF0aC5yb3VuZChjb2xvci5nICogMjU1LjApLFxyXG4gICAgICBNYXRoLnJvdW5kKGNvbG9yLmIgKiAyNTUuMCksXHJcbiAgICAgIE1hdGgucm91bmQoY29sb3IuYSAqIDI1NS4wKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb252ZXJ0VG9TdHJpbmdGcm9tTm9ybWFsaXplZChjb2xvcjogT0ZDb2xvcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7TWF0aC5yb3VuZChjb2xvci5yICogMjU1LjApLnRvU3RyaW5nKCl9LCR7TWF0aC5yb3VuZChjb2xvci5nICogMjU1LjApLnRvU3RyaW5nKCl9LCR7TWF0aC5yb3VuZChjb2xvci5iICogMjU1LjApLnRvU3RyaW5nKCl9LCR7TWF0aC5yb3VuZChjb2xvci5hICogMjU1LjApLnRvU3RyaW5nKCl9YDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBibGFjaygpOiBPRkNvbG9yIHsgcmV0dXJuIG5ldyBPRkNvbG9yKDAsIDAsIDAsIDEpOyB9XHJcbiAgc3RhdGljIHdoaXRlKCk6IE9GQ29sb3IgeyByZXR1cm4gbmV3IE9GQ29sb3IoMSwgMSwgMSwgMSk7IH1cclxuICBzdGF0aWMgcmVkKCk6IE9GQ29sb3IgeyByZXR1cm4gbmV3IE9GQ29sb3IoMSwgMCwgMCwgMSk7IH1cclxuICBzdGF0aWMgZ3JlZW4oKTogT0ZDb2xvciB7IHJldHVybiBuZXcgT0ZDb2xvcigwLCAxLCAwLCAxKTsgfVxyXG4gIHN0YXRpYyBibHVlKCk6IE9GQ29sb3IgeyByZXR1cm4gbmV3IE9GQ29sb3IoMCwgMCwgMSwgMSk7IH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi9vZkNvbG9yJztcclxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcbmltcG9ydCB7IE9GQmFzZVNoYWRlciB9IGZyb20gJy4uL3NoYWRlci9vZkJhc2VTaGFkZXInO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29ya0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi9vZkZyYW1ld29ya0ZhY3RvcnknO1xyXG5pbXBvcnQgeyBPRkdyYXBoaWNEZXZpY2UgfSBmcm9tICcuLi8uLi9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlJztcclxuaW1wb3J0IHsgT0ZWQk9PYmplY3QgfSBmcm9tICcuLi8uLi9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZlZCT09iamVjdCc7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gJy4uLy4uLy4uL29mRnJhbWV3b3JrJztcclxuaW1wb3J0IHsgT0ZTcHJpdGVCYXRjaGVyIH0gZnJvbSAnLi9kMmQvb3B0aW1pemF0aW9uL29mU3ByaXRlQmF0Y2hlcic7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgT0ZEcmF3YWJsZTJEIHtcclxuXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9mcmFtZXdvcms6IE9GRnJhbWV3b3JrO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBfZ3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBfZ3JhcGhpY0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuICB6OiBudW1iZXI7XHJcbiAgc2NhbGVYOiBudW1iZXI7XHJcbiAgc2NhbGVZOiBudW1iZXI7XHJcbiAgcm90YXRpb246IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIF9kZWJ1Z01vZGU6IGJvb2xlYW47XHJcbiAgcHJvdGVjdGVkIF9jb2xvcjogT0ZDb2xvcjtcclxuICBwcm90ZWN0ZWQgX3RyYW5zZm9ybWF0aW9uOiBtYXQ0O1xyXG4gIHByb3RlY3RlZCBfc2hhZGVyOiBPRkJhc2VTaGFkZXI7XHJcbiAgcHJvdGVjdGVkIF92Ym9PYmplY3Q6IE9GVkJPT2JqZWN0O1xyXG4gIHByb3RlY3RlZCBfaWJvT2JqZWN0OiBPRlZCT09iamVjdDtcclxuICBwcm90ZWN0ZWQgX3ZlcnRpY2VzOiBudW1iZXJbXSB8IEZsb2F0MzJBcnJheTtcclxuICBwcm90ZWN0ZWQgX2luZGljZXM6IG51bWJlcltdO1xyXG4gIHByb3RlY3RlZCBfc3ByaXRlQmF0Y2hJbnN0YW5jZTogT0ZTcHJpdGVCYXRjaGVyO1xyXG5cclxuICBnZXQgdmJvT2JqZWN0KCk6IE9GVkJPT2JqZWN0IHsgcmV0dXJuIHRoaXMuX3Zib09iamVjdDsgfVxyXG4gIGdldCBpYm9PYmplY3QoKTogT0ZWQk9PYmplY3QgeyByZXR1cm4gdGhpcy5faWJvT2JqZWN0OyB9XHJcbiAgZ2V0IGhhc1Nwcml0ZUJhdGNoKCk6IGJvb2xlYW4geyByZXR1cm4gISF0aGlzLl9zcHJpdGVCYXRjaEluc3RhbmNlOyB9XHJcblxyXG4gIGFic3RyYWN0IGdldCBjb2xvcigpOiBPRkNvbG9yO1xyXG4gIGFic3RyYWN0IHNldCBjb2xvcih2YWw6IE9GQ29sb3IpO1xyXG5cclxuICBnZXQgYWxwaGEoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2NvbG9yLmE7IH1cclxuICBzZXQgYWxwaGEodmFsOiBudW1iZXIpIHsgdGhpcy5fY29sb3IuYSA9IHZhbDsgfVxyXG5cclxuICBnZXQgZGVidWdNb2RlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZGVidWdNb2RlOyB9XHJcbiAgc2V0IGRlYnVnTW9kZSh2YWw6IGJvb2xlYW4pIHsgdGhpcy5fZGVidWdNb2RlID0gdmFsOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBzcHJpdGVCYXRjaD86IE9GU3ByaXRlQmF0Y2hlcikge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnogPSAwO1xyXG4gICAgdGhpcy5zY2FsZVggPSAxO1xyXG4gICAgdGhpcy5zY2FsZVkgPSAxO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IDA7XHJcbiAgICB0aGlzLl9kZWJ1Z01vZGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX2NvbG9yID0gT0ZDb2xvci53aGl0ZSgpO1xyXG5cclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UgPSBPRkZyYW1ld29ya0ZhY3RvcnkuY3VycmVudEZyYW1ld29rLm1haW5HcmFwaGljRGV2aWNlO1xyXG4gICAgdGhpcy5fZ3JhcGhpY0NvbnRleHQgPSB0aGlzLl9ncmFwaGljRGV2aWNlLmdyYXBoaWNDb250ZXh0O1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrID0gdGhpcy5fZ3JhcGhpY0RldmljZS5mcmFtZXdvcms7XHJcblxyXG4gICAgdGhpcy5zZXRTcHJpdGVCYXRjaChzcHJpdGVCYXRjaCk7XHJcbiAgfVxyXG5cclxuICBzZXRTcHJpdGVCYXRjaChzcHJpdGVCYXRjaDogT0ZTcHJpdGVCYXRjaGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaEluc3RhbmNlID0gc3ByaXRlQmF0Y2g7XHJcblxyXG4gICAgaWYgKHRoaXMuX3Nwcml0ZUJhdGNoSW5zdGFuY2UpIHtcclxuICAgICAgLy8gcmVsZWFzZSB0aGUgY3VycmVudFxyXG4gICAgICBpZiAodGhpcy5fdmJvT2JqZWN0KSB7IHRoaXMuX3Zib09iamVjdC5kZWFjdGl2YXRlKCk7IH1cclxuICAgICAgaWYgKHRoaXMuX2lib09iamVjdCkgeyB0aGlzLl9pYm9PYmplY3QuZGVhY3RpdmF0ZSgpOyB9XHJcbiAgICAgIHRoaXMuX3Zib09iamVjdCA9IG51bGw7XHJcbiAgICAgIHRoaXMuX2lib09iamVjdCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGFkZXIgKHNoYWRlcjogT0ZCYXNlU2hhZGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zaGFkZXIgPSBzaGFkZXI7XHJcbiAgfVxyXG5cclxuICBzZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCAobWF0cml4OiBtYXQ0KTogdm9pZCB7XHJcbiAgICB0aGlzLl90cmFuc2Zvcm1hdGlvbiA9IG1hdHJpeDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBpbml0aWFsaXplKCk7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZVZCT3MoKTtcclxuICBhYnN0cmFjdCBoaXRUZXN0PFQgZXh0ZW5kcyBPRkRyYXdhYmxlMkQ+KG90aGVyOiBUKTogYm9vbGVhbjtcclxuICBhYnN0cmFjdCBoaXRUZXN0QnlQb2ludCh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgYWJzdHJhY3QgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkO1xyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3Zib09iamVjdCkgeyB0aGlzLl92Ym9PYmplY3QuZGVhY3RpdmF0ZSgpOyB9XHJcbiAgICBpZiAodGhpcy5faWJvT2JqZWN0KSB7IHRoaXMuX2lib09iamVjdC5kZWFjdGl2YXRlKCk7IH1cclxuXHJcbiAgICB0aGlzLl92Ym9PYmplY3QgPSBudWxsO1xyXG4gICAgdGhpcy5faWJvT2JqZWN0ID0gbnVsbDtcclxuICAgIHRoaXMuX3ZlcnRpY2VzID0gbnVsbDtcclxuICAgIHRoaXMuX2luZGljZXMgPSBudWxsO1xyXG4gICAgdGhpcy5fdHJhbnNmb3JtYXRpb24gPSBudWxsO1xyXG4gICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcclxuICAgIHRoaXMuX2NvbG9yID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZTaGFkZXJGYWN0b3J5IH0gZnJvbSAnLi9vZlNoYWRlckZhY3RvcnknO1xyXG5pbXBvcnQgeyBPRlJlbmRlckNhbWVyYSB9IGZyb20gJy4uL2NhbWVyYS9vZlJlbmRlckNhbWVyYSc7XHJcbmltcG9ydCB7IElPRkRlZmF1bHRTaGFkZXJTb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9kZWZhdWx0LWFzc2V0cy9vZkRlZmF1bHRTaGFkZXJTb3VyY2VzJztcclxuaW1wb3J0IHsgbWF0NCwgdmVjMyB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBJT0ZNb3JlUmVuZGVyQXJncyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mTW9yZVJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkdyYXBoaWNEZXZpY2UgfSBmcm9tICcuLi8uLi9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlJztcclxuaW1wb3J0IHsgT0ZDb2xvciB9IGZyb20gJy4uL2dyYXBoaWNzL29mQ29sb3InO1xyXG5pbXBvcnQgeyBPRklJc1NoYWRlckFic3RyYWN0IH0gZnJvbSAnLi9pbnRlcmZhY2VzL29mSUlzU2hhZGVyQWJzdHJhY3QnO1xyXG5pbXBvcnQgeyBTVFV0aWxzIH0gZnJvbSAnc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9GQmFzZVNoYWRlciBpbXBsZW1lbnRzIE9GSUlzU2hhZGVyQWJzdHJhY3Qge1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3JlbmRlckNhbWVyYTogT0ZSZW5kZXJDYW1lcmE7XHJcblxyXG4gIHByb3RlY3RlZCBfbmFtZTogc3RyaW5nO1xyXG5cclxuICBwcm90ZWN0ZWQgX3g6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3k6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3o6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3NjYWxlWDogbnVtYmVyO1xyXG4gIHByb3RlY3RlZCBfc2NhbGVZOiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF9zY2FsZVo6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3JvdGF0aW9uWDogbnVtYmVyO1xyXG4gIHByb3RlY3RlZCBfcm90YXRpb25ZOiBudW1iZXI7XHJcbiAgcHJvdGVjdGVkIF9yb3RhdGlvblo6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIF93b3JsZDogbWF0NDtcclxuICBwcml2YXRlIF9yb3RhdGlvbjogbWF0NDtcclxuXHJcbiAgcHJvdGVjdGVkIF9zaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07XHJcbiAgcHJvdGVjdGVkIF9ncmFwaGljQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gIHByb3RlY3RlZCBfZ3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlO1xyXG5cclxuICBnZXQgbmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fbmFtZTsgfVxyXG4gIHNldCBuYW1lKHZhbDogc3RyaW5nKSB7XHJcbiAgICBpZiAoU1RVdGlscy5pc051bGxPckVtcHR5KHRoaXMuX25hbWUpKSB7XHJcbiAgICAgIHRoaXMuX25hbWUgPSB2YWw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgeCAodmFsOiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLl94ICE9PSB2YWwpIHtcclxuICAgICAgdGhpcy5feCA9IHZhbDtcclxuXHJcbiAgICAgIHRoaXMuX3dvcmxkWzEyXSA9IHRoaXMuX3g7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzEzXSA9IHRoaXMuX3k7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzE0XSA9IHRoaXMuX3o7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgeSAodmFsOiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLl95ICE9PSB2YWwpIHtcclxuICAgICAgdGhpcy5feSA9IHZhbDtcclxuXHJcbiAgICAgIHRoaXMuX3dvcmxkWzEyXSA9IHRoaXMuX3g7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzEzXSA9IHRoaXMuX3k7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzE0XSA9IHRoaXMuX3o7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgeiAodmFsOiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLl96ICE9PSB2YWwpIHtcclxuICAgICAgdGhpcy5feiA9IHZhbDtcclxuXHJcbiAgICAgIHRoaXMuX3dvcmxkWzEyXSA9IHRoaXMuX3g7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzEzXSA9IHRoaXMuX3k7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzE0XSA9IHRoaXMuX3o7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgcm90YXRpb25aKHZhbDogbnVtYmVyKSB7XHJcbiAgICBpZiAodGhpcy5fcm90YXRpb25aICE9PSB2YWwpIHtcclxuICAgICAgdGhpcy5fcm90YXRpb25aID0gdmFsO1xyXG5cclxuICAgICAgLy8gY29tcHV0ZVxyXG4gICAgICBtYXQ0LmZyb21TY2FsaW5nKHRoaXMuX3dvcmxkLCB2ZWMzLmZyb21WYWx1ZXModGhpcy5fc2NhbGVYLCB0aGlzLl9zY2FsZVksIHRoaXMuX3NjYWxlWikpO1xyXG4gICAgICBtYXQ0LmZyb21aUm90YXRpb24odGhpcy5fcm90YXRpb24sIHRoaXMuX3JvdGF0aW9uWik7XHJcbiAgICAgIG1hdDQubXVsdGlwbHkodGhpcy5fd29ybGQsIHRoaXMuX3dvcmxkLCB0aGlzLl9yb3RhdGlvbik7XHJcbiAgICAgIC8vIG5vdyB1cGRhdGUgdHJhbnNsYXRpb25zXHJcbiAgICAgIHRoaXMuX3dvcmxkWzEyXSA9IHRoaXMuX3g7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzEzXSA9IHRoaXMuX3k7XHJcbiAgICAgIHRoaXMuX3dvcmxkWzE0XSA9IHRoaXMuX3o7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IGdyYXBoaWNDb250ZXh0KCk6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB7IHJldHVybiB0aGlzLl9zaGFkZXJGYWN0b3J5LmdyYXBoaWNEZXZpY2UuZ3JhcGhpY0NvbnRleHQ7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3NoYWRlckZhY3Rvcnk6IE9GU2hhZGVyRmFjdG9yeSwgXHJcbiAgICBzb3VyY2VUYXJnZXQ6IElPRkRlZmF1bHRTaGFkZXJTb3VyY2UsXHJcbiAgICByZWFkb25seSBpc1NoYWRlckFic3RyYWN0ID0gZmFsc2VcclxuICApIHtcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UgPSBfc2hhZGVyRmFjdG9yeS5ncmFwaGljRGV2aWNlO1xyXG4gICAgdGhpcy5fcmVuZGVyQ2FtZXJhID0gdGhpcy5fZ3JhcGhpY0RldmljZS5yZW5kZXJDYW1lcmE7XHJcbiAgICB0aGlzLl9zaGFkZXJQcm9ncmFtID0gX3NoYWRlckZhY3RvcnkuaW5zdGFuY2VTaGFkZXIoc291cmNlVGFyZ2V0KTtcclxuICAgIHRoaXMuX2dyYXBoaWNDb250ZXh0ID0gdGhpcy5fc2hhZGVyRmFjdG9yeS5ncmFwaGljRGV2aWNlLmdyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIHRoaXMuX3dvcmxkID0gbWF0NC5jcmVhdGUoKTtcclxuICAgIHRoaXMuX3JvdGF0aW9uID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICB0aGlzLl9uYW1lID0gJyc7XHJcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IHRoaXMuX3ogPSAwO1xyXG4gICAgdGhpcy5fc2NhbGVYID0gdGhpcy5fc2NhbGVZID0gdGhpcy5fc2NhbGVaID0gMTtcclxuICAgIHRoaXMuX3JvdGF0aW9uWCA9IHRoaXMuX3JvdGF0aW9uWSA9IHRoaXMuX3JvdGF0aW9uWiA9IDA7XHJcblxyXG4gICAgdGhpcy5nZXRTaGFkZXJMb2NhdGlvbnModGhpcy5fZ3JhcGhpY0NvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgZ2V0U2hhZGVyTG9jYXRpb25zKF9HTDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZDtcclxuXHJcbiAgc2V0VHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3ggPSB4O1xyXG4gICAgdGhpcy5feSA9IHk7XHJcbiAgICB0aGlzLl96ID0gejtcclxuXHJcbiAgICB0aGlzLl93b3JsZFsxMl0gPSB4O1xyXG4gICAgdGhpcy5fd29ybGRbMTNdID0geTtcclxuICAgIHRoaXMuX3dvcmxkWzE0XSA9IHo7XHJcbiAgfVxyXG5cclxuICBzZXRSb3RhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9yb3RhdGlvblggPSB4O1xyXG4gICAgdGhpcy5fcm90YXRpb25ZID0geTtcclxuICAgIHRoaXMuX3JvdGF0aW9uWiA9IHo7XHJcblxyXG4gICAgY29uc3QgbWF0UnggPSBtYXQ0LmZyb21YUm90YXRpb24obWF0NC5jcmVhdGUoKSwgdGhpcy5fcm90YXRpb25YKTtcclxuICAgIGNvbnN0IG1hdFJ5ID0gbWF0NC5mcm9tWVJvdGF0aW9uKG1hdDQuY3JlYXRlKCksIHRoaXMuX3JvdGF0aW9uWSk7XHJcbiAgICBjb25zdCBtYXRSeiA9IG1hdDQuZnJvbVpSb3RhdGlvbihtYXQ0LmNyZWF0ZSgpLCB0aGlzLl9yb3RhdGlvblopO1xyXG5cclxuICAgIG1hdDQubXVsdGlwbHkodGhpcy5fcm90YXRpb24sIHRoaXMuX3JvdGF0aW9uLCBtYXRSeCk7XHJcbiAgICBtYXQ0Lm11bHRpcGx5KHRoaXMuX3JvdGF0aW9uLCB0aGlzLl9yb3RhdGlvbiwgbWF0UnkpO1xyXG4gICAgbWF0NC5tdWx0aXBseSh0aGlzLl9yb3RhdGlvbiwgdGhpcy5fcm90YXRpb24sIG1hdFJ6KTtcclxuXHJcbiAgICAvLyBjb21wdXRlXHJcbiAgICBtYXQ0LmZyb21TY2FsaW5nKHRoaXMuX3dvcmxkLCB2ZWMzLmZyb21WYWx1ZXModGhpcy5fc2NhbGVYLCB0aGlzLl9zY2FsZVksIHRoaXMuX3NjYWxlWikpO1xyXG4gICAgbWF0NC5mcm9tWlJvdGF0aW9uKHRoaXMuX3JvdGF0aW9uLCB0aGlzLl9yb3RhdGlvblopO1xyXG4gICAgbWF0NC5tdWx0aXBseSh0aGlzLl93b3JsZCwgdGhpcy5fd29ybGQsIHRoaXMuX3JvdGF0aW9uKTtcclxuICAgIC8vIG5vdyB1cGRhdGUgdHJhbnNsYXRpb25zXHJcbiAgICB0aGlzLl93b3JsZFsxMl0gPSB0aGlzLl94O1xyXG4gICAgdGhpcy5fd29ybGRbMTNdID0gdGhpcy5feTtcclxuICAgIHRoaXMuX3dvcmxkWzE0XSA9IHRoaXMuX3o7XHJcbiAgfVxyXG5cclxuICBzZXRTY2FsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zY2FsZVggPSB4O1xyXG4gICAgdGhpcy5fc2NhbGVZID0geTtcclxuICAgIHRoaXMuX3NjYWxlWiA9IHo7XHJcblxyXG4gICAgLy8gY29tcHV0ZVxyXG4gICAgbWF0NC5mcm9tU2NhbGluZyh0aGlzLl93b3JsZCwgdmVjMy5mcm9tVmFsdWVzKHRoaXMuX3NjYWxlWCwgdGhpcy5fc2NhbGVZLCB0aGlzLl9zY2FsZVopKTtcclxuICAgIG1hdDQuZnJvbVpSb3RhdGlvbih0aGlzLl9yb3RhdGlvbiwgdGhpcy5fcm90YXRpb25aKTtcclxuICAgIG1hdDQubXVsdGlwbHkodGhpcy5fd29ybGQsIHRoaXMuX3dvcmxkLCB0aGlzLl9yb3RhdGlvbik7XHJcbiAgICAvLyBub3cgdXBkYXRlIHRyYW5zbGF0aW9uc1xyXG4gICAgdGhpcy5fd29ybGRbMTJdID0gdGhpcy5feDtcclxuICAgIHRoaXMuX3dvcmxkWzEzXSA9IHRoaXMuX3k7XHJcbiAgICB0aGlzLl93b3JsZFsxNF0gPSB0aGlzLl96O1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dHVyZSAodW5pZm9ybU5hbWU6IHN0cmluZywgdGV4dHVyZTogV2ViR0xUZXh0dXJlLCB0ZXh0dXJlSW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICAvLyBVc2UgU2hhZGVyUHJvZ3JhbSBmb3Igc2V0dGluZyB0aGUgdW5pZm9ybXNcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLl9zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICBjb25zdCB1bmlmb3JtTG9jYXRpb24gPSB0aGlzW3VuaWZvcm1OYW1lXTtcclxuXHJcbiAgICBfR0wuYWN0aXZlVGV4dHVyZShfR0xbYFRFWFRVUkUke3RleHR1cmVJbmRleH1gXSk7XHJcbiAgICBfR0wuYmluZFRleHR1cmUoX0dMLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xyXG4gICAgX0dMLnVuaWZvcm0xaSh1bmlmb3JtTG9jYXRpb24sIDApO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29sb3IgKHVuaWZvcm1OYW1lOiBzdHJpbmcsIGNvbG9yT2JqZWN0OiBPRkNvbG9yKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXMuZ2V0T3JDcmVhdGVVbmlmb3JtTG9jYXRpb24odW5pZm9ybU5hbWUpO1xyXG4gICAgX0dMLnVuaWZvcm00Zih1bmlmb3JtTG9jYXRpb24sIGNvbG9yT2JqZWN0LnIsIGNvbG9yT2JqZWN0LmcsIGNvbG9yT2JqZWN0LmIsIGNvbG9yT2JqZWN0LmEpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRPckNyZWF0ZVVuaWZvcm1Mb2NhdGlvbih1bmlmb3JtTmFtZTogc3RyaW5nKTogV2ViR0xVbmlmb3JtTG9jYXRpb24ge1xyXG4gICAgaWYgKCF0aGlzW3VuaWZvcm1OYW1lXSkge1xyXG4gICAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgICAgdGhpc1t1bmlmb3JtTmFtZV0gPSBfR0wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclByb2dyYW0sIHVuaWZvcm1OYW1lKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzW3VuaWZvcm1OYW1lXTtcclxuICB9XHJcblxyXG4gIHNldFZlY3RvcjRGbG9hdCAodW5pZm9ybU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm00Zih1bmlmb3JtTG9jYXRpb24sIHgsIHksIHosIHcpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmVjdG9yM0Zsb2F0ICh1bmlmb3JtTmFtZTogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm0zZih1bmlmb3JtTG9jYXRpb24sIHgsIHksIHopO1xyXG4gIH1cclxuXHJcbiAgc2V0VmVjdG9yMkZsb2F0ICh1bmlmb3JtTmFtZTogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICAvLyBVc2UgU2hhZGVyUHJvZ3JhbSBmb3Igc2V0dGluZyB0aGUgdW5pZm9ybXNcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLl9zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICBjb25zdCB1bmlmb3JtTG9jYXRpb24gPSB0aGlzW3VuaWZvcm1OYW1lXTtcclxuICAgIF9HTC51bmlmb3JtMmYodW5pZm9ybUxvY2F0aW9uLCB4LCB5KTtcclxuICB9XHJcblxyXG4gIHNldFZlY3RvcjFGbG9hdCAodW5pZm9ybU5hbWU6IHN0cmluZywgeDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb24sIHgpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmVjdG9yMUludCAodW5pZm9ybU5hbWU6IHN0cmluZywgeDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm0xaSh1bmlmb3JtTG9jYXRpb24sIHgpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmVjdG9yMkludCAodW5pZm9ybU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG4gICAgLy8gVXNlIFNoYWRlclByb2dyYW0gZm9yIHNldHRpbmcgdGhlIHVuaWZvcm1zXHJcbiAgICB0aGlzLl9ncmFwaGljRGV2aWNlLnVzZVNoYWRlclByb2dyYW0odGhpcy5fc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgY29uc3QgdW5pZm9ybUxvY2F0aW9uID0gdGhpc1t1bmlmb3JtTmFtZV07XHJcbiAgICBfR0wudW5pZm9ybTJpKHVuaWZvcm1Mb2NhdGlvbiwgeCwgeSk7XHJcbiAgfVxyXG5cclxuICBzZXRWZWN0b3IzSW50ICh1bmlmb3JtTmFtZTogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm0zaSh1bmlmb3JtTG9jYXRpb24sIHgsIHksIHopO1xyXG4gIH1cclxuXHJcbiAgc2V0VmVjdG9yNEludCAodW5pZm9ybU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuICAgIC8vIFVzZSBTaGFkZXJQcm9ncmFtIGZvciBzZXR0aW5nIHRoZSB1bmlmb3Jtc1xyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgX0dMLnVuaWZvcm00aSh1bmlmb3JtTG9jYXRpb24sIHgsIHksIHosIHcpO1xyXG4gIH1cclxuXHJcbiAgLy8gY3VzdG9tXHJcbiAgc2V0VGV4dHVyZUJ5SW5kZXggKGluZGV4OiBudW1iZXIsIHRleHR1cmU6IFdlYkdMVGV4dHVyZSk6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICAvLyBVc2UgU2hhZGVyUHJvZ3JhbSBmb3Igc2V0dGluZyB0aGUgdW5pZm9ybXNcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLl9zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICBjb25zdCB1bmlmb3JtTmFtZSA9IHRoaXNbYG1UZXh0dXJlVW5pZm9ybSR7aW5kZXh9YF07XHJcbiAgICBjb25zdCB1bmlmb3JtTG9jYXRpb24gPSB0aGlzW3VuaWZvcm1OYW1lXTtcclxuXHJcbiAgICBfR0wuYWN0aXZlVGV4dHVyZShfR0xbYFRFWFRVUkUke2luZGV4fWBdKTtcclxuICAgIF9HTC5iaW5kVGV4dHVyZShfR0wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICBfR0wudW5pZm9ybTFpKHVuaWZvcm1Mb2NhdGlvbiwgaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29sb3JCeUluZGV4IChpbmRleDogbnVtYmVyLCBjb2xvck9iamVjdDogT0ZDb2xvcik6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICAvLyBVc2UgU2hhZGVyUHJvZ3JhbSBmb3Igc2V0dGluZyB0aGUgdW5pZm9ybXNcclxuICAgIHRoaXMuX2dyYXBoaWNEZXZpY2UudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLl9zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICBjb25zdCB1bmlmb3JtTmFtZSA9IHRoaXNbYG1Db2xvclVuaWZvcm0ke2luZGV4fWBdO1xyXG4gICAgY29uc3QgdW5pZm9ybUxvY2F0aW9uID0gdGhpc1t1bmlmb3JtTmFtZV07XHJcblxyXG4gICAgX0dMLnVuaWZvcm00Zih1bmlmb3JtTG9jYXRpb24sIGNvbG9yT2JqZWN0LnIsIGNvbG9yT2JqZWN0LmcsIGNvbG9yT2JqZWN0LmIsIGNvbG9yT2JqZWN0LmEpO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgZHJhdyhhcmdzOiBJT0ZSZW5kZXJBcmdzIHwgSU9GTW9yZVJlbmRlckFyZ3MsIC4uLm90aGVycyk6IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZCYXNlU2hhZGVyIH0gZnJvbSAnLi9vZkJhc2VTaGFkZXInO1xyXG5pbXBvcnQgeyBPRlNoYWRlckZhY3RvcnkgfSBmcm9tICcuL29mU2hhZGVyRmFjdG9yeSc7XHJcbmltcG9ydCB7IElPRkRlZmF1bHRTaGFkZXJTb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9kZWZhdWx0LWFzc2V0cy9vZkRlZmF1bHRTaGFkZXJTb3VyY2VzJztcclxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcbmltcG9ydCB7IElPRk1vcmVSZW5kZXJBcmdzIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZNb3JlUmVuZGVyQXJncyc7XHJcbmltcG9ydCB7IE9GSVNoYWRlckNvZGVJbmZvIH0gZnJvbSAnLi4vLi4vLi4vLi4vY3Jvc3MtY3V0dGluZy9zaGFkZXItYW5hbGl6ZXIvZGF0YS9vZklTaGFkZXJDb2RlSW5mbyc7XHJcbmltcG9ydCB7IE9GRW51bVNoYWRlckRhdGFUeXBlcyB9IGZyb20gJy4uLy4uLy4uLy4uL2Nyb3NzLWN1dHRpbmcvc2hhZGVyLWFuYWxpemVyL29mRW51bVNoYWRlckRhdGFUeXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZTaGFkZXJBYnN0cmFjdCBleHRlbmRzIE9GQmFzZVNoYWRlciB7XHJcblxyXG4gIHByaXZhdGUgX3NoYWRlckNvZGVJbmZvOiBPRklTaGFkZXJDb2RlSW5mbztcclxuXHJcbiAgcHJpdmF0ZSBfYXR0cmlidXRlSW50ZXJsZWF2ZWREYXRhU2l6ZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2NvbG9yUHJvcEluZGV4Q291bnQ6IG51bWJlcjtcclxuICBwcml2YXRlIF90ZXh0dXJlUHJvcEluZGV4Q291bnQ6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRvbmx5IF9zaGFkZXJGYWN0b3J5OiBPRlNoYWRlckZhY3RvcnksIHNvdXJjZVRhcmdldDogSU9GRGVmYXVsdFNoYWRlclNvdXJjZSxcclxuICAgIHNoYWRlckNvZGVJbmZvOiBPRklTaGFkZXJDb2RlSW5mbykge1xyXG4gICAgc3VwZXIoX3NoYWRlckZhY3RvcnksIHNvdXJjZVRhcmdldCwgdHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5fYXR0cmlidXRlSW50ZXJsZWF2ZWREYXRhU2l6ZSA9IDA7XHJcbiAgICB0aGlzLl9jb2xvclByb3BJbmRleENvdW50ID0gMDtcclxuICAgIHRoaXMuX3RleHR1cmVQcm9wSW5kZXhDb3VudCA9IDA7XHJcbiAgICB0aGlzLl9zaGFkZXJDb2RlSW5mbyA9IHNoYWRlckNvZGVJbmZvO1xyXG5cclxuICAgIHRoaXMudXBkYXRlU2hhZGVyKHNvdXJjZVRhcmdldCwgc2hhZGVyQ29kZUluZm8pO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hhZGVyTG9jYXRpb25zKF9HTDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7IC8qTk8gSU1QTEVNRU5UQVRJT04gSEVSRSovIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjeWNsb21hdGljLWNvbXBsZXhpdHlcclxuICB1cGRhdGVTaGFkZXIoc291cmNlVGFyZ2V0OiBJT0ZEZWZhdWx0U2hhZGVyU291cmNlLCBuZXdTaGFkZXJDb2RlSW5mbzogT0ZJU2hhZGVyQ29kZUluZm8pOiB2b2lkIHtcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgLy8gUmVtb3ZlIGFuZCByZXNldCBvbGQgZGF0YSBhbmQgcHJvcGVydGllc1xyXG4gICAgaWYgKHRoaXMuX3NoYWRlckNvZGVJbmZvKSB7XHJcbiAgICAgIC8vIENsZWFyIHZhcmlhYmxlc1xyXG4gICAgICB0aGlzLl9hdHRyaWJ1dGVJbnRlcmxlYXZlZERhdGFTaXplID0gMDtcclxuICAgICAgdGhpcy5fY29sb3JQcm9wSW5kZXhDb3VudCA9IDA7XHJcbiAgICAgIHRoaXMuX3RleHR1cmVQcm9wSW5kZXhDb3VudCA9IDA7XHJcblxyXG4gICAgICAvLyBSZW1vdmUgb2xkIHByb3BlcnRpZXMgYXR0YWNoZWQgZnJvbSB0aGUgb2xkIFNoYWRlckNvZGVJbmZvOjogQXR0cmlidXRlc1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlckNvZGVJbmZvLmF0dHJpYnV0ZUNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVEYXRhID0gdGhpcy5fc2hhZGVyQ29kZUluZm8uYXR0cmlidXRlc1tpXTtcclxuICAgICAgICBkZWxldGUgdGhpc1thdHRyaWJ1dGVEYXRhLmlucHV0TmFtZV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBvbGQgcHJvcGVydGllcyBhdHRhY2hlZCBmcm9tIHRoZSBvbGQgU2hhZGVyQ29kZUluZm86OiBVbmlmb3Jtc1xyXG4gICAgICBsZXQgdGVtcENvbG9yUHJvcEluZGV4Q291bnQgPSAwO1xyXG4gICAgICBsZXQgdGVtcFRleHR1cmVQcm9wSW5kZXhDb3VudCA9IDA7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlckNvZGVJbmZvLnVuaWZvcm1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybURhdGEgPSB0aGlzLl9zaGFkZXJDb2RlSW5mby51bmlmb3Jtc1tpXTtcclxuICAgICAgICBjb25zdCB1bmlmb3JtSW5wdXROYW1lID0gdW5pZm9ybURhdGEuaW5wdXROYW1lO1xyXG5cclxuICAgICAgICAvLyBEZWxldGUgdmFyaWFibGUgZm9yIGxvY2F0aW9uXHJcbiAgICAgICAgZGVsZXRlIHRoaXNbdW5pZm9ybUlucHV0TmFtZV07XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSB1bmlmb3JtIGlzIG5vdCBhIHNhbXBsZXIsIHRoZW4uLi5cclxuICAgICAgICBzd2l0Y2ggKHVuaWZvcm1EYXRhLmlucHV0VmFyaWFibGVUeXBlKSB7XHJcbiAgICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5JQ29sb3I6XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2BtQ29sb3JVbmlmb3JtJHt0ZW1wQ29sb3JQcm9wSW5kZXhDb3VudH1gXTtcclxuICAgICAgICAgICAgdGVtcENvbG9yUHJvcEluZGV4Q291bnQrKztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5JVGV4dHVyZTpcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXNbYG1UZXh0dXJlVW5pZm9ybSR7dGVtcFRleHR1cmVQcm9wSW5kZXhDb3VudH1gXTtcclxuICAgICAgICAgICAgdGVtcFRleHR1cmVQcm9wSW5kZXhDb3VudCsrO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgU2hhZGVyUHJvZ3JhbSBhbmQgU2hhZGVyQ29kZUluZm9cclxuICAgIHRoaXMuX3NoYWRlckNvZGVJbmZvID0gbmV3U2hhZGVyQ29kZUluZm87XHJcbiAgICB0aGlzLl9zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyRmFjdG9yeS5pbnN0YW5jZVNoYWRlcihzb3VyY2VUYXJnZXQpO1xyXG5cclxuICAgIC8vIEF1dG8tR2VuZXJhdGUgZ2xvYmFsIHZhcmlhYmxlcyBmb3IgdGhpcyBjb250ZXh0OiBBdHRyaWJ1dGVzXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlckNvZGVJbmZvLmF0dHJpYnV0ZUNvdW50OyBpKyspIHtcclxuICAgICAgY29uc3QgYXR0cmlidXRlRGF0YSA9IHRoaXMuX3NoYWRlckNvZGVJbmZvLmF0dHJpYnV0ZXNbaV07XHJcblxyXG4gICAgICB0aGlzW2F0dHJpYnV0ZURhdGEuaW5wdXROYW1lXSA9IF9HTC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgICB0aGlzLl9zaGFkZXJQcm9ncmFtLCBhdHRyaWJ1dGVEYXRhLmlucHV0TmFtZSk7XHJcblxyXG4gICAgICAvLyBjb3VudCBzaXplIG9mIGludGVybGVhdmVkIGRhdGFcclxuICAgICAgc3dpdGNoIChhdHRyaWJ1dGVEYXRhLmlucHV0VmFyaWFibGVUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuRmxvYXQ6IHRoaXMuX2F0dHJpYnV0ZUludGVybGVhdmVkRGF0YVNpemUgKz0gNDsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuVmVjdG9yMjogdGhpcy5fYXR0cmlidXRlSW50ZXJsZWF2ZWREYXRhU2l6ZSArPSA4OyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5WZWN0b3IzOiB0aGlzLl9hdHRyaWJ1dGVJbnRlcmxlYXZlZERhdGFTaXplICs9IDEyOyBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5WZWN0b3I0OiB0aGlzLl9hdHRyaWJ1dGVJbnRlcmxlYXZlZERhdGFTaXplICs9IDE2OyBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEF1dG8tR2VuZXJhdGUgZ2xvYmFsIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zXHJcbiAgICB0aGlzLnByZWNvbXB1dGVVbmlmb3Jtc0xvY2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBwcmVjb21wdXRlVW5pZm9ybXNMb2NhdGlvbigpOiB2b2lkIHtcclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIC8vIEF1dG8tR2VuZXJhdGUgZ2xvYmFsIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlckNvZGVJbmZvLnVuaWZvcm1Db3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHVuaWZvcm1EYXRhID0gdGhpcy5fc2hhZGVyQ29kZUluZm8udW5pZm9ybXNbaV07XHJcbiAgICAgIGNvbnN0IHVuaWZvcm1JbnB1dE5hbWUgPSB1bmlmb3JtRGF0YS5pbnB1dE5hbWU7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdmFyaWFibGUgZm9yIGxvY2F0aW9uXHJcbiAgICAgIHRoaXNbdW5pZm9ybUlucHV0TmFtZV0gPSBfR0wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclByb2dyYW0sIHVuaWZvcm1JbnB1dE5hbWUpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIHVuaWZvcm0gaXMgbm90IGEgc2FtcGxlciwgdGhlbi4uLlxyXG4gICAgICBzd2l0Y2ggKHVuaWZvcm1EYXRhLmlucHV0VmFyaWFibGVUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuSUNvbG9yOlxyXG4gICAgICAgICAgdGhpc1tgbUNvbG9yVW5pZm9ybSR7dGhpcy5fY29sb3JQcm9wSW5kZXhDb3VudH1gXSA9IHVuaWZvcm1JbnB1dE5hbWU7XHJcbiAgICAgICAgICB0aGlzLl9jb2xvclByb3BJbmRleENvdW50Kys7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5JVGV4dHVyZTpcclxuICAgICAgICAgIHRoaXNbYG1UZXh0dXJlVW5pZm9ybSR7dGhpcy5fdGV4dHVyZVByb3BJbmRleENvdW50fWBdID0gdW5pZm9ybUlucHV0TmFtZTtcclxuICAgICAgICAgIHRoaXMuX3RleHR1cmVQcm9wSW5kZXhDb3VudCsrO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY3ljbG9tYXRpYy1jb21wbGV4aXR5XHJcbiAgZHJhdyhhcmdzOiBJT0ZNb3JlUmVuZGVyQXJncywgdmVydGV4QnVmZmVyOiBXZWJHTEJ1ZmZlciwgdHJhbnNmb3JtYXRpb246IG1hdDQgPSBudWxsLCByZW5kZXJUeXBlOiBudW1iZXIsXHJcbiAgICBpbmRleEJ1ZmZlcjogV2ViR0xCdWZmZXIsIGluZGV4Q291bnQ6IG51bWJlcik6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIC8vIEdldCBUcmFuc2Zvcm1hdGlvbiBNYXRyaXggZnJvbSBSZW5kZXJDYW1lcmFcclxuICAgIGNvbnN0IHRyYW5zZm9ybWVkTWF0cml4ID0gISFhcmdzLmhhc0N1c3RvbUNhbWVyYVxyXG4gICAgICA/IGFyZ3MuY2FtZXJhTVZQXHJcbiAgICAgIDogdGhpcy5fcmVuZGVyQ2FtZXJhLnRyYW5zZm9ybWVkTWF0cml4O1xyXG5cclxuICAgIGlmICh0cmFuc2Zvcm1lZE1hdHJpeCAmJiB0aGlzLl9zaGFkZXJQcm9ncmFtKSB7XHJcbiAgICAgIC8vIEVuYWJsZSBibGVuZGluZ1xyXG4gICAgICBfR0wuZW5hYmxlKF9HTC5CTEVORCk7XHJcbiAgICAgIF9HTC5ibGVuZEZ1bmMoX0dMLlNSQ19BTFBIQSwgX0dMLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG5cclxuICAgICAgLy8gX0dMLnVzZVByb2dyYW0obVNoYWRlclByb2dyYW0pOyAvLyBSZXBsYWNlZCBmb3Igb3B0aW1pemVkIGZ1bmN0aW9uIGluIEdyYXBoaWNEZXZpY2VcclxuICAgICAgdGhpcy5fZ3JhcGhpY0RldmljZS51c2VTaGFkZXJQcm9ncmFtKHRoaXMuX3NoYWRlclByb2dyYW0pO1xyXG5cclxuICAgICAgLy8gQXV0by1HZW5lcmF0ZSBXZWJHTCBjYWxscyBmb3IgVW5pZm9ybXNcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaGFkZXJDb2RlSW5mby51bmlmb3JtQ291bnQ7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHVuaWZvcm1EYXRhID0gdGhpcy5fc2hhZGVyQ29kZUluZm8udW5pZm9ybXNbaV07XHJcblxyXG4gICAgICAgIHN3aXRjaCAodW5pZm9ybURhdGEuaW5wdXRWYXJpYWJsZVR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgT0ZFbnVtU2hhZGVyRGF0YVR5cGVzLklDYW1lcmE6XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IHRoaXNbdW5pZm9ybURhdGEuaW5wdXROYW1lXTtcclxuXHJcbiAgICAgICAgICAgIC8vIE5vdyBtdWx0aXBseSB0aGUgQ2FtZXJhIHRyYW5zZm9ybWVkIE1hdHJpeCB3aXRoIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbnMgTWF0cml4LlxyXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgbWF0NC5tdWx0aXBseSh0cmFuc2Zvcm1lZE1hdHJpeCwgdHJhbnNmb3JtZWRNYXRyaXgsIHRoaXMuX3dvcmxkKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBtYXQ0Lm11bHRpcGx5KHRyYW5zZm9ybWVkTWF0cml4LCB0cmFuc2Zvcm1lZE1hdHJpeCwgdHJhbnNmb3JtYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfR0wudW5pZm9ybU1hdHJpeDRmdih1bmlmb3JtTG9jYXRpb24sIGZhbHNlLCB0cmFuc2Zvcm1lZE1hdHJpeCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBfR0wuYmluZEJ1ZmZlcihfR0wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpO1xyXG5cclxuICAgICAgLy8gQXV0by1HZW5lcmF0ZSBXZWJHTCBjYWxscyBmb3IgQXR0cmlidXRlc1xyXG4gICAgICBsZXQgaW50ZXJsZWF2ZWRPZmZzZXQgPSAwO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaGFkZXJDb2RlSW5mby5hdHRyaWJ1dGVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlRGF0YSA9IHRoaXMuX3NoYWRlckNvZGVJbmZvLmF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlSW5wdXROYW1lID0gYXR0cmlidXRlRGF0YS5pbnB1dE5hbWU7XHJcbiAgICAgICAgY29uc3QgYXR0cmliTG9jYXRpb24gPSB0aGlzW2F0dHJpYnV0ZUlucHV0TmFtZV07XHJcblxyXG4gICAgICAgIF9HTC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJMb2NhdGlvbik7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoYXR0cmlidXRlRGF0YS5pbnB1dFZhcmlhYmxlVHlwZSkge1xyXG4gICAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuRmxvYXQ6XHJcbiAgICAgICAgICAgIF9HTC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYkxvY2F0aW9uLCAxLCBfR0wuRkxPQVQsIGZhbHNlLFxyXG4gICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZUludGVybGVhdmVkRGF0YVNpemUsIGludGVybGVhdmVkT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgIGludGVybGVhdmVkT2Zmc2V0ICs9IDQ7IC8vIDIgZmxvYXRzIHBlciA0IGJ5dGVzXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBPRkVudW1TaGFkZXJEYXRhVHlwZXMuVmVjdG9yMjpcclxuICAgICAgICAgICAgX0dMLnZlcnRleEF0dHJpYlBvaW50ZXIoYXR0cmliTG9jYXRpb24sIDIsIF9HTC5GTE9BVCwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlSW50ZXJsZWF2ZWREYXRhU2l6ZSwgaW50ZXJsZWF2ZWRPZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgaW50ZXJsZWF2ZWRPZmZzZXQgKz0gODsgLy8gMiBmbG9hdHMgcGVyIDQgYnl0ZXNcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5WZWN0b3IzOlxyXG4gICAgICAgICAgICBfR0wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJMb2NhdGlvbiwgMywgX0dMLkZMT0FULCBmYWxzZSxcclxuICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVJbnRlcmxlYXZlZERhdGFTaXplLCBpbnRlcmxlYXZlZE9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICBpbnRlcmxlYXZlZE9mZnNldCArPSAxMjsgLy8gMyBmbG9hdHMgcGVyIDQgYnl0ZXNcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIE9GRW51bVNoYWRlckRhdGFUeXBlcy5WZWN0b3I0OlxyXG4gICAgICAgICAgICBfR0wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJMb2NhdGlvbiwgNCwgX0dMLkZMT0FULCBmYWxzZSxcclxuICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVJbnRlcmxlYXZlZERhdGFTaXplLCBpbnRlcmxlYXZlZE9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICBpbnRlcmxlYXZlZE9mZnNldCArPSAxNjsgLy8gNCBmbG9hdHMgcGVyIDQgYnl0ZXNcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW5kZXJUeXBlOiBUUklBTkdMRV9TVFJJUCBhcyBkZWZhdWx0XHJcbiAgICAgIHJlbmRlclR5cGUgPSAhcmVuZGVyVHlwZSA/IF9HTC5UUklBTkdMRV9TVFJJUCA6IHJlbmRlclR5cGU7XHJcblxyXG4gICAgICAvLyBOb3cgZHJhdyBhcnJheXMgb3IgZHJhdyBlbGVtZW50cyBpZiBpbmRleEJ1ZmZlciB3YXMgcGFzc2VkIGFzIHBhcmFtZXRlclxyXG4gICAgICBpZiAoIWluZGV4QnVmZmVyKSB7XHJcbiAgICAgICAgX0dMLmRyYXdBcnJheXMocmVuZGVyVHlwZSwgMCwgNCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICAgICAgX0dMLmRyYXdFbGVtZW50cyhyZW5kZXJUeXBlLCBpbmRleENvdW50LCBfR0wuVU5TSUdORURfU0hPUlQsIDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gJy4uLy4uL2RldmljZS9vZkdyYXBoaWNEZXZpY2UnO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gJy4uLy4uLy4uL29mRnJhbWV3b3JrJztcclxuaW1wb3J0IHsgT0ZCYXNlU2hhZGVyIH0gZnJvbSAnLi9vZkJhc2VTaGFkZXInO1xyXG5pbXBvcnQgeyBPRlNoYWRlclRleHR1cmUgfSBmcm9tICcuL29mU2hhZGVyVGV4dHVyZSc7XHJcbmltcG9ydCB7IE9GU2hhZGVyUHJpbWl0aXZlIH0gZnJvbSAnLi9vZlNoYWRlclByaW1pdGl2ZSc7XHJcbmltcG9ydCB7IE9GU2hhZGVyQWJzdHJhY3QgfSBmcm9tICcuL29mU2hhZGVyQWJzdHJhY3QnO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NldHRpbmdzL29mVHJhbnNsYXRpb25zJztcclxuaW1wb3J0IHsgT0ZDb25zb2xlIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9vZkNvbnNvbGUnO1xyXG5pbXBvcnQgeyBPRkdMSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9vZkdMSGVscGVyJztcclxuaW1wb3J0IHsgT0ZEZWZhdWx0U2hhZGVyU291cmNlcywgSU9GRGVmYXVsdFNoYWRlclNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL2RlZmF1bHQtYXNzZXRzL29mRGVmYXVsdFNoYWRlclNvdXJjZXMnO1xyXG5pbXBvcnQgeyBPRklTaGFkZXJDb2RlSW5mbyB9IGZyb20gJy4uLy4uLy4uLy4uL2Nyb3NzLWN1dHRpbmcvc2hhZGVyLWFuYWxpemVyL2RhdGEvb2ZJU2hhZGVyQ29kZUluZm8nO1xyXG5pbXBvcnQgeyBPRlNoYWRlckFuYWxpemVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vY3Jvc3MtY3V0dGluZy9zaGFkZXItYW5hbGl6ZXIvb2ZTaGFkZXJBbmFsaXplcic7XHJcbmltcG9ydCB7IElEaWN0aW9uYXJ5IH0gZnJvbSAnc2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIE9GRGljdGlvbmFyeTxUPiB7IFtLZXk6IHN0cmluZ106IFQ7IH1cclxuXHJcbmV4cG9ydCBjbGFzcyBPRlNoYWRlckZhY3Rvcnkge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IF9mcmFtZXdvcms6IE9GRnJhbWV3b3JrO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX3NoYWRlclJlcG9zaXRvcnk6IElEaWN0aW9uYXJ5PE9GQmFzZVNoYWRlcj47XHJcblxyXG4gIGdldCBmcmFtZXdvcmsoKTogT0ZGcmFtZXdvcmsgeyByZXR1cm4gdGhpcy5fZnJhbWV3b3JrOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGdyYXBoaWNEZXZpY2U6IE9GR3JhcGhpY0RldmljZSkge1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrID0gZ3JhcGhpY0RldmljZS5mcmFtZXdvcms7XHJcbiAgICB0aGlzLl9zaGFkZXJSZXBvc2l0b3J5ID0ge307XHJcbiAgfVxyXG5cclxuICByZXRyaWV2ZVNoYWRlcjxUIGV4dGVuZHMgT0ZCYXNlU2hhZGVyPiAobmFtZTogc3RyaW5nKTogVCB7XHJcbiAgICBsZXQgc2hhZGVyUmVzdWx0OiBPRkJhc2VTaGFkZXI7XHJcblxyXG4gICAgLy8gU2VhcmNoIGFzIFVJRFxyXG4gICAgaWYgKHRoaXMuX3NoYWRlclJlcG9zaXRvcnkuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgc2hhZGVyUmVzdWx0ID0gdGhpcy5fc2hhZGVyUmVwb3NpdG9yeVtuYW1lXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFNlYXJjaCBhbGwgU2hhZGVycyBieSB0aGUgTmFtZVxyXG4gICAgICBmb3IgKGNvbnN0IHNoYWRlck5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5fc2hhZGVyUmVwb3NpdG9yeSkpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2hhZGVyUmVwb3NpdG9yeVtzaGFkZXJOYW1lXS5uYW1lID09PSBuYW1lKSB7XHJcbiAgICAgICAgICBzaGFkZXJSZXN1bHQgPSB0aGlzLl9zaGFkZXJSZXBvc2l0b3J5W3NoYWRlck5hbWVdO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNoYWRlclJlc3VsdCBhcyBUO1xyXG4gIH1cclxuXHJcbiAgbG9hZERlZmF1bHQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZFNoYWRlcignU2hhZGVyUHJpbWl0aXZlJywgbmV3IE9GU2hhZGVyUHJpbWl0aXZlKHRoaXMsIE9GRGVmYXVsdFNoYWRlclNvdXJjZXMuU291cmNlc1NoYWRlclByaW1pdGl2ZSkpO1xyXG4gICAgdGhpcy5hZGRTaGFkZXIoJ1NoYWRlclRleHR1cmUnLCBuZXcgT0ZTaGFkZXJUZXh0dXJlKHRoaXMsIE9GRGVmYXVsdFNoYWRlclNvdXJjZXMuU291cmNlc1NoYWRlclRleHR1cmUpKTtcclxuICB9XHJcblxyXG4gIGxvYWRBbmRBZGRTaGFkZXJXaXRoQ29kZUluZm8gKHNoYWRlck5hbWU6IHN0cmluZywgc2hhZGVyT2JqZWN0OiBJT0ZEZWZhdWx0U2hhZGVyU291cmNlLFxyXG4gICAgc2hhZGVyQ29kZUluZm86IE9GSVNoYWRlckNvZGVJbmZvID0gbnVsbCwgdWlkOiBzdHJpbmcpOiBPRlNoYWRlckFic3RyYWN0IHtcclxuXHJcbiAgICBpZiAoIXNoYWRlckNvZGVJbmZvKSB7XHJcbiAgICAgIHNoYWRlckNvZGVJbmZvID0gT0ZTaGFkZXJBbmFsaXplci5hbmFsaXplKHNoYWRlck9iamVjdC52ZXJ0ZXgpO1xyXG4gICAgICBzaGFkZXJDb2RlSW5mbyA9IE9GU2hhZGVyQW5hbGl6ZXIuYW5hbGl6ZShzaGFkZXJPYmplY3QuZnJhZ21lbnQsIHNoYWRlckNvZGVJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zaGFkZXJSZXBvc2l0b3J5W3VpZF0gPSBuZXcgT0ZTaGFkZXJBYnN0cmFjdCh0aGlzLCBzaGFkZXJPYmplY3QsIHNoYWRlckNvZGVJbmZvKTtcclxuICAgIHRoaXMuX3NoYWRlclJlcG9zaXRvcnlbdWlkXS5uYW1lID0gc2hhZGVyTmFtZTtcclxuXHJcbiAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5TaGFkZXJGYWN0b3J5LmxvYWRBbmRBZGRTaGFkZXJXaXRoQ29kZUluZm8sXHJcbiAgICAgIHRoaXMuX2ZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIHNoYWRlck5hbWUpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9zaGFkZXJSZXBvc2l0b3J5W3VpZF0gYXMgT0ZTaGFkZXJBYnN0cmFjdDtcclxuICB9XHJcblxyXG4gIGFkZFNoYWRlciAoc2hhZGVyTmFtZTogc3RyaW5nLCBzaGFkZXI6IE9GQmFzZVNoYWRlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fc2hhZGVyUmVwb3NpdG9yeVtzaGFkZXJOYW1lXSA9IHNoYWRlcjtcclxuICAgIHRoaXMuX3NoYWRlclJlcG9zaXRvcnlbc2hhZGVyTmFtZV0ubmFtZSA9IHNoYWRlck5hbWU7XHJcblxyXG4gICAgT0ZDb25zb2xlLmxvZyhPRlRyYW5zbGF0aW9ucy5GcmFtZXdvcmsuU2hhZGVyRmFjdG9yeS5hZGRTaGFkZXIsXHJcbiAgICAgIHRoaXMuX2ZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIHNoYWRlck5hbWUpO1xyXG4gIH1cclxuXHJcbiAgaW5zdGFuY2VTaGFkZXIgKHNvdXJjZVRhcmdldDogSU9GRGVmYXVsdFNoYWRlclNvdXJjZSk6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLmdyYXBoaWNEZXZpY2UuZ3JhcGhpY0NvbnRleHQ7XHJcbiAgICBjb25zdCBzYW5pdGl6ZWRWZXJ0ZXhTb3VyY2UgPSBPRlNoYWRlckFuYWxpemVyLnNhbml0aXplKHNvdXJjZVRhcmdldC52ZXJ0ZXgpO1xyXG4gICAgY29uc3Qgc2FuaXRpemVkRnJhZ21lbnRTb3VyY2UgPSBPRlNoYWRlckFuYWxpemVyLnNhbml0aXplKHNvdXJjZVRhcmdldC5mcmFnbWVudCk7XHJcblxyXG4gICAgY29uc3QgdmVydGV4ID0gT0ZHTEhlbHBlci5jb21waWxlU2hhZGVyKF9HTCwgc2FuaXRpemVkVmVydGV4U291cmNlLCBfR0wuVkVSVEVYX1NIQURFUik7XHJcbiAgICBjb25zdCBmcmFnbWVudCA9IE9GR0xIZWxwZXIuY29tcGlsZVNoYWRlcihfR0wsIHNhbml0aXplZEZyYWdtZW50U291cmNlLCBfR0wuRlJBR01FTlRfU0hBREVSKTtcclxuXHJcbiAgICByZXR1cm4gT0ZHTEhlbHBlci5jcmVhdGVQcm9ncmFtKF9HTCwgdmVydGV4LCBmcmFnbWVudCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQmFzZVNoYWRlciB9IGZyb20gJy4vb2ZCYXNlU2hhZGVyJztcclxuaW1wb3J0IHsgT0ZTaGFkZXJGYWN0b3J5IH0gZnJvbSAnLi9vZlNoYWRlckZhY3RvcnknO1xyXG5pbXBvcnQgeyBJT0ZEZWZhdWx0U2hhZGVyU291cmNlIH0gZnJvbSAnLi4vLi4vLi4vZGVmYXVsdC1hc3NldHMvb2ZEZWZhdWx0U2hhZGVyU291cmNlcyc7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tICcuLi8uLi8uLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3MnO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSAnLi4vZ3JhcGhpY3Mvb2ZDb2xvcic7XHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GU2hhZGVyUHJpbWl0aXZlIGV4dGVuZHMgT0ZCYXNlU2hhZGVyIHtcclxuXHJcbiAgcHJpdmF0ZSBfdmVydGV4UG9zaXRpb25BdHRyOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfdW5pZm9ybVdWUE1hdHJpeDogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcbiAgcHJpdmF0ZSBfdW5pZm9ybUNvbG9yOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcclxuXHJcbiAgY29sb3I6IE9GQ29sb3I7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSBfc2hhZGVyRmFjdG9yeTogT0ZTaGFkZXJGYWN0b3J5LCBzb3VyY2VUYXJnZXQ6IElPRkRlZmF1bHRTaGFkZXJTb3VyY2UpIHtcclxuICAgIHN1cGVyKF9zaGFkZXJGYWN0b3J5LCBzb3VyY2VUYXJnZXQpO1xyXG5cclxuICAgIHRoaXMuY29sb3IgPSBPRkNvbG9yLndoaXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaGFkZXJMb2NhdGlvbnMoX0dMOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3ZlcnRleFBvc2l0aW9uQXR0ciA9IF9HTC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAnYVZlcnRleFBvc2l0aW9uJyk7XHJcbiAgICB0aGlzLl91bmlmb3JtV1ZQTWF0cml4ID0gX0dMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAndVdWUE1hdHJpeCcpO1xyXG4gICAgdGhpcy5fdW5pZm9ybUNvbG9yID0gX0dMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAndUNvbG9yJyk7XHJcbiAgfVxyXG5cclxuICBkcmF3KGFyZ3M6IElPRlJlbmRlckFyZ3MsIHZlcnRleEJ1ZmZlcjogV2ViR0xCdWZmZXIsIGluZGV4QnVmZmVyOiBXZWJHTEJ1ZmZlcixcclxuICAgIHJlbmRlclR5cGU6IG51bWJlciwgY291bnQ6IG51bWJlciwgb3ZlcnJpZGVUcmFuc2Zvcm1hdGlvbjogbWF0NCA9IG51bGwpOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBfR0wgPSB0aGlzLl9ncmFwaGljQ29udGV4dDtcclxuXHJcbiAgICAvLyBFbmFibGUgYmxlbmRpbmdcclxuICAgIF9HTC5lbmFibGUoX0dMLkJMRU5EKTtcclxuICAgIF9HTC5ibGVuZEZ1bmMoX0dMLlNSQ19BTFBIQSwgX0dMLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG4gICAgX0dMLnVzZVByb2dyYW0odGhpcy5fc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICBfR0wuYmluZEJ1ZmZlcihfR0wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpO1xyXG4gICAgX0dMLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuX3ZlcnRleFBvc2l0aW9uQXR0cik7XHJcbiAgICBfR0wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl92ZXJ0ZXhQb3NpdGlvbkF0dHIsIDMsIF9HTC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG5cclxuICAgIC8vIEdldCBUcmFuc2Zvcm1hdGlvbiBNYXRyaXggZnJvbSBSZW5kZXJDYW1lcmFcclxuICAgIGNvbnN0IHRyYW5zZm9ybWVkTWF0cml4ID0gdGhpcy5fcmVuZGVyQ2FtZXJhLnRyYW5zZm9ybWVkTWF0cml4O1xyXG5cclxuICAgIC8vIE5vdyBtdWx0aXBseSB0aGUgQ2FtZXJhIHRyYW5zZm9ybWVkIE1hdHJpeCB3aXRoIHRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbnMgTWF0cml4LlxyXG4gICAgaWYgKCFvdmVycmlkZVRyYW5zZm9ybWF0aW9uKSB7XHJcbiAgICAgIG1hdDQubXVsdGlwbHkodHJhbnNmb3JtZWRNYXRyaXgsIHRyYW5zZm9ybWVkTWF0cml4LCB0aGlzLl93b3JsZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYXQ0Lm11bHRpcGx5KHRyYW5zZm9ybWVkTWF0cml4LCB0cmFuc2Zvcm1lZE1hdHJpeCwgb3ZlcnJpZGVUcmFuc2Zvcm1hdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHVuaWZvcm0gZm9yIFdWUCBNYXRyaXhcclxuICAgIF9HTC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VuaWZvcm1XVlBNYXRyaXgsIGZhbHNlLCB0cmFuc2Zvcm1lZE1hdHJpeCk7XHJcbiAgICAvLyBTZXQgdW5pZm9ybSBmb3IgQ29sb3JcclxuICAgIF9HTC51bmlmb3JtNGYodGhpcy5fdW5pZm9ybUNvbG9yLCB0aGlzLmNvbG9yLnIsIHRoaXMuY29sb3IuZywgdGhpcy5jb2xvci5iLCB0aGlzLmNvbG9yLmEpO1xyXG5cclxuICAgIC8vIE5vdyBkcmF3IGFycmF5c1xyXG4gICAgcmVuZGVyVHlwZSA9ICFyZW5kZXJUeXBlID8gX0dMLlRSSUFOR0xFX1NUUklQIDogcmVuZGVyVHlwZTtcclxuXHJcbiAgICBpZiAoaW5kZXhCdWZmZXIpIHtcclxuICAgICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICAgIF9HTC5kcmF3RWxlbWVudHMocmVuZGVyVHlwZSwgY291bnQsIF9HTC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBfR0wuZHJhd0FycmF5cyhyZW5kZXJUeXBlLCAwLCBjb3VudCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQmFzZVNoYWRlciB9IGZyb20gJy4vb2ZCYXNlU2hhZGVyJztcclxuaW1wb3J0IHsgT0ZTaGFkZXJGYWN0b3J5IH0gZnJvbSAnLi9vZlNoYWRlckZhY3RvcnknO1xyXG5pbXBvcnQgeyBJT0ZEZWZhdWx0U2hhZGVyU291cmNlIH0gZnJvbSAnLi4vLi4vLi4vZGVmYXVsdC1hc3NldHMvb2ZEZWZhdWx0U2hhZGVyU291cmNlcyc7XHJcbmltcG9ydCB7IE9GQ29sb3IgfSBmcm9tICcuLi9ncmFwaGljcy9vZkNvbG9yJztcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJncyc7XHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GU2hhZGVyVGV4dHVyZSBleHRlbmRzIE9GQmFzZVNoYWRlciB7XHJcblxyXG4gIGNvbG9yOiBPRkNvbG9yO1xyXG5cclxuICBwcml2YXRlIF92ZXJ0ZXhQb3NpdGlvbkF0dHI6IG51bWJlcjtcclxuICBwcml2YXRlIF90ZXh0dXJlQ29vcmRQb3NpdGlvbkF0dHI6IG51bWJlcjtcclxuICBwcml2YXRlIF9zYW1wbGVyUG9zaXRpb25Vbmlmb3JtOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcclxuICBwcml2YXRlIF91bmlmb3JtV1ZQTWF0cml4OiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcclxuICBwcml2YXRlIF91bmlmb3JtQ29sb3I6IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgX3NoYWRlckZhY3Rvcnk6IE9GU2hhZGVyRmFjdG9yeSwgc291cmNlVGFyZ2V0OiBJT0ZEZWZhdWx0U2hhZGVyU291cmNlKSB7XHJcbiAgICBzdXBlcihfc2hhZGVyRmFjdG9yeSwgc291cmNlVGFyZ2V0KTtcclxuXHJcbiAgICB0aGlzLmNvbG9yID0gT0ZDb2xvci53aGl0ZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hhZGVyTG9jYXRpb25zKF9HTDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICB0aGlzLl92ZXJ0ZXhQb3NpdGlvbkF0dHIgPSBfR0wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyUHJvZ3JhbSwgJ2FWZXJ0ZXhQb3NpdGlvbicpO1xyXG4gICAgdGhpcy5fdGV4dHVyZUNvb3JkUG9zaXRpb25BdHRyID0gX0dMLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclByb2dyYW0sICdhVGV4dHVyZUNvb3JkJyk7XHJcbiAgICB0aGlzLl9zYW1wbGVyUG9zaXRpb25Vbmlmb3JtID0gX0dMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAndVNhbXBsZXJUZXh0dXJlJyk7XHJcbiAgICB0aGlzLl91bmlmb3JtV1ZQTWF0cml4ID0gX0dMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAndVdWUE1hdHJpeCcpO1xyXG4gICAgdGhpcy5fdW5pZm9ybUNvbG9yID0gX0dMLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJQcm9ncmFtLCAndUNvbG9yJyk7XHJcbiAgfVxyXG5cclxuICBkcmF3IChhcmdzOiBJT0ZSZW5kZXJBcmdzLCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHZlcnRleEJ1ZmZlcjogV2ViR0xCdWZmZXIsIHRyYW5zZm9ybWF0aW9uPzogbWF0NCk6IHZvaWQge1xyXG4gICAgY29uc3QgX0dMID0gdGhpcy5fZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gICAgLy8gRW5hYmxlIGJsZW5kaW5nXHJcbiAgICBfR0wuZW5hYmxlKF9HTC5CTEVORCk7XHJcbiAgICBfR0wuYmxlbmRGdW5jKF9HTC5TUkNfQUxQSEEsIF9HTC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICBfR0wudXNlUHJvZ3JhbSh0aGlzLl9zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICBfR0wuYWN0aXZlVGV4dHVyZShfR0wuVEVYVFVSRTApO1xyXG4gICAgX0dMLmJpbmRUZXh0dXJlKF9HTC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcclxuICAgIF9HTC51bmlmb3JtMWkodGhpcy5fc2FtcGxlclBvc2l0aW9uVW5pZm9ybSwgMCk7XHJcblxyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkFSUkFZX0JVRkZFUiwgdmVydGV4QnVmZmVyKTtcclxuXHJcbiAgICBfR0wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fdmVydGV4UG9zaXRpb25BdHRyKTtcclxuICAgIF9HTC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl90ZXh0dXJlQ29vcmRQb3NpdGlvbkF0dHIpO1xyXG4gICAgX0dMLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fdmVydGV4UG9zaXRpb25BdHRyLCAzLCBfR0wuRkxPQVQsIGZhbHNlLCAyMCwgMCk7XHJcbiAgICBfR0wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl90ZXh0dXJlQ29vcmRQb3NpdGlvbkF0dHIsIDIsIF9HTC5GTE9BVCwgZmFsc2UsIDIwLCAxMik7XHJcblxyXG4gICAgLy8gR2V0IFRyYW5zZm9ybWF0aW9uIE1hdHJpeCBmcm9tIFJlbmRlckNhbWVyYVxyXG4gICAgY29uc3QgdHJhbnNmb3JtZWRNYXRyaXggPSB0aGlzLl9yZW5kZXJDYW1lcmEudHJhbnNmb3JtZWRNYXRyaXg7XHJcblxyXG4gICAgLy8gTm93IG11bHRpcGx5IHRoZSBDYW1lcmEgdHJhbnNmb3JtZWQgTWF0cml4IHdpdGggdGhlIGxvY2FsXHJcbiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMgTWF0cml4LlxyXG4gICAgaWYgKCF0cmFuc2Zvcm1hdGlvbikge1xyXG4gICAgICBtYXQ0Lm11bHRpcGx5KHRyYW5zZm9ybWVkTWF0cml4LCB0cmFuc2Zvcm1lZE1hdHJpeCwgdGhpcy5fd29ybGQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbWF0NC5tdWx0aXBseSh0cmFuc2Zvcm1lZE1hdHJpeCwgdHJhbnNmb3JtZWRNYXRyaXgsIHRyYW5zZm9ybWF0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdW5pZm9ybSBmb3IgV1ZQIE1hdHJpeFxyXG4gICAgX0dMLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdW5pZm9ybVdWUE1hdHJpeCwgZmFsc2UsIHRyYW5zZm9ybWVkTWF0cml4KTtcclxuICAgIC8vIFNldCB1bmlmb3JtIGZvciBDb2xvclxyXG4gICAgX0dMLnVuaWZvcm00Zih0aGlzLl91bmlmb3JtQ29sb3IsIHRoaXMuY29sb3IuciwgdGhpcy5jb2xvci5nLCB0aGlzLmNvbG9yLmIsIHRoaXMuY29sb3IuYSk7XHJcblxyXG4gICAgLy8gTm93IGRyYXcgYXJyYXlzXHJcbiAgICBfR0wuZHJhd0FycmF5cyhfR0wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xyXG4gIH1cclxuXHJcbiAgZHJhd0VsZW1lbnRzIChhcmdzOiBJT0ZSZW5kZXJBcmdzLCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIGluZGV4QnVmZmVyOiBXZWJHTEJ1ZmZlcixcclxuICAgIHZlcnRleEJ1ZmZlcjogV2ViR0xCdWZmZXIsIGluZGV4Q291bnQ6IG51bWJlcikge1xyXG5cclxuICAgIGNvbnN0IF9HTCA9IHRoaXMuX2dyYXBoaWNDb250ZXh0O1xyXG5cclxuICAgIC8vIEVuYWJsZSBibGVuZGluZ1xyXG4gICAgX0dMLmVuYWJsZShfR0wuQkxFTkQpO1xyXG4gICAgX0dMLmJsZW5kRnVuYyhfR0wuU1JDX0FMUEhBLCBfR0wuT05FX01JTlVTX1NSQ19BTFBIQSk7XHJcblxyXG4gICAgX0dMLnVzZVByb2dyYW0odGhpcy5fc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgX0dMLmFjdGl2ZVRleHR1cmUoX0dMLlRFWFRVUkUwKTtcclxuICAgIF9HTC5iaW5kVGV4dHVyZShfR0wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICBfR0wudW5pZm9ybTFpKHRoaXMuX3NhbXBsZXJQb3NpdGlvblVuaWZvcm0sIDApO1xyXG5cclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5BUlJBWV9CVUZGRVIsIHZlcnRleEJ1ZmZlcik7XHJcbiAgICBfR0wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fdmVydGV4UG9zaXRpb25BdHRyKTtcclxuICAgIF9HTC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl90ZXh0dXJlQ29vcmRQb3NpdGlvbkF0dHIpO1xyXG4gICAgX0dMLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fdmVydGV4UG9zaXRpb25BdHRyLCAzLCBfR0wuRkxPQVQsIGZhbHNlLCAyMCwgMCk7XHJcbiAgICBfR0wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl90ZXh0dXJlQ29vcmRQb3NpdGlvbkF0dHIsIDIsIF9HTC5GTE9BVCwgZmFsc2UsIDIwLCAxMik7XHJcblxyXG4gICAgLy8gR2V0IFRyYW5zZm9ybWF0aW9uIE1hdHJpeCBmcm9tIFJlbmRlckNhbWVyYVxyXG4gICAgY29uc3QgdHJhbnNmb3JtZWRNYXRyaXggPSB0aGlzLl9yZW5kZXJDYW1lcmEudHJhbnNmb3JtZWRNYXRyaXg7XHJcblxyXG4gICAgLy8gTm93IG11bHRpcGx5IHRoZSBDYW1lcmEgdHJhbnNmb3JtZWQgTWF0cml4IHdpdGggdGhlIGxvY2FsXHJcbiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMgTWF0cml4LlxyXG4gICAgbWF0NC5tdWx0aXBseSh0cmFuc2Zvcm1lZE1hdHJpeCwgdHJhbnNmb3JtZWRNYXRyaXgsIHRoaXMuX3dvcmxkKTtcclxuXHJcbiAgICAvLyBTZXQgdW5pZm9ybSBmb3IgV1ZQIE1hdHJpeFxyXG4gICAgX0dMLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdW5pZm9ybVdWUE1hdHJpeCwgZmFsc2UsIHRyYW5zZm9ybWVkTWF0cml4KTtcclxuICAgIC8vIFNldCB1bmlmb3JtIGZvciBDb2xvclxyXG4gICAgX0dMLnVuaWZvcm00Zih0aGlzLl91bmlmb3JtQ29sb3IsIHRoaXMuY29sb3IuciwgdGhpcy5jb2xvci5nLCB0aGlzLmNvbG9yLmIsIHRoaXMuY29sb3IuYSk7XHJcblxyXG4gICAgLy8gTm93IGRyYXcgYXJyYXlzXHJcbiAgICAvLyBHTC5kcmF3QXJyYXlzKEdMLlRSSUFOR0xFX1NUUklQLCAwLCBpbmRleENvdW50KTtcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xyXG4gICAgX0dMLmRyYXdFbGVtZW50cyhfR0wuVFJJQU5HTEVfU1RSSVAsIGluZGV4Q291bnQsIF9HTC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcblxyXG4gICAgLy8gY2xlYXJcclxuICAgIF9HTC5iaW5kQnVmZmVyKF9HTC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgX0dMLmJpbmRCdWZmZXIoX0dMLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFNNYXQyIHtcclxuICBwcml2YXRlIF9hcnJheTogQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgZ2V0IGFycmF5KCk6IEFycmF5PG51bWJlcj4ge1xyXG4gICAgdGhpcy5fYXJyYXlbMF0gPSB0aGlzLm0wMDtcclxuICAgIHRoaXMuX2FycmF5WzFdID0gdGhpcy5tMDE7XHJcbiAgICB0aGlzLl9hcnJheVsyXSA9IHRoaXMubTEwO1xyXG4gICAgdGhpcy5fYXJyYXlbM10gPSB0aGlzLm0xMTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbTAwOiBudW1iZXIsIHB1YmxpYyBtMDE6IG51bWJlciwgcHVibGljIG0xMDogbnVtYmVyLCBwdWJsaWMgbTExOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX2FycmF5ID0gW20wMCwgbTAxLCBtMTAsIG0xMV07XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBTTWF0MyB7XHJcbiAgcHJpdmF0ZSBfYXJyYXk6IEFycmF5PG51bWJlcj47XHJcblxyXG4gIGdldCBhcnJheSgpOiBBcnJheTxudW1iZXI+IHtcclxuICAgIHRoaXMuX2FycmF5WzBdID0gdGhpcy5tMDA7XHJcbiAgICB0aGlzLl9hcnJheVsxXSA9IHRoaXMubTAxO1xyXG4gICAgdGhpcy5fYXJyYXlbMl0gPSB0aGlzLm0wMjtcclxuICAgIHRoaXMuX2FycmF5WzNdID0gdGhpcy5tMTA7XHJcbiAgICB0aGlzLl9hcnJheVs0XSA9IHRoaXMubTExO1xyXG4gICAgdGhpcy5fYXJyYXlbNV0gPSB0aGlzLm0xMjtcclxuICAgIHRoaXMuX2FycmF5WzZdID0gdGhpcy5tMjA7XHJcbiAgICB0aGlzLl9hcnJheVs3XSA9IHRoaXMubTIxO1xyXG4gICAgdGhpcy5fYXJyYXlbOF0gPSB0aGlzLm0yMjtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBtMDA6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMDE6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMDI6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMTA6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMTE6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMTI6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMjA6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMjE6IG51bWJlcixcclxuICAgIHB1YmxpYyBtMjI6IG51bWJlclxyXG4gICkge1xyXG4gICAgdGhpcy5fYXJyYXkgPSBbbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMl07XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBTTWF0NCB7XHJcbiAgcHJpdmF0ZSBfYXJyYXk6IEFycmF5PG51bWJlcj47XHJcblxyXG4gIGdldCBhcnJheSgpOiBBcnJheTxudW1iZXI+IHtcclxuICAgIHRoaXMuX2FycmF5WzBdID0gdGhpcy5tMDA7XHJcbiAgICB0aGlzLl9hcnJheVsxXSA9IHRoaXMubTAxO1xyXG4gICAgdGhpcy5fYXJyYXlbMl0gPSB0aGlzLm0wMjtcclxuICAgIHRoaXMuX2FycmF5WzNdID0gdGhpcy5tMDM7XHJcbiAgICB0aGlzLl9hcnJheVs0XSA9IHRoaXMubTEwO1xyXG4gICAgdGhpcy5fYXJyYXlbNV0gPSB0aGlzLm0xMTtcclxuICAgIHRoaXMuX2FycmF5WzZdID0gdGhpcy5tMTI7XHJcbiAgICB0aGlzLl9hcnJheVs3XSA9IHRoaXMubTEzO1xyXG4gICAgdGhpcy5fYXJyYXlbOF0gPSB0aGlzLm0yMDtcclxuICAgIHRoaXMuX2FycmF5WzldID0gdGhpcy5tMjE7XHJcbiAgICB0aGlzLl9hcnJheVsxMF0gPSB0aGlzLm0yMjtcclxuICAgIHRoaXMuX2FycmF5WzExXSA9IHRoaXMubTIzO1xyXG4gICAgdGhpcy5fYXJyYXlbMTJdID0gdGhpcy5tMzA7XHJcbiAgICB0aGlzLl9hcnJheVsxM10gPSB0aGlzLm0zMTtcclxuICAgIHRoaXMuX2FycmF5WzE0XSA9IHRoaXMubTMyO1xyXG4gICAgdGhpcy5fYXJyYXlbMTVdID0gdGhpcy5tMzM7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2FycmF5O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgbTAwOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTAxOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTAyOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTAzOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTEwOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTExOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTEyOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTEzOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTIwOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTIxOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTIyOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTIzOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTMwOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTMxOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTMyOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgbTMzOiBudW1iZXJcclxuICApIHtcclxuICAgIHRoaXMuX2FycmF5ID0gW20wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zM107XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBTVmVjMiB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHgsIHB1YmxpYyB5KSB7fVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBTVmVjMyB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHgsIHB1YmxpYyB5LCBwdWJsaWMgeikge31cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgU1ZlYzQge1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB4LCBwdWJsaWMgeSwgcHVibGljIHosIHB1YmxpYyB3KSB7fVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBPRlZpZXdwb3J0IHtcclxuICBjb25zdHJ1Y3RvciAoXHJcbiAgICBwdWJsaWMgeDogbnVtYmVyLFxyXG4gICAgcHVibGljIHk6IG51bWJlcixcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyLFxyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyKSB7IH1cclxuXHJcbiAgc3RhdGljIGVtcHR5KCk6IE9GVmlld3BvcnQge1xyXG4gICAgcmV0dXJuIG5ldyBPRlZpZXdwb3J0KDAsIDAsIDAsIDApO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgSU9GRGVmYXVsdFNoYWRlclNvdXJjZSB7XHJcbiAgdmVydGV4OiBzdHJpbmc7XHJcbiAgZnJhZ21lbnQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9GRGVmYXVsdFNoYWRlclNvdXJjZXMge1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgU291cmNlc1NoYWRlclByaW1pdGl2ZSA9IHtcclxuICAgIHZlcnRleDogXHJcbiAgICAgICAgXCJhdHRyaWJ1dGUgdmVjMyBhVmVydGV4UG9zaXRpb247XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInVuaWZvcm0gbWF0NCB1V1ZQTWF0cml4IDogQ2FtZXJhO1xcblxcblwiICtcclxuXHJcbiAgICAgICAgXCJ2YXJ5aW5nIG1lZGl1bXAgdmVjNCB2YXJ5aW5nQ29sb3I7XFxuXFxuXCIgK1xyXG4gIFxyXG4gICAgICAgIFwidm9pZCBtYWluKHZvaWQpIHtcXG5cIiArXHJcbiAgICAgICAgICAgIFwiICAgIGdsX1Bvc2l0aW9uID0gdVdWUE1hdHJpeCAqIHZlYzQoYVZlcnRleFBvc2l0aW9uLCAxLjApO1xcblwiICtcclxuICAgICAgICBcIn1cIixcclxuXHJcbiAgICBmcmFnbWVudDpcclxuICAgICAgICBcInVuaWZvcm0gbG93cCB2ZWM0IHVDb2xvciA6IENvbG9yO1xcblxcblwiICtcclxuXHJcbiAgICAgICAgXCJ2b2lkIG1haW4odm9pZCkge1xcblwiICtcclxuICAgICAgICBcIiAgICBnbF9GcmFnQ29sb3IgPSB1Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwifVwiXHJcbiAgfSBhcyBJT0ZEZWZhdWx0U2hhZGVyU291cmNlO1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgU291cmNlc1NoYWRlclRleHR1cmUgPSB7XHJcbiAgICB2ZXJ0ZXg6XHJcbiAgICAgICAgXCJhdHRyaWJ1dGUgdmVjMyBhVmVydGV4UG9zaXRpb247XFxuXCIgK1xyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidW5pZm9ybSBtYXQ0IHVXVlBNYXRyaXggOiBDYW1lcmE7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInZhcnlpbmcgaGlnaHAgdmVjMiB2YXJ5aW5nVGV4dHVyZUNvb3JkO1xcblxcblwiICtcclxuXHJcbiAgICAgICAgXCJ2b2lkIG1haW4odm9pZCkge1xcblwiICtcclxuICAgICAgICAgICAgXCIgICAgdmFyeWluZ1RleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7XFxuXCIgK1xyXG4gICAgICAgICAgICBcIiAgICBnbF9Qb3NpdGlvbiA9IHVXVlBNYXRyaXggKiB2ZWM0KGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKTtcXG5cIiArXHJcbiAgICAgICAgXCJ9XCIsXHJcblxyXG4gICAgZnJhZ21lbnQ6XHJcbiAgICAgICAgXCJ2YXJ5aW5nIGhpZ2hwIHZlYzIgdmFyeWluZ1RleHR1cmVDb29yZDtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidW5pZm9ybSBsb3dwIHZlYzQgdUNvbG9yIDogQ29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXJUZXh0dXJlIDogVGV4dHVyZTtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidm9pZCBtYWluKHZvaWQpIHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyVGV4dHVyZSwgdmFyeWluZ1RleHR1cmVDb29yZCkgKiB1Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwifVwiXHJcbiAgfSBhcyBJT0ZEZWZhdWx0U2hhZGVyU291cmNlO1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgU291cmNlc1NwaW5lU2hhZGVyVGV4dHVyZSA9IHtcclxuICAgIHZlcnRleDpcclxuICAgICAgICBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXhQb3NpdGlvbjtcXG5cIiArXHJcbiAgICAgICAgXCJhdHRyaWJ1dGUgdmVjNCBhVmVydGV4Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidW5pZm9ybSBtYXQ0IHVXVlBNYXRyaXggOiBDYW1lcmE7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInZhcnlpbmcgbG93cCB2ZWM0IHZhcnlpbmdWZXJ0ZXhDb2xvcjtcXG5cIiArXHJcbiAgICAgICAgXCJ2YXJ5aW5nIGhpZ2hwIHZlYzIgdmFyeWluZ1RleHR1cmVDb29yZDtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidm9pZCBtYWluKHZvaWQpIHtcXG5cIiArXHJcbiAgICAgICAgICAgIFwiICAgIHZhcnlpbmdWZXJ0ZXhDb2xvciA9IGFWZXJ0ZXhDb2xvcjtcXG5cIiArXHJcbiAgICAgICAgICAgIFwiICAgIHZhcnlpbmdUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xcblwiICtcclxuICAgICAgICAgICAgXCIgICAgZ2xfUG9zaXRpb24gPSB1V1ZQTWF0cml4ICogdmVjNChhVmVydGV4UG9zaXRpb24sIDAuMCwgMS4wKTtcXG5cIiArXHJcbiAgICAgICAgXCJ9XCIsXHJcblxyXG4gICAgZnJhZ21lbnQ6XHJcbiAgICAgICAgXCJ2YXJ5aW5nIGxvd3AgdmVjNCB2YXJ5aW5nVmVydGV4Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwidmFyeWluZyBoaWdocCB2ZWMyIHZhcnlpbmdUZXh0dXJlQ29vcmQ7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyVGV4dHVyZSA6IFRleHR1cmU7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInZvaWQgbWFpbih2b2lkKSB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlclRleHR1cmUsIHZhcnlpbmdUZXh0dXJlQ29vcmQpICogdmFyeWluZ1ZlcnRleENvbG9yO1xcblwiICtcclxuICAgICAgICBcIn1cIlxyXG4gIH0gYXMgSU9GRGVmYXVsdFNoYWRlclNvdXJjZTtcclxuXHJcbiAgc3RhdGljIHJlYWRvbmx5ICBTb3VyY2VzVGV4dFNoYWRlclRleHR1cmUgPSB7XHJcbiAgICB2ZXJ0ZXg6XHJcbiAgICAgICAgXCJhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XFxuXCIgK1xyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzQgYVZlcnRleENvbG9yO1xcblwiICtcclxuICAgICAgICBcImF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInVuaWZvcm0gbWF0NCB1V1ZQTWF0cml4IDogQ2FtZXJhO1xcblxcblwiICtcclxuXHJcbiAgICAgICAgXCJ2YXJ5aW5nIGxvd3AgdmVjNCB2YXJ5aW5nVmVydGV4Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwidmFyeWluZyBoaWdocCB2ZWMyIHZhcnlpbmdUZXh0dXJlQ29vcmQ7XFxuXFxuXCIgK1xyXG5cclxuICAgICAgICBcInZvaWQgbWFpbih2b2lkKSB7XFxuXCIgK1xyXG4gICAgICAgICAgICBcIiAgICB2YXJ5aW5nVmVydGV4Q29sb3IgPSBhVmVydGV4Q29sb3I7XFxuXCIgK1xyXG4gICAgICAgICAgICBcIiAgICB2YXJ5aW5nVGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcXG5cIiArXHJcbiAgICAgICAgICAgIFwiICAgIGdsX1Bvc2l0aW9uID0gdVdWUE1hdHJpeCAqIHZlYzQoYVZlcnRleFBvc2l0aW9uLCAwLjAsIDEuMCk7XFxuXCIgK1xyXG4gICAgICAgIFwifVwiLFxyXG5cclxuICAgIGZyYWdtZW50OlxyXG4gICAgICAgIFwidmFyeWluZyBsb3dwIHZlYzQgdmFyeWluZ1ZlcnRleENvbG9yO1xcblwiICtcclxuICAgICAgICBcInZhcnlpbmcgaGlnaHAgdmVjMiB2YXJ5aW5nVGV4dHVyZUNvb3JkO1xcblxcblwiICtcclxuXHJcbiAgICAgICAgXCJ1bmlmb3JtIGxvd3AgdmVjNCB1VGludENvbG9yIDogQ29sb3I7XFxuXCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXJUZXh0dXJlIDogVGV4dHVyZTtcXG5cXG5cIiArXHJcblxyXG4gICAgICAgIFwidm9pZCBtYWluKHZvaWQpIHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyVGV4dHVyZSwgdmFyeWluZ1RleHR1cmVDb29yZCkgKiB2YXJ5aW5nVmVydGV4Q29sb3IgKiB1VGludENvbG9yO1xcblwiICtcclxuICAgICAgICBcIn1cIlxyXG4gIH0gYXMgSU9GRGVmYXVsdFNoYWRlclNvdXJjZTtcclxufSIsImV4cG9ydCBlbnVtIE9GRW51bUNhbnZhc0NvbnRleHRUeXBlIHtcclxuICBEMkQgPSAnMmQnLFxyXG4gIEQzRCA9ICczZCdcclxufSIsImV4cG9ydCBlbnVtIE9GRW51bUtleUNvZGUge1xyXG4gIE5vbmUgPSAtMSxcclxuICBCYWNrc3BhY2UgPSA4LFxyXG4gIEp1bXBMaW5lID0gMTAsXHJcbiAgRW50ZXIgPSAxMyxcclxuICBTaGlmdCA9IDE2LFxyXG4gIENvbnRyb2wgPSAxNyxcclxuICBFc2NhcGUgPSAyNyxcclxuICBTcGFjZSA9IDMyLFxyXG4gIFF1b3RhdGlvbk1hcmsgPSAzNCxcclxuICBMZWZ0ID0gMzcsXHJcbiAgVXAgPSAzOCxcclxuICBSaWdodCA9IDM5LFxyXG4gIERvd24gPSA0MCxcclxuICBOdW1fMCA9IDk2LFxyXG4gIE51bV8xID0gOTcsXHJcbiAgTnVtXzIgPSA5OCxcclxuICBOdW1fMyA9IDk5LFxyXG4gIE51bV80ID0gMTAwLFxyXG4gIE51bV81ID0gMTAxLFxyXG4gIE51bV82ID0gMTAyLFxyXG4gIE51bV83ID0gMTAzLFxyXG4gIE51bV84ID0gMTA0LFxyXG4gIE51bV85ID0gMTA1LFxyXG4gIEVxdWFsc1NpZ24gPSA2MSxcclxuICBBID0gNjUsXHJcbiAgQiA9IDY2LFxyXG4gIEMgPSA2NyxcclxuICBEID0gNjgsXHJcbiAgRSA9IDY5LFxyXG4gIEYgPSA3MCxcclxuICBHID0gNzEsXHJcbiAgSCA9IDcyLFxyXG4gIEkgPSA3MyxcclxuICBKID0gNzQsXHJcbiAgSyA9IDc1LFxyXG4gIEwgPSA3NixcclxuICBNID0gNzcsXHJcbiAgTiA9IDc4LFxyXG4gIE8gPSA3OSxcclxuICBQID0gODAsXHJcbiAgUSA9IDgxLFxyXG4gIFIgPSA4MixcclxuICBTID0gODMsXHJcbiAgVCA9IDg0LFxyXG4gIFUgPSA4NSxcclxuICBWID0gODYsXHJcbiAgVyA9IDg3LFxyXG4gIFggPSA4OCxcclxuICBZID0gODksXHJcbiAgWiA9IDkwLFxyXG4gIEYxID0gMTEyLFxyXG4gIEYyID0gMTEzLFxyXG4gIEYzID0gMTE0LFxyXG4gIEY0ID0gMTE1LFxyXG4gIEY1ID0gMTE2LFxyXG4gIEY2ID0gMTE3LFxyXG4gIEY3ID0gMTE4LFxyXG4gIEY4ID0gMTE5LFxyXG4gIEY5ID0gMTIwLFxyXG4gIEYxMCA9IDEyMSxcclxuICBGMTEgPSAxMjIsXHJcbiAgRjEyID0gMTIzLFxyXG4gIEJhY2tzbGFzaCA9IDkyLFxyXG4gIE5vdGhpbmcgPSAxNjAsXHJcbn1cclxuIiwiZXhwb3J0IGVudW0gT0ZFbnVtUmVuZGVyRW5naW5lVHlwZSB7XHJcbiAgQ2FudmFzQ29udGV4dDJELFxyXG4gIFdlYkdMXHJcbn1cclxuIiwiZXhwb3J0IGVudW0gT0ZFbnVtVGV4dEFsaWduIHtcclxuICBMZWZ0ID0gMSxcclxuICBSaWdodCA9IDIsXHJcbiAgQ2VudGVyID0gM1xyXG59XHJcbiIsImltcG9ydCB7IE9GU3ByaXRlIH0gZnJvbSBcIi4uL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZlNwcml0ZVwiO1xyXG5pbXBvcnQgeyBPRlByaW1pdGl2ZVF1YWQgfSBmcm9tIFwiLi4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29mUHJpbWl0aXZlUXVhZFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GQ29sbGlzaW9uSGVscGVyIHtcclxuXHJcbiAgc3RhdGljIGhpdFRlc3RTcHJpdGUoYTogT0ZTcHJpdGUsIGI6IE9GU3ByaXRlKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB0aGlzWCA9IGEueCArIGEuY29sbGlzaW9uUmVjdC5vZmZzZXRYO1xyXG4gICAgY29uc3QgdGhpc1kgPSBhLnkgKyBhLmNvbGxpc2lvblJlY3Qub2Zmc2V0WTtcclxuICAgIGNvbnN0IG90aGVyWCA9IGIueCArIGIuY29sbGlzaW9uUmVjdC5vZmZzZXRYO1xyXG4gICAgY29uc3Qgb3RoZXJZID0gYi55ICsgYi5jb2xsaXNpb25SZWN0Lm9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXNYIDwgb3RoZXJYICsgYi5jb2xsaXNpb25SZWN0LndpZHRoICYmIHRoaXNYICsgYS5jb2xsaXNpb25SZWN0LndpZHRoID4gb3RoZXJYICYmXHJcbiAgICAgIHRoaXNZIDwgb3RoZXJZICsgYi5jb2xsaXNpb25SZWN0LmhlaWdodCAmJiBhLmNvbGxpc2lvblJlY3QuaGVpZ2h0ICsgdGhpc1kgPiBvdGhlclk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGl0VGVzdFF1YWQoYTogT0ZQcmltaXRpdmVRdWFkLCBiOiBPRlByaW1pdGl2ZVF1YWQpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHRoaXNYID0gYS54ICsgYS5vZmZzZXRYO1xyXG4gICAgY29uc3QgdGhpc1kgPSBhLnkgKyBhLm9mZnNldFk7XHJcbiAgICBjb25zdCBvdGhlclggPSBiLnggKyBiLm9mZnNldFg7XHJcbiAgICBjb25zdCBvdGhlclkgPSBiLnkgKyBiLm9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXNYIDwgb3RoZXJYICsgYi53aWR0aCAmJiB0aGlzWCArIGEud2lkdGggPiBvdGhlclggJiZcclxuICAgICAgdGhpc1kgPCBvdGhlclkgKyBiLmhlaWdodCAmJiBhLmhlaWdodCArIHRoaXNZID4gb3RoZXJZO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhpdFRlc3RCeVBvaW50UXVhZChhOiBPRlByaW1pdGl2ZVF1YWQsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBoV2lkdGggPSBhLndpZHRoICogMC41OyAgICAgICAgXHJcbiAgICBjb25zdCBoSGVpZ2h0ID0gYS5oZWlnaHQgKiAwLjU7XHJcbiAgICBjb25zdCB0aGlzWCA9IGEueCArIGEub2Zmc2V0WDtcclxuICAgIGNvbnN0IHRoaXNZID0gYS55ICsgYS5vZmZzZXRZO1xyXG4gICAgXHJcbiAgICByZXR1cm4gKHRoaXNYIC0gaFdpZHRoKSA8IHggJiYgKHRoaXNYICsgaFdpZHRoKSA+IHggJiYgXHJcbiAgICAgICh0aGlzWSAtIGhIZWlnaHQpIDwgeSAmJiAodGhpc1kgKyBoSGVpZ2h0KSA+IHk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGl0VGVzdEJ5UG9pbnRTcHJpdGUoYTogT0ZTcHJpdGUsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBoV2lkdGggPSBhLndpZHRoICogMC41OyAgICAgICAgXHJcbiAgICBjb25zdCBoSGVpZ2h0ID0gYS5oZWlnaHQgKiAwLjU7XHJcbiAgICBjb25zdCB0aGlzWCA9IGEueDtcclxuICAgIGNvbnN0IHRoaXNZID0gYS55O1xyXG4gICAgXHJcbiAgICByZXR1cm4gKHRoaXNYIC0gaFdpZHRoKSA8IHggJiYgKHRoaXNYICsgaFdpZHRoKSA+IHggJiYgXHJcbiAgICAgICh0aGlzWSAtIGhIZWlnaHQpIDwgeSAmJiAodGhpc1kgKyBoSGVpZ2h0KSA+IHk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgSVNURGVidWdDb25zb2xlLCBTVEhlbHBlcnMgfSBmcm9tICdzaHV0ZS10ZWNobm9sb2dpZXMuY29tbW9uLWFuZC11dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZDb25zb2xlIHtcclxuXHJcbiAgc3RhdGljIGluZm88VEluc3RhbmNlIGV4dGVuZHMgT2JqZWN0Pihmcm9tQ2xhc3M6IFRJbnN0YW5jZSwgbWVzc2FnZT86IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgIGNvbnNvbGUuaW5mbyhgJHtmcm9tQ2xhc3MuY29uc3RydWN0b3IubmFtZX0tPiAke1NUSGVscGVycy5mb3JtYXRTdHJpbmcgKG1lc3NhZ2UsIC4uLmFyZ3MpfWApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxvZzxUSW5zdGFuY2UgZXh0ZW5kcyBPYmplY3Q+KGZyb21DbGFzczogVEluc3RhbmNlLCBtZXNzYWdlPzogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgY29uc29sZS5sb2coYCR7ZnJvbUNsYXNzLmNvbnN0cnVjdG9yLm5hbWV9LT4gJHtTVEhlbHBlcnMuZm9ybWF0U3RyaW5nIChtZXNzYWdlLCAuLi5hcmdzKX1gKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB3YXJuPFRJbnN0YW5jZSBleHRlbmRzIE9iamVjdD4oZnJvbUNsYXNzOiBUSW5zdGFuY2UsIG1lc3NhZ2U/OiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLndhcm4oYCR7ZnJvbUNsYXNzLmNvbnN0cnVjdG9yLm5hbWV9LT4gJHtTVEhlbHBlcnMuZm9ybWF0U3RyaW5nIChtZXNzYWdlLCAuLi5hcmdzKX1gKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBlcnJvcjxUSW5zdGFuY2UgZXh0ZW5kcyBPYmplY3Q+KGZyb21DbGFzczogVEluc3RhbmNlLCBtZXNzYWdlPzogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgY29uc29sZS5lcnJvcihgJHtmcm9tQ2xhc3MuY29uc3RydWN0b3IubmFtZX0tPiAke1NUSGVscGVycy5mb3JtYXRTdHJpbmcgKG1lc3NhZ2UsIC4uLmFyZ3MpfWApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRocm93RXJyb3I8VEluc3RhbmNlIGV4dGVuZHMgT2JqZWN0Pihmcm9tQ2xhc3M6IFRJbnN0YW5jZSwgbWVzc2FnZT86IHN0cmluZyB8IHVua25vd24sIC4uLmFyZ3M6IHN0cmluZ1tdKTogRXJyb3Ige1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GQ29uc29sZSB9IGZyb20gXCIuL29mQ29uc29sZVwiO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gXCIuLi9zZXR0aW5ncy9vZlRyYW5zbGF0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHTEhDb21waWxlU2hhZGVyUmVzdWx0IHtcclxuICBzaGFkZXI6IFdlYkdMU2hhZGVyOyBcclxuICBoYXNFcnJvcnM6IGJvb2xlYW47IFxyXG4gIGVycm9yTWVzc2FnZTogc3RyaW5nOyBcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHTEhMaW5rU2hhZGVyUHJvZ3JhbVJlc3VsdCB7XHJcbiAgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtOyBcclxuICBoYXNFcnJvcnM6IGJvb2xlYW47IFxyXG4gIGVycm9yTWVzc2FnZTogc3RyaW5nOyBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9GR0xIZWxwZXIge1xyXG5cclxuICBzdGF0aWMgY29tcGlsZVNoYWRlciAoZ3JhcGhpY0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCAsIHNoYWRlclNvdXJjZTogc3RyaW5nLCBzaGFkZXJUeXBlOiBudW1iZXIpOiBXZWJHTFNoYWRlciB7XHJcbiAgICBjb25zdCBfR0wgPSBncmFwaGljQ29udGV4dDtcclxuICAgIGxldCBzaGFkZXJTb3VyY2VPYmplY3Q6IFdlYkdMU2hhZGVyO1xyXG5cclxuICAgIHN3aXRjaCAoc2hhZGVyVHlwZSkge1xyXG4gICAgICBjYXNlIF9HTC5WRVJURVhfU0hBREVSOlxyXG4gICAgICAgIHNoYWRlclNvdXJjZU9iamVjdCA9IF9HTC5jcmVhdGVTaGFkZXIoX0dMLlZFUlRFWF9TSEFERVIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIF9HTC5GUkFHTUVOVF9TSEFERVI6XHJcbiAgICAgICAgc2hhZGVyU291cmNlT2JqZWN0ID0gX0dMLmNyZWF0ZVNoYWRlcihfR0wuRlJBR01FTlRfU0hBREVSKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBCaW5kIHRoZSBzb3VyY2UgdG8gYSBzaGFkZXIgb2JqZWN0XHJcbiAgICBfR0wuc2hhZGVyU291cmNlKHNoYWRlclNvdXJjZU9iamVjdCwgc2hhZGVyU291cmNlKTtcclxuICAgIC8vIENvbXBpbGUgdGhlIHNoYWRlciBwcm9ncmFtXHJcbiAgICBfR0wuY29tcGlsZVNoYWRlcihzaGFkZXJTb3VyY2VPYmplY3QpO1xyXG4gICAgLy8gU2VlIGlmIGl0IGNvbXBpbGVkIHN1Y2Nlc3NmdWxseVxyXG4gICAgaWYgKCFfR0wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlclNvdXJjZU9iamVjdCwgX0dMLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5HTEhlbHBlci5jb21waWxlU2hhZGVyLCBcclxuICAgICAgICBfR0wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXJTb3VyY2VPYmplY3QpKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNoYWRlclNvdXJjZU9iamVjdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21waWxlU2hhZGVyV2l0aFJlc3VsdHMgKGdyYXBoaWNDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHNoYWRlclNvdXJjZTogc3RyaW5nLCBcclxuICAgIHNoYWRlclR5cGU6IG51bWJlcik6IEdMSENvbXBpbGVTaGFkZXJSZXN1bHQge1xyXG4gICAgXHJcbiAgICBjb25zdCBfR0wgPSBncmFwaGljQ29udGV4dDtcclxuICAgIGxldCBzaGFkZXJTb3VyY2VPYmplY3Q6IFdlYkdMU2hhZGVyO1xyXG4gICAgbGV0IGVycm9yc01lc3NhZ2U6IHN0cmluZyA9IG51bGw7XHJcblxyXG4gICAgc3dpdGNoIChzaGFkZXJUeXBlKSB7XHJcbiAgICAgIGNhc2UgX0dMLlZFUlRFWF9TSEFERVI6XHJcbiAgICAgICAgc2hhZGVyU291cmNlT2JqZWN0ID0gX0dMLmNyZWF0ZVNoYWRlcihfR0wuVkVSVEVYX1NIQURFUik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgX0dMLkZSQUdNRU5UX1NIQURFUjpcclxuICAgICAgICBzaGFkZXJTb3VyY2VPYmplY3QgPSBfR0wuY3JlYXRlU2hhZGVyKF9HTC5GUkFHTUVOVF9TSEFERVIpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJpbmQgdGhlIHNvdXJjZSB0byBhIHNoYWRlciBvYmplY3RcclxuICAgIF9HTC5zaGFkZXJTb3VyY2Uoc2hhZGVyU291cmNlT2JqZWN0LCBzaGFkZXJTb3VyY2UpO1xyXG4gICAgLy8gQ29tcGlsZSB0aGUgc2hhZGVyIHByb2dyYW1cclxuICAgIF9HTC5jb21waWxlU2hhZGVyKHNoYWRlclNvdXJjZU9iamVjdCk7XHJcbiAgICBcclxuICAgIC8vIFNlZSBpZiBpdCBjb21waWxlZCBzdWNjZXNzZnVsbHlcclxuICAgIGlmICghX0dMLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXJTb3VyY2VPYmplY3QsIF9HTC5DT01QSUxFX1NUQVRVUykpIHtcclxuICAgICAgZXJyb3JzTWVzc2FnZSA9IF9HTC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlclNvdXJjZU9iamVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgXHJcbiAgICAgIHNoYWRlcjogc2hhZGVyU291cmNlT2JqZWN0LCBcclxuICAgICAgaGFzRXJyb3JzOiBlcnJvcnNNZXNzYWdlICE9PSBudWxsLCBcclxuICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvcnNNZXNzYWdlIFxyXG4gICAgfSBhcyBHTEhDb21waWxlU2hhZGVyUmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZVByb2dyYW0gKGdyYXBoaWNDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIsIGZyYWdtZW50U2hhZGVyOiBXZWJHTFNoYWRlcik6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICBjb25zdCBfR0wgPSBncmFwaGljQ29udGV4dDtcclxuICAgIGNvbnN0IHNoYWRlclByb2dyYW06IFdlYkdMUHJvZ3JhbSA9IF9HTC5jcmVhdGVQcm9ncmFtKCk7XHJcblxyXG4gICAgX0dMLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgX0dMLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICBfR0wubGlua1Byb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgLy8gSWYgY3JlYXRpbmcgdGhlIHNoYWRlciBwcm9ncmFtIGZhaWxlZCwgYWxlcnRcclxuICAgIGlmICghX0dMLmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyUHJvZ3JhbSwgX0dMLkxJTktfU1RBVFVTKSkge1xyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5HTEhlbHBlci5jcmVhdGVQcm9ncmFtLCBcclxuICAgICAgICBfR0wuZ2V0UHJvZ3JhbUluZm9Mb2coc2hhZGVyUHJvZ3JhbSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaGFkZXJQcm9ncmFtO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZVByb2dyYW1XaXRoUmVzdWx0cyAoZ3JhcGhpY0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlciwgXHJcbiAgICBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXIpOiBHTEhMaW5rU2hhZGVyUHJvZ3JhbVJlc3VsdCB7XHJcbiAgICBcclxuICAgIGNvbnN0IF9HTCA9IGdyYXBoaWNDb250ZXh0O1xyXG4gICAgY29uc3Qgc2hhZGVyUHJvZ3JhbTogV2ViR0xQcm9ncmFtID0gX0dMLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGxldCBlcnJvcnNNZXNzYWdlOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICAgIF9HTC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgIF9HTC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xyXG4gICAgX0dMLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xyXG5cclxuICAgIC8vIElmIGNyZWF0aW5nIHRoZSBzaGFkZXIgcHJvZ3JhbSBmYWlsZWQsIGFsZXJ0XHJcbiAgICBpZiAoIV9HTC5nZXRQcm9ncmFtUGFyYW1ldGVyKHNoYWRlclByb2dyYW0sIF9HTC5MSU5LX1NUQVRVUykpIHtcclxuICAgICAgZXJyb3JzTWVzc2FnZSA9IF9HTC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgc2hhZGVyUHJvZ3JhbTogc2hhZGVyUHJvZ3JhbSwgXHJcbiAgICAgIGhhc0Vycm9yczogZXJyb3JzTWVzc2FnZSAhPT0gbnVsbCwgXHJcbiAgICAgIGVycm9yTWVzc2FnZTogZXJyb3JzTWVzc2FnZVxyXG4gICAgfSBhcyBHTEhMaW5rU2hhZGVyUHJvZ3JhbVJlc3VsdDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZWZWN0b3IyIH0gZnJvbSAnLi4vbWF0aC9vZlZlY3RvcjInO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gJy4uL29mRnJhbWV3b3JrJztcclxuaW1wb3J0IHsgSUNhbGxiYWNrMSB9IGZyb20gJ3NodXRlLXRlY2hub2xvZ2llcy5jb21tb24tYW5kLXV0aWxzJztcclxuXHJcbnR5cGUgSlF1ZXJ5TXVsdGlwbGVNb3VzZUV2ZW50ID0gXHJcbiAgSlF1ZXJ5Lk1vdXNlTW92ZUV2ZW50PERvY3VtZW50IHwgSFRNTEVsZW1lbnQsIHVuZGVmaW5lZCwgRWxlbWVudCwgRWxlbWVudD4gfCBcclxuICBKUXVlcnkuTW91c2VEb3duRXZlbnQ8RG9jdW1lbnQgfCBIVE1MRWxlbWVudCwgdW5kZWZpbmVkLCBFbGVtZW50LCBFbGVtZW50PiB8XHJcbiAgSlF1ZXJ5Lk1vdXNlVXBFdmVudDxEb2N1bWVudCB8IEhUTUxFbGVtZW50LCB1bmRlZmluZWQsIEVsZW1lbnQsIEVsZW1lbnQ+O1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GSFRNTEhlbHBlcnMge1xyXG5cclxuICBzdGF0aWMgY3JlYXRlQ2FudmFzICh3YXJuaW5nVGV4dDogc3RyaW5nLCBwYXJlbnREaXY6IEhUTUxCYXNlRWxlbWVudCwgaWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgZWxlbWVudFRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh3YXJuaW5nVGV4dCk7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBlbGVtZW50LmlkID0gaWQ7XHJcblxyXG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50VGV4dCk7XHJcbiAgICBwYXJlbnREaXYuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UG9zaXRpb25PZmZzZXQoZWxlbWVudDogSFRNTEJhc2VFbGVtZW50KTogT0ZWZWN0b3IyIHtcclxuICAgIGxldCByZXN1bHRYID0gMDtcclxuICAgIGxldCByZXN1bHRZID0gMDtcclxuXHJcbiAgICB3aGlsZSAoZWxlbWVudCAmJiAhaXNOYU4oZWxlbWVudC5vZmZzZXRMZWZ0KSAmJiAhaXNOYU4oZWxlbWVudC5vZmZzZXRUb3ApKSB7XHJcbiAgICAgIHJlc3VsdFggKz0gZWxlbWVudC5vZmZzZXRMZWZ0IC0gZWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICByZXN1bHRZICs9IGVsZW1lbnQub2Zmc2V0VG9wIC0gZWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCBhcyBIVE1MQmFzZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgeDogcmVzdWx0WCwgeTogcmVzdWx0WSB9IGFzIE9GVmVjdG9yMjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvbihlbGVtZW50OiBXaW5kb3cgfCBIVE1MQmFzZUVsZW1lbnQgfCBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogSUNhbGxiYWNrMTxFdmVudD4pOiB2b2lkIHtcclxuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnQpIGFzIEhUTUxDb2xsZWN0aW9uT2Y8SFRNTEJhc2VFbGVtZW50IHwgYW55PjtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gZWxlbWVudHMuaXRlbShpKTtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0uYXR0YWNoRXZlbnQpIHtcclxuICAgICAgICAgIGl0ZW0uYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZWxlbWVudFsnYXR0YWNoRXZlbnQnXSkgeyAvLyBJZiBbJ2F0dGFjaEV2ZW50J10gZXhpc3RzIHRoZW4gdXNlIGl0XHJcbiAgICAgICAgZWxlbWVudFsnYXR0YWNoRXZlbnQnXSgnb24nICsgZXZlbnROYW1lLCBjYWxsYmFjayk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb2ZmKGVsZW1lbnQ6IFdpbmRvdyB8IEhUTUxCYXNlRWxlbWVudCB8IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBJQ2FsbGJhY2sxPEV2ZW50Pik6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZWxlbWVudCkgYXMgSFRNTENvbGxlY3Rpb25PZjxIVE1MQmFzZUVsZW1lbnQ+O1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBlbGVtZW50cy5pdGVtKGkpO1xyXG5cclxuICAgICAgICBpZiAoaXRlbVsnZGV0YWNoRXZlbnQgJ10pIHtcclxuICAgICAgICAgIGl0ZW1bJ2RldGFjaEV2ZW50ICddKCdvbicgKyBldmVudE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICBpdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZWxlbWVudFsnZGV0YWNoRXZlbnQnXSkgeyAvLyBJZiBbJ2F0dGFjaEV2ZW50J10gZXhpc3RzIHRoZW4gdXNlIGl0XHJcbiAgICAgICAgZWxlbWVudFsnZGV0YWNoRXZlbnQnXSgnb24nICsgZXZlbnROYW1lLCBjYWxsYmFjayk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYWRkQ2xhc3MoZWxlbWVudENsYXNzTmFtZTogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnRDbGFzc05hbWUpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzLml0ZW0oaSk7XHJcblxyXG4gICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IGVsZW1lbnQuY2xhc3NOYW1lID8gJyAnICsgY2xhc3NOYW1lIDogY2xhc3NOYW1lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2VhcmNoV2ViRWxlbWVudFdpdGhJZCh3ZWJFbGVtZW50OiBFbGVtZW50LCBpZDogc3RyaW5nKTogRWxlbWVudCB7XHJcbiAgICBsZXQgY3VycmVudFdFID0gd2ViRWxlbWVudDtcclxuXHJcbiAgICB3aGlsZSAoY3VycmVudFdFKSB7XHJcbiAgICAgIGlmICghY3VycmVudFdFLmlkIHx8IChjdXJyZW50V0UuaWQgJiYgY3VycmVudFdFLmlkLmluZGV4T2YoaWQpID09PSAtMSkpIHtcclxuICAgICAgICBjdXJyZW50V0UgPSBjdXJyZW50V0UucGFyZW50RWxlbWVudDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyZW50V0U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2VhcmNoV2ViRWxlbWVudFdpdGhDbGFzcyh3ZWJFbGVtZW50OiBFbGVtZW50LCBhbmRXaXRoQ2xhc3M6IHN0cmluZyk6IEVsZW1lbnQge1xyXG4gICAgbGV0IGN1cnJlbnRXRSA9IHdlYkVsZW1lbnQ7XHJcblxyXG4gICAgd2hpbGUgKGN1cnJlbnRXRSkge1xyXG4gICAgICBpZiAoYW5kV2l0aENsYXNzID8gIU9GSFRNTEhlbHBlcnMud2ViRWxlbWVudEhhc0NsYXNzKGN1cnJlbnRXRSwgYW5kV2l0aENsYXNzKSA6IHRydWUpIHtcclxuICAgICAgICBjdXJyZW50V0UgPSBjdXJyZW50V0UucGFyZW50RWxlbWVudDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyZW50V0U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgd2ViRWxlbWVudEhhc0NsYXNzKHdlYkVsZW1lbnQ6IEVsZW1lbnQsIGNsYXNzTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBhdHRyQ2xhc3MgPSB3ZWJFbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgIGNvbnN0IGNsYXNzZXM6IHN0cmluZ1tdID0gYXR0ckNsYXNzID8gYXR0ckNsYXNzLnNwbGl0KCcgJykgOiBudWxsO1xyXG4gICAgcmV0dXJuIGNsYXNzZXMgPyBjbGFzc2VzLmluZGV4T2YoY2xhc3NOYW1lKSAhPT0gLTEgOiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwZXJjZW50V2lkdGggKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IChlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBlbGVtZW50KSBhcyBIVE1MRWxlbWVudDtcclxuICAgIHJldHVybiBOdW1iZXIoKChlbGVtZW50Lm9mZnNldFdpZHRoIC8gcGFyZW50Lm9mZnNldFdpZHRoKSAqIDEwMCkudG9GaXhlZCgyKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0TW91c2VQb3NpdGlvbihmcmFtZXdvcms6IE9GRnJhbWV3b3JrLCBtb3VzZUV2ZW50OiBKUXVlcnlNdWx0aXBsZU1vdXNlRXZlbnQpIDogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9IGFzIHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcclxuICAgIGxldCB0ZW1wWCA9IDA7XHJcbiAgICBsZXQgdGVtcFkgPSAwO1xyXG4gICAgY29uc3QgSUUgPSAhIWRvY3VtZW50LmFsbDtcclxuXHJcbiAgICBpZiAoSUUpIHsgLy8gZ3JhYiB0aGUgeC15IHBvcy5zIGlmIGJyb3dzZXIgaXMgSUVcclxuICAgICAgdGVtcFggPSBtb3VzZUV2ZW50LmNsaWVudFggKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XHJcbiAgICAgIHRlbXBZID0gbW91c2VFdmVudC5jbGllbnRZICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XHJcbiAgICB9IGVsc2UgeyAgLy8gZ3JhYiB0aGUgeC15IHBvcy5zIGlmIGJyb3dzZXIgaXMgTlNcclxuICAgICAgdGVtcFggPSBtb3VzZUV2ZW50LnBhZ2VYO1xyXG4gICAgICB0ZW1wWSA9IG1vdXNlRXZlbnQucGFnZVk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZUZW1wWCA9IHRlbXBYO1xyXG4gICAgbGV0IGZUZW1wWSA9IHRlbXBZO1xyXG4gICAgY29uc3QgbW91c2VQb3NpdGlvbiA9IGZyYW1ld29yay5tb3VzZVBvc2l0aW9uT2Zmc2V0O1xyXG5cclxuICAgIC8vIFN1YnRyYWN0IG1vdXNlIHBvc2l0aW9uIG9mZnNldFxyXG4gICAgZlRlbXBYIC09IG1vdXNlUG9zaXRpb24ueDtcclxuICAgIGZUZW1wWSAtPSBtb3VzZVBvc2l0aW9uLnk7XHJcblxyXG4gICAgLy8gQ29tcHV0ZSBsaW1pdHNcclxuICAgIGZUZW1wWCA9IGZUZW1wWCA8IDAgPyAwIDogZlRlbXBYO1xyXG4gICAgZlRlbXBYID0gZlRlbXBYID4gZnJhbWV3b3JrLmFwcFdpZHRoID8gZnJhbWV3b3JrLmFwcFdpZHRoIDogZlRlbXBYO1xyXG4gICAgZlRlbXBZID0gZlRlbXBZIDwgMCA/IDAgOiBmVGVtcFk7XHJcbiAgICBmVGVtcFkgPSBmVGVtcFkgPiBmcmFtZXdvcmsuYXBwSGVpZ2h0ID8gZnJhbWV3b3JrLmFwcEhlaWdodCA6IGZUZW1wWTtcclxuXHJcbiAgICByZXN1bHQueCA9IGZUZW1wWDtcclxuICAgIHJlc3VsdC55ID0gZlRlbXBZO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElDYWxsYmFjazAgfSBmcm9tIFwic2h1dGUtdGVjaG5vbG9naWVzLmNvbW1vbi1hbmQtdXRpbHNcIjtcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPRkludGVydmFsIHtcclxuXHJcbiAgcHJpdmF0ZSBfY3VycmVudFRpbWU6IG51bWJlcjtcclxuICBwcml2YXRlIF9pbnRlcnZhbFRpbWVTZWNvbmRzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfbG9vcHM6IG51bWJlcjtcclxuICBwcml2YXRlIF9jdXJyZW50TG9vcDogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIF9vbkZpbmlzaGVkTG9vcENhbGxiYWNrOiBJQ2FsbGJhY2swO1xyXG4gIHByaXZhdGUgX29uRmluaXNoZWRJbnRlcnZhbENhbGxiYWNrOiBJQ2FsbGJhY2swO1xyXG5cclxuICBzZXQgZmluaXNoZWRMb29wQ2FsbGJhY2sodmFsOiBJQ2FsbGJhY2swKSB7IHRoaXMuX29uRmluaXNoZWRMb29wQ2FsbGJhY2sgPSB2YWw7IH1cclxuICBzZXQgZmluaXNoZWRJbnRlcnZhbENhbGxiYWNrKHZhbDogSUNhbGxiYWNrMCkgeyB0aGlzLl9vbkZpbmlzaGVkSW50ZXJ2YWxDYWxsYmFjayA9IHZhbDsgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihpbnRlcnZhbFRpbWVTZWNvbmRzOiBudW1iZXIsIGxvb3BzOiBudW1iZXIpIHtcclxuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcclxuICAgIHRoaXMuX2N1cnJlbnRMb29wID0gMDtcclxuICAgIHRoaXMuX2ludGVydmFsVGltZVNlY29uZHMgPSBpbnRlcnZhbFRpbWVTZWNvbmRzO1xyXG4gICAgdGhpcy5fbG9vcHMgPSBsb29wcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZSggYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRMb29wIDwgdGhpcy5fbG9vcHMpIHtcclxuICAgICAgdGhpcy5fY3VycmVudFRpbWUgKz0gYXJncy5kdDtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50VGltZSA+PSB0aGlzLl9pbnRlcnZhbFRpbWVTZWNvbmRzKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRMb29wKys7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50TG9vcCA9PT0gdGhpcy5fbG9vcHMpIHtcclxuICAgICAgICAgIGlmICh0aGlzLl9vbkZpbmlzaGVkSW50ZXJ2YWxDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLl9vbkZpbmlzaGVkSW50ZXJ2YWxDYWxsYmFjaygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fb25GaW5pc2hlZExvb3BDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLl9vbkZpbmlzaGVkTG9vcENhbGxiYWNrKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95ICgpOiB2b2lkIHtcclxuICAgIHRoaXMuX29uRmluaXNoZWRMb29wQ2FsbGJhY2sgPSBudWxsO1xyXG4gICAgdGhpcy5fb25GaW5pc2hlZEludGVydmFsQ2FsbGJhY2sgPSBudWxsO1xyXG4gIH1cclxufSIsImltcG9ydCB7IE9GQW5pbWF0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZkFuaW1hdGlvblwiXHJcbmltcG9ydCB7IE9GRnJhbWV3b3JrRmFjdG9yeSB9IGZyb20gXCIuLi8uLi8uLi9vZkZyYW1ld29ya0ZhY3RvcnlcIjtcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb250ZW50L29mSW1hZ2VDb250ZW50XCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZFZmZlY3QyRCB7XHJcblxyXG4gIHByaXZhdGUgX2lzV2FpdGluZ0ZvckRlbGV0ZTogYm9vbGVhbjtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9hbmltYXRpb246IE9GQW5pbWF0aW9uO1xyXG5cclxuICBnZXQgYW5pbWF0aW9uKCk6IE9GQW5pbWF0aW9uIHsgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbjsgfVxyXG4gIGdldCBpc1dhaXRpbmdGb3JEZWxldGUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGU7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoaW1hZ2VQYXRoOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBob3Jpem9udGFsVGlsZXM6IG51bWJlciwgdmVydGljYWxUaWxlczogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9hbmltYXRpb24gPSBuZXcgT0ZBbmltYXRpb24oeCwgeSwgaG9yaXpvbnRhbFRpbGVzLCB2ZXJ0aWNhbFRpbGVzKTtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi5pbWFnZUNvbnRlbnQgPSBPRkZyYW1ld29ya0ZhY3RvcnkuY3VycmVudEZyYW1ld29rLmNvbnRlbnRNYW5hZ2VyXHJcbiAgICAgIC5nZXRDb250ZW50PE9GSW1hZ2VDb250ZW50PihpbWFnZVBhdGgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi51cGRhdGUoYXJncyk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2FuaW1hdGlvbi5oYXNBbmltYXRpb25FbmRlZCkge1xyXG4gICAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi5kZXN0cm95KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRWZmZWN0MkQgfSBmcm9tIFwiLi9vZkVmZmVjdDJEXCI7XHJcbmltcG9ydCB7IE9GU3ByaXRlQmF0Y2hlciB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb3B0aW1pemF0aW9uL29mU3ByaXRlQmF0Y2hlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GRWZmZWN0MkRGYWN0b3J5IHtcclxuXHJcbiAgc3RhdGljIGNyZWF0ZUVmZmVjdChpbWFnZVBhdGg6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIGhvcml6b250YWxUaWxlczogbnVtYmVyLCBcclxuICAgIHZlcnRpY2FsVGlsZXM6IG51bWJlciwgc3ByaXRlQmF0Y2hlcj86IE9GU3ByaXRlQmF0Y2hlcik6IE9GRWZmZWN0MkQge1xyXG4gICAgXHJcbiAgICBjb25zdCBlZmZlY3QgPSBuZXcgT0ZFZmZlY3QyRChpbWFnZVBhdGgsIHgsIHksIGhvcml6b250YWxUaWxlcywgdmVydGljYWxUaWxlcyk7XHJcbiAgICBlZmZlY3QuYW5pbWF0aW9uLnNldFNwcml0ZUJhdGNoKHNwcml0ZUJhdGNoZXIpO1xyXG5cclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9GRWZmZWN0MkQgfSBmcm9tIFwiLi9vZkVmZmVjdDJEXCI7XHJcbmltcG9ydCB7IE9GRWZmZWN0MkRGYWN0b3J5IH0gZnJvbSBcIi4vb2ZFZmZlY3QyREZhY3RvcnlcIjtcclxuaW1wb3J0IHsgT0ZTcHJpdGVCYXRjaGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vcHRpbWl6YXRpb24vb2ZTcHJpdGVCYXRjaGVyXCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vLi4vLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZFZmZlY3QyRE1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIF9lZmZlY3RzOiBPRkVmZmVjdDJEW107XHJcbiAgcHJpdmF0ZSBfc3ByaXRlQmF0Y2hlcjogT0ZTcHJpdGVCYXRjaGVyO1xyXG5cclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLl9lZmZlY3RzID0gW107XHJcbiAgfVxyXG5cclxuICBjcmVhdGVFZmZlY3QoaW1hZ2VQYXRoOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBob3Jpem9udGFsVGlsZXM6IG51bWJlciwgXHJcbiAgICB2ZXJ0aWNhbFRpbGVzOiBudW1iZXIsIHNwcml0ZUJhdGNoZXI/OiBPRlNwcml0ZUJhdGNoZXIpOiBPRkVmZmVjdDJEIHtcclxuXHJcbiAgICBjb25zdCBlZmZlY3QgPSBPRkVmZmVjdDJERmFjdG9yeS5jcmVhdGVFZmZlY3QoaW1hZ2VQYXRoLCB4LCB5LCBob3Jpem9udGFsVGlsZXMsIHZlcnRpY2FsVGlsZXMsIFxyXG4gICAgICBzcHJpdGVCYXRjaGVyID8gc3ByaXRlQmF0Y2hlciA6IHRoaXMuX3Nwcml0ZUJhdGNoZXIpO1xyXG5cclxuICAgIHRoaXMuX2VmZmVjdHMucHVzaChlZmZlY3QpO1xyXG5cclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbiAgfVxyXG5cclxuICBzZXRTcHJpdGVCYXRjaChzcHJpdGVCYXRjaDogT0ZTcHJpdGVCYXRjaGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaGVyID0gc3ByaXRlQmF0Y2g7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZWZmZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLl9lZmZlY3RzW2ldO1xyXG5cclxuICAgICAgaWYgKGVmZmVjdCkge1xyXG4gICAgICAgIGlmICghZWZmZWN0LmlzV2FpdGluZ0ZvckRlbGV0ZSkge1xyXG4gICAgICAgICAgZWZmZWN0LnVwZGF0ZShhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBlZmZlY3QuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgIHRoaXMuX2VmZmVjdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgKiBmcm9tICcuL2NvbW1vbi9vZkRlbHRhVGltZUNvcnJlY3Rvcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9vZkNhbnZhc0NvbnRleHRNYW5hZ2VyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2NvbnRlbnQvb2ZCYXNlQ29udGVudCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9jb250ZW50L29mQ29udGVudE1hbmFnZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvY29udGVudC9vZkltYWdlQ29udGVudCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9jb250ZW50L29mTWF0ZXJpYWxDb250ZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2NvbnRlbnQvb2ZTb3VuZENvbnRlbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvZGV2aWNlL29wdGltaXphdGlvbi9hdWRpby9vZkF1ZGlvRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2F1ZGlvL29mQXVkaW9Ob2RlT2JqZWN0JztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vcHRpbWl6YXRpb24vYXVkaW8vb2ZBdWRpb05vZGVQb29sZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvZGV2aWNlL29wdGltaXphdGlvbi9hdWRpby9vZkVudW1BdWRpb05vZGVUeXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vcHRpbWl6YXRpb24vZ3B1L29mRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9kZXZpY2Uvb3B0aW1pemF0aW9uL2dwdS9vZkVudW1WQk9PYmplY3RUeXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vcHRpbWl6YXRpb24vZ3B1L29mVkJPT2JqZWN0JztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vcHRpbWl6YXRpb24vZ3B1L29mVkJPUG9vbGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vZkF1ZGlvRGV2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vZkRldmljZUNhcGFiaWxpdGllcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL2RldmljZS9vZkdyYXBoaWNEZXZpY2VNYW5hZ2VyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9jYW1lcmEvb2ZSZW5kZXJDYW1lcmEnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vcHRpbWl6YXRpb24vb2ZTcHJpdGVCYXRjaGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb3B0aW1pemF0aW9uL29mT3B0U3ByaXRlQmF0Y2hlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29wdGltaXphdGlvbi9vZlBvbHlnb25CYXRjaGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kMmQvb2ZBbmltYXRpb24nO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZlByaW1pdGl2ZUNpcmNsZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29mUHJpbWl0aXZlR3JpZCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29mUHJpbWl0aXZlUXVhZCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29mU3ByaXRlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kYXRhL29mUXVhZCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvZ3JhcGhpY3MvZGF0YS9vZlF1YWRUZXh0Q29vcmRzJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9ncmFwaGljcy9kYXRhL29mVmVydGV4UG9zaXRpb25Db2xvclRleHR1cmUnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL2dyYXBoaWNzL29mQ29sb3InO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL2dyYXBoaWNzL29mRHJhd2FibGUyRCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvc2hhZGVyL29mQmFzZVNoYWRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvc2hhZGVyL29mU2hhZGVyQWJzdHJhY3QnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL3NoYWRlci9vZlNoYWRlckZhY3RvcnknO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL3NoYWRlci9vZlNoYWRlclByaW1pdGl2ZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvc2hhZGVyL29mU2hhZGVyVGV4dHVyZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvdmlld3BvcnQvb2ZWaWV3cG9ydCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZW51bXMvb2ZFbnVtQ2FudmFzQ29udGV4dFR5cGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL2VudW1zL29mRW51bUtleUNvZGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL2VudW1zL29mRW51bVRleHRBbGlnbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vaGVscGVycy9yZW5kZXIvZWZmZWN0cy9vZkVmZmVjdDJEJztcclxuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzL3JlbmRlci9lZmZlY3RzL29mRWZmZWN0MkRGYWN0b3J5JztcclxuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzL3JlbmRlci9lZmZlY3RzL29mRWZmZWN0MkRNYW5hZ2VyJztcclxuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzL29mQ29sbGlzaW9uSGVscGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzL29mQ29uc29sZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaGVscGVycy9vZkdMSGVscGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzL29mSFRNTEhlbHBlcnMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2hlbHBlcnMvb2ZJbnRlcnZhbCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9pb2ZNb3JlUmVuZGVyQXJncyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzJztcclxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL2lvZlNSZWN0JztcclxuZXhwb3J0ICogZnJvbSAnLi9tYXRoL2ludGVycG9sYXRvcnMvb2ZIb21pbmcyJztcclxuZXhwb3J0ICogZnJvbSAnLi9tYXRoL29mTWF0aCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbWF0aC9vZlZlY3RvcjInO1xyXG5leHBvcnQgKiBmcm9tICcuL21hdGgvb2ZWZWN0b3IzJztcclxuZXhwb3J0ICogZnJvbSAnLi9zY2VuZS9vZkJhc2VTY2VuZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc2NlbmUvb2ZTY2VuZU1hbmFnZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL29mRnJhbWV3b3JrJztcclxuZXhwb3J0ICogZnJvbSAnLi9vZkZyYW1ld29ya0ZhY3RvcnknO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL3NoYWRlci9zdHJ1Y3RzL3NNYXQyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9zaGFkZXIvc3RydWN0cy9zTWF0Myc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc01hdDQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NvcmUvcmVuZGVyL3NoYWRlci9zdHJ1Y3RzL3NWZWMyJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlL3JlbmRlci9zaGFkZXIvc3RydWN0cy9zVmVjMyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29yZS9yZW5kZXIvc2hhZGVyL3N0cnVjdHMvc1ZlYzQnOyIsImltcG9ydCB7IE9GVmVjdG9yMiB9IGZyb20gJy4uL29mVmVjdG9yMidcclxuXHJcbmV4cG9ydCBjbGFzcyBPRkhvbWluZzIge1xyXG5cclxuICBwcml2YXRlIF90YXJnZXRYOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfdGFyZ2V0WTogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2N1cnJlbnRYOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfY3VycmVudFk6IG51bWJlcjtcclxuICBwcml2YXRlIF9yb3RhdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3R1cm5GYWN0b3I6IG51bWJlcjtcclxuICBwcml2YXRlIF9zcGVlZDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3JvdGF0aW9uQ29ycmVjdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgX2RpcmVjdGlvblZlY3RvcjogT0ZWZWN0b3IyO1xyXG4gIHByaXZhdGUgX3ZlbG9jaXR5VmVjdG9yOiBPRlZlY3RvcjI7XHJcblxyXG4gIGdldCB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9jdXJyZW50WDsgfVxyXG4gIGdldCB5KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9jdXJyZW50WTsgfVxyXG4gIGdldCByb3RhdGlvbigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fcm90YXRpb247IH1cclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHR1cm5GYWN0b3I6IG51bWJlciwgc3BlZWQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5fdGFyZ2V0WCA9IDA7XHJcbiAgICB0aGlzLl90YXJnZXRZID0gMDtcclxuICAgIHRoaXMuX3JvdGF0aW9uID0gMDtcclxuICAgIHRoaXMuX3JvdGF0aW9uQ29ycmVjdGlvbiA9IDA7XHJcbiAgICB0aGlzLl9jdXJyZW50WCA9IHg7XHJcbiAgICB0aGlzLl9jdXJyZW50WSA9IHk7XHJcbiAgICB0aGlzLl9zcGVlZCA9IHNwZWVkO1xyXG4gICAgdGhpcy5fdHVybkZhY3RvciA9IHR1cm5GYWN0b3I7XHJcblxyXG4gICAgdGhpcy5fdmVsb2NpdHlWZWN0b3IgPSBPRlZlY3RvcjIuemVybygpO1xyXG4gICAgdGhpcy5fZGlyZWN0aW9uVmVjdG9yID0gbmV3IE9GVmVjdG9yMih0aGlzLl90YXJnZXRYIC0gdGhpcy5fY3VycmVudFgsIHRoaXMuX3RhcmdldFkgLSB0aGlzLl9jdXJyZW50WSk7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb25WZWN0b3Iubm9ybWFsaXplKCk7XHJcbiAgfVxyXG5cclxuICBzZXRUYXJnZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3RhcmdldFggPSB4O1xyXG4gICAgdGhpcy5fdGFyZ2V0WSA9IHk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlyZWN0aW9uVmVjdG9yLnggPSB0aGlzLl90YXJnZXRYIC0gdGhpcy5fY3VycmVudFg7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb25WZWN0b3IueSA9IHRoaXMuX3RhcmdldFkgLSB0aGlzLl9jdXJyZW50WTtcclxuICAgIHRoaXMuX2RpcmVjdGlvblZlY3Rvci5ub3JtYWxpemUoKTtcclxuICAgIHRoaXMuX2RpcmVjdGlvblZlY3Rvci5tdWx0aXBseUJ5KHRoaXMuX3R1cm5GYWN0b3IpO1xyXG5cclxuICAgIHRoaXMuX3ZlbG9jaXR5VmVjdG9yLmFkZCh0aGlzLl9kaXJlY3Rpb25WZWN0b3IpO1xyXG4gICAgdGhpcy5fdmVsb2NpdHlWZWN0b3Iubm9ybWFsaXplKCk7XHJcbiAgICB0aGlzLl92ZWxvY2l0eVZlY3Rvci5tdWx0aXBseUJ5KHRoaXMuX3NwZWVkICogZHQpO1xyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRYICs9IHRoaXMuX3ZlbG9jaXR5VmVjdG9yLng7XHJcbiAgICB0aGlzLl9jdXJyZW50WSArPSB0aGlzLl92ZWxvY2l0eVZlY3Rvci55O1xyXG5cclxuICAgIHRoaXMuX3JvdGF0aW9uID0gTWF0aC5hdGFuMih0aGlzLl92ZWxvY2l0eVZlY3Rvci55LCB0aGlzLl92ZWxvY2l0eVZlY3Rvci54KSArIHRoaXMuX3JvdGF0aW9uQ29ycmVjdGlvbjtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb25WZWN0b3IgPSBudWxsO1xyXG4gICAgdGhpcy5fdmVsb2NpdHlWZWN0b3IgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRlZlY3RvcjMgfSBmcm9tICcuL29mVmVjdG9yMyc7XHJcbmltcG9ydCB7IE9GVmVjdG9yMiB9IGZyb20gJy4vb2ZWZWN0b3IyJztcclxuaW1wb3J0IHsgbWF0NCwgdmVjNCB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZNYXRoIHtcclxuXHJcbiAgc3RhdGljIHJhbmRvbSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBtaW4gKyAoKG1heCAqIE1hdGgucmFuZG9tKCkpIC0gbWluKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmbG9hdDJJbnQgKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHZhbHVlIHwgMDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBxdWFkcmF0aWNCZXppZXIgKHAwOiBPRlZlY3RvcjMsIHAxOiBPRlZlY3RvcjMsIGNvbnRyb2w6IE9GVmVjdG9yMywgdGltZTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBPRlZlY3RvcjMuemVybygpO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBwb2ludCB0aGF0IHJlc3VsdHMgZm9ybSBxdWFkcmF0aWMgQmV6aWVyIGV4cHJlc3Npb25cclxuICAgIHJlc3VsdC54ID0gKDEgLSB0aW1lKSAqICgxIC0gdGltZSkgKiBwMC54ICsgKDIgLSAyICogdGltZSkgKiB0aW1lICogY29udHJvbC54ICsgcDEueCAqIHRpbWUgKiB0aW1lO1xyXG4gICAgcmVzdWx0LnkgPSAoMSAtIHRpbWUpICogKDEgLSB0aW1lKSAqIHAwLnkgKyAoMiAtIDIgKiB0aW1lKSAqIHRpbWUgKiBjb250cm9sLnkgKyBwMS55ICogdGltZSAqIHRpbWU7XHJcbiAgICByZXN1bHQueiA9ICgxIC0gdGltZSkgKiAoMSAtIHRpbWUpICogcDAueiArICgyIC0gMiAqIHRpbWUpICogdGltZSAqIGNvbnRyb2wueiArIHAxLnogKiB0aW1lICogdGltZTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxlcnAgKHZhbHVlMTogbnVtYmVyLCB2YWx1ZTI6IG51bWJlciwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB2YWx1ZTEgKyAodmFsdWUyIC0gdmFsdWUxKSAqIHRpbWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9EZWdyZWVzIChyYWRpYW5zOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiA1Ny4yOTU3Nzk1MTMwODIzMjA4NzY3OTgxNTQ4MTQxMDU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9SYWRpYW5zIChkZWdyZWVzOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGRlZ3JlZXMgKiAwLjAxNzQ1MzI5MjUxOTk0MzI5NTc2OTIzNjkwNzY4NDg4NjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpc1Bvd2VyT2ZUd28gKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAodmFsdWUgPiAwKSAmJiAoKHZhbHVlICYgKHZhbHVlIC0gMSkpID09PSAwKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBsb3dQcmVjaXNpb25Db3MgKGFuZ2xlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IGNvc1ZhbHVlID0gMDtcclxuXHJcbiAgICBpZiAoYW5nbGUgPCAtMy4xNDE1OTI2NSkgeyBhbmdsZSArPSA2LjI4MzE4NTMxOyB9XHJcbiAgICBlbHNlIHsgaWYgKGFuZ2xlID4gMy4xNDE1OTI2NSkgeyBhbmdsZSAtPSA2LjI4MzE4NTMxOyB9IH1cclxuICAgIGFuZ2xlICs9IDEuNTcwNzk2MzI7XHJcbiAgICBpZiAoYW5nbGUgPCAwKSB7IGNvc1ZhbHVlID0gMS4yNzMyMzk1NCAqIGFuZ2xlICsgMC40MDUyODQ3MzUgKiBhbmdsZSAqIGFuZ2xlOyB9XHJcbiAgICBlbHNlIHsgY29zVmFsdWUgPSAxLjI3MzIzOTU0ICogYW5nbGUgLSAwLjQwNTI4NDczNSAqIGFuZ2xlICogYW5nbGU7IH1cclxuXHJcbiAgICByZXR1cm4gY29zVmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbG93UHJlY2lzaW9uU2luIChhbmdsZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGxldCBzaW5WYWx1ZSA9IDA7XHJcblxyXG4gICAgaWYgKGFuZ2xlIDwgLTMuMTQxNTkyNjUpIHsgYW5nbGUgKz0gNi4yODMxODUzMTsgfVxyXG4gICAgZWxzZSB7IGlmIChhbmdsZSA+IDMuMTQxNTkyNjUpIHsgYW5nbGUgLT0gNi4yODMxODUzMTsgfSB9XHJcbiAgICBhbmdsZSArPSAzLjE0MTU5MjY1O1xyXG4gICAgaWYgKGFuZ2xlID4gMy4xNDE1OTI2NSkgeyBhbmdsZSAtPSA2LjI4MzE4NTMxOyB9XHJcbiAgICBpZiAoYW5nbGUgPCAwKSB7IHNpblZhbHVlID0gMS4yNzMyMzk1NCAqIGFuZ2xlICsgMC40MDUyODQ3MzUgKiBhbmdsZSAqIGFuZ2xlOyB9XHJcbiAgICBlbHNlIHsgc2luVmFsdWUgPSAxLjI3MzIzOTU0ICogYW5nbGUgLSAwLjQwNTI4NDczNSAqIGFuZ2xlICogYW5nbGU7IH1cclxuXHJcbiAgICByZXR1cm4gc2luVmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbG93UHJlY2lzaW9uX0F0YW4yICh5OiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBjb2VmZl8xID0gTWF0aC5QSSAvIDQuMDtcclxuICAgIGNvbnN0IGNvZWZmXzIgPSAzICogY29lZmZfMTtcclxuICAgIGNvbnN0IGFic195ID0gTWF0aC5hYnMoeSk7XHJcbiAgICBsZXQgYW5nbGU6IG51bWJlcjtcclxuXHJcbiAgICBpZiAoeCA+PSAwLjApIHtcclxuICAgICAgY29uc3QgciA9ICh4IC0gYWJzX3kpIC8gKHggKyBhYnNfeSk7XHJcbiAgICAgIGFuZ2xlID0gY29lZmZfMSAtIGNvZWZmXzEgKiByO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgciA9ICh4ICsgYWJzX3kpIC8gKGFic195IC0geCk7XHJcbiAgICAgIGFuZ2xlID0gY29lZmZfMiAtIGNvZWZmXzEgKiByO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB5IDwgMC4wID8gLWFuZ2xlIDogYW5nbGU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNQb2ludEluUG9seWdvbiAocG9pbnQ6IE9GVmVjdG9yMiwgcG9seWdvbjogT0ZWZWN0b3IyW10pOiBib29sZWFuIHtcclxuICAgIGxldCBtaW5YID0gcG9seWdvblswXS54O1xyXG4gICAgbGV0IG1heFggPSBwb2x5Z29uWzBdLng7XHJcbiAgICBsZXQgbWluWSA9IHBvbHlnb25bMF0ueTtcclxuICAgIGxldCBtYXhZID0gcG9seWdvblswXS55O1xyXG5cclxuICAgIHBvbHlnb24uZm9yRWFjaChwID0+IHtcclxuICAgICAgbWluWCA9IE1hdGgubWluKHAueCwgbWluWCk7XHJcbiAgICAgIG1heFggPSBNYXRoLm1heChwLngsIG1heFgpO1xyXG4gICAgICBtaW5ZID0gTWF0aC5taW4ocC55LCBtaW5ZKTtcclxuICAgICAgbWF4WSA9IE1hdGgubWF4KHAueCwgbWF4WSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAocG9pbnQueCA8IG1pblggfHwgcG9pbnQueCA+IG1heFggfHwgcG9pbnQueSA8IG1pblkgfHwgcG9pbnQueSA+IG1heFkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwb2ludEluc2lkZVBvbHlnb24gPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHBvbHlnb24ubGVuZ3RoIC0gMTsgaSA8IHBvbHlnb24ubGVuZ3RoOyBqID0gaSsrKSB7XHJcbiAgICAgIGlmICgocG9seWdvbltpXS55ID4gcG9pbnQueSkgIT09IChwb2x5Z29uW2pdLnkgPiBwb2ludC55KSAmJiBwb2ludC54IDxcclxuICAgICAgICAgIChwb2x5Z29uW2pdLnggLSBwb2x5Z29uW2ldLngpICogKHBvaW50LnkgLSBwb2x5Z29uW2ldLnkpIC9cclxuICAgICAgICAgIChwb2x5Z29uW2pdLnkgLSBwb2x5Z29uW2ldLnkpICsgcG9seWdvbltpXS54KSB7XHJcblxyXG4gICAgICAgIHBvaW50SW5zaWRlUG9seWdvbiA9ICFwb2ludEluc2lkZVBvbHlnb247XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9pbnRJbnNpZGVQb2x5Z29uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1pbiAodmFsMTogbnVtYmVyLCB2YWwyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHZhbDEgPCB2YWwyID8gdmFsMSA6IHZhbDI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWF4ICh2YWwxOiBudW1iZXIsIHZhbDI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdmFsMSA+IHZhbDIgPyB2YWwxIDogdmFsMjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXQ0WFZlYzQobTogbWF0NCwgdjogdmVjNCk6IG1hdDQge1xyXG4gICAgY29uc3Qgb3V0ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgIG91dFswXSAgPSBtWzBdICAqIHZbMF07IG91dFsxXSAgPSBtWzFdICAqIHZbMV07IG91dFsyXSAgPSBtWzJdICAqIHZbMl07IG91dFszXSAgPSBtWzNdICAqIHZbM107XHJcbiAgICBvdXRbNF0gID0gbVs0XSAgKiB2WzBdOyBvdXRbNV0gID0gbVs1XSAgKiB2WzFdOyBvdXRbNl0gID0gbVs2XSAgKiB2WzJdOyBvdXRbN10gID0gbVs3XSAgKiB2WzNdO1xyXG4gICAgb3V0WzhdICA9IG1bOF0gICogdlswXTsgb3V0WzldICA9IG1bOV0gICogdlsxXTsgb3V0WzEwXSA9IG1bMTBdICogdlsyXTsgb3V0WzExXSA9IG1bMTFdICogdlszXTtcclxuICAgIG91dFsxMl0gPSBtWzEyXSAqIHZbMF07IG91dFsxM10gPSBtWzEzXSAqIHZbMV07IG91dFsxNF0gPSBtWzE0XSAqIHZbMl07IG91dFsxNV0gPSBtWzE1XSAqIHZbM107XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tICcuLi9oZWxwZXJzL29mQ29uc29sZSdcclxuXHJcbmV4cG9ydCBjbGFzcyBPRlZlY3RvcjIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB4OiBudW1iZXIsIFxyXG4gICAgcHVibGljIHk6IG51bWJlcikge31cclxuXHJcbiAgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh0aGlzLnggKiB0aGlzLngpICsgKHRoaXMueSAqIHRoaXMueSkpO1xyXG4gIH1cclxuXHJcbiAgZG90ICh2OiBPRlZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0aGlzLnggKiB2LngpICsgKHRoaXMueSAqIHYueSk7XHJcbiAgfVxyXG5cclxuICBhZGQodjogT0ZWZWN0b3IyKTogdm9pZCB7XHJcbiAgICB0aGlzLnggKz0gdi54O1xyXG4gICAgdGhpcy55ICs9IHYueTtcclxuICB9XHJcblxyXG4gIG11bHRpcGx5QnkgKGZhY3RvcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnggKj0gZmFjdG9yO1xyXG4gICAgdGhpcy55ICo9IGZhY3RvcjtcclxuICB9XHJcblxyXG4gIG11bHRpcGx5ICh2OiBPRlZlY3RvcjIpOiB2b2lkIHtcclxuICAgIHRoaXMueCAqPSB2Lng7XHJcbiAgICB0aGlzLnkgKj0gdi55O1xyXG4gIH1cclxuXHJcbiAgc2NhbGUgKGZhY3RvcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnggKj0gZmFjdG9yO1xyXG4gICAgdGhpcy55ICo9IGZhY3RvcjtcclxuICB9XHJcblxyXG4gIHN1YnRyYWN0ICh2OiBPRlZlY3RvcjIpOiB2b2lkIHtcclxuICAgIHRoaXMueCAtPSB2Lng7XHJcbiAgICB0aGlzLnkgLT0gdi55O1xyXG4gIH1cclxuICAgIFxyXG4gIGRpdmlkZSAodjogT0ZWZWN0b3IyKTogdm9pZCB7XHJcbiAgICB0aGlzLnggLz0gdi54O1xyXG4gICAgdGhpcy55IC89IHYueTtcclxuICB9XHJcblxyXG4gIGFuZ2xlICgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpO1xyXG4gIH1cclxuICAgIFxyXG4gIG5vcm1hbGl6ZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZlY3Rvckxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG4gICAgaWYgKHZlY3Rvckxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLnggLz0gdmVjdG9yTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMueSAvPSB2ZWN0b3JMZW5ndGg7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgT0ZDb25zb2xlLndhcm4oXCJbV0FSTl06IE9GVmVjdG9yMi5ub3JtYWxpemU6IGNhbGxlZCBvbiBhIHplcm8tbGVuZ3RoIHZlY3Rvci5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm9qZWN0aW9uT24gKHY6IE9GVmVjdG9yMikge1xyXG4gICAgY29uc3Qgc3F1YXJlTGVuZ3RoID0gdi5kb3Qodik7XHJcblxyXG4gICAgaWYgKHNxdWFyZUxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBPRkNvbnNvbGUubG9nKFwiW1dBUk5dIE9GVmVjdG9yMi5wcm9qZWN0aW9uT246IHplcm8tbGVuZ3RoIHByb2plY3Rpb24gdmVjdG9yLlwiKTtcclxuICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSB2LmNsb25lKCk7XHJcbiAgICByZXN1bHQuc2NhbGUodGhpcy5kb3QodikgLyBzcXVhcmVMZW5ndGgpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBjbG9uZSAoKTogT0ZWZWN0b3IyIHtcclxuICAgIHJldHVybiBuZXcgT0ZWZWN0b3IyKHRoaXMueCwgdGhpcy55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB6ZXJvICgpICB7IHJldHVybiBuZXcgT0ZWZWN0b3IyKDAsIDApOyB9XHJcbiAgc3RhdGljIG9uZSAoKSAgIHsgcmV0dXJuIG5ldyBPRlZlY3RvcjIoMSwgMSk7IH1cclxuICBzdGF0aWMgbGVmdCAoKSAgeyByZXR1cm4gbmV3IE9GVmVjdG9yMigxLCAwKTsgfVxyXG4gIHN0YXRpYyByaWdodCAoKSB7IHJldHVybiBuZXcgT0ZWZWN0b3IyKDAsIDEpOyB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZDb25zb2xlIH0gZnJvbSAnLi4vaGVscGVycy9vZkNvbnNvbGUnXHJcblxyXG5leHBvcnQgY2xhc3MgT0ZWZWN0b3IzIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgeDogbnVtYmVyLCBcclxuICAgIHB1YmxpYyB5OiBudW1iZXIsIFxyXG4gICAgcHVibGljIHo6IG51bWJlcikge31cclxuXHJcbiAgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh0aGlzLnggKiB0aGlzLngpICsgKHRoaXMueSAqIHRoaXMueSkgKyAodGhpcy56ICogdGhpcy56KSk7XHJcbiAgfVxyXG5cclxuICBkb3QgKHY6IE9GVmVjdG9yMyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKCh0aGlzLnggKiB2LngpICsgKHRoaXMueSAqIHYueSkgKyAodGhpcy56ICogdi56KSk7XHJcbiAgfVxyXG5cclxuICBhZGQodjogT0ZWZWN0b3IzKTogdm9pZCB7XHJcbiAgICB0aGlzLnggKz0gdi54O1xyXG4gICAgdGhpcy55ICs9IHYueTtcclxuICAgIHRoaXMueiArPSB2Lno7XHJcbiAgfVxyXG5cclxuICBtdWx0aXBseSAodjogT0ZWZWN0b3IzKTogdm9pZCB7XHJcbiAgICB0aGlzLnggKj0gdi54O1xyXG4gICAgdGhpcy55ICo9IHYueTtcclxuICAgIHRoaXMueiAqPSB2Lno7XHJcbiAgfVxyXG5cclxuICBzY2FsZSAoZmFjdG9yOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMueCAqPSBmYWN0b3I7XHJcbiAgICB0aGlzLnkgKj0gZmFjdG9yO1xyXG4gICAgdGhpcy56ICo9IGZhY3RvcjtcclxuICB9XHJcblxyXG4gIHN1YnRyYWN0ICh2OiBPRlZlY3RvcjMpOiB2b2lkIHtcclxuICAgIHRoaXMueCAtPSB2Lng7XHJcbiAgICB0aGlzLnkgLT0gdi55O1xyXG4gICAgdGhpcy56IC09IHYuejtcclxuICB9XHJcbiAgICBcclxuICBkaXZpZGUgKHY6IE9GVmVjdG9yMyk6IHZvaWQge1xyXG4gICAgdGhpcy54IC89IHYueDtcclxuICAgIHRoaXMueSAvPSB2Lnk7XHJcbiAgICB0aGlzLnogLz0gdi56O1xyXG4gIH1cclxuICAgIFxyXG4gIG5vcm1hbGl6ZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZlY3Rvckxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG4gICAgaWYgKHZlY3Rvckxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLnggLz0gdmVjdG9yTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMueSAvPSB2ZWN0b3JMZW5ndGg7XHJcbiAgICAgICAgdGhpcy56IC89IHZlY3Rvckxlbmd0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBPRkNvbnNvbGUud2FybihcIltXQVJOXTogT0ZWZWN0b3IzLm5vcm1hbGl6ZTogY2FsbGVkIG9uIGEgemVyby1sZW5ndGggdmVjdG9yLlwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb2plY3Rpb25PbiAodjogT0ZWZWN0b3IzKSB7XHJcbiAgICBjb25zdCBzcXVhcmVMZW5ndGggPSB2LmRvdCh2KTtcclxuXHJcbiAgICBpZiAoc3F1YXJlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIE9GQ29uc29sZS5sb2coXCJbV0FSTl0gT0ZWZWN0b3IzLnByb2plY3Rpb25PbjogemVyby1sZW5ndGggcHJvamVjdGlvbiB2ZWN0b3IuXCIpO1xyXG4gICAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IHYuY2xvbmUoKTtcclxuICAgIHJlc3VsdC5zY2FsZSh0aGlzLmRvdCh2KSAvIHNxdWFyZUxlbmd0aCk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGNsb25lICgpOiBPRlZlY3RvcjMge1xyXG4gICAgcmV0dXJuIG5ldyBPRlZlY3RvcjModGhpcy54LCB0aGlzLnksIHRoaXMueik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgemVybyAoKSAgeyByZXR1cm4gbmV3IE9GVmVjdG9yMygwLCAwLCAwKTsgfVxyXG4gIHN0YXRpYyBvbmUgKCkgICB7IHJldHVybiBuZXcgT0ZWZWN0b3IzKDEsIDEsIDEpOyB9XHJcbiAgc3RhdGljIGxlZnQgKCkgIHsgcmV0dXJuIG5ldyBPRlZlY3RvcjMoLTEsIDAsIDApOyB9XHJcbiAgc3RhdGljIHJpZ2h0ICgpIHsgcmV0dXJuIG5ldyBPRlZlY3RvcjMoMSwgMCwgMCk7IH1cclxuICBzdGF0aWMgdXAgKCkgICAgeyByZXR1cm4gbmV3IE9GVmVjdG9yMygwLCAxLCAwKTsgfVxyXG4gIHN0YXRpYyBkb3duICgpICB7IHJldHVybiBuZXcgT0ZWZWN0b3IzKDAsIC0xLCAwKTsgfVxyXG4gIHN0YXRpYyBmcm9udCAoKSB7IHJldHVybiBuZXcgT0ZWZWN0b3IzKDAsIC0xLCAxKTsgfVxyXG4gIHN0YXRpYyBiYWNrICgpICB7IHJldHVybiBuZXcgT0ZWZWN0b3IzKDAsIC0xLCAtMSk7IH1cclxufVxyXG4iLCJpbXBvcnQgeyBPRlNldHRpbmdzIH0gZnJvbSBcIi4vc2V0dGluZ3Mvb2ZTZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBPRkRlbHRhVGltZUNvcnJlY3RvciB9IGZyb20gXCIuL2NvbW1vbi9vZkRlbHRhVGltZUNvcnJlY3RvclwiO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3NldHRpbmdzL29mVHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IE9GQ29uc29sZSB9IGZyb20gXCIuL2hlbHBlcnMvb2ZDb25zb2xlXCI7XHJcbmltcG9ydCB7IE9GR3JhcGhpY0RldmljZSB9IGZyb20gXCIuL2NvcmUvZGV2aWNlL29mR3JhcGhpY0RldmljZVwiO1xyXG5pbXBvcnQgeyBPRkF1ZGlvRGV2aWNlIH0gZnJvbSBcIi4vY29yZS9kZXZpY2Uvb2ZBdWRpb0RldmljZVwiO1xyXG5pbXBvcnQgeyBPRkdyYXBoaWNEZXZpY2VNYW5hZ2VyIH0gZnJvbSBcIi4vY29yZS9kZXZpY2Uvb2ZHcmFwaGljRGV2aWNlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBPRkNhbnZhc0NvbnRleHRNYW5hZ2VyLCBJT0ZDYW52YXNFbGVtZW50IH0gZnJvbSBcIi4vY29yZS9vZkNhbnZhc0NvbnRleHRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IE9GQ29udGVudE1hbmFnZXIgfSBmcm9tIFwiLi9jb3JlL2NvbnRlbnQvb2ZDb250ZW50TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29ya0ZhY3RvcnkgfSBmcm9tIFwiLi9vZkZyYW1ld29ya0ZhY3RvcnlcIjtcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gXCIuL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJnc1wiO1xyXG5pbXBvcnQgeyBPRkhUTUxIZWxwZXJzIH0gZnJvbSBcIi4vaGVscGVycy9vZkhUTUxIZWxwZXJzXCI7XHJcbmltcG9ydCB7IE9GVmVjdG9yMiB9IGZyb20gXCIuL21hdGgvb2ZWZWN0b3IyXCI7XHJcbmltcG9ydCB7IE9GRGV2aWNlQ2FwYWJpbGl0aWVzIH0gZnJvbSBcIi4vY29yZS9kZXZpY2Uvb2ZEZXZpY2VDYXBhYmlsaXRpZXNcIjtcclxuaW1wb3J0IHsgT0ZDb2xvciB9IGZyb20gXCIuL2NvcmUvcmVuZGVyL2dyYXBoaWNzL29mQ29sb3JcIjtcclxuaW1wb3J0IHsgT0ZTY2VuZU1hbmFnZXIgfSBmcm9tIFwiLi9zY2VuZS9vZlNjZW5lTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBTVFV0aWxzIH0gZnJvbSBcInNodXRlLXRlY2hub2xvZ2llcy5jb21tb24tYW5kLXV0aWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZGcmFtZXdvcmsge1xyXG5cclxuICBwcml2YXRlIF9wYXJhbXM6IHt9O1xyXG4gIHByaXZhdGUgX3BhcmVudERpdk5vZGU6IEhUTUxCYXNlRWxlbWVudDtcclxuICBwcml2YXRlIF9tYWluQ2FudmFzT2JqZWN0OiBJT0ZDYW52YXNFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIF9zZXR0aW5nczogT0ZTZXR0aW5ncztcclxuICBwcml2YXRlIF9tYWluR3JhcGhpY0RldmljZTogT0ZHcmFwaGljRGV2aWNlO1xyXG4gIHByaXZhdGUgX2F1ZGlvRGV2aWNlOiBPRkF1ZGlvRGV2aWNlO1xyXG5cclxuICBwcml2YXRlIF9kZWx0YVRpbWVDb3JyZWN0b3I6IE9GRGVsdGFUaW1lQ29ycmVjdG9yO1xyXG4gIHByaXZhdGUgX2RldmljZUNhcGFiaWxpdGllczogT0ZEZXZpY2VDYXBhYmlsaXRpZXM7XHJcblxyXG4gIC8vIG1hbmFnZXJzXHJcbiAgcHJpdmF0ZSBfZ3JhcGhpY0RldmljZU1hbmFnZXI6IE9GR3JhcGhpY0RldmljZU1hbmFnZXI7XHJcbiAgcHJpdmF0ZSBfY2FudmFzQ29udGV4dE1hbmFnZXI6IE9GQ2FudmFzQ29udGV4dE1hbmFnZXI7XHJcbiAgcHJpdmF0ZSBfY29udGVudE1hbmFnZXI6IE9GQ29udGVudE1hbmFnZXI7XHJcbiAgcHJpdmF0ZSBfc2NlbmVNYW5hZ2VyOiBPRlNjZW5lTWFuYWdlcjtcclxuXHJcbiAgcHJpdmF0ZSBfYXBwV2lkdGg6IG51bWJlcjtcclxuICBwcml2YXRlIF9hcHBIZWlnaHQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9tb3VzZVBvc2l0aW9uT2Zmc2V0OiBPRlZlY3RvcjI7XHJcbiAgXHJcbiAgcmVhZG9ubHkgZnJhbWV3b3JrSWRlbnRpZmllcjogbnVtYmVyO1xyXG5cclxuICBnZXQgYXBwV2lkdGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2FwcFdpZHRoOyB9XHJcbiAgZ2V0IGFwcEhlaWdodCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fYXBwSGVpZ2h0OyB9XHJcbiAgZ2V0IHNldHRpbmdzKCk6IE9GU2V0dGluZ3MgeyByZXR1cm4gdGhpcy5fc2V0dGluZ3M7IH1cclxuICBnZXQgaGFzQ2FudmFzKCk6IGJvb2xlYW4geyByZXR1cm4gISF0aGlzLl9wYXJlbnREaXZOb2RlOyB9XHJcbiAgZ2V0IG1vdXNlUG9zaXRpb25PZmZzZXQoKTogT0ZWZWN0b3IyIHsgcmV0dXJuIHRoaXMuX21vdXNlUG9zaXRpb25PZmZzZXQ7IH1cclxuXHJcbiAgZ2V0IGdldERvY3VtZW50ICgpOiBEb2N1bWVudCB7IHJldHVybiBkb2N1bWVudDsgfVxyXG4gIGdldCBwYXJlbnREaXYgKCk6IEhUTUxCYXNlRWxlbWVudCB7IHJldHVybiB0aGlzLl9wYXJlbnREaXZOb2RlOyB9XHJcbiAgZ2V0IGNhbnZhc0VsZW1lbnQgKCk6IEhUTUxDYW52YXNFbGVtZW50IHsgcmV0dXJuIHRoaXMuX21haW5DYW52YXNPYmplY3QuY2FudmFzRWxlbWVudDsgfVxyXG5cclxuICBnZXQgbWFpbkdyYXBoaWNEZXZpY2UgKCk6IE9GR3JhcGhpY0RldmljZSB7IHJldHVybiB0aGlzLl9tYWluR3JhcGhpY0RldmljZTsgfVxyXG4gIGdldCBhdWRpb0RldmljZSAoKTogT0ZBdWRpb0RldmljZSB7IHJldHVybiB0aGlzLl9hdWRpb0RldmljZTsgfVxyXG4gIGdldCBncmFwaGljRGV2aWNlTWFuYWdlciAoKTogT0ZHcmFwaGljRGV2aWNlTWFuYWdlciB7IHJldHVybiB0aGlzLl9ncmFwaGljRGV2aWNlTWFuYWdlcjsgfSAgICBcclxuICBnZXQgY2FudmFzQ29udGV4dE1hbmFnZXIgKCk6IE9GQ2FudmFzQ29udGV4dE1hbmFnZXIgeyByZXR1cm4gdGhpcy5fY2FudmFzQ29udGV4dE1hbmFnZXI7IH0gICAgXHJcbiAgZ2V0IGNvbnRlbnRNYW5hZ2VyICgpOiBPRkNvbnRlbnRNYW5hZ2VyIHsgcmV0dXJuIHRoaXMuX2NvbnRlbnRNYW5hZ2VyOyB9ICAgIFxyXG4gIGdldCBzY2VuZU1hbmFnZXIgKCk6IE9GU2NlbmVNYW5hZ2VyIHsgcmV0dXJuIHRoaXMuX3NjZW5lTWFuYWdlcjsgfSAgICBcclxuICBnZXQgcGFyYW1zICgpOiB7fSB7IHJldHVybiB0aGlzLl9wYXJhbXM7IH0gICAgXHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoaWRlbnRpZmllcjogbnVtYmVyLCBwYXJhbXM6e30gPSBudWxsLCBjdXN0b21TZXR0aW5nczogT0ZTZXR0aW5ncyA9IG51bGwpIHtcclxuICAgIHRoaXMuZnJhbWV3b3JrSWRlbnRpZmllciA9IGlkZW50aWZpZXI7XHJcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB0aGlzLl9zZXR0aW5ncyA9ICFjdXN0b21TZXR0aW5ncyA/IE9GU2V0dGluZ3MuY3JlYXRlKCkgOiBjdXN0b21TZXR0aW5ncztcclxuICAgIHRoaXMuX2RlbHRhVGltZUNvcnJlY3RvciA9IG5ldyBPRkRlbHRhVGltZUNvcnJlY3RvcigpO1xyXG5cclxuICAgIFNUVXRpbHMuc3RhdGljRGVidWdDb25zb2xlID0gT0ZDb25zb2xlO1xyXG5cclxuICAgIE9GQ29uc29sZS5sb2coT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLmluaXRpYWxpemVkLCB0aGlzLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuICBzdGFydE9jdG9wdXNGcmFtZXdvcmsyRCAoZGl2SWRlbnRpZmllcjogc3RyaW5nLCBhcHBXaWR0aD86IG51bWJlciwgYXBwSGVpZ2h0PzogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9jYW52YXNDb250ZXh0TWFuYWdlciA9IG5ldyBPRkNhbnZhc0NvbnRleHRNYW5hZ2VyKHRoaXMpO1xyXG5cclxuICAgIC8vIEdldCBieSBJZCB0aGUgQ2FudmFzIEVsZW1lbnQuXHJcbiAgICB0aGlzLl9wYXJlbnREaXZOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWRlbnRpZmllcikgYXMgSFRNTEJhc2VFbGVtZW50O1xyXG5cclxuICAgIGlmICh0aGlzLmhhc0NhbnZhcykge1xyXG4gICAgICB0aGlzLl9wYXJlbnREaXZOb2RlLmNsYXNzTmFtZSA9IFwiY2FudmFzQ29udGFpbmVyXCI7XHJcblxyXG4gICAgICAvLyBHZXQgbW91c2UgcG9zaXRpb24gb2Zmc2V0XHJcbiAgICAgIHRoaXMuX21vdXNlUG9zaXRpb25PZmZzZXQgPSBPRkhUTUxIZWxwZXJzLmdldFBvc2l0aW9uT2Zmc2V0KHRoaXMuX3BhcmVudERpdk5vZGUucGFyZW50Tm9kZSBhcyBIVE1MQmFzZUVsZW1lbnQpO1xyXG5cclxuICAgICAgdGhpcy5fYXBwV2lkdGggPSBhcHBXaWR0aCA/IGFwcFdpZHRoIDogdGhpcy5fc2V0dGluZ3MuY2FudmFzV2lkdGg7ICAgICAgICBcclxuICAgICAgdGhpcy5fYXBwSGVpZ2h0ID0gYXBwSGVpZ2h0ID8gYXBwSGVpZ2h0IDogdGhpcy5fc2V0dGluZ3MuY2FudmFzSGVpZ2h0O1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIG1haW4gY2FudmFzIGVsZW1lbnRcclxuICAgICAgY29uc3QgY2FudmFzRWxlbWVudElEID0gdGhpcy5zZXR0aW5ncy5pZGVudGlmaWVyX1JlbmRlckNhbnZhcyArIHRoaXMuZnJhbWV3b3JrSWRlbnRpZmllcjtcclxuICAgICAgdGhpcy5fbWFpbkNhbnZhc09iamVjdCA9IHRoaXMuX2NhbnZhc0NvbnRleHRNYW5hZ2VyLmNyZWF0ZUNhbnZhc0VsZW1lbnQoY2FudmFzRWxlbWVudElELCBcImFic29sdXRlXCIpO1xyXG5cclxuICAgICAgLy8gRmlyc3QgZ2V0IHRoZSBkZXZpY2UgY2FwYWJpbGl0aWVzLlxyXG4gICAgICB0aGlzLl9kZXZpY2VDYXBhYmlsaXRpZXMgPSBPRkRldmljZUNhcGFiaWxpdGllcy5jcmVhdGUodGhpcywgdGhpcy5fc2V0dGluZ3MuZm9yY2VVc2VDYW52YXNDb250ZXh0SW5zdGVhZE9mV2ViR0wpO1xyXG5cclxuICAgICAgLy8gTm93IHRoYXQgd2Uga25vdyB3aGljaCBjYW52YXMvd2ViZ2wgaGFzIGJlZW4gY3JlYXRlZCwgbm93IHNldCBpdCB0byB0aGUgbU1haW5DYW52YXNPYmplY3QgXHJcbiAgICAgIC8vIHZlcnNpb24gMjogVXNlIGlzIFdlYkdMUmVuZGVyaW5nQ29udGV4dFxyXG4gICAgICB0aGlzLl9tYWluQ2FudmFzT2JqZWN0LmNvbnRleHQgPSB0aGlzLl9kZXZpY2VDYXBhYmlsaXRpZXMuZ3JhcGhpQ29udGV4dCBhcyBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICAgIC8vIFNldCBwcm9wcmVydGllcyB0byB0aGUgQ2FudmFzIEVsZW1lbnRcclxuICAgICAgdGhpcy5fbWFpbkNhbnZhc09iamVjdC5jYW52YXNFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IE9GQ29sb3IuY29udmVydFRvU3RyaW5nRnJvbU5vcm1hbGl6ZWQodGhpcy5zZXR0aW5ncy5jYW52YXNCYWNrZ3JvdW5kQ29sb3IpO1xyXG4gICAgICB0aGlzLl9tYWluQ2FudmFzT2JqZWN0LmNhbnZhc0VsZW1lbnQuc3R5bGUuYm9yZGVyV2lkdGggPSB0aGlzLnNldHRpbmdzLmNhbnZhc0JvcmRlcldpZHRoO1xyXG4gICAgICB0aGlzLl9tYWluQ2FudmFzT2JqZWN0LmNhbnZhc0VsZW1lbnQuc3R5bGUuYm9yZGVyQ29sb3IgPSBPRkNvbG9yLmNvbnZlcnRUb1N0cmluZ0Zyb21Ob3JtYWxpemVkKHRoaXMuc2V0dGluZ3MuY2FudmFzQm9yZGVyQ29sb3IpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHRoZSBHcmFwaGljRGV2aWNlIGRlcGVuZGluZyBvbiB0aGUgY2FwYWJpbGl0aWVzLlxyXG4gICAgICB0aGlzLl9ncmFwaGljRGV2aWNlTWFuYWdlciA9IG5ldyBPRkdyYXBoaWNEZXZpY2VNYW5hZ2VyKHRoaXMpO1xyXG4gICAgICAvLyBDcmVhdGUgQXVkaW8gRGV2aWNlXHJcbiAgICAgIHRoaXMuX2F1ZGlvRGV2aWNlID0gbmV3IE9GQXVkaW9EZXZpY2UodGhpcyk7XHJcbiAgICAgIC8vIENyZWF0ZSBDb250ZW50IFBpcGVsaW5lIFxyXG4gICAgICB0aGlzLl9jb250ZW50TWFuYWdlciA9IG5ldyBPRkNvbnRlbnRNYW5hZ2VyKHRoaXMpO1xyXG5cclxuICAgICAgLy8gTm93IGluaXRpYWxpemUgYWxsXHJcbiAgICAgIHRoaXMuX2dyYXBoaWNEZXZpY2VNYW5hZ2VyLmluaXRpYWxpemUoKTtcclxuICAgICAgdGhpcy5fYXVkaW9EZXZpY2UuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICB0aGlzLl9jb250ZW50TWFuYWdlci5pbml0aWFsaXplKCk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdGhlIE1haW4gR3JhcGhpYyBEZXZpY2VcclxuICAgICAgdGhpcy5fbWFpbkdyYXBoaWNEZXZpY2UgPSB0aGlzLl9ncmFwaGljRGV2aWNlTWFuYWdlci5jcmVhdGVHcmFwaGljRGV2aWNlKFwibWFpblwiLCB0aGlzLl9tYWluQ2FudmFzT2JqZWN0KTtcclxuXHJcbiAgICAgIC8vIEFmdGVyIGFsbCBsb2FkIGRlZmF1bHQgb2JqZWN0c1xyXG4gICAgICBpZiAodGhpcy5fc2V0dGluZ3MubG9hZERlZmF1bHQpIHtcclxuICAgICAgICB0aGlzLl9ncmFwaGljRGV2aWNlTWFuYWdlci5sb2FkRGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRNYW5hZ2VyLmxvYWREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5kaXNhYmxlSW5wdXREZXRlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmRvSW5wdXREZXRlY3Rpb25zKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5vdyBpbml0aWFsaXplIHRoZSBBcHBsaWNhdGlvblxyXG4gICAgICB0aGlzLmluaXRpYWxpemVBcHBsaWNhdGlvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgT0ZDb25zb2xlLmVycm9yKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5jYW52YXNOb3RGb3VuZCwgXHJcbiAgICAgICAgdGhpcy5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIGRpdklkZW50aWZpZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkb0lucHV0RGV0ZWN0aW9ucygpOiB2b2lkIHtcclxuICAgICQoZG9jdW1lbnQuYm9keSkub24oJ21vdXNlZG93bicsIChlKSA9PiB7ICAgIFxyXG4gICAgICBjb25zdCB0YXJnZXRJZCA9ICh0aGlzLnBhcmVudERpdi5maXJzdENoaWxkIGFzIEVsZW1lbnQpLmlkO1xyXG4gICAgICBjb25zdCBmcmFtZXdvcmtJZCA9IHBhcnNlSW50KHRhcmdldElkLmNoYXJBdCh0YXJnZXRJZC5sZW5ndGggLSAxKSk7XHJcbiAgICAgIGNvbnN0IGZvdW5kRnJhbWV3b3JrID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmdldEJ5SWQoZnJhbWV3b3JrSWQpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGZvdW5kRnJhbWV3b3JrKSB7XHJcbiAgICAgICAgZm91bmRGcmFtZXdvcmsub25Nb3VzZURvd24oZS5vcmlnaW5hbEV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vbignbW91c2V1cCcsIChlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldElkID0gKHRoaXMucGFyZW50RGl2LmZpcnN0Q2hpbGQgYXMgRWxlbWVudCkuaWQ7XHJcbiAgICAgIGNvbnN0IGZyYW1ld29ya0lkID0gcGFyc2VJbnQodGFyZ2V0SWQuY2hhckF0KHRhcmdldElkLmxlbmd0aCAtIDEpKTtcclxuICAgICAgY29uc3QgZm91bmRGcmFtZXdvcmsgPSBPRkZyYW1ld29ya0ZhY3RvcnkuZ2V0QnlJZChmcmFtZXdvcmtJZCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZm91bmRGcmFtZXdvcmspIHtcclxuICAgICAgICBmb3VuZEZyYW1ld29yay5vbk1vdXNlVXAoZS5vcmlnaW5hbEV2ZW50KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vbignbW91c2Vtb3ZlJywgKGUpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0SWQgPSAodGhpcy5wYXJlbnREaXYuZmlyc3RDaGlsZCBhcyBFbGVtZW50KS5pZDtcclxuICAgICAgY29uc3QgZnJhbWV3b3JrSWQgPSBwYXJzZUludCh0YXJnZXRJZC5jaGFyQXQodGFyZ2V0SWQubGVuZ3RoIC0gMSkpO1xyXG4gICAgICBjb25zdCBmb3VuZEZyYW1ld29yayA9IE9GRnJhbWV3b3JrRmFjdG9yeS5nZXRCeUlkKGZyYW1ld29ya0lkKTtcclxuXHJcbiAgICAgIGlmIChmb3VuZEZyYW1ld29yaykge1xyXG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gT0ZIVE1MSGVscGVycy5nZXRNb3VzZVBvc2l0aW9uKGZvdW5kRnJhbWV3b3JrLCBlKTtcclxuICAgICAgICBmb3VuZEZyYW1ld29yay5vbk1vdXNlTW92ZShtb3VzZVBvcy54LCBtb3VzZVBvcy55KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vbigna2V5ZG93bicsIChlKSA9PiB7XHJcbiAgICAgIC8vIEdldCB0YXJnZXQgaW4gVzNDIGJyb3dzZXJzICYgSUVcclxuICAgICAgY29uc3QgdGFyZ2V0SWQgPSAodGhpcy5wYXJlbnREaXYuZmlyc3RDaGlsZCBhcyBFbGVtZW50KS5pZDtcclxuICAgICAgY29uc3QgZnJhbWV3b3JrSWQgPSBwYXJzZUludCh0YXJnZXRJZC5jaGFyQXQodGFyZ2V0SWQubGVuZ3RoIC0gMSkpO1xyXG5cclxuICAgICAgT0ZGcmFtZXdvcmtGYWN0b3J5LmdldEJ5SWQoZnJhbWV3b3JrSWQpLm9uS2V5RG93bihlLm9yaWdpbmFsRXZlbnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vbigna2V5dXAnLCAoZSkgPT4ge1xyXG4gICAgICAvLyBHZXQgdGFyZ2V0IGluIFczQyBicm93c2VycyAmIElFXHJcbiAgICAgIGNvbnN0IHRhcmdldElkID0gKHRoaXMucGFyZW50RGl2LmZpcnN0Q2hpbGQgYXMgRWxlbWVudCkuaWQ7XHJcbiAgICAgIGNvbnN0IGZyYW1ld29ya0lkID0gcGFyc2VJbnQodGFyZ2V0SWQuY2hhckF0KHRhcmdldElkLmxlbmd0aCAtIDEpKTtcclxuXHJcbiAgICAgIE9GRnJhbWV3b3JrRmFjdG9yeS5nZXRCeUlkKGZyYW1ld29ya0lkKS5vbktleVVwKGUub3JpZ2luYWxFdmVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUFwcGxpY2F0aW9uKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2NlbmVNYW5hZ2VyID0gbmV3IE9GU2NlbmVNYW5hZ2VyKHRoaXMpO1xyXG4gICAgXHJcbiAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5yZWFkeSwgdGhpcy5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgb25LZXlEb3duIChldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgdGhpcy5fc2NlbmVNYW5hZ2VyLm9uS2V5RG93bihldmVudCk7XHJcbiAgfVxyXG5cclxuICBvbktleVVwIChldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgdGhpcy5fc2NlbmVNYW5hZ2VyLm9uS2V5VXAoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgb25Nb3VzZURvd24gKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICB0aGlzLl9zY2VuZU1hbmFnZXIub25Nb3VzZURvd24oZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwIChldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgdGhpcy5fc2NlbmVNYW5hZ2VyLm9uTW91c2VVcChldmVudCk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZSAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHRoaXMuX3NjZW5lTWFuYWdlci5vbk1vdXNlTW92ZSh4LCB5KTtcclxuICB9XHJcblxyXG4gIHJlc2l6ZSAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IG9sZFdpZHRoID0gdGhpcy5fYXBwV2lkdGg7ICAgICAgICBcclxuICAgIGNvbnN0IG9sZEhlaWdodCA9IHRoaXMuX2FwcEhlaWdodDtcclxuXHJcbiAgICB0aGlzLl9hcHBXaWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5fYXBwSGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgXHJcbiAgICAvLyBHZXQgbW91c2UgcG9zaXRpb24gb2Zmc2V0XHJcbiAgICB0aGlzLl9tb3VzZVBvc2l0aW9uT2Zmc2V0ID0gT0ZIVE1MSGVscGVycy5nZXRQb3NpdGlvbk9mZnNldCh0aGlzLl9wYXJlbnREaXZOb2RlLnBhcmVudE5vZGUgYXMgSFRNTEJhc2VFbGVtZW50KTtcclxuICAgIFxyXG4gICAgdGhpcy5fZ3JhcGhpY0RldmljZU1hbmFnZXIucmVzaXplKHdpZHRoLCBoZWlnaHQsIG9sZFdpZHRoLCBvbGRIZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IHsgZHQ6IG51bWJlciB9KTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5oYXNDYW52YXMpIHtcclxuICAgICAgT0ZGcmFtZXdvcmtGYWN0b3J5LnNldEN1cnJlbnRGcmFtZXdvcmsodGhpcy5mcmFtZXdvcmtJZGVudGlmaWVyKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlbmRlckFyZ3MgPSB7XHJcbiAgICAgICAgZHQ6IHRoaXMuX2RlbHRhVGltZUNvcnJlY3Rvci5yZWNvbXB1dGVEZWx0YVRpbWUoYXJncy5kdCksXHJcbiAgICAgICAgZnJhbWV3b3JrOiB0aGlzXHJcbiAgICAgIH0gYXMgSU9GUmVuZGVyQXJncztcclxuXHJcbiAgICAgIHRoaXMuX2dyYXBoaWNEZXZpY2VNYW5hZ2VyLnVwZGF0ZShyZW5kZXJBcmdzKTtcclxuICAgICAgdGhpcy5fc2NlbmVNYW5hZ2VyLnVwZGF0ZShyZW5kZXJBcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRlc3Ryb3kgKCk6IHZvaWQge31cclxuXHJcbiAgc3RhdGljIGNyZWF0ZShpZGVudGlmaWVyOiBudW1iZXIsIHBhcmFtczp7fSA9IG51bGwsIGN1c3RvbVNldHRpbmdzOiBPRlNldHRpbmdzID0gbnVsbCk6IE9GRnJhbWV3b3JrIHtcclxuICAgIHJldHVybiBuZXcgT0ZGcmFtZXdvcmsoaWRlbnRpZmllciwgcGFyYW1zLCBjdXN0b21TZXR0aW5ncyk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tIFwiLi9vZkZyYW1ld29ya1wiO1xyXG5pbXBvcnQgeyBPRkNvbnNvbGUgfSBmcm9tIFwiLi9oZWxwZXJzL29mQ29uc29sZVwiO1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3NldHRpbmdzL29mVHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IE9GU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5ncy9vZlNldHRpbmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT0ZGcmFtZXdvcmtGYWN0b3J5IHtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgX3VuaXF1ZUlkZW50aWZpZXIgPSAwO1xyXG4gIHByaXZhdGUgc3RhdGljIF9jdXJyZW50RnJhbWV3b3JrID0gMDtcclxuICBwcml2YXRlIHN0YXRpYyBfcG9wZWRGcmFtZXdvcmsgPSAtMTtcclxuICBwcml2YXRlIHN0YXRpYyBfZnJhbWV3b3JrczogT0ZGcmFtZXdvcmtbXSA9IFtdO1xyXG5cclxuICBzdGF0aWMgZ2V0IGN1cnJlbnRGcmFtZXdvaygpOiBPRkZyYW1ld29yayB7IHJldHVybiBPRkZyYW1ld29ya0ZhY3RvcnkuX2ZyYW1ld29ya3NbT0ZGcmFtZXdvcmtGYWN0b3J5Ll9jdXJyZW50RnJhbWV3b3JrXTsgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlKHBhcmFtczoge30gPSBudWxsLCBjdXN0b21TZXR0aW5nczogT0ZTZXR0aW5ncyA9IG51bGwpOiBPRkZyYW1ld29yayB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IE9GRnJhbWV3b3JrLmNyZWF0ZShPRkZyYW1ld29ya0ZhY3RvcnkuX3VuaXF1ZUlkZW50aWZpZXIrKywgcGFyYW1zLCBjdXN0b21TZXR0aW5ncyk7XHJcbiAgICB0aGlzLl9mcmFtZXdvcmtzLnB1c2goaW5zdGFuY2UpO1xyXG5cclxuICAgIC8vIHNldCB0aGlzIG5ldyBvbmUsIHRoZSBjdXJyZW50IGZyYW1ld29ya1xyXG4gICAgT0ZGcmFtZXdvcmtGYWN0b3J5Ll9jdXJyZW50RnJhbWV3b3JrID0gaW5zdGFuY2UuZnJhbWV3b3JrSWRlbnRpZmllcjtcclxuXHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcG9wRnJhbWV3b3JrKGZyYW1ld29yazogT0ZGcmFtZXdvcmspOiB2b2lkIHtcclxuICAgIGlmIChPRkZyYW1ld29ya0ZhY3RvcnkuX3BvcGVkRnJhbWV3b3JrID09IC0xKSB7XHJcbiAgICAgIE9GRnJhbWV3b3JrRmFjdG9yeS5fcG9wZWRGcmFtZXdvcmsgPSBPRkZyYW1ld29ya0ZhY3RvcnkuX2N1cnJlbnRGcmFtZXdvcms7XHJcbiAgICAgIE9GRnJhbWV3b3JrRmFjdG9yeS5fY3VycmVudEZyYW1ld29yayA9IGZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHB1c2hGcmFtZXdvcmsoKSB7XHJcbiAgICBpZiAoT0ZGcmFtZXdvcmtGYWN0b3J5Ll9wb3BlZEZyYW1ld29yayA9PSAtMSkge1xyXG4gICAgICBPRkZyYW1ld29ya0ZhY3RvcnkuX3BvcGVkRnJhbWV3b3JrID0gLTE7XHJcbiAgICAgIE9GRnJhbWV3b3JrRmFjdG9yeS5fY3VycmVudEZyYW1ld29yayA9IE9GRnJhbWV3b3JrRmFjdG9yeS5fcG9wZWRGcmFtZXdvcms7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Q3VycmVudEZyYW1ld29yayhpZGVudGlmaWVyOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmIChpZGVudGlmaWVyID4gT0ZGcmFtZXdvcmtGYWN0b3J5Ll91bmlxdWVJZGVudGlmaWVyIHx8IGlkZW50aWZpZXIgPCAwKSB7XHJcbiAgICAgIE9GQ29uc29sZS53YXJuKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5GcmFtZXdvcmtGYWN0b3J5Lm91dE9mQm91bmRzLCBpZGVudGlmaWVyLnRvU3RyaW5nKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgT0ZGcmFtZXdvcmtGYWN0b3J5Ll9jdXJyZW50RnJhbWV3b3JrID0gaWRlbnRpZmllcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRCeUlkKGlkOiBudW1iZXIpOiBPRkZyYW1ld29yayB7XHJcbiAgICByZXR1cm4gT0ZGcmFtZXdvcmtGYWN0b3J5Ll9mcmFtZXdvcmtzLmZpbmQoeCA9PiB4LmZyYW1ld29ya0lkZW50aWZpZXIgPT09IGlkKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZTY2VuZU1hbmFnZXIgfSBmcm9tIFwiLi9vZlNjZW5lTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaW9mUmVuZGVyQXJnc1wiO1xyXG5pbXBvcnQgeyBPRkZyYW1ld29yayB9IGZyb20gXCIuLi9vZkZyYW1ld29ya1wiO1xyXG5pbXBvcnQgeyBPRkNvbnRlbnRNYW5hZ2VyIH0gZnJvbSBcIi4uL2NvcmUvY29udGVudC9vZkNvbnRlbnRNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgT0ZCYXNlU2NlbmUge1xyXG5cclxuICBmcmFtZXdvcms6IE9GRnJhbWV3b3JrO1xyXG4gIGNvbnRlbnRNYW5hZ2VyOiBPRkNvbnRlbnRNYW5hZ2VyO1xyXG5cclxuICBpbml0aWFsaXplKHNjZW5lTWFuYWdlcjogT0ZTY2VuZU1hbmFnZXIsIHBhcmFtcz8pOiB2b2lkIHtcclxuICAgIHRoaXMuZnJhbWV3b3JrID0gc2NlbmVNYW5hZ2VyLmZyYW1ld29yaztcclxuICAgIHRoaXMuY29udGVudE1hbmFnZXIgPSB0aGlzLmZyYW1ld29yay5jb250ZW50TWFuYWdlcjtcclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlKHg6IG51bWJlciwgeTpudW1iZXIpOiB2b2lkIHt9XHJcblxyXG4gIG9uTW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7fVxyXG5cclxuICBvbk1vdXNlVXAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHt9XHJcblxyXG4gIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge31cclxuXHJcbiAgb25LZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge31cclxuXHJcbiAgYWJzdHJhY3QgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkO1xyXG5cclxuICBhYnN0cmFjdCBkZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tIFwiLi4vb2ZGcmFtZXdvcmtcIlxyXG5pbXBvcnQgeyBPRkJhc2VTY2VuZSB9IGZyb20gXCIuL29mQmFzZVNjZW5lXCJcclxuaW1wb3J0IHsgT0ZDb25zb2xlIH0gZnJvbSBcIi4uL2hlbHBlcnMvb2ZDb25zb2xlXCI7XHJcbmltcG9ydCB7IE9GVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4uL3NldHRpbmdzL29mVHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcbmltcG9ydCB7IElDb25zdHJ1Y3RvciwgU1RVdGlscyB9IGZyb20gJ3NodXRlLXRlY2hub2xvZ2llcy5jb21tb24tYW5kLXV0aWxzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GU2NlbmVNYW5hZ2VyIHtcclxuXHJcbiAgcHJpdmF0ZSBfY3VycmVudFNjZW5lOiBPRkJhc2VTY2VuZTtcclxuXHJcbiAgZ2V0IGN1cnJlbnRTY2VuZSgpOiBPRkJhc2VTY2VuZSB7IHJldHVybiB0aGlzLl9jdXJyZW50U2NlbmU7IH1cclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGZyYW1ld29yazogT0ZGcmFtZXdvcmspIHt9XHJcblxyXG4gIGdvdG9TY2VuZShjbGFzc05hbWU6IHN0cmluZywgcGFyYW1zPyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRTY2VuZSkgeyB0aGlzLl9jdXJyZW50U2NlbmUuZGVzdHJveSgpOyB9XHJcblxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBTVFV0aWxzLmluc3RhbmNlQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcclxuXHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgdGhpcy5fY3VycmVudFNjZW5lID0gaW5zdGFuY2U7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRTY2VuZS5pbml0aWFsaXplKHRoaXMsIHBhcmFtcyk7XHJcblxyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5TY2VuZU1hbmFnZXIuZ290b1NjZW5lLCBcclxuICAgICAgICB0aGlzLmZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIGNsYXNzTmFtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5TY2VuZU1hbmFnZXIuc2NlbmVEb250RXhpc3RzLCBcclxuICAgICAgICB0aGlzLmZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksIGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnb3RvU2NlbmVCeTxUIGV4dGVuZHMgT0ZCYXNlU2NlbmU+KGNsYXNzVHlwZTogSUNvbnN0cnVjdG9yPFQ+LCBwYXJhbXM/KTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lKSB7IHRoaXMuX2N1cnJlbnRTY2VuZS5kZXN0cm95KCk7IH1cclxuXHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IFNUVXRpbHMuaW5zdGFuY2VCeVR5cGU8VD4oY2xhc3NUeXBlKTtcclxuXHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgdGhpcy5fY3VycmVudFNjZW5lID0gaW5zdGFuY2U7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRTY2VuZS5pbml0aWFsaXplKHRoaXMsIHBhcmFtcyk7XHJcblxyXG4gICAgICBPRkNvbnNvbGUubG9nKE9GVHJhbnNsYXRpb25zLkZyYW1ld29yay5TY2VuZU1hbmFnZXIuZ290b1NjZW5lLCBcclxuICAgICAgICB0aGlzLmZyYW1ld29yay5mcmFtZXdvcmtJZGVudGlmaWVyLnRvU3RyaW5nKCksICcnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIE9GQ29uc29sZS5sb2coT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLlNjZW5lTWFuYWdlci5zY2VuZURvbnRFeGlzdHMsIFxyXG4gICAgICAgIHRoaXMuZnJhbWV3b3JrLmZyYW1ld29ya0lkZW50aWZpZXIudG9TdHJpbmcoKSwgJycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZU1vdmUgKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lKSB7IHRoaXMuX2N1cnJlbnRTY2VuZS5vbk1vdXNlTW92ZSh4LCB5KTsgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZURvd24gKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lKSB7IHRoaXMuX2N1cnJlbnRTY2VuZS5vbk1vdXNlRG93bihldmVudCk7IH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcCAoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLl9jdXJyZW50U2NlbmUpIHsgdGhpcy5fY3VycmVudFNjZW5lLm9uTW91c2VVcChldmVudCk7IH1cclxuICB9XHJcblxyXG4gIG9uS2V5RG93biAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLl9jdXJyZW50U2NlbmUpIHsgdGhpcy5fY3VycmVudFNjZW5lLm9uS2V5RG93bihldmVudCk7IH1cclxuICB9XHJcblxyXG4gIG9uS2V5VXAgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5fY3VycmVudFNjZW5lKSB7IHRoaXMuX2N1cnJlbnRTY2VuZS5vbktleVVwKGV2ZW50KTsgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9jdXJyZW50U2NlbmUpIHsgdGhpcy5fY3VycmVudFNjZW5lLnVwZGF0ZShhcmdzKTsgfVxyXG4gIH1cclxufSIsImltcG9ydCB7IE9GQ29sb3IgfSBmcm9tICcuLi9jb3JlL3JlbmRlci9ncmFwaGljcy9vZkNvbG9yJ1xyXG5pbXBvcnQgeyBPRkVudW1DYW52YXNDb250ZXh0VHlwZSB9IGZyb20gJy4uL2VudW1zL29mRW51bUNhbnZhc0NvbnRleHRUeXBlJ1xyXG5pbXBvcnQgeyBPRlRyYW5zbGF0aW9ucyB9IGZyb20gJy4vb2ZUcmFuc2xhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9GU2V0dGluZ3Mge1xyXG5cclxuICB0YXJnZXRGcmFtZXJhdGU6IG51bWJlcjtcclxuICBhbmltYXRpb25GcmFtZXJhdGU6IG51bWJlcjtcclxuICBsb2FkRGVmYXVsdDogYm9vbGVhbjtcclxuICBkaXNhYmxlSW5wdXREZXRlY3Rpb246IGJvb2xlYW47XHJcblxyXG4gIC8vIENvbmZpZ3VyYXRpb246IENhbnZhc1xyXG4gIGZvcmNlVXNlQ2FudmFzQ29udGV4dEluc3RlYWRPZldlYkdMOiBib29sZWFuO1xyXG4gIGNhbnZhc0NvbnRleHRUeXBlOiBzdHJpbmc7XHJcbiAgY2FudmFzV2lkdGg6IG51bWJlcjtcclxuICBjYW52YXNIZWlnaHQ6IG51bWJlcjtcclxuICBjYW52YXNCYWNrZ3JvdW5kQ29sb3I6IE9GQ29sb3I7XHJcbiAgY2FudmFzQm9yZGVyV2lkdGg6IHN0cmluZztcclxuICBjYW52YXNCb3JkZXJDb2xvcjogT0ZDb2xvcjtcclxuXHJcbiAgLy8gQ29uZmlndXJhdGlvbjogRGVidWcgQ29uc29sZVxyXG4gIGRlYnVnQ29uc29sZVRleHRDb2xvcjogT0ZDb2xvcjtcclxuICBkZWJ1Z0NvbnNvbGVUZXh0V2VpZ2h0OiBzdHJpbmc7XHJcbiAgZGVidWdDb25zb2xlVGV4dFNpemU6IG51bWJlcjtcclxuICBkZWJ1Z0NvbnNvbGVUZXh0T2Zmc2V0WDogbnVtYmVyO1xyXG4gIGRlYnVnQ29uc29sZVRleHRPZmZzZXRZOiBudW1iZXI7XHJcblxyXG4gIC8vIENvbmZpZ3VyYXRpb246IFJlbmRlclxyXG4gIHJlbmRlckNsZWFyQ29sb3I6IE9GQ29sb3I7XHJcblxyXG4gIC8vIElkJ3NcclxuICBpZGVudGlmaWVyX1JlbmRlckNhbnZhczogc3RyaW5nO1xyXG4gIGlkZW50aWZpZXJfUmVuZGVyVGV4dENhbnZhczogc3RyaW5nO1xyXG5cclxuICAvL01lc3NhZ2VcclxuICBtZXNzYWdlX0NhbnZhc0hUTUw1V2FybmluZzogc3RyaW5nO1xyXG4gIFxyXG4gIC8vIERpc2FibGUgXHJcbiAgZW5hYmxlZFZCT0luc3RhbmNlc0xpZmU6IGJvb2xlYW47XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRhcmdldEZyYW1lcmF0ZSA9IDYwO1xyXG4gICAgdGhpcy5hbmltYXRpb25GcmFtZXJhdGUgPSA2MDtcclxuICAgIHRoaXMubG9hZERlZmF1bHQgPSB0cnVlO1xyXG4gICAgdGhpcy5kaXNhYmxlSW5wdXREZXRlY3Rpb24gPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuZm9yY2VVc2VDYW52YXNDb250ZXh0SW5zdGVhZE9mV2ViR0wgPSBmYWxzZTtcclxuICAgIHRoaXMuY2FudmFzQ29udGV4dFR5cGUgPSBPRkVudW1DYW52YXNDb250ZXh0VHlwZS5EMkQ7XHJcbiAgICB0aGlzLmNhbnZhc1dpZHRoID0gMTAyNDtcclxuICAgIHRoaXMuY2FudmFzSGVpZ2h0ID0gNzY4O1xyXG4gICAgdGhpcy5jYW52YXNCYWNrZ3JvdW5kQ29sb3IgPSBPRkNvbG9yLmJsYWNrKCk7XHJcbiAgICB0aGlzLmNhbnZhc0JvcmRlcldpZHRoID0gJzBweCc7XHJcbiAgICB0aGlzLmNhbnZhc0JvcmRlckNvbG9yID0gT0ZDb2xvci5ibGFjaygpO1xyXG5cclxuICAgIHRoaXMuZGVidWdDb25zb2xlVGV4dENvbG9yID0gT0ZDb2xvci5ncmVlbigpO1xyXG4gICAgdGhpcy5kZWJ1Z0NvbnNvbGVUZXh0V2VpZ2h0ID0gJ2JvbGQnO1xyXG4gICAgdGhpcy5kZWJ1Z0NvbnNvbGVUZXh0U2l6ZSA9IDg7XHJcbiAgICB0aGlzLmRlYnVnQ29uc29sZVRleHRPZmZzZXRYID0gLTkwO1xyXG4gICAgdGhpcy5kZWJ1Z0NvbnNvbGVUZXh0T2Zmc2V0WSA9IDM7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJDbGVhckNvbG9yID0gT0ZDb2xvci5ibGFjaygpO1xyXG4gICAgXHJcbiAgICB0aGlzLmlkZW50aWZpZXJfUmVuZGVyQ2FudmFzID0gJ3JlbmRlckNhbnZhcyc7XHJcbiAgICB0aGlzLmlkZW50aWZpZXJfUmVuZGVyVGV4dENhbnZhcyA9ICdyZW5kZXJUZXh0Q2FudmFzJztcclxuXHJcbiAgICB0aGlzLm1lc3NhZ2VfQ2FudmFzSFRNTDVXYXJuaW5nID0gT0ZUcmFuc2xhdGlvbnMuRnJhbWV3b3JrLkNhbnZhcy5odG1sNVdhcm5pbmc7XHJcblxyXG4gICAgdGhpcy5lbmFibGVkVkJPSW5zdGFuY2VzTGlmZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlKCk6IE9GU2V0dGluZ3Mge1xyXG4gICAgcmV0dXJuIG5ldyBPRlNldHRpbmdzKCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIE9GVHJhbnNsYXRpb25zIHtcclxuXHJcbiAgc3RhdGljIEZyYW1ld29yayA9IGNsYXNzIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBpbml0aWFsaXplZCA9ICdPRihpZDp7MH0pPiBJbml0aWFsaXppbmcgT2N0b3B1cyBmcmFtZXdvcmsuJztcclxuICAgIHN0YXRpYyByZWFkb25seSByZWFkeSA9ICdPRihpZDp7MH0pPiBPY3RvcHVzIGZyYW1ld29yayBSZWFkeS4nO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IGNhbnZhc05vdEZvdW5kID0gJ09GKGlkOnswfSk6OmNvbnN0cnVjdG9yPiBDYW52YXMgZWxlbWVudCBub3QgZm91bmQgaW46IHsxfSwgZnJhbWV3b3JrIG5vdCBpbml0aWFsaXplZC4nO1xyXG5cclxuICAgIHN0YXRpYyBGcmFtZXdvcmtGYWN0b3J5ID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgb3V0T2ZCb3VuZHMgPSBgRnJhbWV3b3JrRmFjdG9yeTo6c2V0Q3VycmVudEZyYW1ld29yayBpbmRleDogezB9IG91dCBvZiBib3VuZHMuYDtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIEdyYXBoaWNzT3B0aW1pemF0aW9uID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgUG9seWdvbkJhdGNoZXIgPSBjbGFzcyB7XHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IGNoYW5nZVNoYWRlciA9ICdPRlBvbHlnb25CYXRjaGVyOjpjaGFuZ2VTaGFkZXI+IE5ldyBzaGFkZXI6IHswfSBhcHBsaWVkLic7XHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IHNldFNoYWRlciA9ICdPRlBvbHlnb25CYXRjaGVyOjpzZXRTaGFkZXI+IE5ldyBzaGFkZXI6IHswfSBhcHBsaWVkLic7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBBdWRpb0RldmljZSA9IGNsYXNzIHtcclxuICAgICAgc3RhdGljIHJlYWRvbmx5IGluaXRpYWxpemUgPSAnT0YoaWQ6ezB9KTpPRkF1ZGlvRGV2aWNlOjpJbml0aWFsaXplPiBJbml0aWFsaXplZC4nO1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgbm90U3VwcG9ydGVkID0gJ09GKGlkOnswfSk6T0ZBdWRpb0RldmljZTo6SW5pdGlhbGl6ZT4gV2ViIEF1ZGlvIEFQSSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGF0aWMgQ29udGVudE1hbmFnZW1lbnQgPSBjbGFzcyB7XHJcbiAgICAgIHN0YXRpYyByZWFkb25seSBjaGFuZ2VQcm9wZXJ0aWVzSW5Db250ZW50Tm90Rm91bmQgPSAnT0YoaWQ6ezB9KTo6Q29udGVudE1hbmFnZW1lbnQ6OmNoYW5nZVByb3BlcnRpZXNJbWFnZUNvbnRlbnQ+IENvbnRlbnQgbm90IGZvdW5kIGluOiB7MX0nO1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgbG9hZE1hdGVyaWFsID0gJ09GKGlkOnswfSk6Q29udGVudE1hbmFnZXI6OmxvYWRNYXRlcmlhbD4gezF9JztcclxuICAgICAgc3RhdGljIHJlYWRvbmx5IGxvYWRJbWFnZSA9ICdPRihpZDp7MH0pOkNvbnRlbnRNYW5hZ2VyOjpsb2FkSW1hZ2U+IHsxfSc7XHJcbiAgICAgIHN0YXRpYyByZWFkb25seSBsb2FkTWF0ZXJpYWxGcm9tSlNPTiA9ICdPRihpZDp7MH0pOkNvbnRlbnRNYW5hZ2VyOjpsb2FkTWF0ZXJpYWxGcm9tSlNPTj4gezF9JztcclxuICAgICAgc3RhdGljIHJlYWRvbmx5IGxvYWRTb3VuZEZyb21BcnJheUFCdWZmZXIgPSAnT0YoaWQ6ezB9KTpDb250ZW50TWFuYWdlcjo6YXN5bmNMb2FkU291bmRGcm9tQXJyYXlCdWZmZXI+IHsxfSc7XHJcbiAgICAgIHN0YXRpYyByZWFkb25seSBsb2FkSW1hZ2VGcm9tSFRNTEltYWdlID0gJ09GKGlkOnswfSk6Q29udGVudE1hbmFnZXI6OmxvYWRJbWFnZUZyb21IVE1MSW1hZ2U+IHsxfSc7XHJcbiAgICAgIHN0YXRpYyByZWFkb25seSBub3RJbXBsZW1lbnRlZEV4Y2VwdGlvbiA9ICdPRihpZDp7MH0pOkNvbnRlbnRNYW5hZ2VyPiBOb3QgaW1wbGVtZW50ZWQgZXhjZXB0aW9uOiB7MX0nO1xyXG4gICAgICBcclxuICAgICAgc3RhdGljIE1hdGVyaWFsQ29udGVudCA9IGNsYXNzIHtcclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgbm90SW1wbGVtZW50ZWRFeGNlcHRpb24gPSAnT0YoaWQ6ezB9KTpNYXRlcmlhbENvbnRlbnQ+IE5vdCBpbXBsZW1lbnRlZCBleGNlcHRpb24nO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc3RhdGljIFNvdW5kQ29udGVudCA9IGNsYXNzIHtcclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgaW50ZXJuYWxfT25FcnJvckRlY29kZUF1ZGlvRGF0YSA9ICdPRihpZDp7MH0pOlNvdW5kQ29udGVudDo6aW50ZXJuYWxfT25FcnJvckRlY29kZUF1ZGlvRGF0YT4gezF9JztcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIFNjZW5lTWFuYWdlciA9IGNsYXNzIHtcclxuICAgICAgc3RhdGljIHJlYWRvbmx5IGdvdG9TY2VuZSA9ICdPRihpZDp7MH0pOk9GU2NlbmVNYW5hZ2VyOjpnb3RvU2NlbmU+IENyZWF0ZWQgU2NlbmU6IHsxfSBhbmQgSW5pdGlhbGl6ZWQuJztcclxuICAgICAgc3RhdGljIHJlYWRvbmx5IHNjZW5lRG9udEV4aXN0cyA9IGBPRihpZDp7MH0pOk9GU2NlbmVNYW5hZ2VyOjpnb3RvU2NlbmU+IFRoZTogezF9IGRvZXNuJ3QgZXhpc3RzLmA7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBDYW52YXMgPSBjbGFzcyB7XHJcbiAgICAgIHN0YXRpYyByZWFkb25seSBodG1sNVdhcm5pbmcgPSBgWW91ciBicm93c2VyIGRvbid0IHN1cHBvcnQgSFRNTDUgQ2FudmFzIEVsZW1lbnQuYDtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIEdMSGVscGVyID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgY29tcGlsZVNoYWRlciA9IGBHTDo6Q29tcGlsZVNoYWRlcj4gQW4gZXJyb3Igb2NjdXJyZWQgY29tcGlsaW5nIHRoZSBzaGFkZXJzOiB7MH1gO1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgY3JlYXRlUHJvZ3JhbSA9IGBHTDo6Q3JlYXRlUHJvZ3JhbT4gVW5hYmxlIHRvIGluaXRpYWxpemUgdGhlIHNoYWRlciBwcm9ncmFtOiAgezB9YDtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIENhbnZhc0NvbnRleHRNYW5hZ2VyID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgaXNzdWVSZW5kZXJpbmdDb250ZXh0ID0gYENhbid0IHN0YXJ0IHRoZSBXZWJHTCBSZW5kZXJpbmcgQ29udGV4dDogezB9YDtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIEdyYXBoaWNEZXZpY2VNYW5hZ2VyID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgY3JlYXRlR3JhcGhpY0RldmljZSA9IGBPRihpZDp7MH0pOkdyYXBoaWNEZXZpY2VNYW5hZ2VyOjpjcmVhdGVHcmFwaGljRGV2aWNlPiBUaGUgZ3JhcGhpYyBkZXZpY2U6ICd7MX0nIHdhcyBjcmVhdGVkLmA7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBTaGFkZXJGYWN0b3J5ID0gY2xhc3Mge1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgYWRkU2hhZGVyID0gYE9GKGlkOnswfSk6U2hhZGVyRmFjdG9yeTo6YWRkU2hhZGVyPiBMb2FkZWQgc2hhZGVyOiB7MX1gO1xyXG4gICAgICBzdGF0aWMgcmVhZG9ubHkgbG9hZEFuZEFkZFNoYWRlcldpdGhDb2RlSW5mbyA9IGBPRihpZDp7MH0pOlNoYWRlckZhY3Rvcnk6OkxvYWRBbmRBZGRTaGFkZXJXaXRoQ29kZUluZm8+IExvYWRlZCBzaGFkZXI6IHsxfWA7XHJcbiAgICB9O1xyXG4gIH07ICBcclxufVxyXG4iLCJpbXBvcnQgeyBFbnVtU3BlY3RUeXBlIH0gZnJvbSBcIi4vc3BlY3MvZW51bVNwZWNUeXBlXCI7XHJcbmltcG9ydCB7IFNwZWNUZXN0RnJhbWV3b3JrIH0gZnJvbSBcIi4vc3BlY3MvdHlwZXMvc3BlY1Rlc3RGcmFtZXdvcmtcIjtcclxuaW1wb3J0IHsgU3BlY1NwYWNlR2FtZSB9IGZyb20gXCIuL3NwZWNzL3R5cGVzL3NwZWNTcGFjZUdhbWVcIjtcclxuXHJcbmludGVyZmFjZSBTcGVjSW5zdGFuY2Uge1xyXG4gIHVwZGF0ZTogKGR0OiBudW1iZXIpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgU3BlY01haW4ge1xyXG5cclxuICBwcml2YXRlIF9jdXJyZW50U3BlYzogU3BlY0luc3RhbmNlO1xyXG5cclxuICBjb25zdHJ1Y3RvciAoc3BlY1R5cGU6IEVudW1TcGVjdFR5cGUpIHtcclxuICAgIHN3aXRjaCAoc3BlY1R5cGUpIHtcclxuICAgICAgY2FzZSBFbnVtU3BlY3RUeXBlLlNpbXBsZUZyYW1ld29yazpcclxuICAgICAgICB0aGlzLl9jdXJyZW50U3BlYyA9IG5ldyBTcGVjVGVzdEZyYW1ld29yaygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEVudW1TcGVjdFR5cGUuU3BhY2VHYW1lOlxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTcGVjID0gbmV3IFNwZWNTcGFjZUdhbWUoKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSAoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fY3VycmVudFNwZWMudXBkYXRlKGR0KTtcclxuICB9XHJcbn0iLCJleHBvcnQgZW51bSBFbnVtU3BlY3RUeXBlIHtcclxuICBTaW1wbGVGcmFtZXdvcmssXHJcbiAgU3BhY2VHYW1lXHJcbn1cclxuIiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmsgfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvb2ZGcmFtZXdvcmtcIjtcclxuaW1wb3J0IHsgT0ZGcmFtZXdvcmtGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL29mRnJhbWV3b3JrRmFjdG9yeVwiO1xyXG5pbXBvcnQgeyBTcGFjZUdhbWVTY2VuZSB9IGZyb20gXCIuL3NwZWNTcGFjZUdhbWUvc2NlbmVzL3NwYWNlR2FtZVNjZW5lXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3BlY1NwYWNlR2FtZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmNyZWF0ZSgpO1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrLnN0YXJ0T2N0b3B1c0ZyYW1ld29yazJEKFwiY2FudmFzLXNjZW5lXCIpO1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrLnNjZW5lTWFuYWdlci5nb3RvU2NlbmVCeTxTcGFjZUdhbWVTY2VuZT4oU3BhY2VHYW1lU2NlbmUpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2ZyYW1ld29yay51cGRhdGUoeyBkdCB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgR0Jhc2VCdWxsZXQgfSBmcm9tIFwiLi9nQmFzZUJ1bGxldFwiO1xyXG5pbXBvcnQgeyBHQnVsbGV0RmFjdG9yeSB9IGZyb20gXCIuL2dCdWxsZXRGYWN0b3J5XCI7XHJcbmltcG9ydCB7IEdQbGF5ZXIgfSBmcm9tIFwiLi9nUGxheWVyXCI7XHJcbmltcG9ydCB7IE9GQW5pbWF0aW9uLCBPRkhvbWluZzIsIE9GRnJhbWV3b3JrRmFjdG9yeSwgT0ZJbWFnZUNvbnRlbnQsIElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiQGZyYW1ld29ya1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdFbmVteUhvbWluZ01pc3NpbGUgZXh0ZW5kcyBHQmFzZUJ1bGxldCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX3BsYXllcjogR1BsYXllcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9hbmltYXRpb246IE9GQW5pbWF0aW9uO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2hvbWluZ0ludGVycG9sYXRvcjogT0ZIb21pbmcyO1xyXG5cclxuICBnZXQgYW5pbWF0aW9uKCk6IE9GQW5pbWF0aW9uIHsgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbjsgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgdHVybkZhY3RvcjogbnVtYmVyLCBzcGVlZDogbnVtYmVyLCBwbGF5ZXI6IEdQbGF5ZXIsIFxyXG4gICAgYnVsbGV0RmFjdG9yeTogR0J1bGxldEZhY3RvcnkpIHtcclxuICAgIFxyXG4gICAgc3VwZXIoeCwgeSwgYnVsbGV0RmFjdG9yeSlcclxuXHJcbiAgICB0aGlzLl9wbGF5ZXIgPSBwbGF5ZXI7XHJcbiAgICBcclxuICAgIHRoaXMuX2FuaW1hdGlvbiA9IG5ldyBPRkFuaW1hdGlvbih4LCB5LCA0LCAyKTtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi5pbWFnZUNvbnRlbnQgPSBPRkZyYW1ld29ya0ZhY3RvcnkuY3VycmVudEZyYW1ld29rLmNvbnRlbnRNYW5hZ2VyXHJcbiAgICAgIC5nZXRDb250ZW50PE9GSW1hZ2VDb250ZW50PigncmVzb3VyY2VzL3NwU3ByaXRlU2hlZXRHYW1lRWxlbWVudHMucG5nJyk7XHJcbiAgICB0aGlzLl9hbmltYXRpb24uc2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWcoMTAyNCwgMTkwLCA4MCwgMTUpO1xyXG5cclxuICAgIGNvbnN0IGNvbGxXaWR0aCA9IHRoaXMuX2FuaW1hdGlvbi53aWR0aCAqIHRoaXMuX2FuaW1hdGlvbi5zY2FsZVg7XHJcbiAgICBjb25zdCBjb2xsSGVpZ2h0ID0gdGhpcy5fYW5pbWF0aW9uLmhlaWdodCAqIHRoaXMuX2FuaW1hdGlvbi5zY2FsZVk7XHJcbiAgICBcclxuICAgIHRoaXMuX2FuaW1hdGlvbi5jcmVhdGVDb2xsaXNpb24oMCwgMCwgY29sbFdpZHRoLCBjb2xsSGVpZ2h0LCBcclxuICAgICAgLWNvbGxXaWR0aCAvIDIsIC1jb2xsSGVpZ2h0IC8gMik7XHJcblxyXG4gICAgdGhpcy5faG9taW5nSW50ZXJwb2xhdG9yID0gbmV3IE9GSG9taW5nMih4LCB5LCB0dXJuRmFjdG9yLCBzcGVlZCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgdGhpcy5faG9taW5nSW50ZXJwb2xhdG9yLnVwZGF0ZShhcmdzLmR0KTtcclxuXHJcbiAgICB0aGlzLl9hbmltYXRpb24ueCA9IHRoaXMuX2hvbWluZ0ludGVycG9sYXRvci54O1xyXG4gICAgdGhpcy5fYW5pbWF0aW9uLnkgPSB0aGlzLl9ob21pbmdJbnRlcnBvbGF0b3IueTtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi5yb3RhdGlvbiA9IHRoaXMuX2hvbWluZ0ludGVycG9sYXRvci5yb3RhdGlvbjtcclxuICAgIHRoaXMuX2FuaW1hdGlvbi51cGRhdGUoYXJncyk7XHJcblxyXG4gICAgdGhpcy5faG9taW5nSW50ZXJwb2xhdG9yLnNldFRhcmdldCh0aGlzLl9wbGF5ZXIueCwgdGhpcy5fcGxheWVyLnkpO1xyXG5cclxuICAgIGlmICh0aGlzLl9wbGF5ZXIgJiYgdGhpcy5fcGxheWVyLmhpdFRlc3QodGhpcy5fYW5pbWF0aW9uKSkge1xyXG4gICAgICAvLyBJZiB0aGVyZSdzIGNvbGxpc2lvbiBvZiB0aGUgcGxheWVyIGJ1bGxldCB0aGVuIHNob3cgYW4gYW5pbWF0aW9uXHJcbiAgICAgIGNvbnN0IGJ1bGxldEVmZmVjdDJEID0gdGhpcy5fYnVsbGV0RmFjdG9yeS5nYW1lLmVmZmVjdE1hbmFnZXIuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICdyZXNvdXJjZXMvc3BTcHJpdGVTaGVldEdhbWVFbGVtZW50cy5wbmcnLCB0aGlzLl9hbmltYXRpb24ueCwgdGhpcy5fYW5pbWF0aW9uLnksIDQsIDQpO1xyXG4gICAgICBidWxsZXRFZmZlY3QyRC5hbmltYXRpb24uc2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWcoMTAyNCwgMCwgMTkwLCAxOTApO1xyXG4gICAgICBidWxsZXRFZmZlY3QyRC5hbmltYXRpb24uc2NhbGVYID0gMC4zNTtcclxuICAgICAgYnVsbGV0RWZmZWN0MkQuYW5pbWF0aW9uLnNjYWxlWSA9IDAuMzU7XHJcblxyXG4gICAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy5fcGxheWVyLm9uSGl0KDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2hvbWluZ0ludGVycG9sYXRvci5kZXN0cm95KCk7XHJcbiAgICB0aGlzLl9hbmltYXRpb24uZGVzdHJveSgpO1xyXG4gIH1cclxufSIsImV4cG9ydCBlbnVtIEVudW1FbmVteVR5cGUge1xyXG4gIER1bW15ID0gMVxyXG59XHJcbiIsImV4cG9ydCBlbnVtIEVudW1Qcm95ZWN0aWxlVHlwZSB7XHJcbiAgUGxheWVyID0gMSxcclxuICBFbmVteSA9IDIsXHJcbiAgTWlzc2lsZUVuZW15ID0gMyxcclxuICBNaXNzaWxlUGxheWVyID0gNFxyXG59XHJcbiIsImltcG9ydCB7IEdCdWxsZXRGYWN0b3J5IH0gZnJvbSBcIi4vZ0J1bGxldEZhY3RvcnlcIjtcclxuaW1wb3J0IHsgR0VuZW15RmFjdG9yeSB9IGZyb20gXCIuL2dFbmVteUZhY3RvcnlcIjtcclxuaW1wb3J0IHsgT0ZGcmFtZXdvcmssIE9GRnJhbWV3b3JrRmFjdG9yeSwgSU9GUmVuZGVyQXJncyB9IGZyb20gXCJAZnJhbWV3b3JrXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR0Jhc2VCdWxsZXQge1xyXG5cclxuICBwcm90ZWN0ZWQgX2lzV2FpdGluZ0ZvckRlbGV0ZTogYm9vbGVhbjtcclxuICBwcm90ZWN0ZWQgX3g6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgX3k6IG51bWJlcjtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9lbmVteUZhY3Rvcnk6IEdFbmVteUZhY3Rvcnk7XHJcblxyXG4gIGdldCBpc1dhaXRpbmdGb3JEZWxldGUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGU7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHByb3RlY3RlZCByZWFkb25seSBfYnVsbGV0RmFjdG9yeTogR0J1bGxldEZhY3RvcnkpIHtcclxuICAgIHRoaXMuX3ggPSB4O1xyXG4gICAgdGhpcy5feSA9IHk7XHJcbiAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX2ZyYW1ld29yayA9IE9GRnJhbWV3b3JrRmFjdG9yeS5jdXJyZW50RnJhbWV3b2s7XHJcbiAgICB0aGlzLl9lbmVteUZhY3RvcnkgPSB0aGlzLl9idWxsZXRGYWN0b3J5LmdhbWUuZW5lbXlGYWN0b3J5O1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpO1xyXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcclxufVxyXG4iLCJpbXBvcnQgeyBHcmF2aXVzR2FtZSB9IGZyb20gXCIuL2dyYXZpdXNHYW1lXCI7XHJcbmltcG9ydCB7IEdCYXNlQnVsbGV0IH0gZnJvbSBcIi4vZ0Jhc2VCdWxsZXRcIjtcclxuaW1wb3J0IHsgRW51bVByb3llY3RpbGVUeXBlIH0gZnJvbSBcIi4vZW51bXMvZW51bVByb3llY3RpbGVUeXBlXCI7XHJcbmltcG9ydCB7IEdQbGF5ZXJCdWxsZXQgfSBmcm9tIFwiLi9nUGxheWVyQnVsbGV0XCI7XHJcbmltcG9ydCB7IEdFbmVteUhvbWluZ01pc3NpbGUgfSBmcm9tIFwiLi9lRW5lbXlIb21pbmdNaXNzaWxlXCI7XHJcbmltcG9ydCB7IE9GU3ByaXRlQmF0Y2hlciwgT0ZWZWN0b3IyLCBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIkBmcmFtZXdvcmtcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHQnVsbGV0RmFjdG9yeSB7XHJcblxyXG4gIHByaXZhdGUgX2J1bGxldHM6IEdCYXNlQnVsbGV0W107XHJcbiAgcHJpdmF0ZSBfc3ByaXRlQmF0Y2g6IE9GU3ByaXRlQmF0Y2hlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGdhbWU6IEdyYXZpdXNHYW1lKSB7XHJcbiAgICB0aGlzLl9idWxsZXRzID0gW107XHJcbiAgfSBcclxuXHJcbiAgY3JlYXRlQnVsbGV0KHR5cGU6IEVudW1Qcm95ZWN0aWxlVHlwZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRpcmVjdGlvbjogT0ZWZWN0b3IyLCBzcGVlZDogbnVtYmVyKTogR0Jhc2VCdWxsZXQge1xyXG4gICAgbGV0IGJ1bGxldDogR0Jhc2VCdWxsZXQgPSBudWxsO1xyXG5cclxuICAgIHN3aXRjaCh0eXBlKSB7XHJcbiAgICAgIGNhc2UgRW51bVByb3llY3RpbGVUeXBlLlBsYXllcjpcclxuICAgICAgICBidWxsZXQgPSBuZXcgR1BsYXllckJ1bGxldCh4LCB5LCBkaXJlY3Rpb24sIHNwZWVkLCB0aGlzKTtcclxuICAgICAgICAoYnVsbGV0IGFzIEdQbGF5ZXJCdWxsZXQpLnNwcml0ZS5zZXRTcHJpdGVCYXRjaCh0aGlzLl9zcHJpdGVCYXRjaCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1bGxldCkge1xyXG4gICAgICB0aGlzLl9idWxsZXRzLnB1c2goYnVsbGV0KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYnVsbGV0O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWlzc2lsZSAodHlwZTogRW51bVByb3llY3RpbGVUeXBlLCB4OiBudW1iZXIsIHk6IG51bWJlciwgdHVybkZhY3RvcjogbnVtYmVyLCBzcGVlZDogbnVtYmVyKTogR0Jhc2VCdWxsZXQge1xyXG4gICAgbGV0IGJ1bGxldDogR0Jhc2VCdWxsZXQgPSBudWxsO1xyXG5cclxuICAgIHN3aXRjaCh0eXBlKSB7XHJcbiAgICAgIGNhc2UgRW51bVByb3llY3RpbGVUeXBlLk1pc3NpbGVFbmVteTpcclxuICAgICAgICBidWxsZXQgPSBuZXcgR0VuZW15SG9taW5nTWlzc2lsZSh4LCB5LCB0dXJuRmFjdG9yLCBzcGVlZCwgdGhpcy5nYW1lLnBsYXllciwgdGhpcyk7XHJcbiAgICAgICAgKGJ1bGxldCBhcyBHRW5lbXlIb21pbmdNaXNzaWxlKS5hbmltYXRpb24uc2V0U3ByaXRlQmF0Y2godGhpcy5fc3ByaXRlQmF0Y2gpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChidWxsZXQpIHtcclxuICAgICAgdGhpcy5fYnVsbGV0cy5wdXNoKGJ1bGxldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJ1bGxldDtcclxuICB9XHJcblxyXG4gIHNldFNwcml0ZUJhdGNoKHNwcml0ZUJhdGNoOiBPRlNwcml0ZUJhdGNoZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Nwcml0ZUJhdGNoID0gc3ByaXRlQmF0Y2g7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9idWxsZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGJ1bGxldCA9IHRoaXMuX2J1bGxldHNbaV07XHJcblxyXG4gICAgICBpZiAoIWJ1bGxldC5pc1dhaXRpbmdGb3JEZWxldGUpIHtcclxuICAgICAgICBidWxsZXQudXBkYXRlKGFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGJ1bGxldC5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5fYnVsbGV0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgaS0tO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdFbmVteUJhc2UgfSBmcm9tIFwiLi9nRW5lbXlCYXNlXCI7XHJcbmltcG9ydCB7IEdFbmVteUZhY3RvcnkgfSBmcm9tIFwiLi9nRW5lbXlGYWN0b3J5XCI7XHJcbmltcG9ydCB7IEVudW1Qcm95ZWN0aWxlVHlwZSB9IGZyb20gXCIuL2VudW1zL2VudW1Qcm95ZWN0aWxlVHlwZVwiO1xyXG5pbXBvcnQgeyBPRkludGVydmFsIH0gZnJvbSAnLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvaGVscGVycy9vZkludGVydmFsJztcclxuaW1wb3J0IHsgT0ZWZWN0b3IyIH0gZnJvbSBcIi4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL21hdGgvb2ZWZWN0b3IyXCI7XHJcbmltcG9ydCB7IE9GU3ByaXRlIH0gZnJvbSBcIi4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL2QyZC9vZlNwcml0ZVwiO1xyXG5pbXBvcnQgeyBPRkltYWdlQ29udGVudCB9IGZyb20gXCIuLi8uLi8uLi9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL2NvbnRlbnQvb2ZJbWFnZUNvbnRlbnRcIjtcclxuaW1wb3J0IHsgT0ZNYXRoIH0gZnJvbSBcIi4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL21hdGgvb2ZNYXRoXCI7XHJcbmltcG9ydCB7IElPRlJlbmRlckFyZ3MgfSBmcm9tIFwiLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvaW50ZXJmYWNlcy9pb2ZSZW5kZXJBcmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR0R1bW15RW5lbXkgZXh0ZW5kcyBHRW5lbXlCYXNlIHtcclxuXHJcbiAgcHJpdmF0ZSBfc3BlZWQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9oZWFsdGg6IG51bWJlcjtcclxuICBwcml2YXRlIF9kaXJlY3Rpb246IE9GVmVjdG9yMjtcclxuICBwcml2YXRlIF9pQ3JlYXRpb25NaXNzaWxlOiBPRkludGVydmFsOyBcclxuXHJcbiAgY29uc3RydWN0b3IgKHg6IG51bWJlciwgeTogbnVtYmVyLCBlbmVteUZhY3Rvcnk6IEdFbmVteUZhY3RvcnkpIHtcclxuICAgIHN1cGVyKGVuZW15RmFjdG9yeSk7XHJcblxyXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gbmV3IE9GVmVjdG9yMigtMSwgMCk7XHJcbiAgICB0aGlzLl9zcGVlZCA9IDEwMDtcclxuICAgIHRoaXMuX2hlYWx0aCA9IDM7XHJcblxyXG4gICAgdGhpcy5fc3ByaXRlID0gbmV3IE9GU3ByaXRlKHgsIHkpO1xyXG4gICAgdGhpcy5fc3ByaXRlLmltYWdlQ29udGVudCA9IHRoaXMuX2ZyYW1ld29yay5jb250ZW50TWFuYWdlclxyXG4gICAgICAuZ2V0Q29udGVudDxPRkltYWdlQ29udGVudD4oJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycpO1xyXG4gICAgdGhpcy5fc3ByaXRlLnJvdGF0aW9uID0gLU1hdGguUEkgLyAyO1xyXG4gICAgdGhpcy5fc3ByaXRlLnNjYWxlWCA9IHRoaXMuX3Nwcml0ZS5zY2FsZVkgPSAxO1xyXG4gICAgdGhpcy5fc3ByaXRlLnNldEFkdmFuY2VBbmltYXRpb25UaWxlQ29uZmlnKDExMjMsIDE5MCwgMzIsIDMyKTtcclxuXHJcbiAgICBjb25zdCBjb2xsV2lkdGggPSB0aGlzLl9zcHJpdGUud2lkdGggKiB0aGlzLl9zcHJpdGUuc2NhbGVYO1xyXG4gICAgY29uc3QgY29sbEhlaWdodCA9IHRoaXMuX3Nwcml0ZS5oZWlnaHQgKiB0aGlzLl9zcHJpdGUuc2NhbGVZO1xyXG5cclxuICAgIHRoaXMuX3Nwcml0ZS5jcmVhdGVDb2xsaXNpb24oMCwgMCwgY29sbFdpZHRoLCBjb2xsSGVpZ2h0LCBcclxuICAgICAgLWNvbGxXaWR0aCAvIDIsIC1jb2xsSGVpZ2h0IC8gMik7XHJcblxyXG4gICAgdGhpcy5faUNyZWF0aW9uTWlzc2lsZSA9IG5ldyBPRkludGVydmFsKDAuMDI1LCAyMDApO1xyXG4gICAgdGhpcy5faUNyZWF0aW9uTWlzc2lsZS5maW5pc2hlZExvb3BDYWxsYmFjayA9ICgpID0+IHRoaXMub25GaW5pc2hlZExvb3BfQ3JlYXRpb25NaXNzaWxlKCk7XHJcbiAgfVxyXG5cclxuICBvbkZpbmlzaGVkTG9vcF9DcmVhdGlvbk1pc3NpbGUgKCkge1xyXG4gICAgY29uc3Qgcm5kID0gT0ZNYXRoLnJhbmRvbSgwLCAxMDApO1xyXG4gICAgXHJcbiAgICBpZiAocm5kID4gNzApIHtcclxuICAgICAgY29uc3QgdHVybkZhY3RvciA9IDAuNztcclxuICAgICAgY29uc3Qgc3BlZWQgPSAyMDA7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLl9lbmVteUZhY3RvcnkuZ2FtZS5idWxsZXRGYWN0b3J5LmNyZWF0ZU1pc3NpbGUoRW51bVByb3llY3RpbGVUeXBlLk1pc3NpbGVFbmVteSwgXHJcbiAgICAgICAgdGhpcy5fc3ByaXRlLngsIHRoaXMuX3Nwcml0ZS55LCB0dXJuRmFjdG9yLCBzcGVlZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkhpdChkYW1hZ2U6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5faGVhbHRoIC09IGRhbWFnZTsgXHJcblxyXG4gICAgaWYgKHRoaXMuX2hlYWx0aCA8PSAwKSB7XHJcbiAgICAgIHRoaXMuX2lzV2FpdGluZ0ZvckRlbGV0ZSA9IHRydWU7XHJcblxyXG4gICAgICBjb25zdCBlbmVteUVmZmVjdDJEID0gdGhpcy5fZW5lbXlGYWN0b3J5LmdhbWUuZWZmZWN0TWFuYWdlci5jcmVhdGVFZmZlY3QoXHJcbiAgICAgICAgJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycsIHRoaXMuX3Nwcml0ZS54LCB0aGlzLl9zcHJpdGUueSwgOCwgMyk7XHJcbiAgICAgIGVuZW15RWZmZWN0MkQuYW5pbWF0aW9uLnNldEFkdmFuY2VBbmltYXRpb25UaWxlQ29uZmlnKDAsIDAsIDEwMjQsIDM4NCk7XHJcbiAgICAgIGVuZW15RWZmZWN0MkQuYW5pbWF0aW9uLnNjYWxlWCA9IDAuNTtcclxuICAgICAgZW5lbXlFZmZlY3QyRC5hbmltYXRpb24uc2NhbGVZID0gMC41O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9pQ3JlYXRpb25NaXNzaWxlKSB7XHJcbiAgICAgIHRoaXMuX2lDcmVhdGlvbk1pc3NpbGUudXBkYXRlKGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLl9zcHJpdGUueCArPSB0aGlzLl9kaXJlY3Rpb24ueCAqIHRoaXMuX3NwZWVkICogYXJncy5kdDtcclxuICAgIHRoaXMuX3Nwcml0ZS55ICs9IHRoaXMuX2RpcmVjdGlvbi55ICogdGhpcy5fc3BlZWQgKiBhcmdzLmR0O1xyXG4gICAgdGhpcy5fc3ByaXRlLnVwZGF0ZShhcmdzKTtcclxuXHJcbiAgICBpZiAodGhpcy5fc3ByaXRlLnggPCAtdGhpcy5fc3ByaXRlLndpZHRoKSB7XHJcbiAgICAgIHRoaXMuX2lzV2FpdGluZ0ZvckRlbGV0ZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gbnVsbDtcclxuXHJcbiAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdFbmVteUZhY3RvcnkgfSBmcm9tIFwiLi9nRW5lbXlGYWN0b3J5XCI7XHJcbmltcG9ydCB7IE9GU3ByaXRlLCBPRkZyYW1ld29yaywgT0ZGcmFtZXdvcmtGYWN0b3J5LCBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIkBmcmFtZXdvcmtcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHRW5lbXlCYXNlIHtcclxuXHJcbiAgcHJvdGVjdGVkIF9pc1dhaXRpbmdGb3JEZWxldGU6IGJvb2xlYW47XHJcbiAgcHJvdGVjdGVkIF9zcHJpdGU6IE9GU3ByaXRlO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBfZnJhbWV3b3JrOiBPRkZyYW1ld29yaztcclxuXHJcbiAgZ2V0IHNwcml0ZSgpOiBPRlNwcml0ZSB7IHJldHVybiB0aGlzLl9zcHJpdGU7IH1cclxuICBnZXQgaXNXYWl0aW5nRm9yRGVsZXRlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNXYWl0aW5nRm9yRGVsZXRlOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkb25seSBfZW5lbXlGYWN0b3J5OiBHRW5lbXlGYWN0b3J5KSB7XHJcbiAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSBmYWxzZTtcclxuICAgIHRoaXMuX2ZyYW1ld29yayA9IE9GRnJhbWV3b3JrRmFjdG9yeS5jdXJyZW50RnJhbWV3b2s7XHJcbiAgfVxyXG5cclxuICBhYnN0cmFjdCBvbkhpdChkYW1hZ2U6IG51bWJlcik7XHJcbiAgYWJzdHJhY3QgdXBkYXRlKGFyZ3M6IElPRlJlbmRlckFyZ3MpO1xyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3ByaXRlLmRlc3Ryb3koKTtcclxuICAgIHRoaXMuX3Nwcml0ZSA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdyYXZpdXNHYW1lIH0gZnJvbSBcIi4vZ3Jhdml1c0dhbWVcIjtcclxuaW1wb3J0IHsgR0VuZW15QmFzZSB9IGZyb20gXCIuL2dFbmVteUJhc2VcIjtcclxuaW1wb3J0IHsgRW51bUVuZW15VHlwZSB9IGZyb20gXCIuL2VudW1zL2VudW1FbmVteVR5cGVcIjtcclxuaW1wb3J0IHsgR0R1bW15RW5lbXkgfSBmcm9tIFwiLi9nRHVtbXlFbmVteVwiO1xyXG5pbXBvcnQgeyBPRlNwcml0ZUJhdGNoZXIsIE9GRnJhbWV3b3JrLCBPRkludGVydmFsLCBPRkZyYW1ld29ya0ZhY3RvcnksIE9GTWF0aCwgSU9GUmVuZGVyQXJncyB9IGZyb20gXCJAZnJhbWV3b3JrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR0VuZW15RmFjdG9yeSB7XHJcblxyXG4gIHByaXZhdGUgX3Nwcml0ZUJhdGNoZXI6IE9GU3ByaXRlQmF0Y2hlcjtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBfZW5lbWllczogR0VuZW15QmFzZVtdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfaWNyZWF0aW9uRW5lbXk6IE9GSW50ZXJ2YWw7XHJcblxyXG4gIGdldCBlbmVtaWVzKCk6IEdFbmVteUJhc2VbXSB7IHJldHVybiB0aGlzLl9lbmVtaWVzOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBnYW1lOiBHcmF2aXVzR2FtZSkge1xyXG4gICAgdGhpcy5fZW5lbWllcyA9IFtdO1xyXG4gICAgdGhpcy5fZnJhbWV3b3JrID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmN1cnJlbnRGcmFtZXdvaztcclxuXHJcbiAgICB0aGlzLl9pY3JlYXRpb25FbmVteSA9IG5ldyBPRkludGVydmFsKDAuMDAxLCAxMDAwMDAwMDApO1xyXG4gICAgdGhpcy5faWNyZWF0aW9uRW5lbXkuZmluaXNoZWRMb29wQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMub25GaW5pc2hlZExvb3BfQ3JlYXRpb25FbmVteSgpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgb25GaW5pc2hlZExvb3BfQ3JlYXRpb25FbmVteSAgKCkge1xyXG4gICAgY29uc3QgeCA9IHRoaXMuX2ZyYW1ld29yay5hcHBXaWR0aCArIDQwO1xyXG4gICAgY29uc3QgeSA9IE9GTWF0aC5yYW5kb20oMCwgdGhpcy5fZnJhbWV3b3JrLmFwcEhlaWdodCk7XHJcblxyXG4gICAgdGhpcy5jcmVhdGVFbmVteShFbnVtRW5lbXlUeXBlLkR1bW15LCB4LCB5KTtcclxuICB9XHJcblxyXG4gIHNldFNwcml0ZUJhdGNoIChzcHJpdGVCYXRjaDogT0ZTcHJpdGVCYXRjaGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaGVyID0gc3ByaXRlQmF0Y2g7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVFbmVteSh0eXBlOiBFbnVtRW5lbXlUeXBlLCB4OiBudW1iZXIsIHk6IG51bWJlcikgOiB2b2lkIHtcclxuICAgIGxldCBlbmVteTogR0VuZW15QmFzZSA9IG51bGw7XHJcbiAgICAgICAgXHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSBFbnVtRW5lbXlUeXBlLkR1bW15OlxyXG4gICAgICAgIGVuZW15ID0gbmV3IEdEdW1teUVuZW15KHgsIHksIHRoaXMpO1xyXG4gICAgICAgIGVuZW15LnNwcml0ZS5zZXRTcHJpdGVCYXRjaCh0aGlzLl9zcHJpdGVCYXRjaGVyKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW5lbXkpIHtcclxuICAgICAgdGhpcy5fZW5lbWllcy5wdXNoKGVuZW15KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSAoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2ljcmVhdGlvbkVuZW15KSB7XHJcbiAgICAgIHRoaXMuX2ljcmVhdGlvbkVuZW15LnVwZGF0ZShhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2VuZW1pZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgZW5lbXkgPSB0aGlzLl9lbmVtaWVzW2ldO1xyXG5cclxuICAgICAgaWYgKGVuZW15KSB7XHJcbiAgICAgICAgaWYgKCFlbmVteS5pc1dhaXRpbmdGb3JEZWxldGUpIHtcclxuICAgICAgICAgIGVuZW15LnVwZGF0ZShhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBlbmVteS5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgdGhpcy5fZW5lbWllcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICBpLS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdyYXZpdXNHYW1lIH0gZnJvbSBcIi4vZ3Jhdml1c0dhbWVcIjtcclxuaW1wb3J0IHsgRW51bVByb3llY3RpbGVUeXBlIH0gZnJvbSBcIi4vZW51bXMvZW51bVByb3llY3RpbGVUeXBlXCJcclxuaW1wb3J0IHsgT0ZTcHJpdGUsIE9GRnJhbWV3b3JrRmFjdG9yeSwgT0ZJbWFnZUNvbnRlbnQsIE9GRHJhd2FibGUyRCwgT0ZFbnVtS2V5Q29kZSwgT0ZWZWN0b3IyLCBJT0ZSZW5kZXJBcmdzIH0gZnJvbSBcIkBmcmFtZXdvcmtcIjtcclxuaW1wb3J0IHsgR1BsYXllckJ1bGxldCB9IGZyb20gJy4vZ1BsYXllckJ1bGxldCc7XHJcblxyXG5leHBvcnQgY2xhc3MgR1BsYXllciB7XHJcblxyXG4gIHByaXZhdGUgX3Nwcml0ZTogT0ZTcHJpdGU7XHJcblxyXG4gIGdldCB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9zcHJpdGUueDsgfVxyXG4gIGdldCB5KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9zcHJpdGUueTsgfVxyXG4gIGdldCBzcHJpdGUoKTogT0ZTcHJpdGUgeyByZXR1cm4gdGhpcy5fc3ByaXRlOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2dhbWU6IEdyYXZpdXNHYW1lKSB7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VDb250ZW50ID0gT0ZGcmFtZXdvcmtGYWN0b3J5LmN1cnJlbnRGcmFtZXdvay5jb250ZW50TWFuYWdlclxyXG4gICAgICAuZ2V0Q29udGVudDxPRkltYWdlQ29udGVudD4oJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycpO1xyXG5cclxuICAgIHRoaXMuX3Nwcml0ZSA9IG5ldyBPRlNwcml0ZSgpO1xyXG4gICAgdGhpcy5fc3ByaXRlLmltYWdlQ29udGVudCA9IGltYWdlQ29udGVudDtcclxuICAgIHRoaXMuX3Nwcml0ZS5yb3RhdGlvbiA9IC1NYXRoLlBJIC8gMi4wO1xyXG4gICAgdGhpcy5fc3ByaXRlLnNjYWxlWCA9IHRoaXMuX3Nwcml0ZS5zY2FsZVkgPSAwLjM7XHJcbiAgICB0aGlzLl9zcHJpdGUuc2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWcoMTAyNCwgMjA1LCA3NSwgMTI4KTtcclxuXHJcbiAgICAvLyBjcmVhdGUgY29sbGlzaW9uXHJcbiAgICBjb25zdCBvZmZzZXRDb2xsV2lkdGggPSAtODtcclxuICAgIGNvbnN0IG9mZnNldENvbGxIZWlnaHQgPSAtMTQ7XHJcbiAgICBjb25zdCBjb2xsV2lkdGggPSAodGhpcy5fc3ByaXRlLndpZHRoICogdGhpcy5fc3ByaXRlLnNjYWxlWCkgKyBvZmZzZXRDb2xsV2lkdGg7XHJcbiAgICBjb25zdCBjb2xsSGVpZ2h0ID0gKHRoaXMuX3Nwcml0ZS5oZWlnaHQgKiB0aGlzLl9zcHJpdGUuc2NhbGVZKSArIG9mZnNldENvbGxIZWlnaHQ7XHJcblxyXG4gICAgdGhpcy5fc3ByaXRlLmNyZWF0ZUNvbGxpc2lvbigwLCAwLCBjb2xsSGVpZ2h0LCBjb2xsV2lkdGgsIFxyXG4gICAgICAtY29sbEhlaWdodCAvIDIsIC1jb2xsV2lkdGggLyAyKTtcclxuICB9XHJcblxyXG4gIGhpdFRlc3Qob3RoZXI6IE9GRHJhd2FibGUyRCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Nwcml0ZS5oaXRUZXN0KG90aGVyKTtcclxuICB9XHJcblxyXG4gIG9uSGl0IChkYW1hZ2U6IG51bWJlcik6IHZvaWQge1xyXG5cclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlICh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fc3ByaXRlLnggPSB4O1xyXG4gICAgdGhpcy5fc3ByaXRlLnkgPSB5O1xyXG4gIH1cclxuXHJcbiAgb25LZXlEb3duIChrZXlDb2RlOiBPRkVudW1LZXlDb2RlKTogdm9pZCB7XHJcbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcclxuICAgICAgY2FzZSBPRkVudW1LZXlDb2RlLlNwYWNlOlxyXG4gICAgICAgIGNvbnN0IHNwZWVkID0gMzAwOyAgICAgXHJcbiAgICAgICAgY29uc3QgYnVsbGV0cyA9IDEwO1xyXG4gICAgICAgIGNvbnN0IHNob290QW5nbGUgPSBNYXRoLlBJICogMC4yNTtcclxuICAgICAgICBjb25zdCBhbmdsZU9mZnNldCA9IHNob290QW5nbGUgKiAwLjU7XHJcbiAgICAgICAgY29uc3Qgc2hvb3RBbmdsZVBhcnQgPSBzaG9vdEFuZ2xlIC8gYnVsbGV0cztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWxsZXRzOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gLShidWxsZXRzIC8gMikgKyBpO1xyXG4gICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gbmV3IE9GVmVjdG9yMigxLCAwKTtcclxuICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFuZ2xlID0gKHNob290QW5nbGVQYXJ0ICogaSkgLSBhbmdsZU9mZnNldDtcclxuICAgICAgICAgIGRpcmVjdGlvbi54ID0gTWF0aC5jb3MoZGlyZWN0aW9uQW5nbGUpO1xyXG4gICAgICAgICAgZGlyZWN0aW9uLnkgPSBNYXRoLnNpbihkaXJlY3Rpb25BbmdsZSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgYnVsbGV0ID0gdGhpcy5fZ2FtZS5idWxsZXRGYWN0b3J5LmNyZWF0ZUJ1bGxldChFbnVtUHJveWVjdGlsZVR5cGUuUGxheWVyLFxyXG4gICAgICAgICAgICB0aGlzLl9zcHJpdGUueCwgdGhpcy5fc3ByaXRlLnkgKyAoaW5kZXggKiAyKSwgZGlyZWN0aW9uLCBzcGVlZCkgYXMgR1BsYXllckJ1bGxldDtcclxuICAgICAgICAgIGJ1bGxldC5zcHJpdGUucm90YXRpb24gPSBkaXJlY3Rpb25BbmdsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgKGFyZ3M6IElPRlJlbmRlckFyZ3MpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Nwcml0ZS51cGRhdGUoYXJncyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdCYXNlQnVsbGV0IH0gZnJvbSBcIi4vZ0Jhc2VCdWxsZXRcIjtcclxuaW1wb3J0IHsgR0J1bGxldEZhY3RvcnkgfSBmcm9tIFwiLi9nQnVsbGV0RmFjdG9yeVwiO1xyXG5pbXBvcnQgeyBPRlNwcml0ZSwgT0ZWZWN0b3IyLCBPRkltYWdlQ29udGVudCwgSU9GUmVuZGVyQXJncyB9IGZyb20gXCJAZnJhbWV3b3JrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR1BsYXllckJ1bGxldCBleHRlbmRzIEdCYXNlQnVsbGV0IHtcclxuXHJcbiAgcHJpdmF0ZSBfc3ByaXRlOiBPRlNwcml0ZTtcclxuXHJcbiAgcHJpdmF0ZSBfc3BlZWQ6IG51bWJlcjtcclxuICBwcml2YXRlIF9kaXJlY3Rpb246IE9GVmVjdG9yMjsgXHJcblxyXG4gIGdldCBzcHJpdGUoKTogT0ZTcHJpdGUgeyByZXR1cm4gdGhpcy5fc3ByaXRlOyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBkaXJlY3Rpb246IE9GVmVjdG9yMiwgc3BlZWQ6IG51bWJlciwgYnVsbGV0RmFjdG9yeTogR0J1bGxldEZhY3RvcnkpIHtcclxuICAgIHN1cGVyKHgsIHksIGJ1bGxldEZhY3RvcnkpO1xyXG5cclxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgIHRoaXMuX3NwZWVkID0gc3BlZWQ7XHJcblxyXG4gICAgdGhpcy5fc3ByaXRlID0gbmV3IE9GU3ByaXRlKHgsIHkpO1xyXG4gICAgdGhpcy5fc3ByaXRlLmltYWdlQ29udGVudCA9IHRoaXMuX2ZyYW1ld29yay5jb250ZW50TWFuYWdlclxyXG4gICAgICAuZ2V0Q29udGVudDxPRkltYWdlQ29udGVudD4oJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycpO1xyXG4gICAgdGhpcy5fc3ByaXRlLnNldEFkdmFuY2VBbmltYXRpb25UaWxlQ29uZmlnKDExMDQsIDE5MCwgMTksIDQpO1xyXG5cclxuICAgIGNvbnN0IGNvbGxXaWR0aCA9IHRoaXMuX3Nwcml0ZS53aWR0aCAqIHRoaXMuX3Nwcml0ZS5zY2FsZVg7XHJcbiAgICBjb25zdCBjb2xsSGVpZ2h0ID0gdGhpcy5fc3ByaXRlLmhlaWdodCAqIHRoaXMuX3Nwcml0ZS5zY2FsZVk7XHJcbiAgICBcclxuICAgIHRoaXMuX3Nwcml0ZS5jcmVhdGVDb2xsaXNpb24oMCwgMCwgY29sbFdpZHRoLCBjb2xsSGVpZ2h0LCBcclxuICAgICAgLWNvbGxXaWR0aCAvIDIsIC1jb2xsSGVpZ2h0IC8gMik7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoYXJnczogSU9GUmVuZGVyQXJncyk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3ByaXRlLnggKz0gdGhpcy5fZGlyZWN0aW9uLnggKiB0aGlzLl9zcGVlZCAqIGFyZ3MuZHQ7XHJcbiAgICB0aGlzLl9zcHJpdGUueSArPSB0aGlzLl9kaXJlY3Rpb24ueSAqIHRoaXMuX3NwZWVkICogYXJncy5kdDtcclxuICAgIFxyXG4gICAgdGhpcy5fc3ByaXRlLnVwZGF0ZShhcmdzKTtcclxuXHJcbiAgICBpZiAoKHRoaXMuX3Nwcml0ZS54ICsgdGhpcy5fc3ByaXRlLndpZHRoKSA+IHRoaXMuX2ZyYW1ld29yay5hcHBXaWR0aCkge1xyXG4gICAgICB0aGlzLl9pc1dhaXRpbmdGb3JEZWxldGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZW5lbXlGYWN0b3J5LmVuZW1pZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgZW5lbXkgPSB0aGlzLl9lbmVteUZhY3RvcnkuZW5lbWllc1tpXTtcclxuXHJcbiAgICAgIGlmIChlbmVteSAmJiB0aGlzLl9zcHJpdGUuaGl0VGVzdChlbmVteS5zcHJpdGUpKSB7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUncyBjb2xsaXNpb24gb2YgdGhlIHBsYXllciBidWxsZXQgdGhlbiBzaG93IGFuIGFuaW1hdGlvblxyXG4gICAgICAgIGNvbnN0IGJ1bGxldEVmZmVjdDJEID0gdGhpcy5fYnVsbGV0RmFjdG9yeS5nYW1lLmVmZmVjdE1hbmFnZXIuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycsIHRoaXMuc3ByaXRlLngsIHRoaXMuc3ByaXRlLnksIDQsIDQpO1xyXG4gICAgICAgIGJ1bGxldEVmZmVjdDJELmFuaW1hdGlvbi5zZXRBZHZhbmNlQW5pbWF0aW9uVGlsZUNvbmZpZygxMDI0LCAwLCAxOTAsIDE5MCk7XHJcbiAgICAgICAgYnVsbGV0RWZmZWN0MkQuYW5pbWF0aW9uLnNjYWxlWCA9IDAuMzU7XHJcbiAgICAgICAgYnVsbGV0RWZmZWN0MkQuYW5pbWF0aW9uLnNjYWxlWSA9IDAuMzU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5faXNXYWl0aW5nRm9yRGVsZXRlID0gdHJ1ZTtcclxuICAgICAgICBlbmVteS5vbkhpdCgxKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Nwcml0ZS5kZXN0cm95KCk7XHJcbiAgICB0aGlzLl9zcHJpdGUgPSBudWxsO1xyXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IEdCdWxsZXRGYWN0b3J5IH0gZnJvbSBcIi4vZ0J1bGxldEZhY3RvcnlcIjtcclxuaW1wb3J0IHsgR1BsYXllciB9IGZyb20gXCIuL2dQbGF5ZXJcIjtcclxuaW1wb3J0IHsgR0VuZW15RmFjdG9yeSB9IGZyb20gXCIuL2dFbmVteUZhY3RvcnlcIjtcclxuaW1wb3J0IHsgT0ZTcHJpdGVCYXRjaGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvY29yZS9yZW5kZXIvZ3JhcGhpY3MvZDJkL29wdGltaXphdGlvbi9vZlNwcml0ZUJhdGNoZXInO1xyXG5pbXBvcnQgeyBPRkVmZmVjdDJETWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL2hlbHBlcnMvcmVuZGVyL2VmZmVjdHMvb2ZFZmZlY3QyRE1hbmFnZXInO1xyXG5pbXBvcnQgeyBPRkVudW1LZXlDb2RlIH0gZnJvbSBcIi4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL2VudW1zL29mRW51bUtleUNvZGVcIjtcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gXCIuLi8uLi8uLi9tb2R1bGVzL2ZyYW1ld29yay9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmF2aXVzR2FtZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX3Nwcml0ZUJhdGNoOiBPRlNwcml0ZUJhdGNoZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfcGxheWVyOiBHUGxheWVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VuZW15RmFjdG9yeTogR0VuZW15RmFjdG9yeTtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9idWxsZXRGYWN0b3J5OiBHQnVsbGV0RmFjdG9yeTtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9lZmZlY3RNYW5hZ2VyOiBPRkVmZmVjdDJETWFuYWdlcjtcclxuXHJcbiAgZ2V0IHBsYXllcigpOiBHUGxheWVyIHsgcmV0dXJuIHRoaXMuX3BsYXllcjsgfVxyXG4gIGdldCBlbmVteUZhY3RvcnkoKTogR0VuZW15RmFjdG9yeSB7IHJldHVybiB0aGlzLl9lbmVteUZhY3Rvcnk7IH1cclxuICBnZXQgYnVsbGV0RmFjdG9yeSgpOiBHQnVsbGV0RmFjdG9yeSB7IHJldHVybiB0aGlzLl9idWxsZXRGYWN0b3J5OyB9XHJcbiAgZ2V0IGVmZmVjdE1hbmFnZXIoKTogT0ZFZmZlY3QyRE1hbmFnZXIgeyByZXR1cm4gdGhpcy5fZWZmZWN0TWFuYWdlcjsgfVxyXG4gIGdldCBzcHJpdGVCYXRjaCgpOiBPRlNwcml0ZUJhdGNoZXIgeyByZXR1cm4gdGhpcy5fc3ByaXRlQmF0Y2g7IH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaCA9IG5ldyBPRlNwcml0ZUJhdGNoZXIoJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycpO1xyXG5cclxuICAgIHRoaXMuX3BsYXllciA9IG5ldyBHUGxheWVyKHRoaXMpO1xyXG4gICAgdGhpcy5fZW5lbXlGYWN0b3J5ID0gbmV3IEdFbmVteUZhY3RvcnkodGhpcyk7XHJcbiAgICB0aGlzLl9idWxsZXRGYWN0b3J5ID0gbmV3IEdCdWxsZXRGYWN0b3J5KHRoaXMpO1xyXG4gICAgdGhpcy5fZWZmZWN0TWFuYWdlciA9IG5ldyBPRkVmZmVjdDJETWFuYWdlcigpO1xyXG5cclxuICAgIHRoaXMuX3BsYXllci5zcHJpdGUuc2V0U3ByaXRlQmF0Y2godGhpcy5fc3ByaXRlQmF0Y2gpO1xyXG4gICAgdGhpcy5fZWZmZWN0TWFuYWdlci5zZXRTcHJpdGVCYXRjaCh0aGlzLl9zcHJpdGVCYXRjaCk7XHJcbiAgICB0aGlzLl9lbmVteUZhY3Rvcnkuc2V0U3ByaXRlQmF0Y2godGhpcy5fc3ByaXRlQmF0Y2gpO1xyXG4gICAgdGhpcy5fYnVsbGV0RmFjdG9yeS5zZXRTcHJpdGVCYXRjaCh0aGlzLl9zcHJpdGVCYXRjaCk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZSAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX3BsYXllci5vbk1vdXNlTW92ZSh4LCB5KTtcclxuICB9XHJcblxyXG4gIG9uS2V5RG93biAoa2V5Q29kZTogT0ZFbnVtS2V5Q29kZSk6IHZvaWQge1xyXG4gICAgdGhpcy5fcGxheWVyLm9uS2V5RG93bihrZXlDb2RlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zcHJpdGVCYXRjaC5iZWdpbkRyYXcoKTtcclxuXHJcbiAgICB0aGlzLl9wbGF5ZXIudXBkYXRlKGFyZ3MpO1xyXG4gICAgdGhpcy5fZW5lbXlGYWN0b3J5LnVwZGF0ZShhcmdzKTtcclxuICAgIHRoaXMuX2J1bGxldEZhY3RvcnkudXBkYXRlKGFyZ3MpO1xyXG4gICAgdGhpcy5fZWZmZWN0TWFuYWdlci51cGRhdGUoYXJncyk7XHJcblxyXG4gICAgdGhpcy5fc3ByaXRlQmF0Y2guZW5kRHJhdygpO1xyXG4gICAgdGhpcy5fc3ByaXRlQmF0Y2gudXBkYXRlKGFyZ3MpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHcmF2aXVzR2FtZSB9IGZyb20gXCIuLi9ncmF2aXVzR2FtZVwiO1xyXG5pbXBvcnQgeyBPRkJpdG1hcEZvbnRMb2FkZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2R1bGVzL2Nyb3NzLWN1dHRpbmcvZm9udC1sb2FkZXIvb2ZCaXRtYXBGb250TG9hZGVyJztcclxuaW1wb3J0IHsgT0ZDQml0bWFwVGV4dGZpZWxkMkQgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2R1bGVzL2ZyYW1ld29yay9jb21wb25lbnRzL29mQ0JpdG1hcFRleHRmaWVsZDJEJztcclxuaW1wb3J0IHsgT0ZTY2VuZU1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvc2NlbmUvb2ZTY2VuZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgSU9GUmVuZGVyQXJncyB9IGZyb20gXCIuLi8uLi8uLi8uLi9tb2R1bGVzL2ZyYW1ld29yay9pbnRlcmZhY2VzL2lvZlJlbmRlckFyZ3NcIjtcclxuaW1wb3J0IHsgT0ZCYXNlU2NlbmUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvc2NlbmUvb2ZCYXNlU2NlbmVcIjtcclxuaW1wb3J0IHsgT0ZJbWFnZUNvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2R1bGVzL2ZyYW1ld29yay9jb3JlL2NvbnRlbnQvb2ZJbWFnZUNvbnRlbnQnO1xyXG5pbXBvcnQgeyBPRkJpdG1hcEZvbnRDaGFyc2V0IH0gZnJvbSAnLi4vLi4vLi4vLi4vbW9kdWxlcy9jcm9zcy1jdXR0aW5nL2ZvbnQtbG9hZGVyL2RhdGEvb2ZCaXRtYXBGb250Q2hhcnNldCc7XHJcbmltcG9ydCB7IE9GRGVmYXVsdFNoYWRlclNvdXJjZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbW9kdWxlcy9mcmFtZXdvcmsvZGVmYXVsdC1hc3NldHMvb2ZEZWZhdWx0U2hhZGVyU291cmNlc1wiO1xyXG5pbXBvcnQgeyBPRkNvbG9yIH0gZnJvbSBcIi4uLy4uLy4uLy4uL21vZHVsZXMvZnJhbWV3b3JrL2NvcmUvcmVuZGVyL2dyYXBoaWNzL29mQ29sb3JcIjtcclxuaW1wb3J0IHsgbWF0NCwgdmVjMyB9IGZyb20gJ2dsLW1hdHJpeCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU3BhY2VHYW1lU2NlbmUgZXh0ZW5kcyBPRkJhc2VTY2VuZSB7XHJcblxyXG4gIHByaXZhdGUgX2dyYXZpdXNHYW1lOiBHcmF2aXVzR2FtZTtcclxuICBwcml2YXRlIF90ZXh0ZmllbGQ6IE9GQ0JpdG1hcFRleHRmaWVsZDJEO1xyXG4gIHByaXZhdGUgX2ltYWdlQ29udGVudEZvbnQ6IE9GSW1hZ2VDb250ZW50O1xyXG4gIHByaXZhdGUgX2ZvbnRDaGFyc2V0OiBPRkJpdG1hcEZvbnRDaGFyc2V0O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKHNjZW5lTWFuYWdlcjogT0ZTY2VuZU1hbmFnZXIsIHBhcmFtcyk6IHZvaWQge1xyXG4gICAgc3VwZXIuaW5pdGlhbGl6ZShzY2VuZU1hbmFnZXIsIHBhcmFtcyk7XHJcblxyXG4gICAgLy8gTG9hZCByZXNvdXJjZXMgZm9yIHRoaXMgc2NlbmVcclxuICAgIHRoaXMuZnJhbWV3b3JrLmNvbnRlbnRNYW5hZ2VyLmxvYWRJbWFnZSgncmVzb3VyY2VzL3NwU3ByaXRlU2hlZXRHYW1lRWxlbWVudHMucG5nJyk7XHJcbiAgICB0aGlzLl9pbWFnZUNvbnRlbnRGb250ID0gdGhpcy5mcmFtZXdvcmsuY29udGVudE1hbmFnZXIubG9hZEltYWdlKCdyZXNvdXJjZXMvZm50LWFyaWFsXzAucG5nJyk7XHJcblxyXG4gICAgdGhpcy5mcmFtZXdvcmsubWFpbkdyYXBoaWNEZXZpY2Uuc2hhZGVyRmFjdG9yeS5sb2FkQW5kQWRkU2hhZGVyV2l0aENvZGVJbmZvKCdTcGluZVNoYWRlclRleHR1cmUnLCBcclxuICAgICAgT0ZEZWZhdWx0U2hhZGVyU291cmNlcy5Tb3VyY2VzU3BpbmVTaGFkZXJUZXh0dXJlLCBudWxsLCAnU3BpbmVTaGFkZXJUZXh0dXJlJyk7XHJcblxyXG4gICAgJCgnI2lucHV0Jykub24oJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJhd0ZpbGUgPSBlLnRhcmdldFsnZmlsZXMnXVswXTtcclxuXHJcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIHJlYWRlci5yZWFkQXNUZXh0KHJhd0ZpbGUpO1xyXG4gICAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSA9PiB0aGlzLl9mb250Q2hhcnNldCA9IE9GQml0bWFwRm9udExvYWRlci5wYXJzZShldmVudC50YXJnZXQucmVzdWx0IGFzIHN0cmluZyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9ncmF2aXVzR2FtZSA9IG5ldyBHcmF2aXVzR2FtZSgpO1xyXG4gIH1cclxuXHJcbiAgb25Nb3VzZU1vdmUoeDogbnVtYmVyLCB5Om51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2dyYXZpdXNHYW1lKSB7IHRoaXMuX2dyYXZpdXNHYW1lLm9uTW91c2VNb3ZlKHgsIHkpOyB9XHJcbiAgfVxyXG5cclxuICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9ncmF2aXVzR2FtZSkgeyB0aGlzLl9ncmF2aXVzR2FtZS5vbktleURvd24oZXZlbnQua2V5Q29kZSk7IH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShhcmdzOiBJT0ZSZW5kZXJBcmdzKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fZ3Jhdml1c0dhbWUpIHsgdGhpcy5fZ3Jhdml1c0dhbWUudXBkYXRlKGFyZ3MpOyB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2ZvbnRDaGFyc2V0ICYmIHRoaXMuX2ltYWdlQ29udGVudEZvbnQ/LmlzTG9hZGVkICYmICF0aGlzLl90ZXh0ZmllbGQpIHtcclxuICAgICAgdGhpcy5fdGV4dGZpZWxkID0gbmV3IE9GQ0JpdG1hcFRleHRmaWVsZDJEKCk7XHJcbiAgICAgIHRoaXMuX3RleHRmaWVsZC5pbml0aWFsaXplKCcnLCB0aGlzLl9mb250Q2hhcnNldCwgdGhpcy5faW1hZ2VDb250ZW50Rm9udCk7XHJcbiAgICAgIHRoaXMuX3RleHRmaWVsZC5jb2xvciA9IE9GQ29sb3Iud2hpdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmFuc2Zvcm1UZXh0ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgIG1hdDQuZnJvbVNjYWxpbmcodHJhbnNmb3JtVGV4dCwgdmVjMy5mcm9tVmFsdWVzKDAuMjUsIDAuMjUsIDAuMjUpKTtcclxuXHJcbiAgICBjb25zdCBmcHMgPSAxIC8gYXJncy5kdDtcclxuICAgIHRoaXMuX3RleHRmaWVsZD8uc2V0VGV4dChgRlBTOiAke2Zwcy50b1N0cmluZygpLnN1YnN0cmluZygwLCA1KX0sICMgb2YgUXVhZHM6ICR7dGhpcy5fZ3Jhdml1c0dhbWUuc3ByaXRlQmF0Y2gudG90YWxRdWFkc30sICMgb2YgRHJhdyBDYWxsczogJHt0aGlzLl9ncmF2aXVzR2FtZS5zcHJpdGVCYXRjaC50b3RhbERyYXdDYWxsc31gKTtcclxuICAgIHRoaXMuX3RleHRmaWVsZD8uc2V0TGV0dGVyQ29sb3IoMSwgT0ZDb2xvci5yZWQoKSk7XHJcbiAgICB0aGlzLl90ZXh0ZmllbGQ/LmRyYXcoYXJncywgdHJhbnNmb3JtVGV4dCk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgT0ZGcmFtZXdvcmssIE9GU3ByaXRlLCBPRlByaW1pdGl2ZVF1YWQsIE9GUHJpbWl0aXZlQ2lyY2xlLCBPRlByaW1pdGl2ZUdyaWQsIE9GQW5pbWF0aW9uLCBPRkZyYW1ld29ya0ZhY3RvcnksIE9GQ29sb3IgfSBmcm9tIFwiQGZyYW1ld29ya1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTcGVjVGVzdEZyYW1ld29yayB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZyYW1ld29yazogT0ZGcmFtZXdvcms7XHJcbiAgXHJcbiAgcHJpdmF0ZSBfc3ByaXRlOiBPRlNwcml0ZTtcclxuICBwcml2YXRlIF9xdWFkOiBPRlByaW1pdGl2ZVF1YWQ7XHJcbiAgcHJpdmF0ZSBfcXVhZDI6IE9GUHJpbWl0aXZlUXVhZDtcclxuICBwcml2YXRlIF9jaXJjbGU6IE9GUHJpbWl0aXZlQ2lyY2xlO1xyXG4gIHByaXZhdGUgX2dyaWQ6IE9GUHJpbWl0aXZlR3JpZDtcclxuICBwcml2YXRlIF9leHBsb3Npb25BbmltYXRpb246IE9GQW5pbWF0aW9uO1xyXG4gIHByaXZhdGUgX2V4cGxvc2lvbjJBbmltYXRpb246IE9GQW5pbWF0aW9uO1xyXG5cclxuICBwcml2YXRlIF9jb3VudFRpbWU6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9jb3VudFRpbWUgPSAwO1xyXG5cclxuICAgIHRoaXMuX2ZyYW1ld29yayA9IE9GRnJhbWV3b3JrRmFjdG9yeS5jcmVhdGUoKTtcclxuICAgIHRoaXMuX2ZyYW1ld29yay5zdGFydE9jdG9wdXNGcmFtZXdvcmsyRChcImNhbnZhcy1zY2VuZVwiKTtcclxuICAgIGNvbnN0IGltYWdlQ29udGVudCA9IHRoaXMuX2ZyYW1ld29yay5jb250ZW50TWFuYWdlci5sb2FkSW1hZ2UoJ3Jlc291cmNlcy9zcFNwcml0ZVNoZWV0R2FtZUVsZW1lbnRzLnBuZycpO1xyXG5cclxuICAgIHRoaXMuX3Nwcml0ZSA9IG5ldyBPRlNwcml0ZSgwLCAwKTtcclxuICAgIHRoaXMuX3Nwcml0ZS5pbWFnZUNvbnRlbnQgPSBpbWFnZUNvbnRlbnQ7XHJcbiAgICB0aGlzLl9zcHJpdGUuc2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWcoMTAyNCwgMjA1LCA3NSwgMTI4KTtcclxuXHJcbiAgICB0aGlzLl9leHBsb3Npb25BbmltYXRpb24gPSBuZXcgT0ZBbmltYXRpb24oMzIwLCAyMDAsIDQsIDQpO1xyXG4gICAgdGhpcy5fZXhwbG9zaW9uQW5pbWF0aW9uLmltYWdlQ29udGVudCA9IGltYWdlQ29udGVudDtcclxuICAgIHRoaXMuX2V4cGxvc2lvbkFuaW1hdGlvbi5zZXRBZHZhbmNlQW5pbWF0aW9uVGlsZUNvbmZpZygxMDI0LCAwLCAxOTAsIDE5MCk7XHJcbiAgICB0aGlzLl9leHBsb3Npb25BbmltYXRpb24uc2NhbGVYID0gMC41O1xyXG4gICAgdGhpcy5fZXhwbG9zaW9uQW5pbWF0aW9uLnNjYWxlWSA9IDAuNTtcclxuXHJcbiAgICB0aGlzLl9leHBsb3Npb24yQW5pbWF0aW9uID0gbmV3IE9GQW5pbWF0aW9uKDUwMCwgMjAwLCA4LCAzKTtcclxuICAgIHRoaXMuX2V4cGxvc2lvbjJBbmltYXRpb24uaW1hZ2VDb250ZW50ID0gaW1hZ2VDb250ZW50O1xyXG4gICAgdGhpcy5fZXhwbG9zaW9uMkFuaW1hdGlvbi5zZXRBZHZhbmNlQW5pbWF0aW9uVGlsZUNvbmZpZygwLCAwLCAxMDI0LCAzODQpO1xyXG5cclxuICAgIHRoaXMuX3F1YWQgPSBuZXcgT0ZQcmltaXRpdmVRdWFkKDMwMCwgMjAsIDQwLCA0MCwgT0ZDb2xvci5yZWQoKSk7XHJcbiAgICB0aGlzLl9xdWFkMiA9IG5ldyBPRlByaW1pdGl2ZVF1YWQoMzAwLCAyMDAsIDQwLCA0MCwgT0ZDb2xvci5ncmVlbigpKTtcclxuICAgIHRoaXMuX2NpcmNsZSA9IG5ldyBPRlByaW1pdGl2ZUNpcmNsZSgzMDAsIDIwMCwgMTYwLCBPRkNvbG9yLmJsdWUoKSk7XHJcblxyXG4gICAgdGhpcy5fcXVhZC5zZXRXaXJlZnJhbWVWaXNpYmlsaXR5KHRydWUpO1xyXG5cclxuICAgIHRoaXMuX2dyaWQgPSBuZXcgT0ZQcmltaXRpdmVHcmlkKDQwLCA0MCwgT0ZDb2xvci53aGl0ZSgpKTtcclxuICAgIHRoaXMuX2dyaWQuY2hhbmdlR3JpZCgxNCwgOCwgMzIsIDMyKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb3VudFRpbWUgKz0gZHQ7XHJcblxyXG4gICAgdGhpcy5fZnJhbWV3b3JrLnVwZGF0ZSh7IGR0IH0pO1xyXG5cclxuICAgIGNvbnN0IHZhbCA9IE1hdGguY29zKHRoaXMuX2NvdW50VGltZSk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2dyaWQpIHtcclxuICAgICAgdGhpcy5fZ3JpZC51cGRhdGUoeyBkdCB9IGFzIGFueSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX3Nwcml0ZSkge1xyXG4gICAgICB0aGlzLl9zcHJpdGUueCA9IHZhbCAqIDI1MDtcclxuICAgICAgdGhpcy5fc3ByaXRlLnkgPSB2YWwgKiAyNTA7XHJcbiAgICAgIHRoaXMuX3Nwcml0ZS5yb3RhdGlvbiArPSAwLjE7XHJcbiAgICAgIHRoaXMuX3Nwcml0ZS5hbHBoYSA9IE1hdGguYWJzKHZhbCk7XHJcbiAgICAgIHRoaXMuX3Nwcml0ZS51cGRhdGUoeyBkdCB9IGFzIGFueSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX3F1YWQpIHtcclxuICAgICAgdGhpcy5fcXVhZC5yb3RhdGlvbiArPSAxO1xyXG4gICAgICB0aGlzLl9xdWFkLnggPSAyMDAgKyB2YWwgKiAyMDA7XHJcbiAgICAgIHRoaXMuX3F1YWQudXBkYXRlKHsgZHQgfSBhcyBhbnkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9jaXJjbGUpIHtcclxuICAgICAgdGhpcy5fY2lyY2xlLnVwZGF0ZSh7IGR0IH0gYXMgYW55KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fcXVhZDIpIHtcclxuICAgICAgdGhpcy5fcXVhZDIuc2NhbGVYID0gdmFsO1xyXG4gICAgICB0aGlzLl9xdWFkMi5zY2FsZVkgPSB2YWw7XHJcbiAgICAgIHRoaXMuX3F1YWQyLnkgPSAyMDAgKyB2YWwgKiAxMDA7XHJcbiAgICAgIHRoaXMuX3F1YWQyLnVwZGF0ZSh7IGR0IH0gYXMgYW55KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fZXhwbG9zaW9uQW5pbWF0aW9uKSB7XHJcbiAgICAgIHRoaXMuX2V4cGxvc2lvbkFuaW1hdGlvbi51cGRhdGUoeyBkdCB9IGFzIGFueSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2V4cGxvc2lvbjJBbmltYXRpb24pIHtcclxuICAgICAgdGhpcy5fZXhwbG9zaW9uMkFuaW1hdGlvbi51cGRhdGUoeyBkdCB9IGFzIGFueSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IFxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IFNwZWNNYWluIH0gZnJvbSAnLi9zcmMvc2h1dGUtdGVjaG5vbG9naWVzL3NwZWNNYWluJztcclxuaW1wb3J0IHsgRW51bVNwZWN0VHlwZSB9IGZyb20gJy4vc3JjL3NodXRlLXRlY2hub2xvZ2llcy9zcGVjcy9lbnVtU3BlY1R5cGUnO1xyXG5pbXBvcnQgeyBPRlJlbmRlckxvb3AgfSBmcm9tICcuL3NyYy9zaHV0ZS10ZWNobm9sb2dpZXMvbW9kdWxlcy9jb21tb24vb2ZSZW5kZXJMb29wJztcclxuXHJcbihmdW5jdGlvbiBtYWluKCkge1xyXG4gIGNvbnN0IGluc3RhbmNlID0gbmV3IFNwZWNNYWluKEVudW1TcGVjdFR5cGUuU2ltcGxlRnJhbWV3b3JrKTtcclxuICBjb25zdCBmcmFtZVJhdGUgPSAzMDtcclxuXHJcbiAgT0ZSZW5kZXJMb29wLmNyZWF0ZSgoZGVsdGFUaW1lKSA9PiBpbnN0YW5jZS51cGRhdGUoZGVsdGFUaW1lKSwgZnJhbWVSYXRlKTtcclxufSkoKTtcclxuIl0sIm5hbWVzIjpbIkVQU0lMT04iLCJBUlJBWV9UWVBFIiwiRmxvYXQzMkFycmF5IiwiQXJyYXkiLCJSQU5ET00iLCJNYXRoIiwicmFuZG9tIiwic2V0TWF0cml4QXJyYXlUeXBlIiwidHlwZSIsImRlZ3JlZSIsIlBJIiwidG9SYWRpYW4iLCJhIiwiZXF1YWxzIiwiYiIsImFicyIsIm1heCIsImNyZWF0ZSIsIm91dCIsImNsb25lIiwiY29weSIsImlkZW50aXR5IiwiZnJvbVZhbHVlcyIsIm0wMCIsIm0wMSIsIm0xMCIsIm0xMSIsInNldCIsInRyYW5zcG9zZSIsImExIiwiaW52ZXJ0IiwiYTAiLCJhMiIsImEzIiwiZGV0IiwiYWRqb2ludCIsImRldGVybWluYW50IiwibXVsdGlwbHkiLCJiMCIsImIxIiwiYjIiLCJiMyIsInJvdGF0ZSIsInJhZCIsInMiLCJzaW4iLCJjIiwiY29zIiwic2NhbGUiLCJ2IiwidjAiLCJ2MSIsImZyb21Sb3RhdGlvbiIsImZyb21TY2FsaW5nIiwic3RyIiwiZnJvYiIsImh5cG90IiwiTERVIiwiTCIsIkQiLCJVIiwiYWRkIiwic3VidHJhY3QiLCJleGFjdEVxdWFscyIsIm11bHRpcGx5U2NhbGFyIiwibXVsdGlwbHlTY2FsYXJBbmRBZGQiLCJ5IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNxcnQiLCJtdWwiLCJzdWIiLCJkIiwidHgiLCJ0eSIsImFhIiwiYWIiLCJhYyIsImFkIiwiYXR4IiwiYXR5IiwiYTQiLCJhNSIsImI0IiwiYjUiLCJ0cmFuc2xhdGUiLCJmcm9tVHJhbnNsYXRpb24iLCJmcm9tTWF0NCIsIm0wMiIsIm0xMiIsIm0yMCIsIm0yMSIsIm0yMiIsImEwMSIsImEwMiIsImExMiIsImEwMCIsImExMCIsImExMSIsImEyMCIsImEyMSIsImEyMiIsImIwMSIsImIxMSIsImIyMSIsImIwMCIsImIwMiIsImIxMCIsImIxMiIsImIyMCIsImIyMiIsIngiLCJmcm9tTWF0MmQiLCJmcm9tUXVhdCIsInEiLCJ6IiwidyIsIngyIiwieTIiLCJ6MiIsInh4IiwieXgiLCJ5eSIsInp4IiwienkiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsIm5vcm1hbEZyb21NYXQ0IiwiYTAzIiwiYTEzIiwiYTIzIiwiYTMwIiwiYTMxIiwiYTMyIiwiYTMzIiwiYjAzIiwiYjA0IiwiYjA1IiwiYjA2IiwiYjA3IiwiYjA4IiwiYjA5IiwicHJvamVjdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwiYTYiLCJhNyIsImE4IiwiYjYiLCJiNyIsImI4IiwibTAzIiwibTEzIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwiYXhpcyIsInQiLCJsZW4iLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJmcm9tWFJvdGF0aW9uIiwiZnJvbVlSb3RhdGlvbiIsImZyb21aUm90YXRpb24iLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvbiIsInh5IiwieHoiLCJ5eiIsImZyb21RdWF0MiIsInRyYW5zbGF0aW9uIiwiYngiLCJieSIsImJ6IiwiYnciLCJheCIsImF5IiwiYXoiLCJhdyIsIm1hZ25pdHVkZSIsImdldFRyYW5zbGF0aW9uIiwibWF0IiwiZ2V0U2NhbGluZyIsImdldFJvdGF0aW9uIiwic2NhbGluZyIsImlzMSIsImlzMiIsImlzMyIsInNtMTEiLCJzbTEyIiwic20xMyIsInNtMjEiLCJzbTIyIiwic20yMyIsInNtMzEiLCJzbTMyIiwic20zMyIsInRyYWNlIiwiUyIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUiLCJzeCIsInN5Iiwic3oiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luIiwibyIsIm94Iiwib3kiLCJveiIsIm91dDAiLCJvdXQxIiwib3V0MiIsIm91dDQiLCJvdXQ1Iiwib3V0NiIsIm91dDgiLCJvdXQ5Iiwib3V0MTAiLCJmcnVzdHVtIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwidG9wIiwibmVhciIsImZhciIsInJsIiwidGIiLCJuZiIsInBlcnNwZWN0aXZlIiwiZm92eSIsImFzcGVjdCIsImYiLCJ0YW4iLCJJbmZpbml0eSIsInBlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3IiwiZm92IiwidXBUYW4iLCJ1cERlZ3JlZXMiLCJkb3duVGFuIiwiZG93bkRlZ3JlZXMiLCJsZWZ0VGFuIiwibGVmdERlZ3JlZXMiLCJyaWdodFRhbiIsInJpZ2h0RGVncmVlcyIsInhTY2FsZSIsInlTY2FsZSIsIm9ydGhvIiwibHIiLCJidCIsImxvb2tBdCIsImV5ZSIsImNlbnRlciIsInVwIiwieDAiLCJ4MSIsInkwIiwieTEiLCJ6MCIsInoxIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiY2VudGVyeCIsImNlbnRlcnkiLCJjZW50ZXJ6IiwidGFyZ2V0VG8iLCJ0YXJnZXQiLCJhOSIsImExNCIsImExNSIsImI5IiwiYjEzIiwiYjE0IiwiYjE1IiwiZGl2aWRlIiwiY2VpbCIsImZsb29yIiwibWluIiwicm91bmQiLCJzY2FsZUFuZEFkZCIsImRpc3RhbmNlIiwic3F1YXJlZERpc3RhbmNlIiwic3F1YXJlZExlbmd0aCIsIm5lZ2F0ZSIsImludmVyc2UiLCJub3JtYWxpemUiLCJjcm9zcyIsImxlcnAiLCJoZXJtaXRlIiwiZmFjdG9yVGltZXMyIiwiZmFjdG9yMSIsImZhY3RvcjIiLCJmYWN0b3IzIiwiZmFjdG9yNCIsImJlemllciIsImludmVyc2VGYWN0b3IiLCJpbnZlcnNlRmFjdG9yVGltZXNUd28iLCJyIiwielNjYWxlIiwidHJhbnNmb3JtTWF0NCIsIm0iLCJ0cmFuc2Zvcm1NYXQzIiwidHJhbnNmb3JtUXVhdCIsInF4IiwicXkiLCJxeiIsInF3IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJwIiwiYW5nbGUiLCJtYWciLCJjb3NpbmUiLCJhY29zIiwiemVybyIsInZlYyIsImRpdiIsImRpc3QiLCJzcXJEaXN0Iiwic3FyTGVuIiwiZm9yRWFjaCIsInN0cmlkZSIsIm9mZnNldCIsImNvdW50IiwiZm4iLCJhcmciLCJsIiwiZG90IiwidSIsIkEiLCJCIiwiQyIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsInYyIiwidjMiLCJ2NCIsInMxIiwiczIiLCJpeCIsIml5IiwiaXoiLCJpdyIsInNldEF4aXNBbmdsZSIsImdldEF4aXNBbmdsZSIsIm91dF9heGlzIiwiZ2V0QW5nbGUiLCJkb3Rwcm9kdWN0IiwiY2FsY3VsYXRlVyIsImV4cCIsImV0IiwibG4iLCJhdGFuMiIsImxvZyIsInBvdyIsInNsZXJwIiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwidTEiLCJ1MiIsInUzIiwic3FydDFNaW51c1UxIiwic3FydFUxIiwiaW52RG90IiwiY29uanVnYXRlIiwiZnJvbU1hdDMiLCJmUm9vdCIsImZUcmFjZSIsImoiLCJrIiwiZnJvbUV1bGVyIiwiaGFsZlRvUmFkIiwiY3giLCJjeSIsImN6IiwidG1wdmVjMyIsInhVbml0VmVjMyIsInlVbml0VmVjMyIsInRlbXAxIiwidGVtcDIiLCJtYXRyIiwicm90YXRpb25UbyIsInNxbGVycCIsInNldEF4ZXMiLCJ2aWV3IiwiZHEiLCJ3MSIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uVmFsdWVzIiwib3V0ZXIiLCJnZXRSZWFsIiwiZ2V0RHVhbCIsInNldFJlYWwiLCJzZXREdWFsIiwiYXgxIiwiYXkxIiwiYXoxIiwiYXcxIiwiYngxIiwiYnkxIiwiYnoxIiwiYXgyIiwiYXkyIiwiYXoyIiwiYXcyIiwicm90YXRlQnlRdWF0QXBwZW5kIiwicm90YXRlQnlRdWF0UHJlcGVuZCIsInJvdGF0ZUFyb3VuZEF4aXMiLCJheGlzTGVuZ3RoIiwiYXgwIiwiYXkwIiwiYXowIiwiYXcwIiwiYncxIiwiYngwIiwiYnkwIiwiYnowIiwiYncwIiwibXQiLCJzcWxlbiIsImFfZG90X2IiLCJ0cmFuc2Zvcm1NYXQyIiwidHJhbnNmb3JtTWF0MmQiLCJwMCIsInAxIiwic2luQyIsImNvc0MiLCJfX2NyZWF0ZUJpbmRpbmciLCJ0aGlzIiwiT2JqZWN0IiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwiQmFzZTY0QmluYXJ5Iiwic3RhdGljIiwiaW5wdXQiLCJieXRlcyIsIkFycmF5QnVmZmVyIiwiZGVjb2RlIiwiX2tleVN0ciIsImluZGV4T2YiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJhcnJheUJ1ZmZlciIsInJlbW92ZVBhZGRpbmdDaGFycyIsInBhcnNlSW50IiwidG9TdHJpbmciLCJ1YXJyYXkiLCJjaHIxIiwiY2hyMiIsImNocjMiLCJlbmMxIiwiZW5jMiIsImVuYzMiLCJlbmM0IiwiVWludDhBcnJheSIsInJlcGxhY2UiLCJTVEVudW1IVFRQRXJyb3JDb2RlIiwiU1RIZWxwZXJzIiwic3RVdGlsc18xIiwidGltZSIsImZ1bmN0aW9uQ2FsbGJhY2siLCJhcmdzIiwic2V0VGltZW91dCIsImlucHV0QXJncyIsIm51bURpZ2l0cyIsImZyb20iLCJ3YXNEYXRlIiwiRGF0ZSIsImNsb25lZCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImNsb25lSXRlcmF0ZSIsIm9iakl0ZXJhdGUiLCJlbnRyaWVzIiwiZW50cnkiLCJrZXkiLCJTVFV0aWxzIiwiaXNTdHJpbmdBY3R1YWxseURhdGVSZXByZXNlbnRhdGlvbiIsInZhbCIsImhhc0NvbW1hIiwidHJpbSIsImxhc3RJbmRleE9mIiwicGF0aCIsImluZGV4IiwiaXNOdWxsT3JFbXB0eSIsInJlbW92ZUVtcHR5UGFyYW1ldGVyIiwiaXNQYXJhbWV0ZXJQcm9wZXJ0eSIsInBhcmFtUHJvcERldGFpbHMiLCJnZXRQYXJhbWV0ZXJQcm9wZXJ0eURldGFpbHMiLCJyZW1vdmVQYXJhbWV0ZXJQcm9wT2ZQYXRoIiwicGFyYW1ldGVyVmFsdWVJbmRleCIsIm5ld0luZGV4IiwiY2FuU3RpbGxJdGVyYXRlIiwiaXNGaXJzdFBhcmFtZXRlciIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJoYXNOZXh0UGFyYW1ldGVyIiwicHBEZXRhaWxzIiwiYmFzZVN0cmluZyIsImFzY2lpQ2hhcnMiLCJjaGFyIiwic3RFbnVtSHR0cEVycm9yQ29kZV8xIiwiYmFzZTY0X2JpbmFyeV8xIiwiU3RyaW5nIiwib2JqIiwia2V5cyIsInBhcmFtIiwidHJ1ZUNvbmRpdGlvbiIsImZhbHNlQ29uZGl0aW9uIiwic291cmNlU3RyaW5nIiwic2VhcmNoIiwicmVwbGFjZW1lbnQiLCJzcGxpdCIsImpvaW4iLCJzdHJpbmdEYXRlIiwiX3JlZ0V4RGF0ZSIsInRlc3QiLCJjbGFzc05hbWUiLCJwYXJhbXMiLCJGdW5jdGlvbiIsImx1dCIsImQwIiwiZDEiLCJkMiIsImQzIiwib2JqZWN0IiwiYXJyYXlUYXJnZXQiLCJhcnJheU5ldyIsInNwbGljZSIsInRleHQiLCJyZXN1bHQiLCJmdWxsUGF0aCIsInN1YnN0ciIsImZpbGVUeXBlIiwib3B0aW9uYWxGaWxlTmFtZSIsImdldEV4dGVuc2lvbkZyb21GaWxlTmFtZSIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlclN1Y2Nlc3MiLCJyZXNvbHZlclJlamVjdCIsIiQiLCJodG1sIiwiY29udGVudCIsImZhaWwiLCJ2YWxpZGF0ZUFuZEV4ZWN1dGVIdG1sIiwic2NyaXB0QXR0YWNoZWQiLCJtYXRjaCIsImV2YWwiLCJlIiwiU3ludGF4RXJyb3IiLCJzdGF0aWNEZWJ1Z0NvbnNvbGUiLCJlcnJvciIsImNzc1BhdGgiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaHJlZiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJvYmoxIiwib2JqMiIsInJlc3VsdE9iaiIsImF0dHJOYW1lIiwianF1ZXJ5RWxlbWVudCIsInBhcmVudElkIiwib25DYWxsYmFjayIsImV2ZW50TmFtZVNwYWNlIiwiZXZlbnRUeXBlIiwib24iLCJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJwYXJlbnRzIiwicGFyZW50QXJyYXlJZHMiLCJjb21wYXJlV2l0aE11bHRpcGxlIiwiYXR0ciIsImVsZW1lbnQiLCJhcnJheVZhbHVlcyIsInNvbWUiLCJmaWxlTmFtZSIsImZpbGVFeHRlbnNpb24iLCJpbmRleEV4dGVuc2lvbiIsImZpbGVOYW1lTm9FeHQiLCJjbGFzc1N0cmluZyIsInJlc3VsdEV4aXN0cyIsIml0ZW0iLCJuYW1lIiwieGhyIiwid2luZG93IiwiQWN0aXZlWE9iamVjdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJzZW5kIiwic3RhdHVzIiwiT2siLCJNdWx0aXBsZUNob2ljZXMiLCJOb3RNb2RpZmllZCIsIk5vdEZvdW5kIiwic3RyRGF0YSIsInN0ckZpbGVOYW1lIiwic3RyTWltZVR5cGUiLCJuYXZpZ2F0b3IiLCJCbG9iIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiYm9keSIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJzcmMiLCJ1aW50OEFycmF5IiwiYmluYXJ5IiwiYnl0ZUxlbmd0aCIsImZyb21DaGFyQ29kZSIsImJ0b2EiLCJidWZmZXIiLCJiYXNlNjRTdHJpbmciLCJkZWNvZGVBcnJheUJ1ZmZlciIsInBocmFzZSIsIndvcmQiLCJjSW5kZXgiLCJpdGVyYXRlIiwid29yZExlbmd0aCIsIndvcmRJbmRleCIsInB1c2giLCJleGNsdWRlQ2hhcnMiLCJzdGFydEluZGV4IiwicmVzdWx0Q2hhciIsIm5ld0NoYXIiLCJwcmV2aW91c0NoYXIiLCJuZXh0Q2hhciIsImNoYXJTdGFydCIsImNoYXJFbmQiLCJyZXN1bHRJbmRleCIsImNvdW50Q2hhcnMiLCJjb3VudENoYXJTdGFydCIsImNvdW50Q2hhckVuZCIsIm51bSIsImJpbmFyeVN0cmluZyIsImRlZmF1bHRWYWx1ZSIsImV4aXN0c1Byb3BlcnR5QW5kVmFsdWUiLCJmdW5jdGlvbk5hbWUiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiZW50aXR5TWFwIiwiUmVnRXhwIiwiT0ZSZW5kZXJMb29wIiwiZnVuY3Rpb25Mb29wIiwiZnJhbWVyYXRlIiwiX2ZyYW1lcmF0ZSIsIl9mdW5jdGlvbkxvb3AiLCJfbGFzdFRpbWUiLCJnZXRUaW1lIiwiX2dhbWVMb29wSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImludGVybmFsTG9vcCIsImN1cnJlbnRUaW1lIiwiZGVsdGFUaW1lIiwiaWQiLCJ0ZXh0dXJlVSIsInRleHR1cmVWIiwieE9mZnNldCIsInlPZmZzZXQiLCJ4QWR2YW5jZSIsInBhZ2UiLCJjaG5sIiwiT0ZCaXRtYXBGb250Q2hhcnNldCIsImZvbnROYW1lIiwic2l6ZSIsImJvbGQiLCJpdGFsaWMiLCJjaGFyc2V0IiwidW5pY29kZSIsInN0cmV0Y2hIIiwic21vb3RoIiwicGFkZGluZyIsInNwYWNpbmciLCJvdXRsaW5lIiwibGluZUhlaWdodCIsImJhc2UiLCJzY2FsZVdpZHRoIiwic2NhbGVIZWlnaHQiLCJwYWdlcyIsInBhY2tlZCIsImFscGhhQ2hubCIsInJlZENobmwiLCJncmVlbkNobmwiLCJibHVlQ2hubCIsImZvbnRQYWdlcyIsImtlcm5pbmdzIiwiZ2V0Q2hhckRlc2NyaXB0b3IiLCJjaGFyVW5pY29kZSIsImNoYXJzIiwiZXhpc3RzQ2hhciIsImNoYXJBcnJheVNpemUiLCJnZXRLZXJuaW5nIiwidW5pY29kZUZpcnN0IiwidW5pY29kZVNlY29uZCIsImFtb3VudCIsImtlcm5pbmdDb3VudCIsIl9rZXJuaW5nIiwiZmlyc3QiLCJzZWNvbmQiLCJtZWFzdXJlU3RyaW5nIiwidGV4dFNpemUiLCJPRlZlY3RvcjIiLCJwaHJhc2VMZW5ndGgiLCJvbGRJbmRleEFmdGVySnVtcExpbmUiLCJvbGRXaWR0aEFmdGVySnVtcExpbmUiLCJjaGFyQ29kZUF0IiwiT0ZFbnVtS2V5Q29kZSIsIkp1bXBMaW5lIiwibmV3VGV4dCIsIm5ld1RleHRMZW5ndGgiLCJtZWFzdXJlU3RyaW5nTGluZWFsIiwiY2hhckRlc2NyaXB0b3IiLCJvbGRVbmljb2RlQ2hhciIsImtlcm5pbmdBbW91bnQiLCJ1bmljb2RlQ2hhckZpcnN0IiwiQ0hBUl9ERVNDUklQVE9SX1NJWkUiLCJjaGFyQ291bnQiLCJpc0luaXRpYWxpemVkIiwiT0ZFbnVtQml0bWFwRm9udExpbmVUeXBlcyIsIk9GQml0bWFwRm9udExvYWRlciIsImRhdGEiLCJCaXRtYXBGb250UGFnZVRlbXAiLCJCaXRtYXBGb250UGFnZUluZGV4VGVtcCIsIkJpdG1hcEZvbnRDaGFySW5kZXhUZW1wIiwiQml0bWFwRm9udEtlcm5pbmdJbmRleFRlbXAiLCJGb250Q2hhcnNldCIsImZvbnRSYXdUZXh0TGluZXMiLCJmaW5pc2giLCJ0bXBTdHJpbmciLCJyZWFkZWRMaW5lIiwiT0ZCaXRtYXBGb250UGFnZSIsImZpbmRlZFF1b3RhdGlvbiIsImZpcnN0UmVhZCIsImZpbmlzaEludGVybmFsIiwibGluZUxlbmd0aCIsImxpbmVQb3NpdGlvbiIsImxpbmVUeXBlIiwiREVGQVVMVF9OT05FIiwicmVhZGluZ0FuZFNldHRpbmdWYWx1ZXMiLCJsZXR0ZXIiLCJpc3MiLCJTUEFDRSIsIlFVT1RBVElPTl9NQVJLIiwiZ2V0TGluZVR5cGUiLCJwcm9wZXJ0eVR5cGUiLCJwcm9wZXJ0eVZhbHVlIiwiY2hhclBvcyIsIkVRVUFMU19TSUdOIiwiTk9USElORyIsIkJBQ0tTTEFTSCIsImNoYXJEZXNjVGVtcCIsIklORk8iLCJlcmFzZUNoYXJzSW5TdHJpbmciLCJBU0NJSUZpbHRlciIsInByb3BQYWRkaW5ncyIsIkNPTU1BIiwiQ09NTU9OIiwiUEFHRSIsIk5CRlBhZ2UiLCJDSEFSUyIsIk9GQml0bWFwRm9udENoYXJEZXNjcmlwdG9yIiwiQ0hBUiIsIk9GQ29uc29sZSIsIndhcm4iLCJLRVJOSU5HUyIsIk9GQml0bWFwRm9udEtlcm5pbmciLCJLRVJOSU5HIiwiaW5jcmVtZW50S2VybmluZ1JlYWRlciIsImtlcm5pbmdUZW1wIiwidmFsdWVUeXBlIiwiRE9UIiwiV0hJVEVfU1BBQ0UiLCJTTEFTSCIsIlF1b3RhdGlvbk1hcmsiLCJTcGFjZSIsIk5vdGhpbmciLCJCYWNrc2xhc2giLCJPRkVudW1TaGFkZXJEYXRhVHlwZXMiLCJPRkVudW1TaGFkZXJMaXRlcmFscyIsIk9GU2hhZGVyQW5hbGl6ZXIiLCJzaGFkZXJTb3VyY2UiLCJvdXRwdXRPYmplY3QiLCJhdHRyaWJ1dGVDb3VudCIsInVuaWZvcm1Db3VudCIsImF0dHJpYnV0ZXMiLCJ1bmlmb3JtcyIsImRpY3REVEluZGV4QWNjdW0iLCJpbnB1dERhdGFJbmZvIiwiZ2V0SW5wdXREYXRhSW5mbyIsIm91dHB1dCIsImdldE5leHRJbnB1dERhdGEiLCJpbnB1dEluZGV4IiwiaW5kZXhMaW1pdCIsImlucHV0TmFtZSIsImlucHV0VHlwZSIsImVudW1BdHRyaWJ1dGUiLCJlbnVtVW5pZm9ybSIsImlucHV0VmFyaWFibGVUeXBlIiwiaW5wdXREZWNsYXJhdGl2ZVZhcmlhYmxlSW5kZXgiLCJyZXN1bHRJbmZvIiwiaW5wdXROYW1lTGVuZ3RoIiwiaW5wdXRJbmRleF9hdHRyaWJ1dGUiLCJpbnB1dEluZGV4X3VuaWZvcm0iLCJpbnB1dERhdGFUeXBlIiwiYXR0cmlidXRlU3RyaW5nTGVuZ2h0IiwidW5pZm9ybVN0cmluZ0xlbmdodCIsImlucHV0U3RyaW5nTGVuZ3RoIiwib3V0X2lucHV0VmFyaWFibGVUeXBlIiwib3V0X2lucHV0TmFtZSIsIm91dF9pbnB1dERlY2xhcmF0aXZlVmFyaWFibGVUeXBlTmFtZSIsIm91dF9pbnB1dFByZWNpc2lvbiIsIm91dF9sYXN0SW5kZXgiLCJpbmRleEluaXRUb1R5cGUiLCJpbmRleEVuZFRvVHlwZSIsImluZGV4SW5pdFRvTmFtZSIsImluZGV4RW5kVG9OYW1lIiwiaW5kZXhJbml0RFZUIiwiaW5kZXhFbmREVlQiLCJpbmRleFByZWNpc2lvbiIsImlucHV0UHJlY2lzaW9uIiwiY2hhbmdlVmFyaWFibGVUeXBlVG9FbnVtIiwib3V0cHV0UmVzdWx0IiwiZGVjbGFyYXRpdmVTdGFydCIsImRlY2xhcmF0aXZlRW5kIiwiY29kZUxpbmUiLCJuZXdDb2RlTGluZSIsInBhcnQxIiwicGFydDIiLCJ2YXJpYWJsZVR5cGUiLCJkZWNsYXJhdGl2ZVR5cGUiLCJVbmtvd24iLCJ0b1VwcGVyQ2FzZSIsIkRUX1RleHR1cmUiLCJJVGV4dHVyZSIsIkRUX0NvbG9yIiwiSUNvbG9yIiwiRFRfQ2FtZXJhIiwiSUNhbWVyYSIsIklOX01hdHJpeDIiLCJNYXRyaXgyIiwiSU5fTWF0cml4MyIsIk1hdHJpeDMiLCJJTl9NYXRyaXg0IiwiTWF0cml4NCIsIklOX1ZlY3RvcjIiLCJWZWN0b3IyIiwiSU5fVmVjdG9yMyIsIlZlY3RvcjMiLCJJTl9WZWN0b3I0IiwiVmVjdG9yNCIsIklOX0ludFZlY3RvcjIiLCJJbnRWZWN0b3IyIiwiSU5fSW50VmVjdG9yMyIsIkludFZlY3RvcjMiLCJJTl9JbnRWZWN0b3I0IiwiSW50VmVjdG9yNCIsIklOX0Jvb2xlYW5WZWN0b3IyIiwiQm9vbGVhblZlY3RvcjIiLCJJTl9Cb29sZWFuVmVjdG9yMyIsIkJvb2xlYW5WZWN0b3IzIiwiSU5fQm9vbGVhblZlY3RvcjQiLCJCb29sZWFuVmVjdG9yNCIsIklOX1NhbXBsZXIyRCIsIlNhbXBsZXIyRCIsIklOX1NhbXBsZXJDdWJlIiwiU2FtcGxlckN1YmUiLCJJTl9GbG9hdCIsIkZsb2F0IiwiSU5fSW50IiwiSW50IiwiSU5fQm9vbCIsIkJvb2wiLCJfZGVsdGFUaW1lQnVmZmVySW5kZXgiLCJfZGVsdGFUaW1lQnVmZmVyQ291bnQiLCJfZGVsdGFUaW1lQnVmZmVyIiwicmVjb21wdXRlRGVsdGFUaW1lIiwiZHQiLCJuZXdEZWx0YVRpbWUiLCJkdEJ1ZmZlciIsIl90ZXh0IiwiX3RleHRTaXplIiwiY29sb3IiLCJfY29sb3IiLCJfdW5pZm9ybURhdGEiLCJ0cmFja2luZ1F1YW50aXR5IiwiX3RyYWNraW5nUXVhbnRpdHkiLCJzZXRUZXh0IiwiX2dyYXBoaWNEZXZpY2UiLCJPRkZyYW1ld29ya0ZhY3RvcnkiLCJjdXJyZW50RnJhbWV3b2siLCJtYWluR3JhcGhpY0RldmljZSIsIl9HTCIsImdyYXBoaWNDb250ZXh0IiwiT0ZDb2xvciIsIndoaXRlIiwiX2N1c3RvbVF1YWRzIiwiX3dpZHRoIiwiX2hlaWdodCIsIl90ZXh0dXJlV2lkdGgiLCJfdGV4dHVyZUhlaWdodCIsIl9zY2FsZVdhc01vZGlmaWVkIiwiX2RyYXdFbmFibGUiLCJfb2xkTnVtUXVhZHMiLCJfaW5kaWNlc0NvdW50IiwiX3RleHRRdWFkQ291bnRlciIsIl90ZXh0UG9zaXRpb25SZW5kZXJYIiwiX3RleHRQb3NpdGlvblJlbmRlclkiLCJfdGV4dEludGVybmFsT2Zmc2V0IiwiX3RleHRBbGlnbiIsIk9GRW51bVRleHRBbGlnbiIsIkxlZnQiLCJfcmVuZGVyVHlwZSIsIlRSSUFOR0xFX1NUUklQIiwiaW5pdGlhbGl6ZSIsImZvbnRDaGFyc2V0IiwiaW1hZ2VDb250ZW50IiwiX2ZvbnRDaGFyc2V0IiwiX2ltYWdlQ29udGVudCIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsIl9wb2x5Z29uQmF0Y2hlciIsIk9GUG9seWdvbkJhdGNoZXIiLCJjaGFuZ2VTaGFkZXIiLCJwcmVWYWxpZGF0aW9uVGV4dCIsIm92ZXJyaWRlVGV4dFZhbGlkYXRpb24iLCJjdXJyZW50Q2hhckNvdW50IiwianVtcExpbmVGb3VuZCIsImFkZFRleHRRdWFkIiwic2l6ZVRleHQiLCJhbGlnblRleHQiLCJ0cmFuc2Zvcm1Ub1JlbmRlciIsImFsaWduIiwidGV4dFNpemVUZW1wWCIsIlJpZ2h0IiwiQ2VudGVyIiwiY2hhckRlc2MiLCJjYW5KdW1wTGluZSIsInRpbGVYIiwidGlsZVkiLCJ0aWxlV2lkdGgiLCJ0aWxlSGVpZ2h0IiwicXVhZERhdGEiLCJPRlF1YWRTdHJ1Y3QiLCJjcmVhdGVBc1ZlcnRleFBvc2l0aW9uQ29sb3JUZXh0dXJlIiwiY3JlYXRlZCIsInB4IiwicHkiLCJWUFRUb3BMZWZ0IiwiVlBUVG9wUmlnaHQiLCJWUFRCb3R0b21MZWZ0IiwiVlBUQm90dG9tUmlnaHQiLCJkZWZhdWx0Q29sb3IiLCJwcmVDYWxjdWxhdGVJbmRpY2VzIiwibnVtUXVhZHMiLCJpbmRpY2VzQ291bnQiLCJfaW5kaWNlcyIsIm51bVRpbGVzVG9EcmF3IiwidGVtcERTVFEiLCJ0ZXh0TGVuZ2h0IiwiX3ZlcnRpY2VzIiwiZyIsImJlZ2luRHJhdyIsInB1c2hQb2x5Z29uIiwiZW5kRHJhdyIsInNldExldHRlckNvbG9yIiwiY2hhckluZGV4IiwiaW5kZXhBcnJheSIsImRyYXciLCJ0cmFuc2Zvcm1hdGlvbk1hdHJpeCIsImRlc3Ryb3kiLCJfcGF0aCIsImlzTG9hZGVkIiwiX2lzTG9hZGVkIiwiZnJhbWV3b3JrIiwiX2ZyYW1ld29yayIsIl9ncmFwaGljQ29udGV4dCIsImNvbnRlbnRNYW5hZ2VyIiwiY2hhbmdlUHJvcGVydGllcyIsImxvYWQiLCJ1bmxvYWQiLCJfY29udGVudFJlcG9zaXRvcnkiLCJsb2FkRGVmYXVsdCIsImNoYW5nZVByb3BlcnRpZXNJbkNvbnRlbnQiLCJvdGhlclBhcmFtcyIsImdldENvbnRlbnQiLCJPRlRyYW5zbGF0aW9ucyIsIkZyYW1ld29yayIsIkNvbnRlbnRNYW5hZ2VtZW50IiwiY2hhbmdlUHJvcGVydGllc0luQ29udGVudE5vdEZvdW5kIiwiZnJhbWV3b3JrSWRlbnRpZmllciIsInJlc3VsdE9iamVjdCIsImNvbnRlbnRDb3VudCIsImxvYWRNYXRlcmlhbEZyb21KU09OIiwianNvbiIsIm1hdGVyaWFsQ29udGVudCIsIk9GTWF0ZXJpYWxDb250ZW50IiwibG9hZEZyb21KU09OIiwibG9hZE1hdGVyaWFsIiwibG9hZEltYWdlIiwiT0ZJbWFnZUNvbnRlbnQiLCJhc3luY0xvYWRTb3VuZEZyb21BcnJheUJ1ZmZlciIsInNvdW5kQ29udGVudCIsIk9GU291bmRDb250ZW50IiwibG9hZEZyb21BcnJheUJ1ZmZlciIsImxvYWRTb3VuZEZyb21BcnJheUFCdWZmZXIiLCJsb2FkSW1hZ2VGcm9tSFRNTEltYWdlIiwiaW1hZ2UiLCJsb2FkRnJvbUltYWdlSFRNTCIsInVubG9hZEltYWdlIiwibm90SW1wbGVtZW50ZWRFeGNlcHRpb24iLCJPRkJhc2VDb250ZW50IiwiaW1hZ2VIVE1MIiwiX2ltYWdlIiwiaW1hZ2VUZXh0dXJlIiwiX2ltYWdlVGV4dHVyZSIsInN1cGVyIiwiSW1hZ2UiLCJjcmVhdGVUZXh0dXJlIiwib25sb2FkIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIkxJTkVBUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwid3JhcFMiLCJ3cmFwVCIsImdlbmVyYXRlTWlwTWFwcyIsIkxJTkVBUl9NSVBNQVBfTkVBUkVTVCIsImdlbmVyYXRlTWlwbWFwIiwiX3VuaWZvcm1zIiwianNvbk9iaiIsIl9tYXRlcmlhbE5hbWUiLCJtYXRlcmlhbE5hbWUiLCJfbWF0ZXJpYWxUZWNoVmVyc2lvbiIsIm1hdGVyaWFsVGVjaFZlcnNpb24iLCJfc2hhZGVyTmFtZSIsInNoYWRlck5hbWUiLCJwcm9wIiwicHVibGljUHJvcGVydGllcyIsInVuaWZvbU5hbWUiLCJzaGFkZXJVbmlmb3JtIiwidW5pZm9tVHlwZSIsImRhdGFUeXBlIiwiTWF0ZXJpYWxDb250ZW50IiwiYXVkaW9CdWZmZXIiLCJfYXVkaW9CdWZmZXIiLCJhdWRpb0J1ZmZlcl9FcnJvciIsIl9hdWRpb0J1ZmZlckVycm9yIiwiYXVkaW9BcnJheUJ1ZmZlciIsIl9wYXJhbXMiLCJhdWRpb0RldmljZSIsImF1ZGlvQ29udGV4dCIsImRlY29kZUF1ZGlvRGF0YSIsImludGVybmFsX09uRGVjb2RlQXVkaW9EYXRhIiwiaW50ZXJuYWxfT25FcnJvckRlY29kZUF1ZGlvRGF0YSIsInNldEludGVybmFsX1NvdW5kQ29udGVudCIsIlNvdW5kQ29udGVudCIsIm1lc3NhZ2UiLCJpbml0aWFsVGltZSIsIl9pbml0aWFsVGltZSIsIm1hc3RlclZvbHVtZSIsIl9tYXN0ZXJWb2x1bWUiLCJpc0F1ZGlvU3VwcG9ydGVkIiwiX2lzQXVkaW9TdXBwb3J0ZWQiLCJfYXVkaW9Db250ZXh0IiwiYXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIiwiX2F1ZGlvRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciIsIkF1ZGlvQ29udGV4dCIsIk9GQXVkaW9EZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIiwiX2F1ZGlvTm9kZVBvb2xlciIsImF1ZGlvTm9kZVBvb2xlciIsIkF1ZGlvRGV2aWNlIiwibm90U3VwcG9ydGVkIiwicmVxdWVzdEdhaW5Ob2RlIiwiYXVkaW9Ob2RlT2JqIiwiZ2V0QXZhaWxhYmxlQXVkaW9Ob2RlIiwiT0ZFbnVtQXVkaW9Ob2RlVHlwZSIsIkdhaW5Ob2RlIiwiYnVmZmVyVHlwZSIsIlVuc2lnbmVkIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwic2V0V2ViQXVkaW9Ob2RlIiwicmVxdWVzdFN0ZXJlb1Bhbm5lck5vZGUiLCJTdGVyZW9QYW5uZXJOb2RlIiwiY3JlYXRlU3RlcmVvUGFubmVyIiwic3RlcmVvUGFubmVyTm9kZSIsInJlbGVhc2VOb2RlIiwibm9kZSIsIndlYkF1ZGlvTm9kZSIsImRpc2Nvbm5lY3QiLCJkZWFjdGl2YXRlIiwidXBkYXRlIiwic291cmNlIiwiYXJnQ291bnQiLCJjb25uZWN0IiwiYWN0aXZhdGUiLCJnYWluIiwiZGVzdGluYXRpb24iLCJPRkRldmljZUNhcGFiaWxpdGllcyIsInJlbmRlckVuZ2luZVR5cGUiLCJfcmVuZGVyRW5naW5lVHlwZSIsImdyYXBoaUNvbnRleHQiLCJfZ3JhcGhpQ29udGV4dCIsImZvcmNlQ2FudmFzIiwiY2FudmFzRWxlbWVudCIsImNhbnZhc0NvbnRleHRNYW5hZ2VyIiwiY29uc3RydWNXZWJHTENhbnZhcyIsIk9GRW51bVJlbmRlckVuZ2luZVR5cGUiLCJXZWJHTCIsImNvbnN0cnVjdENhbnZhcyIsIkNhbnZhc0NvbnRleHQyRCIsImN1cnJlbnRTaGFkZXJQcm9ncmFtIiwiX2N1cnJlbnRTaGFkZXJQcm9ncmFtIiwiaGFzQ3VzdG9tQ2FtZXJhIiwiX2hhc0N1c3RvbUNhbWVyYSIsIl9jYW52YXNPYmplY3QiLCJyZW5kZXJDYW1lcmEiLCJfcmVuZGVyQ2FtZXJhIiwic2hhZGVyRmFjdG9yeSIsIl9zaGFkZXJGYWN0b3J5IiwiZGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciIsIl9kZXZpY2VPcHRpbWl6YXRpb25NYW5hZ2VyIiwiY2xlYXJDb2xvciIsInNldHRpbmdzIiwicmVuZGVyQ2xlYXJDb2xvciIsImNhbnZhc09iamVjdCIsImNvbnRleHQiLCJPRlJlbmRlckNhbWVyYSIsIk9GU2hhZGVyRmFjdG9yeSIsIk9GRGV2aWNlT3B0aW1pemF0aW9uTWFuYWdlciIsImludmFsaWRhdGVDb25maWd1cmF0aW9uIiwicmVzaXplIiwib2xkV2lkdGgiLCJvbGRIZWlnaHQiLCJ1c2VDdXN0b21SZW5kZXJDYW1lcmEiLCJ1c2VTaGFkZXJQcm9ncmFtIiwic2hhZGVyUHJvZ3JhbSIsInVzZVByb2dyYW0iLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJzaGFkZXJGYWN0b3JpZXMiLCJfZ3JhcGhpY0RldmljZXMiLCJjcmVhdGVHcmFwaGljRGV2aWNlIiwiZ3JhcGhpY0RldmljZSIsIk9GR3JhcGhpY0RldmljZSIsIkdyYXBoaWNEZXZpY2VNYW5hZ2VyIiwiT0ZBdWRpb05vZGVQb29sZXIiLCJPRkF1ZGlvTm9kZU9iamVjdCIsIl9vYmplY3RJZCIsImlzQXZhaWxhYmxlIiwiX2lzQXZhaWxhYmxlIiwiX2xpZmVUaW1lIiwiZGVmYXVsdE5vZGVMaWZlVGltZSIsImlzV2FpdGluZ0ZvckRlbGV0ZSIsImF1ZGlvRGV2aWNlT3B0TWFuYWdtZW50IiwiX2lkT2JqZWN0Q291bnRlciIsIl9hdWRpb05vZGVSZXBvc2l0b3J5IiwiY3JlYXRlQXVkaW9Ob2RlcyIsIk9GRW51bXNJbnRlcm5hbCIsImluaXRpYWxBdWRpb05vZGVDb3VudCIsImF1ZGlvTm9kZU9iamVjdCIsImRlc2lyZWROb2RlVHlwZSIsImF1ZGlvTm9kZVR5cGUiLCJyZXNpemVBZGRBdWRpb05vZGVDb3VudCIsInZib1Bvb2xlciIsIl92Ym9Qb29sZXIiLCJPRlZCT1Bvb2xlciIsIk9GRW51bVZCT09iamVjdFR5cGUiLCJPRlZCT09iamVjdCIsImdyYXBoaWNEZXZpY2VPcHRNYW5hZ2VyIiwidmJvIiwiY3JlYXRlQnVmZmVyIiwiZGVsZXRlQnVmZmVyIiwiX3Zib1JlcG9zaXRvcnkiLCJjcmVhdGVWQk9zIiwiaW5pdGlhbFZCT0NvdW50IiwidmJvT2JqZWN0IiwiZ2V0QXZhaWxhYmxlVkJPIiwiZGVzaXJlZEJ1ZmZlclR5cGUiLCJ2Ym9UeXBlIiwiVmVydGV4QnVmZmVyIiwiSW5kZXhCdWZmZXIiLCJyZXNpemVBZGRWQk9Db3VudCIsImVuYWJsZWRWQk9JbnN0YW5jZXNMaWZlIiwiX2NhbnZhc0NvbnRleHRzIiwiZmluZENhbnZhc09iamVjdCIsImNyZWF0ZUNhbnZhc0VsZW1lbnQiLCJzdHlsZVpJbmRleCIsIk9GSFRNTEhlbHBlcnMiLCJjcmVhdGVDYW52YXMiLCJtZXNzYWdlX0NhbnZhc0hUTUw1V2FybmluZyIsInBhcmVudERpdiIsInN0eWxlIiwiY3JlYXRlQ2FudmFzRWxlbWVudEFuZENvbnRleHQiLCJjYW52YXMiLCJ1c2VBbHBoYSIsImNvbnRleHRQcmVmZXJlbmNlcyIsImFscGhhIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiZGVzeW5jaHJvbml6ZWQiLCJwb3dlclByZWZlcmVuY2UiLCJnZXRDb250ZXh0IiwiQ2FudmFzQ29udGV4dE1hbmFnZXIiLCJpc3N1ZVJlbmRlcmluZ0NvbnRleHQiLCJjYW52YXNDb250ZXh0VHlwZSIsIndvcmxkTWF0cml4IiwiX3dvcmxkTWF0cml4Iiwidmlld01hdHJpeCIsIl92aWV3TWF0cml4IiwicHJvamVjdGlvbk1hdHJpeCIsIl9wcm9qZWN0aW9uTWF0cml4IiwidHJhbnNmb3JtZWRNYXRyaXgiLCJtYXQ0IiwiX3RyYW5zZm9ybWVkTWF0cml4Iiwidmlld3BvcnQiLCJfdmlld3BvcnQiLCJpc0NoaWxkQ2FtZXJhIiwiX2lzQ2hpbGRDYW1lcmEiLCJ6TmVhciIsIl96TmVhciIsInpGYXIiLCJfekZhciIsImRlcHRoIiwiX2RlcHRoIiwiT0ZNYXRoIiwibWF0NFhWZWM0IiwiT0ZWaWV3cG9ydCIsImVtcHR5IiwiZGVmYXVsdERlcHRoIiwiaXNGcmVlQXNwZWN0IiwidmVjMyIsImFwcFdpZHRoIiwiYXBwSGVpZ2h0Iiwic2V0Vmlld3BvcnQiLCJPRkVudW1DYW52YXNDb250ZXh0VHlwZSIsIkQyRCIsImNyZWF0ZU9ydGhvZ3JhcGhpYyIsImRlZmF1bHRaTmVhciIsImRlZmF1bHRaRmFyIiwiRDNEIiwiY3JlYXRlUGVyc3BlY3RpdmUiLCJkZWZhdWx0Rm92IiwiYXNwZWN0UmF0aW8iLCJzY2lzc29yIiwiT0ZBbmltYXRpb24iLCJPRlNwcml0ZSIsImhhc0FuaW1hdGlvbkVuZGVkIiwiX2hhc0FuaW1hdGlvbkVuZGVkIiwiX3F1YWRUZXh0Q29vcmRzIiwiX2hvcml6b250YWxUaWxlcyIsIl92ZXJ0aWNhbFRpbGVzIiwiX2ltYWdlSFRNTCIsIl9pbWFnZUdMVGV4dHVyZSIsIl9pbWFnZVJlY3QiLCJPRlF1YWRUZXh0Q29vcmRzIiwiX3Zib09iamVjdCIsImh3IiwiaGgiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIkRZTkFNSUNfRFJBVyIsIl9jdXJyZW50RnJhbWVIb3Jpem9udGFsIiwiX2N1cnJlbnRGcmFtZVZlcnRpY2FsIiwiX3RvdGFsRnJhbWVzIiwic2V0QWR2YW5jZUFuaW1hdGlvblRpbGVDb25maWciLCJpbWFnZVJlY3RYIiwiaW1hZ2VSZWN0WSIsImltYWdlUmVjdFdpZHRoIiwiaW1hZ2VSZWN0SGVpZ2h0IiwiY2xpcFdpZHRoIiwiY2xpcEhlaWdodCIsImNsaXBYIiwiY2xpcFkiLCJkb3duIiwiX3Nwcml0ZUJhdGNoSW5zdGFuY2UiLCJkcmF3R3JhcGhpYyIsImJ1ZmZlclN1YkRhdGEiLCJfc2hhZGVyIiwic2V0VHJhbnNsYXRlIiwicm90YXRpb25aIiwicm90YXRpb24iLCJzZXRTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsIl9kZWJ1Z0NvbGxpc2lvblF1YWQiLCJhbmltYXRpb25GcmFtZXJhdGUiLCJ0YXJnZXRGcmFtZXJhdGUiLCJPRlByaW1pdGl2ZUNpcmNsZSIsIk9GRHJhd2FibGUyRCIsInJhZGl1cyIsIl9yYWRpdXMiLCJ2ZXJ0ZXhQYXJ0IiwidmVydGV4UXVhbGl0eSIsIl92ZXJ0ZXhRdWFsaXR5IiwidngiLCJ2eSIsIlNUQVRJQ19EUkFXIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJfaWJvT2JqZWN0IiwiVWludDE2QXJyYXkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIl9kcmF3aW5nQ291bnQiLCJfdHJpYW5nbGVSZW5kZXJUeXBlIiwicmV0cmlldmVTaGFkZXIiLCJzZXRXaXJlZnJhbWVWaXNpYmlsaXR5IiwiaXNWaXNpYmxlIiwiTElORVMiLCJoaXRUZXN0Iiwib3RoZXIiLCJ0aGlzWCIsInRoaXNZIiwib3RoZXJYIiwib3RoZXJZIiwiaGl0VGVzdEJ5UG9pbnQiLCJoV2lkdGgiLCJoSGVpZ2h0IiwiaXNTaGFkZXJBYnN0cmFjdCIsIl90cmFuc2Zvcm1hdGlvbiIsIk9GUHJpbWl0aXZlR3JpZCIsInRpbGVTaXplWCIsIl90aWxlU2l6ZVgiLCJ0aWxlU2l6ZVkiLCJfdGlsZVNpemVZIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRUaWxlU2l6ZSIsIl9vdGhlclRyYW5zZm9ybWF0aW9uIiwic2V0Q29sb3IiLCJjaGFuZ2VHcmlkIiwibGltaXRYIiwibGltaXRZIiwicG9zWCIsInBvc1kiLCJPRlByaW1pdGl2ZVF1YWQiLCJPRkNvbGxpc2lvbkhlbHBlciIsImhpdFRlc3RRdWFkIiwiaGl0VGVzdEJ5UG9pbnRRdWFkIiwicXVhZFRleHRDb29yZHMiLCJjb2xsaXNpb25SZWN0IiwiX2NvbGxpc2lvblJlY3QiLCJkZWJ1Z0NvbGxpc2lvblF1YWQiLCJ1cGRhdGVHTEJ1ZmZlckRhdGEiLCJkZWJ1Z01vZGUiLCJfZGVidWdNb2RlIiwiZW5hYmxlZFNoYWRlclByb3BzIiwiaGFzU3ByaXRlQmF0Y2giLCJzZXRTcHJpdGVCYXRjaCIsInNwcml0ZUJhdGNoIiwiY3JlYXRlQ29sbGlzaW9uIiwib3RoZXJTcHJpdGUiLCJoaXRUZXN0U3ByaXRlIiwiaGl0VGVzdEJ5UG9pbnRTcHJpdGUiLCJzZXRDb2xvckJ5SW5kZXgiLCJzZXRUZXh0dXJlQnlJbmRleCIsIl9zcHJpdGVRdWFkRGF0YSIsIl9zcHJpdGVCYXRjaFJlbmRlckRhdGEiLCJfYWxyZWFkeVRyYW5zZm9ybWVkRm9yUmVuZGVyIiwiYmVnaW4iLCJpYm9PYmplY3QiLCJwdXNoU3ByaXRlIiwidXZzIiwic29ydElkIiwidXYwMF94IiwidXYwMF95IiwidXYxMF94IiwidXYxMF95IiwidXYxMV94IiwidXYxMV95IiwidXYwMV94IiwidXYwMV95IiwiZW5kIiwic29ydCIsImxvY2FsZUNvbXBhcmUiLCJ2ZXJ0aWNlcyIsImluZGljZXMiLCJ2ZXJ0ZXhDb3VudCIsInNxRGF0YSIsImZsdXNoIiwidnciLCJ2aCIsImFycmF5QnVmZmVyR1BVVmVydGV4IiwiYXJyYXlCdWZmZXJHUFVJbmRleCIsInJlbmRlckRhdGEiLCJzZXRSb3RhdGlvbiIsIlRSSUFOR0xFUyIsIl92ZXJ0ZXhDb3VudCIsIl9pbmRleENvdW50IiwiQ1VSUkVOVF9ERUZBVUxUX1NIQURFUiIsIl92Qk9PYmplY3QiLCJfaUJPT2JqZWN0IiwiY2hhbmdlZCIsInNoYWRlciIsIkdyYXBoaWNzT3B0aW1pemF0aW9uIiwiUG9seWdvbkJhdGNoZXIiLCJzZXRTaGFkZXIiLCJpbmRleFN0YXJ0IiwiYXJyYXkiLCJfYXJyYXlCdWZmZXJHUFVWZXJ0ZXgiLCJfYXJyYXlCdWZmZXJHUFVJbmRleCIsImxlbmd0aEFycmF5IiwicmVuZGVyTW9kZSIsInVuaWZvcm1EYXRhIiwiX3JlbmRlck1vZGUiLCJ1RGF0YSIsIk1BWF9WRVJUSUNFUyIsIk9GU0JCYXRjaEdyb3VwIiwiZW5hYmxlZCIsImluZGV4Q291bnQiLCJyZXNldCIsIk9GU3ByaXRlQmF0Y2hlciIsInRvdGFsUXVhZHMiLCJjb3VudFRvdGFsUXVhZHMiLCJfYmF0Y2hHcm91cHMiLCJ0b3RhbERyYXdDYWxscyIsImZpbHRlciIsInNwcml0ZVBhdGgiLCJfY3VycmVudEJhdGNoR3JvdXAiLCJncmFwaGljIiwicVRDIiwiY29zQW5nbGUiLCJzaW5BbmdsZSIsInhfMCIsInhfMSIsInhfMiIsInhfMyIsInlfMCIsInlfMSIsInlfMiIsInlfMyIsImNlbnRlclgiLCJjZW50ZXJZIiwiX3hfMCIsIl94XzEiLCJfeF8yIiwiX3hfMyIsImRyYXdFbGVtZW50cyIsImluaXRYIiwiaW5pdFkiLCJPRlZlcnRleFBvc2l0aW9uQ29sb3JUZXh0dXJlIiwicmF3UkdCU3RyaW5nIiwicmF3Q29sb3IiLCJwYXJzZUZsb2F0Iiwic2V0VHJhbnNmb3JtYXRpb25NYXRyaXgiLCJtYXRyaXgiLCJfbmFtZSIsIl94IiwiX3dvcmxkIiwiX3kiLCJfeiIsIl9yb3RhdGlvbloiLCJfc2NhbGVYIiwiX3NjYWxlWSIsIl9zY2FsZVoiLCJfcm90YXRpb24iLCJzb3VyY2VUYXJnZXQiLCJfc2hhZGVyUHJvZ3JhbSIsImluc3RhbmNlU2hhZGVyIiwiX3JvdGF0aW9uWCIsIl9yb3RhdGlvblkiLCJnZXRTaGFkZXJMb2NhdGlvbnMiLCJtYXRSeCIsIm1hdFJ5IiwibWF0UnoiLCJzZXRUZXh0dXJlIiwidW5pZm9ybU5hbWUiLCJ0ZXh0dXJlIiwidGV4dHVyZUluZGV4IiwidW5pZm9ybUxvY2F0aW9uIiwiYWN0aXZlVGV4dHVyZSIsInVuaWZvcm0xaSIsImNvbG9yT2JqZWN0IiwiZ2V0T3JDcmVhdGVVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtNGYiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXRWZWN0b3I0RmxvYXQiLCJzZXRWZWN0b3IzRmxvYXQiLCJ1bmlmb3JtM2YiLCJzZXRWZWN0b3IyRmxvYXQiLCJ1bmlmb3JtMmYiLCJzZXRWZWN0b3IxRmxvYXQiLCJ1bmlmb3JtMWYiLCJzZXRWZWN0b3IxSW50Iiwic2V0VmVjdG9yMkludCIsInVuaWZvcm0yaSIsInNldFZlY3RvcjNJbnQiLCJ1bmlmb3JtM2kiLCJzZXRWZWN0b3I0SW50IiwidW5pZm9ybTRpIiwiT0ZTaGFkZXJBYnN0cmFjdCIsIk9GQmFzZVNoYWRlciIsInNoYWRlckNvZGVJbmZvIiwiX2F0dHJpYnV0ZUludGVybGVhdmVkRGF0YVNpemUiLCJfY29sb3JQcm9wSW5kZXhDb3VudCIsIl90ZXh0dXJlUHJvcEluZGV4Q291bnQiLCJfc2hhZGVyQ29kZUluZm8iLCJ1cGRhdGVTaGFkZXIiLCJuZXdTaGFkZXJDb2RlSW5mbyIsInRlbXBDb2xvclByb3BJbmRleENvdW50IiwidGVtcFRleHR1cmVQcm9wSW5kZXhDb3VudCIsImF0dHJpYnV0ZURhdGEiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInByZWNvbXB1dGVVbmlmb3Jtc0xvY2F0aW9uIiwidW5pZm9ybUlucHV0TmFtZSIsInZlcnRleEJ1ZmZlciIsInRyYW5zZm9ybWF0aW9uIiwicmVuZGVyVHlwZSIsImluZGV4QnVmZmVyIiwiY2FtZXJhTVZQIiwiZW5hYmxlIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwidW5pZm9ybU1hdHJpeDRmdiIsImludGVybGVhdmVkT2Zmc2V0IiwiYXR0cmliTG9jYXRpb24iLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsIlVOU0lHTkVEX1NIT1JUIiwiZHJhd0FycmF5cyIsIl9zaGFkZXJSZXBvc2l0b3J5Iiwic2hhZGVyUmVzdWx0IiwiYWRkU2hhZGVyIiwiT0ZTaGFkZXJQcmltaXRpdmUiLCJPRkRlZmF1bHRTaGFkZXJTb3VyY2VzIiwiU291cmNlc1NoYWRlclByaW1pdGl2ZSIsIk9GU2hhZGVyVGV4dHVyZSIsIlNvdXJjZXNTaGFkZXJUZXh0dXJlIiwibG9hZEFuZEFkZFNoYWRlcldpdGhDb2RlSW5mbyIsInNoYWRlck9iamVjdCIsInVpZCIsImFuYWxpemUiLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsIlNoYWRlckZhY3RvcnkiLCJzYW5pdGl6ZWRWZXJ0ZXhTb3VyY2UiLCJzYW5pdGl6ZSIsInNhbml0aXplZEZyYWdtZW50U291cmNlIiwiT0ZHTEhlbHBlciIsImNvbXBpbGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlUHJvZ3JhbSIsIl92ZXJ0ZXhQb3NpdGlvbkF0dHIiLCJfdW5pZm9ybVdWUE1hdHJpeCIsIl91bmlmb3JtQ29sb3IiLCJvdmVycmlkZVRyYW5zZm9ybWF0aW9uIiwiX3RleHR1cmVDb29yZFBvc2l0aW9uQXR0ciIsIl9zYW1wbGVyUG9zaXRpb25Vbmlmb3JtIiwiVEVYVFVSRTAiLCJfYXJyYXkiLCJTb3VyY2VzU3BpbmVTaGFkZXJUZXh0dXJlIiwiU291cmNlc1RleHRTaGFkZXJUZXh0dXJlIiwiZnJvbUNsYXNzIiwiY29uc29sZSIsImluZm8iLCJmb3JtYXRTdHJpbmciLCJzaGFkZXJUeXBlIiwic2hhZGVyU291cmNlT2JqZWN0IiwiY3JlYXRlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJHTEhlbHBlciIsImdldFNoYWRlckluZm9Mb2ciLCJlcnJvcnNNZXNzYWdlIiwiaGFzRXJyb3JzIiwiZXJyb3JNZXNzYWdlIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwid2FybmluZ1RleHQiLCJlbGVtZW50VGV4dCIsImNyZWF0ZVRleHROb2RlIiwicmVzdWx0WCIsInJlc3VsdFkiLCJpc05hTiIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib2Zmc2V0UGFyZW50IiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJlbGVtZW50cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhdHRhY2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZWxlbWVudENsYXNzTmFtZSIsIndlYkVsZW1lbnQiLCJjdXJyZW50V0UiLCJwYXJlbnRFbGVtZW50IiwiYW5kV2l0aENsYXNzIiwid2ViRWxlbWVudEhhc0NsYXNzIiwiYXR0ckNsYXNzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlcyIsInBhcmVudCIsIk51bWJlciIsIm9mZnNldFdpZHRoIiwidG9GaXhlZCIsIm1vdXNlRXZlbnQiLCJ0ZW1wWCIsInRlbXBZIiwiYWxsIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiZlRlbXBYIiwiZlRlbXBZIiwibW91c2VQb3NpdGlvbiIsIm1vdXNlUG9zaXRpb25PZmZzZXQiLCJmaW5pc2hlZExvb3BDYWxsYmFjayIsIl9vbkZpbmlzaGVkTG9vcENhbGxiYWNrIiwiZmluaXNoZWRJbnRlcnZhbENhbGxiYWNrIiwiX29uRmluaXNoZWRJbnRlcnZhbENhbGxiYWNrIiwiaW50ZXJ2YWxUaW1lU2Vjb25kcyIsImxvb3BzIiwiX2N1cnJlbnRUaW1lIiwiX2N1cnJlbnRMb29wIiwiX2ludGVydmFsVGltZVNlY29uZHMiLCJfbG9vcHMiLCJhbmltYXRpb24iLCJfYW5pbWF0aW9uIiwiX2lzV2FpdGluZ0ZvckRlbGV0ZSIsImltYWdlUGF0aCIsImhvcml6b250YWxUaWxlcyIsInZlcnRpY2FsVGlsZXMiLCJzcHJpdGVCYXRjaGVyIiwiZWZmZWN0IiwiT0ZFZmZlY3QyRCIsIl9lZmZlY3RzIiwiY3JlYXRlRWZmZWN0IiwiT0ZFZmZlY3QyREZhY3RvcnkiLCJfc3ByaXRlQmF0Y2hlciIsIl9jdXJyZW50WCIsIl9jdXJyZW50WSIsInR1cm5GYWN0b3IiLCJzcGVlZCIsIl90YXJnZXRYIiwiX3RhcmdldFkiLCJfcm90YXRpb25Db3JyZWN0aW9uIiwiX3NwZWVkIiwiX3R1cm5GYWN0b3IiLCJfdmVsb2NpdHlWZWN0b3IiLCJfZGlyZWN0aW9uVmVjdG9yIiwic2V0VGFyZ2V0IiwibXVsdGlwbHlCeSIsImNvbnRyb2wiLCJPRlZlY3RvcjMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJyYWRpYW5zIiwiZGVncmVlcyIsImNvc1ZhbHVlIiwic2luVmFsdWUiLCJjb2VmZl8xIiwiY29lZmZfMiIsImFic195IiwicG9pbnQiLCJwb2x5Z29uIiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsInBvaW50SW5zaWRlUG9seWdvbiIsInZhbDEiLCJ2YWwyIiwiZmFjdG9yIiwidmVjdG9yTGVuZ3RoIiwicHJvamVjdGlvbk9uIiwic3F1YXJlTGVuZ3RoIiwiT0ZGcmFtZXdvcmsiLCJfYXBwV2lkdGgiLCJfYXBwSGVpZ2h0IiwiX3NldHRpbmdzIiwiaGFzQ2FudmFzIiwiX3BhcmVudERpdk5vZGUiLCJfbW91c2VQb3NpdGlvbk9mZnNldCIsImdldERvY3VtZW50IiwiX21haW5DYW52YXNPYmplY3QiLCJfbWFpbkdyYXBoaWNEZXZpY2UiLCJfYXVkaW9EZXZpY2UiLCJncmFwaGljRGV2aWNlTWFuYWdlciIsIl9ncmFwaGljRGV2aWNlTWFuYWdlciIsIl9jYW52YXNDb250ZXh0TWFuYWdlciIsIl9jb250ZW50TWFuYWdlciIsInNjZW5lTWFuYWdlciIsIl9zY2VuZU1hbmFnZXIiLCJpZGVudGlmaWVyIiwiY3VzdG9tU2V0dGluZ3MiLCJPRlNldHRpbmdzIiwiX2RlbHRhVGltZUNvcnJlY3RvciIsIk9GRGVsdGFUaW1lQ29ycmVjdG9yIiwiaW5pdGlhbGl6ZWQiLCJzdGFydE9jdG9wdXNGcmFtZXdvcmsyRCIsImRpdklkZW50aWZpZXIiLCJPRkNhbnZhc0NvbnRleHRNYW5hZ2VyIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRQb3NpdGlvbk9mZnNldCIsInBhcmVudE5vZGUiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImNhbnZhc0VsZW1lbnRJRCIsImlkZW50aWZpZXJfUmVuZGVyQ2FudmFzIiwiX2RldmljZUNhcGFiaWxpdGllcyIsImZvcmNlVXNlQ2FudmFzQ29udGV4dEluc3RlYWRPZldlYkdMIiwiYmFja2dyb3VuZENvbG9yIiwiY29udmVydFRvU3RyaW5nRnJvbU5vcm1hbGl6ZWQiLCJjYW52YXNCYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsImNhbnZhc0JvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJjYW52YXNCb3JkZXJDb2xvciIsIk9GR3JhcGhpY0RldmljZU1hbmFnZXIiLCJPRkF1ZGlvRGV2aWNlIiwiT0ZDb250ZW50TWFuYWdlciIsImRpc2FibGVJbnB1dERldGVjdGlvbiIsImRvSW5wdXREZXRlY3Rpb25zIiwiaW5pdGlhbGl6ZUFwcGxpY2F0aW9uIiwiY2FudmFzTm90Rm91bmQiLCJ0YXJnZXRJZCIsImZpcnN0Q2hpbGQiLCJmcmFtZXdvcmtJZCIsImZvdW5kRnJhbWV3b3JrIiwiZ2V0QnlJZCIsIm9uTW91c2VEb3duIiwib3JpZ2luYWxFdmVudCIsIm9uTW91c2VVcCIsIm1vdXNlUG9zIiwiZ2V0TW91c2VQb3NpdGlvbiIsIm9uTW91c2VNb3ZlIiwib25LZXlEb3duIiwib25LZXlVcCIsIk9GU2NlbmVNYW5hZ2VyIiwicmVhZHkiLCJzZXRDdXJyZW50RnJhbWV3b3JrIiwicmVuZGVyQXJncyIsIl9mcmFtZXdvcmtzIiwiX2N1cnJlbnRGcmFtZXdvcmsiLCJpbnN0YW5jZSIsIl91bmlxdWVJZGVudGlmaWVyIiwiX3BvcGVkRnJhbWV3b3JrIiwiRnJhbWV3b3JrRmFjdG9yeSIsIm91dE9mQm91bmRzIiwiZmluZCIsImN1cnJlbnRTY2VuZSIsIl9jdXJyZW50U2NlbmUiLCJnb3RvU2NlbmUiLCJpbnN0YW5jZUJ5Q2xhc3NOYW1lIiwiU2NlbmVNYW5hZ2VyIiwic2NlbmVEb250RXhpc3RzIiwiZ290b1NjZW5lQnkiLCJjbGFzc1R5cGUiLCJpbnN0YW5jZUJ5VHlwZSIsImJsYWNrIiwiZGVidWdDb25zb2xlVGV4dENvbG9yIiwiZ3JlZW4iLCJkZWJ1Z0NvbnNvbGVUZXh0V2VpZ2h0IiwiZGVidWdDb25zb2xlVGV4dFNpemUiLCJkZWJ1Z0NvbnNvbGVUZXh0T2Zmc2V0WCIsImRlYnVnQ29uc29sZVRleHRPZmZzZXRZIiwiaWRlbnRpZmllcl9SZW5kZXJUZXh0Q2FudmFzIiwiQ2FudmFzIiwiaHRtbDVXYXJuaW5nIiwic3BlY1R5cGUiLCJFbnVtU3BlY3RUeXBlIiwiU2ltcGxlRnJhbWV3b3JrIiwiX2N1cnJlbnRTcGVjIiwiU3BlY1Rlc3RGcmFtZXdvcmsiLCJTcGFjZUdhbWUiLCJTcGVjU3BhY2VHYW1lIiwiU3BhY2VHYW1lU2NlbmUiLCJHRW5lbXlIb21pbmdNaXNzaWxlIiwiR0Jhc2VCdWxsZXQiLCJwbGF5ZXIiLCJidWxsZXRGYWN0b3J5IiwiX3BsYXllciIsImNvbGxXaWR0aCIsImNvbGxIZWlnaHQiLCJfaG9taW5nSW50ZXJwb2xhdG9yIiwiT0ZIb21pbmcyIiwiYnVsbGV0RWZmZWN0MkQiLCJfYnVsbGV0RmFjdG9yeSIsImdhbWUiLCJlZmZlY3RNYW5hZ2VyIiwib25IaXQiLCJFbnVtRW5lbXlUeXBlIiwiRW51bVByb3llY3RpbGVUeXBlIiwiX2VuZW15RmFjdG9yeSIsImVuZW15RmFjdG9yeSIsIl9idWxsZXRzIiwiY3JlYXRlQnVsbGV0IiwiZGlyZWN0aW9uIiwiYnVsbGV0IiwiUGxheWVyIiwiR1BsYXllckJ1bGxldCIsInNwcml0ZSIsIl9zcHJpdGVCYXRjaCIsImNyZWF0ZU1pc3NpbGUiLCJNaXNzaWxlRW5lbXkiLCJHRHVtbXlFbmVteSIsIkdFbmVteUJhc2UiLCJfZGlyZWN0aW9uIiwiX2hlYWx0aCIsIl9zcHJpdGUiLCJfaUNyZWF0aW9uTWlzc2lsZSIsIk9GSW50ZXJ2YWwiLCJvbkZpbmlzaGVkTG9vcF9DcmVhdGlvbk1pc3NpbGUiLCJkYW1hZ2UiLCJlbmVteUVmZmVjdDJEIiwiZW5lbWllcyIsIl9lbmVtaWVzIiwiX2ljcmVhdGlvbkVuZW15Iiwib25GaW5pc2hlZExvb3BfQ3JlYXRpb25FbmVteSIsImNyZWF0ZUVuZW15IiwiRHVtbXkiLCJlbmVteSIsIl9nYW1lIiwia2V5Q29kZSIsImJ1bGxldHMiLCJzaG9vdEFuZ2xlIiwiYW5nbGVPZmZzZXQiLCJzaG9vdEFuZ2xlUGFydCIsImRpcmVjdGlvbkFuZ2xlIiwiX2VmZmVjdE1hbmFnZXIiLCJHUGxheWVyIiwiR0VuZW15RmFjdG9yeSIsIkdCdWxsZXRGYWN0b3J5IiwiT0ZFZmZlY3QyRE1hbmFnZXIiLCJPRkJhc2VTY2VuZSIsIl9pbWFnZUNvbnRlbnRGb250IiwicmF3RmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNUZXh0IiwiX2dyYXZpdXNHYW1lIiwiR3Jhdml1c0dhbWUiLCJfdGV4dGZpZWxkIiwiT0ZDQml0bWFwVGV4dGZpZWxkMkQiLCJ0cmFuc2Zvcm1UZXh0IiwiZnBzIiwicmVkIiwiX2NvdW50VGltZSIsIl9leHBsb3Npb25BbmltYXRpb24iLCJfZXhwbG9zaW9uMkFuaW1hdGlvbiIsIl9xdWFkIiwiX3F1YWQyIiwiX2NpcmNsZSIsImJsdWUiLCJfZ3JpZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJTcGVjTWFpbiJdLCJzb3VyY2VSb290IjoiIn0=